//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/retrofit/retrofit/src/main/java/retrofit/converter/GsonConverter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/Gson.h"
#include "com/google/gson/JsonParseException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/reflect/Type.h"
#include "retrofit/converter/ConversionException.h"
#include "retrofit/converter/GsonConverter.h"
#include "retrofit/mime/MimeUtil.h"
#include "retrofit/mime/TypedInput.h"
#include "retrofit/mime/TypedOutput.h"

@interface RetrofitConverterGsonConverter () {
 @public
  ComGoogleGsonGson *gson_;
  NSString *charset_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitConverterGsonConverter, gson_, ComGoogleGsonGson *)
J2OBJC_FIELD_SETTER(RetrofitConverterGsonConverter, charset_, NSString *)

@interface RetrofitConverterGsonConverter_JsonTypedOutput : NSObject < RetrofitMimeTypedOutput > {
 @public
  IOSByteArray *jsonBytes_;
  NSString *mimeType_;
}

- (instancetype)initWithByteArray:(IOSByteArray *)jsonBytes
                     withNSString:(NSString *)encode;

- (NSString *)fileName;

- (NSString *)mimeType;

- (jlong)length;

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitConverterGsonConverter_JsonTypedOutput)

J2OBJC_FIELD_SETTER(RetrofitConverterGsonConverter_JsonTypedOutput, jsonBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(RetrofitConverterGsonConverter_JsonTypedOutput, mimeType_, NSString *)

__attribute__((unused)) static void RetrofitConverterGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(RetrofitConverterGsonConverter_JsonTypedOutput *self, IOSByteArray *jsonBytes, NSString *encode);

__attribute__((unused)) static RetrofitConverterGsonConverter_JsonTypedOutput *new_RetrofitConverterGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(IOSByteArray *jsonBytes, NSString *encode) NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitConverterGsonConverter_JsonTypedOutput *create_RetrofitConverterGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(IOSByteArray *jsonBytes, NSString *encode);

J2OBJC_TYPE_LITERAL_HEADER(RetrofitConverterGsonConverter_JsonTypedOutput)

@implementation RetrofitConverterGsonConverter

- (instancetype)initWithComGoogleGsonGson:(ComGoogleGsonGson *)gson {
  RetrofitConverterGsonConverter_initWithComGoogleGsonGson_(self, gson);
  return self;
}

- (instancetype)initWithComGoogleGsonGson:(ComGoogleGsonGson *)gson
                             withNSString:(NSString *)charset {
  RetrofitConverterGsonConverter_initWithComGoogleGsonGson_withNSString_(self, gson, charset);
  return self;
}

- (id)fromBodyWithRetrofitMimeTypedInput:(id<RetrofitMimeTypedInput>)body
                 withJavaLangReflectType:(id<JavaLangReflectType>)type {
  NSString *charset = self->charset_;
  if ([((id<RetrofitMimeTypedInput>) nil_chk(body)) mimeType] != nil) {
    charset = RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_([body mimeType], charset);
  }
  JavaIoInputStreamReader *isr = nil;
  @try {
    isr = new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_([body in], charset);
    return [((ComGoogleGsonGson *) nil_chk(gson_)) fromJsonWithJavaIoReader:isr withJavaLangReflectType:type];
  }
  @catch (JavaIoIOException *e) {
    @throw new_RetrofitConverterConversionException_initWithNSException_(e);
  }
  @catch (ComGoogleGsonJsonParseException *e) {
    @throw new_RetrofitConverterConversionException_initWithNSException_(e);
  }
  @finally {
    if (isr != nil) {
      @try {
        [isr close];
      }
      @catch (JavaIoIOException *ignored) {
      }
    }
  }
}

- (id<RetrofitMimeTypedOutput>)toBodyWithId:(id)object {
  @try {
    return new_RetrofitConverterGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_([((NSString *) nil_chk([((ComGoogleGsonGson *) nil_chk(gson_)) toJsonWithId:object])) getBytesWithCharsetName:charset_], charset_);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComGoogleGsonGson:", "GsonConverter", NULL, 0x1, NULL, NULL },
    { "initWithComGoogleGsonGson:withNSString:", "GsonConverter", NULL, 0x1, NULL, NULL },
    { "fromBodyWithRetrofitMimeTypedInput:withJavaLangReflectType:", "fromBody", "Ljava.lang.Object;", 0x1, "Lretrofit.converter.ConversionException;", NULL },
    { "toBodyWithId:", "toBody", "Lretrofit.mime.TypedOutput;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "gson_", NULL, 0x12, "Lcom.google.gson.Gson;", NULL, NULL, .constantValue.asLong = 0 },
    { "charset_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lretrofit.converter.GsonConverter$JsonTypedOutput;"};
  static const J2ObjcClassInfo _RetrofitConverterGsonConverter = { 2, "GsonConverter", "retrofit.converter", NULL, 0x1, 4, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_RetrofitConverterGsonConverter;
}

@end

void RetrofitConverterGsonConverter_initWithComGoogleGsonGson_(RetrofitConverterGsonConverter *self, ComGoogleGsonGson *gson) {
  RetrofitConverterGsonConverter_initWithComGoogleGsonGson_withNSString_(self, gson, @"UTF-8");
}

RetrofitConverterGsonConverter *new_RetrofitConverterGsonConverter_initWithComGoogleGsonGson_(ComGoogleGsonGson *gson) {
  RetrofitConverterGsonConverter *self = [RetrofitConverterGsonConverter alloc];
  RetrofitConverterGsonConverter_initWithComGoogleGsonGson_(self, gson);
  return self;
}

RetrofitConverterGsonConverter *create_RetrofitConverterGsonConverter_initWithComGoogleGsonGson_(ComGoogleGsonGson *gson) {
  return new_RetrofitConverterGsonConverter_initWithComGoogleGsonGson_(gson);
}

void RetrofitConverterGsonConverter_initWithComGoogleGsonGson_withNSString_(RetrofitConverterGsonConverter *self, ComGoogleGsonGson *gson, NSString *charset) {
  NSObject_init(self);
  self->gson_ = gson;
  self->charset_ = charset;
}

RetrofitConverterGsonConverter *new_RetrofitConverterGsonConverter_initWithComGoogleGsonGson_withNSString_(ComGoogleGsonGson *gson, NSString *charset) {
  RetrofitConverterGsonConverter *self = [RetrofitConverterGsonConverter alloc];
  RetrofitConverterGsonConverter_initWithComGoogleGsonGson_withNSString_(self, gson, charset);
  return self;
}

RetrofitConverterGsonConverter *create_RetrofitConverterGsonConverter_initWithComGoogleGsonGson_withNSString_(ComGoogleGsonGson *gson, NSString *charset) {
  return new_RetrofitConverterGsonConverter_initWithComGoogleGsonGson_withNSString_(gson, charset);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitConverterGsonConverter)

@implementation RetrofitConverterGsonConverter_JsonTypedOutput

- (instancetype)initWithByteArray:(IOSByteArray *)jsonBytes
                     withNSString:(NSString *)encode {
  RetrofitConverterGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(self, jsonBytes, encode);
  return self;
}

- (NSString *)fileName {
  return nil;
}

- (NSString *)mimeType {
  return mimeType_;
}

- (jlong)length {
  return ((IOSByteArray *) nil_chk(jsonBytes_))->size_;
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:jsonBytes_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithByteArray:withNSString:", "JsonTypedOutput", NULL, 0x0, NULL, NULL },
    { "fileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "mimeType", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "length", NULL, "J", 0x1, NULL, NULL },
    { "writeToWithJavaIoOutputStream:", "writeTo", "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "jsonBytes_", NULL, 0x12, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "mimeType_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RetrofitConverterGsonConverter_JsonTypedOutput = { 2, "JsonTypedOutput", "retrofit.converter", "GsonConverter", 0xa, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RetrofitConverterGsonConverter_JsonTypedOutput;
}

@end

void RetrofitConverterGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(RetrofitConverterGsonConverter_JsonTypedOutput *self, IOSByteArray *jsonBytes, NSString *encode) {
  NSObject_init(self);
  self->jsonBytes_ = jsonBytes;
  self->mimeType_ = JreStrcat("$$", @"application/json; charset=", encode);
}

RetrofitConverterGsonConverter_JsonTypedOutput *new_RetrofitConverterGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(IOSByteArray *jsonBytes, NSString *encode) {
  RetrofitConverterGsonConverter_JsonTypedOutput *self = [RetrofitConverterGsonConverter_JsonTypedOutput alloc];
  RetrofitConverterGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(self, jsonBytes, encode);
  return self;
}

RetrofitConverterGsonConverter_JsonTypedOutput *create_RetrofitConverterGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(IOSByteArray *jsonBytes, NSString *encode) {
  return new_RetrofitConverterGsonConverter_JsonTypedOutput_initWithByteArray_withNSString_(jsonBytes, encode);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitConverterGsonConverter_JsonTypedOutput)
