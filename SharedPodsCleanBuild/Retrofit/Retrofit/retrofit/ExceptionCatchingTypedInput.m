//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/retrofit/retrofit/src/main/java/retrofit/ExceptionCatchingTypedInput.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "retrofit/ExceptionCatchingTypedInput.h"
#include "retrofit/mime/TypedInput.h"

@class RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream;

@interface RetrofitExceptionCatchingTypedInput () {
 @public
  id<RetrofitMimeTypedInput> delegate_;
  RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *delegateStream_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitExceptionCatchingTypedInput, delegate_, id<RetrofitMimeTypedInput>)
J2OBJC_FIELD_SETTER(RetrofitExceptionCatchingTypedInput, delegateStream_, RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *)

@interface RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream : JavaIoInputStream {
 @public
  JavaIoInputStream *delegate_;
  JavaIoIOException *thrownException_;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)delegate;

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray *)buffer;

- (jint)readWithByteArray:(IOSByteArray *)buffer
                  withInt:(jint)offset
                  withInt:(jint)length;

- (jlong)skipWithLong:(jlong)byteCount;

- (jint)available;

- (void)close;

- (void)markWithInt:(jint)readLimit;

- (void)reset;

- (jboolean)markSupported;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream)

J2OBJC_FIELD_SETTER(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream, delegate_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream, thrownException_, JavaIoIOException *)

__attribute__((unused)) static void RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *self, JavaIoInputStream *delegate);

__attribute__((unused)) static RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *new_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(JavaIoInputStream *delegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *create_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(JavaIoInputStream *delegate);

J2OBJC_TYPE_LITERAL_HEADER(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream)

@implementation RetrofitExceptionCatchingTypedInput

- (instancetype)initWithRetrofitMimeTypedInput:(id<RetrofitMimeTypedInput>)delegate {
  RetrofitExceptionCatchingTypedInput_initWithRetrofitMimeTypedInput_(self, delegate);
  return self;
}

- (NSString *)mimeType {
  return [((id<RetrofitMimeTypedInput>) nil_chk(delegate_)) mimeType];
}

- (jlong)length {
  return [((id<RetrofitMimeTypedInput>) nil_chk(delegate_)) length];
}

- (JavaIoInputStream *)in {
  return delegateStream_;
}

- (JavaIoIOException *)getThrownException {
  return ((RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *) nil_chk(delegateStream_))->thrownException_;
}

- (jboolean)threwException {
  return ((RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *) nil_chk(delegateStream_))->thrownException_ != nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRetrofitMimeTypedInput:", "ExceptionCatchingTypedInput", NULL, 0x0, "Ljava.io.IOException;", NULL },
    { "mimeType", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "length", NULL, "J", 0x1, NULL, NULL },
    { "in", NULL, "Ljava.io.InputStream;", 0x1, "Ljava.io.IOException;", NULL },
    { "getThrownException", NULL, "Ljava.io.IOException;", 0x0, NULL, NULL },
    { "threwException", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", NULL, 0x12, "Lretrofit.mime.TypedInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "delegateStream_", NULL, 0x12, "Lretrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lretrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream;"};
  static const J2ObjcClassInfo _RetrofitExceptionCatchingTypedInput = { 2, "ExceptionCatchingTypedInput", "retrofit", NULL, 0x0, 6, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_RetrofitExceptionCatchingTypedInput;
}

@end

void RetrofitExceptionCatchingTypedInput_initWithRetrofitMimeTypedInput_(RetrofitExceptionCatchingTypedInput *self, id<RetrofitMimeTypedInput> delegate) {
  NSObject_init(self);
  self->delegate_ = delegate;
  self->delegateStream_ = new_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_([((id<RetrofitMimeTypedInput>) nil_chk(delegate)) in]);
}

RetrofitExceptionCatchingTypedInput *new_RetrofitExceptionCatchingTypedInput_initWithRetrofitMimeTypedInput_(id<RetrofitMimeTypedInput> delegate) {
  RetrofitExceptionCatchingTypedInput *self = [RetrofitExceptionCatchingTypedInput alloc];
  RetrofitExceptionCatchingTypedInput_initWithRetrofitMimeTypedInput_(self, delegate);
  return self;
}

RetrofitExceptionCatchingTypedInput *create_RetrofitExceptionCatchingTypedInput_initWithRetrofitMimeTypedInput_(id<RetrofitMimeTypedInput> delegate) {
  return new_RetrofitExceptionCatchingTypedInput_initWithRetrofitMimeTypedInput_(delegate);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitExceptionCatchingTypedInput)

@implementation RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)delegate {
  RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(self, delegate);
  return self;
}

- (jint)read {
  @try {
    return [((JavaIoInputStream *) nil_chk(delegate_)) read];
  }
  @catch (JavaIoIOException *e) {
    thrownException_ = e;
    @throw e;
  }
}

- (jint)readWithByteArray:(IOSByteArray *)buffer {
  @try {
    return [((JavaIoInputStream *) nil_chk(delegate_)) readWithByteArray:buffer];
  }
  @catch (JavaIoIOException *e) {
    thrownException_ = e;
    @throw e;
  }
}

- (jint)readWithByteArray:(IOSByteArray *)buffer
                  withInt:(jint)offset
                  withInt:(jint)length {
  @try {
    return [((JavaIoInputStream *) nil_chk(delegate_)) readWithByteArray:buffer withInt:offset withInt:length];
  }
  @catch (JavaIoIOException *e) {
    thrownException_ = e;
    @throw e;
  }
}

- (jlong)skipWithLong:(jlong)byteCount {
  @try {
    return [((JavaIoInputStream *) nil_chk(delegate_)) skipWithLong:byteCount];
  }
  @catch (JavaIoIOException *e) {
    thrownException_ = e;
    @throw e;
  }
}

- (jint)available {
  @try {
    return [((JavaIoInputStream *) nil_chk(delegate_)) available];
  }
  @catch (JavaIoIOException *e) {
    thrownException_ = e;
    @throw e;
  }
}

- (void)close {
  @try {
    [((JavaIoInputStream *) nil_chk(delegate_)) close];
  }
  @catch (JavaIoIOException *e) {
    thrownException_ = e;
    @throw e;
  }
}

- (void)markWithInt:(jint)readLimit {
  @synchronized(self) {
    [((JavaIoInputStream *) nil_chk(delegate_)) markWithInt:readLimit];
  }
}

- (void)reset {
  @synchronized(self) {
    @try {
      [((JavaIoInputStream *) nil_chk(delegate_)) reset];
    }
    @catch (JavaIoIOException *e) {
      thrownException_ = e;
      @throw e;
    }
  }
}

- (jboolean)markSupported {
  return [((JavaIoInputStream *) nil_chk(delegate_)) markSupported];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoInputStream:", "ExceptionCatchingInputStream", NULL, 0x0, NULL, NULL },
    { "read", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "readWithByteArray:", "read", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "readWithByteArray:withInt:withInt:", "read", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "skipWithLong:", "skip", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "available", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "markWithInt:", "mark", "V", 0x21, NULL, NULL },
    { "reset", NULL, "V", 0x21, "Ljava.io.IOException;", NULL },
    { "markSupported", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", NULL, 0x12, "Ljava.io.InputStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "thrownException_", NULL, 0x2, "Ljava.io.IOException;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream = { 2, "ExceptionCatchingInputStream", "retrofit", "ExceptionCatchingTypedInput", 0xa, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream;
}

@end

void RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *self, JavaIoInputStream *delegate) {
  JavaIoInputStream_init(self);
  self->delegate_ = delegate;
}

RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *new_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(JavaIoInputStream *delegate) {
  RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *self = [RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream alloc];
  RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(self, delegate);
  return self;
}

RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *create_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(JavaIoInputStream *delegate) {
  return new_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(delegate);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream)
