//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/EventBus/EventBus/src/de/greenrobot/event/PendingPost.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "de/greenrobot/event/PendingPost.h"
#include "de/greenrobot/event/Subscription.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface DeGreenrobotEventPendingPost ()

- (instancetype)initWithId:(id)event
withDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription;

@end

inline id<JavaUtilList> DeGreenrobotEventPendingPost_get_pendingPostPool();
static id<JavaUtilList> DeGreenrobotEventPendingPost_pendingPostPool;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DeGreenrobotEventPendingPost, pendingPostPool, id<JavaUtilList>)

__attribute__((unused)) static void DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(DeGreenrobotEventPendingPost *self, id event, DeGreenrobotEventSubscription *subscription);

__attribute__((unused)) static DeGreenrobotEventPendingPost *new_DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(id event, DeGreenrobotEventSubscription *subscription) NS_RETURNS_RETAINED;

__attribute__((unused)) static DeGreenrobotEventPendingPost *create_DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(id event, DeGreenrobotEventSubscription *subscription);

J2OBJC_INITIALIZED_DEFN(DeGreenrobotEventPendingPost)

@implementation DeGreenrobotEventPendingPost

- (instancetype)initWithId:(id)event
withDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription {
  DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(self, event, subscription);
  return self;
}

+ (DeGreenrobotEventPendingPost *)obtainPendingPostWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                                              withId:(id)event {
  return DeGreenrobotEventPendingPost_obtainPendingPostWithDeGreenrobotEventSubscription_withId_(subscription, event);
}

+ (void)releasePendingPostWithDeGreenrobotEventPendingPost:(DeGreenrobotEventPendingPost *)pendingPost {
  DeGreenrobotEventPendingPost_releasePendingPostWithDeGreenrobotEventPendingPost_(pendingPost);
}

+ (void)initialize {
  if (self == [DeGreenrobotEventPendingPost class]) {
    DeGreenrobotEventPendingPost_pendingPostPool = new_JavaUtilArrayList_init();
    J2OBJC_SET_INITIALIZED(DeGreenrobotEventPendingPost)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withDeGreenrobotEventSubscription:", "PendingPost", NULL, 0x2, NULL, NULL },
    { "obtainPendingPostWithDeGreenrobotEventSubscription:withId:", "obtainPendingPost", "Lde.greenrobot.event.PendingPost;", 0x8, NULL, NULL },
    { "releasePendingPostWithDeGreenrobotEventPendingPost:", "releasePendingPost", "V", 0x8, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pendingPostPool", "pendingPostPool", 0x1a, "Ljava.util.List;", &DeGreenrobotEventPendingPost_pendingPostPool, "Ljava/util/List<Lde/greenrobot/event/PendingPost;>;", .constantValue.asLong = 0 },
    { "event_", NULL, 0x0, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "subscription_", NULL, 0x0, "Lde.greenrobot.event.Subscription;", NULL, NULL, .constantValue.asLong = 0 },
    { "next_", NULL, 0x0, "Lde.greenrobot.event.PendingPost;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _DeGreenrobotEventPendingPost = { 2, "PendingPost", "de.greenrobot.event", NULL, 0x10, 3, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_DeGreenrobotEventPendingPost;
}

@end

void DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(DeGreenrobotEventPendingPost *self, id event, DeGreenrobotEventSubscription *subscription) {
  NSObject_init(self);
  self->event_ = event;
  self->subscription_ = subscription;
}

DeGreenrobotEventPendingPost *new_DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(id event, DeGreenrobotEventSubscription *subscription) {
  DeGreenrobotEventPendingPost *self = [DeGreenrobotEventPendingPost alloc];
  DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(self, event, subscription);
  return self;
}

DeGreenrobotEventPendingPost *create_DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(id event, DeGreenrobotEventSubscription *subscription) {
  return new_DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(event, subscription);
}

DeGreenrobotEventPendingPost *DeGreenrobotEventPendingPost_obtainPendingPostWithDeGreenrobotEventSubscription_withId_(DeGreenrobotEventSubscription *subscription, id event) {
  DeGreenrobotEventPendingPost_initialize();
  @synchronized(DeGreenrobotEventPendingPost_pendingPostPool) {
    jint size = [((id<JavaUtilList>) nil_chk(DeGreenrobotEventPendingPost_pendingPostPool)) size];
    if (size > 0) {
      DeGreenrobotEventPendingPost *pendingPost = [DeGreenrobotEventPendingPost_pendingPostPool removeWithInt:size - 1];
      ((DeGreenrobotEventPendingPost *) nil_chk(pendingPost))->event_ = event;
      pendingPost->subscription_ = subscription;
      pendingPost->next_ = nil;
      return pendingPost;
    }
  }
  return new_DeGreenrobotEventPendingPost_initWithId_withDeGreenrobotEventSubscription_(event, subscription);
}

void DeGreenrobotEventPendingPost_releasePendingPostWithDeGreenrobotEventPendingPost_(DeGreenrobotEventPendingPost *pendingPost) {
  DeGreenrobotEventPendingPost_initialize();
  ((DeGreenrobotEventPendingPost *) nil_chk(pendingPost))->event_ = nil;
  pendingPost->subscription_ = nil;
  pendingPost->next_ = nil;
  @synchronized(DeGreenrobotEventPendingPost_pendingPostPool) {
    if ([((id<JavaUtilList>) nil_chk(DeGreenrobotEventPendingPost_pendingPostPool)) size] < 10000) {
      [DeGreenrobotEventPendingPost_pendingPostPool addWithId:pendingPost];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventPendingPost)
