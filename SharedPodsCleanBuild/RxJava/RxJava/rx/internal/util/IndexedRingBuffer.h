//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/util/IndexedRingBuffer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxInternalUtilIndexedRingBuffer_INCLUDE_ALL")
#ifdef RxInternalUtilIndexedRingBuffer_RESTRICT
#define RxInternalUtilIndexedRingBuffer_INCLUDE_ALL 0
#else
#define RxInternalUtilIndexedRingBuffer_INCLUDE_ALL 1
#endif
#undef RxInternalUtilIndexedRingBuffer_RESTRICT

#if !defined (RxInternalUtilIndexedRingBuffer_) && (RxInternalUtilIndexedRingBuffer_INCLUDE_ALL || defined(RxInternalUtilIndexedRingBuffer_INCLUDE))
#define RxInternalUtilIndexedRingBuffer_

#define RxSubscription_RESTRICT 1
#define RxSubscription_INCLUDE 1
#include "rx/Subscription.h"

@class JavaUtilConcurrentAtomicAtomicInteger;
@protocol RxFunctionsFunc1;

@interface RxInternalUtilIndexedRingBuffer : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *index_;
  JavaUtilConcurrentAtomicAtomicInteger *removedIndex_;
}

#pragma mark Public

- (jint)addWithId:(id)e;

- (jint)forEachWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)action;

- (jint)forEachWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)action
                            withInt:(jint)startIndex;

+ (RxInternalUtilIndexedRingBuffer *)getInstance;

- (jboolean)isUnsubscribed;

- (void)releaseToPool;

- (id)removeWithInt:(jint)index;

- (void)unsubscribe;

@end

J2OBJC_STATIC_INIT(RxInternalUtilIndexedRingBuffer)

J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBuffer, index_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBuffer, removedIndex_, JavaUtilConcurrentAtomicAtomicInteger *)

inline jint RxInternalUtilIndexedRingBuffer_get__size();
inline jint RxInternalUtilIndexedRingBuffer_set__size(jint value);
inline jint *RxInternalUtilIndexedRingBuffer_getRef__size();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint RxInternalUtilIndexedRingBuffer__size;
J2OBJC_STATIC_FIELD_PRIMITIVE(RxInternalUtilIndexedRingBuffer, _size, jint)

inline jint RxInternalUtilIndexedRingBuffer_get_SIZE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint RxInternalUtilIndexedRingBuffer_SIZE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilIndexedRingBuffer, SIZE, jint)

FOUNDATION_EXPORT RxInternalUtilIndexedRingBuffer *RxInternalUtilIndexedRingBuffer_getInstance();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilIndexedRingBuffer)

#endif

#pragma pop_macro("RxInternalUtilIndexedRingBuffer_INCLUDE_ALL")
