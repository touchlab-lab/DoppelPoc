//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/util/ObjectPool.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/TimeUnit.h"
#include "rx/Scheduler.h"
#include "rx/Subscription.h"
#include "rx/functions/Action0.h"
#include "rx/internal/util/ObjectPool.h"
#include "rx/internal/util/unsafe/MpmcArrayQueue.h"
#include "rx/internal/util/unsafe/UnsafeAccess.h"
#include "rx/schedulers/Schedulers.h"

@interface RxInternalUtilObjectPool () {
 @public
  id<JavaUtilQueue> pool_;
  jint maxSize_;
  RxScheduler_Worker *schedulerWorker_;
}

- (instancetype)initWithInt:(jint)min
                    withInt:(jint)max
                   withLong:(jlong)validationInterval;

- (void)initialize__WithInt:(jint)min OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(RxInternalUtilObjectPool, pool_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(RxInternalUtilObjectPool, schedulerWorker_, RxScheduler_Worker *)

__attribute__((unused)) static void RxInternalUtilObjectPool_initWithInt_withInt_withLong_(RxInternalUtilObjectPool *self, jint min, jint max, jlong validationInterval);

__attribute__((unused)) static void RxInternalUtilObjectPool_initialize__WithInt_(RxInternalUtilObjectPool *self, jint min);

@interface RxInternalUtilObjectPool_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalUtilObjectPool *this$0_;
  jint val$min_;
  jint val$max_;
}

- (void)call;

- (instancetype)initWithRxInternalUtilObjectPool:(RxInternalUtilObjectPool *)outer$
                                         withInt:(jint)capture$0
                                         withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilObjectPool_$1)

J2OBJC_FIELD_SETTER(RxInternalUtilObjectPool_$1, this$0_, RxInternalUtilObjectPool *)

__attribute__((unused)) static void RxInternalUtilObjectPool_$1_initWithRxInternalUtilObjectPool_withInt_withInt_(RxInternalUtilObjectPool_$1 *self, RxInternalUtilObjectPool *outer$, jint capture$0, jint capture$1);

__attribute__((unused)) static RxInternalUtilObjectPool_$1 *new_RxInternalUtilObjectPool_$1_initWithRxInternalUtilObjectPool_withInt_withInt_(RxInternalUtilObjectPool *outer$, jint capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilObjectPool_$1 *create_RxInternalUtilObjectPool_$1_initWithRxInternalUtilObjectPool_withInt_withInt_(RxInternalUtilObjectPool *outer$, jint capture$0, jint capture$1);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilObjectPool_$1)

@implementation RxInternalUtilObjectPool

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilObjectPool_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)min
                    withInt:(jint)max
                   withLong:(jlong)validationInterval {
  RxInternalUtilObjectPool_initWithInt_withInt_withLong_(self, min, max, validationInterval);
  return self;
}

- (id)borrowObject {
  id object;
  if ((object = [((id<JavaUtilQueue>) nil_chk(pool_)) poll]) == nil) {
    object = [self createObject];
  }
  return object;
}

- (void)returnObjectWithId:(id)object {
  if (object == nil) {
    return;
  }
  [((id<JavaUtilQueue>) nil_chk(self->pool_)) offerWithId:object];
}

- (void)shutdown {
  [((RxScheduler_Worker *) nil_chk(schedulerWorker_)) unsubscribe];
}

- (id)createObject {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)initialize__WithInt:(jint)min {
  RxInternalUtilObjectPool_initialize__WithInt_(self, min);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ObjectPool", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:withLong:", "ObjectPool", NULL, 0x2, NULL, NULL },
    { "borrowObject", NULL, "TT;", 0x1, NULL, "()TT;" },
    { "returnObjectWithId:", "returnObject", "V", 0x1, NULL, "(TT;)V" },
    { "shutdown", NULL, "V", 0x1, NULL, NULL },
    { "createObject", NULL, "TT;", 0x404, NULL, "()TT;" },
    { "initialize__WithInt:", "initialize", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pool_", NULL, 0x2, "Ljava.util.Queue;", NULL, "Ljava/util/Queue<TT;>;", .constantValue.asLong = 0 },
    { "maxSize_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "schedulerWorker_", NULL, 0x2, "Lrx.Scheduler$Worker;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxInternalUtilObjectPool = { 2, "ObjectPool", "rx.internal.util", NULL, 0x401, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_RxInternalUtilObjectPool;
}

@end

void RxInternalUtilObjectPool_init(RxInternalUtilObjectPool *self) {
  RxInternalUtilObjectPool_initWithInt_withInt_withLong_(self, 0, 0, 67);
}

void RxInternalUtilObjectPool_initWithInt_withInt_withLong_(RxInternalUtilObjectPool *self, jint min, jint max, jlong validationInterval) {
  NSObject_init(self);
  self->maxSize_ = max;
  RxInternalUtilObjectPool_initialize__WithInt_(self, min);
  self->schedulerWorker_ = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  (void) [((RxScheduler_Worker *) nil_chk(self->schedulerWorker_)) schedulePeriodicallyWithRxFunctionsAction0:new_RxInternalUtilObjectPool_$1_initWithRxInternalUtilObjectPool_withInt_withInt_(self, min, max) withLong:validationInterval withLong:validationInterval withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
}

void RxInternalUtilObjectPool_initialize__WithInt_(RxInternalUtilObjectPool *self, jint min) {
  if (RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    self->pool_ = new_RxInternalUtilUnsafeMpmcArrayQueue_initWithInt_(JavaLangMath_maxWithInt_withInt_(self->maxSize_, 1024));
  }
  else {
    self->pool_ = new_JavaUtilConcurrentConcurrentLinkedQueue_init();
  }
  for (jint i = 0; i < min; i++) {
    [((id<JavaUtilQueue>) nil_chk(self->pool_)) addWithId:[self createObject]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilObjectPool)

@implementation RxInternalUtilObjectPool_$1

- (void)call {
  jint size = [((id<JavaUtilQueue>) nil_chk(this$0_->pool_)) size];
  if (size < val$min_) {
    jint sizeToBeAdded = val$max_ - size;
    for (jint i = 0; i < sizeToBeAdded; i++) {
      [this$0_->pool_ addWithId:[this$0_ createObject]];
    }
  }
  else if (size > val$max_) {
    jint sizeToBeRemoved = size - val$max_;
    for (jint i = 0; i < sizeToBeRemoved; i++) {
      (void) [this$0_->pool_ poll];
    }
  }
}

- (instancetype)initWithRxInternalUtilObjectPool:(RxInternalUtilObjectPool *)outer$
                                         withInt:(jint)capture$0
                                         withInt:(jint)capture$1 {
  RxInternalUtilObjectPool_$1_initWithRxInternalUtilObjectPool_withInt_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", NULL, "V", 0x1, NULL, NULL },
    { "initWithRxInternalUtilObjectPool:withInt:withInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrx.internal.util.ObjectPool;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$min_", NULL, 0x1012, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "val$max_", NULL, 0x1012, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxInternalUtilObjectPool", "initWithInt:withInt:withLong:" };
  static const J2ObjcClassInfo _RxInternalUtilObjectPool_$1 = { 2, "", "rx.internal.util", "ObjectPool", 0x8008, 2, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_RxInternalUtilObjectPool_$1;
}

@end

void RxInternalUtilObjectPool_$1_initWithRxInternalUtilObjectPool_withInt_withInt_(RxInternalUtilObjectPool_$1 *self, RxInternalUtilObjectPool *outer$, jint capture$0, jint capture$1) {
  self->this$0_ = outer$;
  self->val$min_ = capture$0;
  self->val$max_ = capture$1;
  NSObject_init(self);
}

RxInternalUtilObjectPool_$1 *new_RxInternalUtilObjectPool_$1_initWithRxInternalUtilObjectPool_withInt_withInt_(RxInternalUtilObjectPool *outer$, jint capture$0, jint capture$1) {
  RxInternalUtilObjectPool_$1 *self = [RxInternalUtilObjectPool_$1 alloc];
  RxInternalUtilObjectPool_$1_initWithRxInternalUtilObjectPool_withInt_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

RxInternalUtilObjectPool_$1 *create_RxInternalUtilObjectPool_$1_initWithRxInternalUtilObjectPool_withInt_withInt_(RxInternalUtilObjectPool *outer$, jint capture$0, jint capture$1) {
  return new_RxInternalUtilObjectPool_$1_initWithRxInternalUtilObjectPool_withInt_withInt_(outer$, capture$0, capture$1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilObjectPool_$1)
