//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/util/unsafe/UnsafeAccess.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/reflect/Field.h"
#include "rx/internal/util/unsafe/UnsafeAccess.h"
#include "sun/misc/Unsafe.h"

@interface RxInternalUtilUnsafeUnsafeAccess ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxInternalUtilUnsafeUnsafeAccess_init(RxInternalUtilUnsafeUnsafeAccess *self);

__attribute__((unused)) static RxInternalUtilUnsafeUnsafeAccess *new_RxInternalUtilUnsafeUnsafeAccess_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilUnsafeUnsafeAccess *create_RxInternalUtilUnsafeUnsafeAccess_init();

J2OBJC_INITIALIZED_DEFN(RxInternalUtilUnsafeUnsafeAccess)

SunMiscUnsafe *RxInternalUtilUnsafeUnsafeAccess_UNSAFE;

@implementation RxInternalUtilUnsafeUnsafeAccess

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilUnsafeUnsafeAccess_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isUnsafeAvailable {
  return RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable();
}

+ (jint)getAndIncrementIntWithId:(id)obj
                        withLong:(jlong)offset {
  return RxInternalUtilUnsafeUnsafeAccess_getAndIncrementIntWithId_withLong_(obj, offset);
}

+ (jint)getAndAddIntWithId:(id)obj
                  withLong:(jlong)offset
                   withInt:(jint)n {
  return RxInternalUtilUnsafeUnsafeAccess_getAndAddIntWithId_withLong_withInt_(obj, offset, n);
}

+ (jint)getAndSetIntWithId:(id)obj
                  withLong:(jlong)offset
                   withInt:(jint)newValue {
  return RxInternalUtilUnsafeUnsafeAccess_getAndSetIntWithId_withLong_withInt_(obj, offset, newValue);
}

+ (jboolean)compareAndSwapIntWithId:(id)obj
                           withLong:(jlong)offset
                            withInt:(jint)expected
                            withInt:(jint)newValue {
  return RxInternalUtilUnsafeUnsafeAccess_compareAndSwapIntWithId_withLong_withInt_withInt_(obj, offset, expected, newValue);
}

+ (void)initialize {
  if (self == [RxInternalUtilUnsafeUnsafeAccess class]) {
    {
      SunMiscUnsafe *u = nil;
      @try {
        JavaLangReflectField *field = [SunMiscUnsafe_class_() getDeclaredField:@"theUnsafe"];
        [((JavaLangReflectField *) nil_chk(field)) setAccessibleWithBoolean:true];
        u = (SunMiscUnsafe *) cast_chk([field getWithId:nil], [SunMiscUnsafe class]);
      }
      @catch (JavaLangException *e) {
      }
      RxInternalUtilUnsafeUnsafeAccess_UNSAFE = u;
    }
    J2OBJC_SET_INITIALIZED(RxInternalUtilUnsafeUnsafeAccess)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "UnsafeAccess", NULL, 0x2, NULL, NULL },
    { "isUnsafeAvailable", NULL, "Z", 0x19, NULL, NULL },
    { "getAndIncrementIntWithId:withLong:", "getAndIncrementInt", "I", 0x9, NULL, NULL },
    { "getAndAddIntWithId:withLong:withInt:", "getAndAddInt", "I", 0x9, NULL, NULL },
    { "getAndSetIntWithId:withLong:withInt:", "getAndSetInt", "I", 0x9, NULL, NULL },
    { "compareAndSwapIntWithId:withLong:withInt:withInt:", "compareAndSwapInt", "Z", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "UNSAFE", "UNSAFE", 0x19, "Lsun.misc.Unsafe;", &RxInternalUtilUnsafeUnsafeAccess_UNSAFE, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeUnsafeAccess = { 2, "UnsafeAccess", "rx.internal.util.unsafe", NULL, 0x11, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxInternalUtilUnsafeUnsafeAccess;
}

@end

void RxInternalUtilUnsafeUnsafeAccess_init(RxInternalUtilUnsafeUnsafeAccess *self) {
  NSObject_init(self);
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxInternalUtilUnsafeUnsafeAccess *new_RxInternalUtilUnsafeUnsafeAccess_init() {
  RxInternalUtilUnsafeUnsafeAccess *self = [RxInternalUtilUnsafeUnsafeAccess alloc];
  RxInternalUtilUnsafeUnsafeAccess_init(self);
  return self;
}

RxInternalUtilUnsafeUnsafeAccess *create_RxInternalUtilUnsafeUnsafeAccess_init() {
  return new_RxInternalUtilUnsafeUnsafeAccess_init();
}

jboolean RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable() {
  RxInternalUtilUnsafeUnsafeAccess_initialize();
  return RxInternalUtilUnsafeUnsafeAccess_UNSAFE != nil;
}

jint RxInternalUtilUnsafeUnsafeAccess_getAndIncrementIntWithId_withLong_(id obj, jlong offset) {
  RxInternalUtilUnsafeUnsafeAccess_initialize();
  for (; ; ) {
    jint current = [((SunMiscUnsafe *) nil_chk(RxInternalUtilUnsafeUnsafeAccess_UNSAFE)) getIntVolatileWithId:obj withLong:offset];
    jint next = current + 1;
    if ([RxInternalUtilUnsafeUnsafeAccess_UNSAFE compareAndSwapIntWithId:obj withLong:offset withInt:current withInt:next]) return current;
  }
}

jint RxInternalUtilUnsafeUnsafeAccess_getAndAddIntWithId_withLong_withInt_(id obj, jlong offset, jint n) {
  RxInternalUtilUnsafeUnsafeAccess_initialize();
  for (; ; ) {
    jint current = [((SunMiscUnsafe *) nil_chk(RxInternalUtilUnsafeUnsafeAccess_UNSAFE)) getIntVolatileWithId:obj withLong:offset];
    jint next = current + n;
    if ([RxInternalUtilUnsafeUnsafeAccess_UNSAFE compareAndSwapIntWithId:obj withLong:offset withInt:current withInt:next]) return current;
  }
}

jint RxInternalUtilUnsafeUnsafeAccess_getAndSetIntWithId_withLong_withInt_(id obj, jlong offset, jint newValue) {
  RxInternalUtilUnsafeUnsafeAccess_initialize();
  for (; ; ) {
    jint current = [((SunMiscUnsafe *) nil_chk(RxInternalUtilUnsafeUnsafeAccess_UNSAFE)) getIntVolatileWithId:obj withLong:offset];
    if ([RxInternalUtilUnsafeUnsafeAccess_UNSAFE compareAndSwapIntWithId:obj withLong:offset withInt:current withInt:newValue]) return current;
  }
}

jboolean RxInternalUtilUnsafeUnsafeAccess_compareAndSwapIntWithId_withLong_withInt_withInt_(id obj, jlong offset, jint expected, jint newValue) {
  RxInternalUtilUnsafeUnsafeAccess_initialize();
  return [((SunMiscUnsafe *) nil_chk(RxInternalUtilUnsafeUnsafeAccess_UNSAFE)) compareAndSwapIntWithId:obj withLong:offset withInt:expected withInt:newValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeUnsafeAccess)
