//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/util/unsafe/ConcurrentSequencedCircularArrayQueue.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_INCLUDE_ALL")
#ifdef RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_RESTRICT
#define RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_INCLUDE_ALL 0
#else
#define RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_INCLUDE_ALL 1
#endif
#undef RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_RESTRICT

#if !defined (RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_) && (RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_INCLUDE_ALL || defined(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_INCLUDE))
#define RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_

#define RxInternalUtilUnsafeConcurrentCircularArrayQueue_RESTRICT 1
#define RxInternalUtilUnsafeConcurrentCircularArrayQueue_INCLUDE 1
#include "rx/internal/util/unsafe/ConcurrentCircularArrayQueue.h"

@class IOSLongArray;

@interface RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue : RxInternalUtilUnsafeConcurrentCircularArrayQueue {
 @public
  IOSLongArray *sequenceBuffer_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

#pragma mark Protected

- (jlong)calcSequenceOffsetWithLong:(jlong)index;

- (jlong)lvSequenceWithLongArray:(IOSLongArray *)buffer
                        withLong:(jlong)offset;

- (void)soSequenceWithLongArray:(IOSLongArray *)buffer
                       withLong:(jlong)offset
                       withLong:(jlong)e;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue)

J2OBJC_FIELD_SETTER(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue, sequenceBuffer_, IOSLongArray *)

FOUNDATION_EXPORT void RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_initWithInt_(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue *self, jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue)

#endif

#pragma pop_macro("RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_INCLUDE_ALL")
