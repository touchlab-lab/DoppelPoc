//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/internal/operators/OnSubscribeCache.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicIntegerFieldUpdater.h"
#include "rx/Observable.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/internal/operators/OnSubscribeCache.h"
#include "rx/observers/Subscribers.h"
#include "rx/subjects/ReplaySubject.h"
#include "rx/subjects/Subject.h"

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOnSubscribeCache)

JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxInternalOperatorsOnSubscribeCache_SRC_SUBSCRIBED_UPDATER;

@implementation RxInternalOperatorsOnSubscribeCache

- (instancetype)initWithRxObservable:(RxObservable *)source {
  RxInternalOperatorsOnSubscribeCache_initWithRxObservable_(self, source);
  return self;
}

- (instancetype)initWithRxObservable:(RxObservable *)source
                             withInt:(jint)capacity {
  RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withInt_(self, source, capacity);
  return self;
}

- (instancetype)initWithRxObservable:(RxObservable *)source
               withRxSubjectsSubject:(RxSubjectsSubject *)cache {
  RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withRxSubjectsSubject_(self, source, cache);
  return self;
}

- (void)callWithId:(RxSubscriber *)s {
  if ([((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalOperatorsOnSubscribeCache_SRC_SUBSCRIBED_UPDATER)) compareAndSetWithId:self withInt:0 withInt:1]) {
    (void) [((RxObservable *) nil_chk(source_)) unsafeSubscribeWithRxSubscriber:RxObserversSubscribers_fromWithRxObserver_(cache_)];
  }
  (void) [((RxSubjectsSubject *) nil_chk(cache_)) unsafeSubscribeWithRxSubscriber:s];
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOnSubscribeCache class]) {
    RxInternalOperatorsOnSubscribeCache_SRC_SUBSCRIBED_UPDATER = JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_newUpdaterWithIOSClass_withNSString_(RxInternalOperatorsOnSubscribeCache_class_(), @"sourceSubscribed");
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOnSubscribeCache)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxObservable:", "OnSubscribeCache", NULL, 0x1, NULL, "(Lrx/Observable<+TT;>;)V" },
    { "initWithRxObservable:withInt:", "OnSubscribeCache", NULL, 0x1, NULL, "(Lrx/Observable<+TT;>;I)V" },
    { "initWithRxObservable:withRxSubjectsSubject:", "OnSubscribeCache", NULL, 0x0, NULL, "(Lrx/Observable<+TT;>;Lrx/subjects/Subject<-TT;+TT;>;)V" },
    { "callWithId:", "call", "V", 0x1, NULL, "(Lrx/Subscriber<-TT;>;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "source_", NULL, 0x14, "Lrx.Observable;", NULL, "Lrx/Observable<+TT;>;", .constantValue.asLong = 0 },
    { "cache_", NULL, 0x14, "Lrx.subjects.Subject;", NULL, "Lrx/subjects/Subject<-TT;+TT;>;", .constantValue.asLong = 0 },
    { "sourceSubscribed_", NULL, 0x40, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "SRC_SUBSCRIBED_UPDATER", "SRC_SUBSCRIBED_UPDATER", 0x18, "Ljava.util.concurrent.atomic.AtomicIntegerFieldUpdater;", &RxInternalOperatorsOnSubscribeCache_SRC_SUBSCRIBED_UPDATER, "Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater<Lrx/internal/operators/OnSubscribeCache;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeCache = { 2, "OnSubscribeCache", "rx.internal.operators", NULL, 0x11, 4, methods, 4, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$OnSubscribe<TT;>;" };
  return &_RxInternalOperatorsOnSubscribeCache;
}

@end

void RxInternalOperatorsOnSubscribeCache_initWithRxObservable_(RxInternalOperatorsOnSubscribeCache *self, RxObservable *source) {
  RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withRxSubjectsSubject_(self, source, RxSubjectsReplaySubject_create());
}

RxInternalOperatorsOnSubscribeCache *new_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_(RxObservable *source) {
  RxInternalOperatorsOnSubscribeCache *self = [RxInternalOperatorsOnSubscribeCache alloc];
  RxInternalOperatorsOnSubscribeCache_initWithRxObservable_(self, source);
  return self;
}

RxInternalOperatorsOnSubscribeCache *create_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_(RxObservable *source) {
  return new_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_(source);
}

void RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withInt_(RxInternalOperatorsOnSubscribeCache *self, RxObservable *source, jint capacity) {
  RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withRxSubjectsSubject_(self, source, RxSubjectsReplaySubject_createWithInt_(capacity));
}

RxInternalOperatorsOnSubscribeCache *new_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withInt_(RxObservable *source, jint capacity) {
  RxInternalOperatorsOnSubscribeCache *self = [RxInternalOperatorsOnSubscribeCache alloc];
  RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withInt_(self, source, capacity);
  return self;
}

RxInternalOperatorsOnSubscribeCache *create_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withInt_(RxObservable *source, jint capacity) {
  return new_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withInt_(source, capacity);
}

void RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withRxSubjectsSubject_(RxInternalOperatorsOnSubscribeCache *self, RxObservable *source, RxSubjectsSubject *cache) {
  NSObject_init(self);
  self->source_ = source;
  self->cache_ = cache;
}

RxInternalOperatorsOnSubscribeCache *new_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withRxSubjectsSubject_(RxObservable *source, RxSubjectsSubject *cache) {
  RxInternalOperatorsOnSubscribeCache *self = [RxInternalOperatorsOnSubscribeCache alloc];
  RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withRxSubjectsSubject_(self, source, cache);
  return self;
}

RxInternalOperatorsOnSubscribeCache *create_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withRxSubjectsSubject_(RxObservable *source, RxSubjectsSubject *cache) {
  return new_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withRxSubjectsSubject_(source, cache);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeCache)
