//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/operators/BlockingOperatorToIterator.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "rx/Notification.h"
#include "rx/Observable.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/exceptions/Exceptions.h"
#include "rx/internal/operators/BlockingOperatorToIterator.h"

@interface RxInternalOperatorsBlockingOperatorToIterator ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorToIterator_init(RxInternalOperatorsBlockingOperatorToIterator *self);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorToIterator *new_RxInternalOperatorsBlockingOperatorToIterator_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorToIterator *create_RxInternalOperatorsBlockingOperatorToIterator_init();

@interface RxInternalOperatorsBlockingOperatorToIterator_$1 : RxSubscriber {
 @public
  id<JavaUtilConcurrentBlockingQueue> val$notifications_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;
#ifdef J2OBJC_RENAME_ALIASES
#define onErrorWithJavaLangThrowable onErrorWithNSException
#endif // J2OBJC_RENAME_ALIASES

- (void)onNextWithId:(RxNotification *)args;

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorToIterator_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorToIterator_$1, val$notifications_, id<JavaUtilConcurrentBlockingQueue>)

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorToIterator_$1_initWithJavaUtilConcurrentBlockingQueue_(RxInternalOperatorsBlockingOperatorToIterator_$1 *self, id<JavaUtilConcurrentBlockingQueue> capture$0);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorToIterator_$1 *new_RxInternalOperatorsBlockingOperatorToIterator_$1_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorToIterator_$1 *create_RxInternalOperatorsBlockingOperatorToIterator_$1_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorToIterator_$1)

@interface RxInternalOperatorsBlockingOperatorToIterator_$2 : NSObject < JavaUtilIterator > {
 @public
  RxNotification *buf_;
  id<JavaUtilConcurrentBlockingQueue> val$notifications_;
}

- (jboolean)hasNext;

- (id)next;

- (RxNotification *)take;

- (void)remove;

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorToIterator_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorToIterator_$2, buf_, RxNotification *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorToIterator_$2, val$notifications_, id<JavaUtilConcurrentBlockingQueue>)

__attribute__((unused)) static RxNotification *RxInternalOperatorsBlockingOperatorToIterator_$2_take(RxInternalOperatorsBlockingOperatorToIterator_$2 *self);

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorToIterator_$2_initWithJavaUtilConcurrentBlockingQueue_(RxInternalOperatorsBlockingOperatorToIterator_$2 *self, id<JavaUtilConcurrentBlockingQueue> capture$0);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorToIterator_$2 *new_RxInternalOperatorsBlockingOperatorToIterator_$2_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorToIterator_$2 *create_RxInternalOperatorsBlockingOperatorToIterator_$2_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorToIterator_$2)

@implementation RxInternalOperatorsBlockingOperatorToIterator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsBlockingOperatorToIterator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilIterator>)toIteratorWithRxObservable:(RxObservable *)source {
  return RxInternalOperatorsBlockingOperatorToIterator_toIteratorWithRxObservable_(source);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BlockingOperatorToIterator", NULL, 0x2, NULL, NULL },
    { "toIteratorWithRxObservable:", "toIterator", "Ljava.util.Iterator;", 0x9, NULL, "<T:Ljava/lang/Object;>(Lrx/Observable<+TT;>;)Ljava/util/Iterator<TT;>;" },
  };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorToIterator = { 2, "BlockingOperatorToIterator", "rx.internal.operators", NULL, 0x11, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxInternalOperatorsBlockingOperatorToIterator;
}

@end

void RxInternalOperatorsBlockingOperatorToIterator_init(RxInternalOperatorsBlockingOperatorToIterator *self) {
  NSObject_init(self);
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxInternalOperatorsBlockingOperatorToIterator *new_RxInternalOperatorsBlockingOperatorToIterator_init() {
  RxInternalOperatorsBlockingOperatorToIterator *self = [RxInternalOperatorsBlockingOperatorToIterator alloc];
  RxInternalOperatorsBlockingOperatorToIterator_init(self);
  return self;
}

RxInternalOperatorsBlockingOperatorToIterator *create_RxInternalOperatorsBlockingOperatorToIterator_init() {
  return new_RxInternalOperatorsBlockingOperatorToIterator_init();
}

id<JavaUtilIterator> RxInternalOperatorsBlockingOperatorToIterator_toIteratorWithRxObservable_(RxObservable *source) {
  RxInternalOperatorsBlockingOperatorToIterator_initialize();
  id<JavaUtilConcurrentBlockingQueue> notifications = new_JavaUtilConcurrentLinkedBlockingQueue_init();
  (void) [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) materialize])) subscribeWithRxSubscriber:new_RxInternalOperatorsBlockingOperatorToIterator_$1_initWithJavaUtilConcurrentBlockingQueue_(notifications)];
  return new_RxInternalOperatorsBlockingOperatorToIterator_$2_initWithJavaUtilConcurrentBlockingQueue_(notifications);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsBlockingOperatorToIterator)

@implementation RxInternalOperatorsBlockingOperatorToIterator_$1

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$notifications_)) offerWithId:RxNotification_createOnErrorWithNSException_(e)];
}

- (void)onNextWithId:(RxNotification *)args {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$notifications_)) offerWithId:args];
}

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0 {
  RxInternalOperatorsBlockingOperatorToIterator_$1_initWithJavaUtilConcurrentBlockingQueue_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onCompleted", NULL, "V", 0x1, NULL, NULL },
    { "onErrorWithNSException:", "onError", "V", 0x1, NULL, NULL },
    { "onNextWithId:", "onNext", "V", 0x1, NULL, "(Lrx/Notification<+TT;>;)V" },
    { "initWithJavaUtilConcurrentBlockingQueue:", "", NULL, 0x0, NULL, "(Ljava/util/concurrent/BlockingQueue<Lrx/Notification<+TT;>;>;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$notifications_", NULL, 0x1012, "Ljava.util.concurrent.BlockingQueue;", NULL, "Ljava/util/concurrent/BlockingQueue<Lrx/Notification<+TT;>;>;", .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lrx.Notification;"};
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxInternalOperatorsBlockingOperatorToIterator", "toIteratorWithRxObservable:" };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorToIterator_$1 = { 2, "", "rx.internal.operators", "BlockingOperatorToIterator", 0x8008, 4, methods, 1, fields, 1, superclass_type_args, 0, NULL, &enclosing_method, "Lrx/Subscriber<Lrx/Notification<+TT;>;>;" };
  return &_RxInternalOperatorsBlockingOperatorToIterator_$1;
}

@end

void RxInternalOperatorsBlockingOperatorToIterator_$1_initWithJavaUtilConcurrentBlockingQueue_(RxInternalOperatorsBlockingOperatorToIterator_$1 *self, id<JavaUtilConcurrentBlockingQueue> capture$0) {
  self->val$notifications_ = capture$0;
  RxSubscriber_init(self);
}

RxInternalOperatorsBlockingOperatorToIterator_$1 *new_RxInternalOperatorsBlockingOperatorToIterator_$1_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) {
  RxInternalOperatorsBlockingOperatorToIterator_$1 *self = [RxInternalOperatorsBlockingOperatorToIterator_$1 alloc];
  RxInternalOperatorsBlockingOperatorToIterator_$1_initWithJavaUtilConcurrentBlockingQueue_(self, capture$0);
  return self;
}

RxInternalOperatorsBlockingOperatorToIterator_$1 *create_RxInternalOperatorsBlockingOperatorToIterator_$1_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) {
  return new_RxInternalOperatorsBlockingOperatorToIterator_$1_initWithJavaUtilConcurrentBlockingQueue_(capture$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsBlockingOperatorToIterator_$1)

@implementation RxInternalOperatorsBlockingOperatorToIterator_$2

- (jboolean)hasNext {
  if (buf_ == nil) {
    buf_ = RxInternalOperatorsBlockingOperatorToIterator_$2_take(self);
  }
  if ([((RxNotification *) nil_chk(buf_)) isOnError]) {
    @throw RxExceptionsExceptions_propagateWithNSException_([buf_ getThrowable]);
  }
  return ![buf_ isOnCompleted];
}

- (id)next {
  if ([self hasNext]) {
    id result = [((RxNotification *) nil_chk(buf_)) getValue];
    buf_ = nil;
    return result;
  }
  @throw new_JavaUtilNoSuchElementException_init();
}

- (RxNotification *)take {
  return RxInternalOperatorsBlockingOperatorToIterator_$2_take(self);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Read-only iterator");
}

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0 {
  RxInternalOperatorsBlockingOperatorToIterator_$2_initWithJavaUtilConcurrentBlockingQueue_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "TT;", 0x1, NULL, "()TT;" },
    { "take", NULL, "Lrx.Notification;", 0x2, NULL, "()Lrx/Notification<+TT;>;" },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "initWithJavaUtilConcurrentBlockingQueue:", "", NULL, 0x0, NULL, "(Ljava/util/concurrent/BlockingQueue<Lrx/Notification<+TT;>;>;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "buf_", NULL, 0x2, "Lrx.Notification;", NULL, "Lrx/Notification<+TT;>;", .constantValue.asLong = 0 },
    { "val$notifications_", NULL, 0x1012, "Ljava.util.concurrent.BlockingQueue;", NULL, "Ljava/util/concurrent/BlockingQueue<Lrx/Notification<+TT;>;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxInternalOperatorsBlockingOperatorToIterator", "toIteratorWithRxObservable:" };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorToIterator_$2 = { 2, "", "rx.internal.operators", "BlockingOperatorToIterator", 0x8008, 5, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  return &_RxInternalOperatorsBlockingOperatorToIterator_$2;
}

@end

RxNotification *RxInternalOperatorsBlockingOperatorToIterator_$2_take(RxInternalOperatorsBlockingOperatorToIterator_$2 *self) {
  @try {
    return [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(self->val$notifications_)) take];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw RxExceptionsExceptions_propagateWithNSException_(e);
  }
}

void RxInternalOperatorsBlockingOperatorToIterator_$2_initWithJavaUtilConcurrentBlockingQueue_(RxInternalOperatorsBlockingOperatorToIterator_$2 *self, id<JavaUtilConcurrentBlockingQueue> capture$0) {
  self->val$notifications_ = capture$0;
  NSObject_init(self);
}

RxInternalOperatorsBlockingOperatorToIterator_$2 *new_RxInternalOperatorsBlockingOperatorToIterator_$2_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) {
  RxInternalOperatorsBlockingOperatorToIterator_$2 *self = [RxInternalOperatorsBlockingOperatorToIterator_$2 alloc];
  RxInternalOperatorsBlockingOperatorToIterator_$2_initWithJavaUtilConcurrentBlockingQueue_(self, capture$0);
  return self;
}

RxInternalOperatorsBlockingOperatorToIterator_$2 *create_RxInternalOperatorsBlockingOperatorToIterator_$2_initWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> capture$0) {
  return new_RxInternalOperatorsBlockingOperatorToIterator_$2_initWithJavaUtilConcurrentBlockingQueue_(capture$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsBlockingOperatorToIterator_$2)
