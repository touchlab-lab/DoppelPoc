//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/operators/OnSubscribeRefCount.java
//

#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/functions/Action0.h"
#include "rx/functions/Action1.h"
#include "rx/internal/operators/OnSubscribeRefCount.h"
#include "rx/observables/ConnectableObservable.h"
#include "rx/subscriptions/CompositeSubscription.h"
#include "rx/subscriptions/Subscriptions.h"

@interface RxInternalOperatorsOnSubscribeRefCount () {
 @public
  RxObservablesConnectableObservable *source_;
  volatile_id baseSubscription_;
  JavaUtilConcurrentAtomicAtomicInteger *subscriptionCount_;
  JavaUtilConcurrentLocksReentrantLock *lock_;
}

- (id<RxFunctionsAction1>)onSubscribeWithRxSubscriber:(RxSubscriber *)subscriber
            withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked;

- (id<RxSubscription>)disconnect;

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount, source_, RxObservablesConnectableObservable *)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount, baseSubscription_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount, subscriptionCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount, lock_, JavaUtilConcurrentLocksReentrantLock *)

__attribute__((unused)) static id<RxFunctionsAction1> RxInternalOperatorsOnSubscribeRefCount_onSubscribeWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *self, RxSubscriber *subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked);

__attribute__((unused)) static id<RxSubscription> RxInternalOperatorsOnSubscribeRefCount_disconnect(RxInternalOperatorsOnSubscribeRefCount *self);

@interface RxInternalOperatorsOnSubscribeRefCount_$1 : NSObject < RxFunctionsAction1 > {
 @public
  RxInternalOperatorsOnSubscribeRefCount *this$0_;
  RxSubscriber *val$subscriber_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$writeLocked_;
}

- (void)callWithId:(id<RxSubscription>)subscription;

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCount:(RxInternalOperatorsOnSubscribeRefCount *)outer$
                                              withRxSubscriber:(RxSubscriber *)capture$0
                     withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCount_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount_$1, this$0_, RxInternalOperatorsOnSubscribeRefCount *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount_$1, val$subscriber_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount_$1, val$writeLocked_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCount_$1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount_$1 *self, RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCount_$1 *new_RxInternalOperatorsOnSubscribeRefCount_$1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCount_$1 *create_RxInternalOperatorsOnSubscribeRefCount_$1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeRefCount_$1)

@interface RxInternalOperatorsOnSubscribeRefCount_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOnSubscribeRefCount *this$0_;
}

- (void)call;

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCount:(RxInternalOperatorsOnSubscribeRefCount *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCount_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount_$2, this$0_, RxInternalOperatorsOnSubscribeRefCount *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCount_$2_initWithRxInternalOperatorsOnSubscribeRefCount_(RxInternalOperatorsOnSubscribeRefCount_$2 *self, RxInternalOperatorsOnSubscribeRefCount *outer$);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCount_$2 *new_RxInternalOperatorsOnSubscribeRefCount_$2_initWithRxInternalOperatorsOnSubscribeRefCount_(RxInternalOperatorsOnSubscribeRefCount *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCount_$2 *create_RxInternalOperatorsOnSubscribeRefCount_$2_initWithRxInternalOperatorsOnSubscribeRefCount_(RxInternalOperatorsOnSubscribeRefCount *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeRefCount_$2)

@implementation RxInternalOperatorsOnSubscribeRefCount

- (instancetype)initWithRxObservablesConnectableObservable:(RxObservablesConnectableObservable *)source {
  RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(self, source);
  return self;
}

- (void)callWithId:(RxSubscriber *)subscriber {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(subscriptionCount_)) incrementAndGet] == 1) {
    JavaUtilConcurrentAtomicAtomicBoolean *writeLocked = new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(true);
    @try {
      [((RxObservablesConnectableObservable *) nil_chk(source_)) connectWithRxFunctionsAction1:RxInternalOperatorsOnSubscribeRefCount_onSubscribeWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, subscriber, writeLocked)];
    }
    @finally {
      if ([writeLocked get]) {
        [lock_ unlock];
      }
    }
  }
  else {
    @try {
      [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:RxInternalOperatorsOnSubscribeRefCount_disconnect(self)];
      (void) [((RxObservablesConnectableObservable *) nil_chk(source_)) unsafeSubscribeWithRxSubscriber:subscriber];
    }
    @finally {
      [lock_ unlock];
    }
  }
}

- (id<RxFunctionsAction1>)onSubscribeWithRxSubscriber:(RxSubscriber *)subscriber
            withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)writeLocked {
  return RxInternalOperatorsOnSubscribeRefCount_onSubscribeWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, subscriber, writeLocked);
}

- (id<RxSubscription>)disconnect {
  return RxInternalOperatorsOnSubscribeRefCount_disconnect(self);
}

- (void)dealloc {
  JreReleaseVolatile(&baseSubscription_);
}

- (void)__javaClone:(RxInternalOperatorsOnSubscribeRefCount *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&baseSubscription_, &original->baseSubscription_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxObservablesConnectableObservable:", "OnSubscribeRefCount", NULL, 0x1, NULL, "(Lrx/observables/ConnectableObservable<+TT;>;)V" },
    { "callWithId:", "call", "V", 0x1, NULL, "(Lrx/Subscriber<-TT;>;)V" },
    { "onSubscribeWithRxSubscriber:withJavaUtilConcurrentAtomicAtomicBoolean:", "onSubscribe", "Lrx.functions.Action1;", 0x2, NULL, "(Lrx/Subscriber<-TT;>;Ljava/util/concurrent/atomic/AtomicBoolean;)Lrx/functions/Action1<Lrx/Subscription;>;" },
    { "disconnect", NULL, "Lrx.Subscription;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "source_", NULL, 0x12, "Lrx.observables.ConnectableObservable;", NULL, "Lrx/observables/ConnectableObservable<+TT;>;", .constantValue.asLong = 0 },
    { "baseSubscription_", NULL, 0x42, "Lrx.subscriptions.CompositeSubscription;", NULL, NULL, .constantValue.asLong = 0 },
    { "subscriptionCount_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicInteger;", NULL, NULL, .constantValue.asLong = 0 },
    { "lock_", NULL, 0x12, "Ljava.util.concurrent.locks.ReentrantLock;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCount = { 2, "OnSubscribeRefCount", "rx.internal.operators", NULL, 0x11, 4, methods, 4, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$OnSubscribe<TT;>;" };
  return &_RxInternalOperatorsOnSubscribeRefCount;
}

@end

void RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(RxInternalOperatorsOnSubscribeRefCount *self, RxObservablesConnectableObservable *source) {
  NSObject_init(self);
  (void) JreVolatileStrongAssign(&self->baseSubscription_, new_RxSubscriptionsCompositeSubscription_init());
  self->subscriptionCount_ = new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  self->lock_ = new_JavaUtilConcurrentLocksReentrantLock_init();
  self->source_ = source;
}

RxInternalOperatorsOnSubscribeRefCount *new_RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(RxObservablesConnectableObservable *source) {
  RxInternalOperatorsOnSubscribeRefCount *self = [RxInternalOperatorsOnSubscribeRefCount alloc];
  RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(self, source);
  return self;
}

RxInternalOperatorsOnSubscribeRefCount *create_RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(RxObservablesConnectableObservable *source) {
  return new_RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(source);
}

id<RxFunctionsAction1> RxInternalOperatorsOnSubscribeRefCount_onSubscribeWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *self, RxSubscriber *subscriber, JavaUtilConcurrentAtomicAtomicBoolean *writeLocked) {
  return new_RxInternalOperatorsOnSubscribeRefCount_$1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, subscriber, writeLocked);
}

id<RxSubscription> RxInternalOperatorsOnSubscribeRefCount_disconnect(RxInternalOperatorsOnSubscribeRefCount *self) {
  return RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(new_RxInternalOperatorsOnSubscribeRefCount_$2_initWithRxInternalOperatorsOnSubscribeRefCount_(self));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeRefCount)

@implementation RxInternalOperatorsOnSubscribeRefCount_$1

- (void)callWithId:(id<RxSubscription>)subscription {
  @try {
    [((RxSubscriptionsCompositeSubscription *) nil_chk(JreLoadVolatileId(&this$0_->baseSubscription_))) addWithRxSubscription:subscription];
    [((RxSubscriber *) nil_chk(val$subscriber_)) addWithRxSubscription:RxInternalOperatorsOnSubscribeRefCount_disconnect(this$0_)];
    (void) [((RxObservablesConnectableObservable *) nil_chk(this$0_->source_)) unsafeSubscribeWithRxSubscriber:val$subscriber_];
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) unlock];
    [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$writeLocked_)) setWithBoolean:false];
  }
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCount:(RxInternalOperatorsOnSubscribeRefCount *)outer$
                                              withRxSubscriber:(RxSubscriber *)capture$0
                     withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1 {
  RxInternalOperatorsOnSubscribeRefCount_$1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, outer$, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callWithId:", "call", "V", 0x1, NULL, NULL },
    { "initWithRxInternalOperatorsOnSubscribeRefCount:withRxSubscriber:withJavaUtilConcurrentAtomicAtomicBoolean:", "", NULL, 0x0, NULL, "(Lrx/internal/operators/OnSubscribeRefCount;Lrx/Subscriber<-TT;>;Ljava/util/concurrent/atomic/AtomicBoolean;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrx.internal.operators.OnSubscribeRefCount;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$subscriber_", NULL, 0x1012, "Lrx.Subscriber;", NULL, "Lrx/Subscriber<-TT;>;", .constantValue.asLong = 0 },
    { "val$writeLocked_", NULL, 0x1012, "Ljava.util.concurrent.atomic.AtomicBoolean;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxInternalOperatorsOnSubscribeRefCount", "onSubscribeWithRxSubscriber:withJavaUtilConcurrentAtomicAtomicBoolean:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCount_$1 = { 2, "", "rx.internal.operators", "OnSubscribeRefCount", 0x8008, 2, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Subscription;>;" };
  return &_RxInternalOperatorsOnSubscribeRefCount_$1;
}

@end

void RxInternalOperatorsOnSubscribeRefCount_$1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount_$1 *self, RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  self->this$0_ = outer$;
  self->val$subscriber_ = capture$0;
  self->val$writeLocked_ = capture$1;
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCount_$1 *new_RxInternalOperatorsOnSubscribeRefCount_$1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  RxInternalOperatorsOnSubscribeRefCount_$1 *self = [RxInternalOperatorsOnSubscribeRefCount_$1 alloc];
  RxInternalOperatorsOnSubscribeRefCount_$1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, outer$, capture$0, capture$1);
  return self;
}

RxInternalOperatorsOnSubscribeRefCount_$1 *create_RxInternalOperatorsOnSubscribeRefCount_$1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRefCount *outer$, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  return new_RxInternalOperatorsOnSubscribeRefCount_$1_initWithRxInternalOperatorsOnSubscribeRefCount_withRxSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(outer$, capture$0, capture$1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeRefCount_$1)

@implementation RxInternalOperatorsOnSubscribeRefCount_$2

- (void)call {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) lock];
  @try {
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->subscriptionCount_)) decrementAndGet] == 0) {
      [((RxSubscriptionsCompositeSubscription *) nil_chk(JreLoadVolatileId(&this$0_->baseSubscription_))) unsubscribe];
      (void) JreVolatileStrongAssign(&this$0_->baseSubscription_, new_RxSubscriptionsCompositeSubscription_init());
    }
  }
  @finally {
    [this$0_->lock_ unlock];
  }
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCount:(RxInternalOperatorsOnSubscribeRefCount *)outer$ {
  RxInternalOperatorsOnSubscribeRefCount_$2_initWithRxInternalOperatorsOnSubscribeRefCount_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", NULL, "V", 0x1, NULL, NULL },
    { "initWithRxInternalOperatorsOnSubscribeRefCount:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrx.internal.operators.OnSubscribeRefCount;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxInternalOperatorsOnSubscribeRefCount", "disconnect" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCount_$2 = { 2, "", "rx.internal.operators", "OnSubscribeRefCount", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_RxInternalOperatorsOnSubscribeRefCount_$2;
}

@end

void RxInternalOperatorsOnSubscribeRefCount_$2_initWithRxInternalOperatorsOnSubscribeRefCount_(RxInternalOperatorsOnSubscribeRefCount_$2 *self, RxInternalOperatorsOnSubscribeRefCount *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCount_$2 *new_RxInternalOperatorsOnSubscribeRefCount_$2_initWithRxInternalOperatorsOnSubscribeRefCount_(RxInternalOperatorsOnSubscribeRefCount *outer$) {
  RxInternalOperatorsOnSubscribeRefCount_$2 *self = [RxInternalOperatorsOnSubscribeRefCount_$2 alloc];
  RxInternalOperatorsOnSubscribeRefCount_$2_initWithRxInternalOperatorsOnSubscribeRefCount_(self, outer$);
  return self;
}

RxInternalOperatorsOnSubscribeRefCount_$2 *create_RxInternalOperatorsOnSubscribeRefCount_$2_initWithRxInternalOperatorsOnSubscribeRefCount_(RxInternalOperatorsOnSubscribeRefCount *outer$) {
  return new_RxInternalOperatorsOnSubscribeRefCount_$2_initWithRxInternalOperatorsOnSubscribeRefCount_(outer$);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeRefCount_$2)
