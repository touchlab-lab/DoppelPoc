//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/internal/operators/OnSubscribeDelaySubscription.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxInternalOperatorsOnSubscribeDelaySubscription_INCLUDE_ALL")
#ifdef RxInternalOperatorsOnSubscribeDelaySubscription_RESTRICT
#define RxInternalOperatorsOnSubscribeDelaySubscription_INCLUDE_ALL 0
#else
#define RxInternalOperatorsOnSubscribeDelaySubscription_INCLUDE_ALL 1
#endif
#undef RxInternalOperatorsOnSubscribeDelaySubscription_RESTRICT

#if !defined (RxInternalOperatorsOnSubscribeDelaySubscription_) && (RxInternalOperatorsOnSubscribeDelaySubscription_INCLUDE_ALL || defined(RxInternalOperatorsOnSubscribeDelaySubscription_INCLUDE))
#define RxInternalOperatorsOnSubscribeDelaySubscription_

#define RxObservable_RESTRICT 1
#define RxObservable_OnSubscribe_INCLUDE 1
#include "rx/Observable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxObservable;
@class RxScheduler;
@class RxSubscriber;

@interface RxInternalOperatorsOnSubscribeDelaySubscription : NSObject < RxObservable_OnSubscribe > {
 @public
  RxObservable *source_;
  jlong time_;
  JavaUtilConcurrentTimeUnit *unit_;
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithRxObservable:(RxObservable *)source
                            withLong:(jlong)time
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withRxScheduler:(RxScheduler *)scheduler;

- (void)callWithId:(RxSubscriber *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDelaySubscription)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscription, source_, RxObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscription, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscription, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeDelaySubscription_initWithRxObservable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOnSubscribeDelaySubscription *self, RxObservable *source, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeDelaySubscription *new_RxInternalOperatorsOnSubscribeDelaySubscription_initWithRxObservable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxObservable *source, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeDelaySubscription *create_RxInternalOperatorsOnSubscribeDelaySubscription_initWithRxObservable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxObservable *source, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeDelaySubscription)

#endif

#pragma pop_macro("RxInternalOperatorsOnSubscribeDelaySubscription_INCLUDE_ALL")
