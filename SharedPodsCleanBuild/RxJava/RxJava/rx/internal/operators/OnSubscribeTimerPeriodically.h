//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/internal/operators/OnSubscribeTimerPeriodically.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxInternalOperatorsOnSubscribeTimerPeriodically_INCLUDE_ALL")
#ifdef RxInternalOperatorsOnSubscribeTimerPeriodically_RESTRICT
#define RxInternalOperatorsOnSubscribeTimerPeriodically_INCLUDE_ALL 0
#else
#define RxInternalOperatorsOnSubscribeTimerPeriodically_INCLUDE_ALL 1
#endif
#undef RxInternalOperatorsOnSubscribeTimerPeriodically_RESTRICT

#if !defined (RxInternalOperatorsOnSubscribeTimerPeriodically_) && (RxInternalOperatorsOnSubscribeTimerPeriodically_INCLUDE_ALL || defined(RxInternalOperatorsOnSubscribeTimerPeriodically_INCLUDE))
#define RxInternalOperatorsOnSubscribeTimerPeriodically_

#define RxObservable_RESTRICT 1
#define RxObservable_OnSubscribe_INCLUDE 1
#include "rx/Observable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxScheduler;
@class RxSubscriber;

@interface RxInternalOperatorsOnSubscribeTimerPeriodically : NSObject < RxObservable_OnSubscribe > {
 @public
  jlong initialDelay_;
  jlong period_;
  JavaUtilConcurrentTimeUnit *unit_;
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)initialDelay
                    withLong:(jlong)period
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler;

- (void)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeTimerPeriodically)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeTimerPeriodically, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeTimerPeriodically, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOnSubscribeTimerPeriodically *self, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeTimerPeriodically *new_RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeTimerPeriodically *create_RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeTimerPeriodically)

#endif

#pragma pop_macro("RxInternalOperatorsOnSubscribeTimerPeriodically_INCLUDE_ALL")
