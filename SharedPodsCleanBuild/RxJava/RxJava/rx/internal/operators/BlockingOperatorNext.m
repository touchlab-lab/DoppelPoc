//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/internal/operators/BlockingOperatorNext.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/concurrent/ArrayBlockingQueue.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/atomic/AtomicIntegerFieldUpdater.h"
#include "rx/Notification.h"
#include "rx/Observable.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/exceptions/Exceptions.h"
#include "rx/internal/operators/BlockingOperatorNext.h"

@class RxInternalOperatorsBlockingOperatorNext_NextObserver;

@interface RxInternalOperatorsBlockingOperatorNext ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorNext_init(RxInternalOperatorsBlockingOperatorNext *self);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNext *new_RxInternalOperatorsBlockingOperatorNext_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNext *create_RxInternalOperatorsBlockingOperatorNext_init();

@interface RxInternalOperatorsBlockingOperatorNext_NextIterator () {
 @public
  RxInternalOperatorsBlockingOperatorNext_NextObserver *observer_;
  RxObservable *items_;
  id next_;
  jboolean hasNext_;
  jboolean isNextConsumed_;
  NSException *error_;
  jboolean started_;
}

- (instancetype)initWithRxObservable:(RxObservable *)items
withRxInternalOperatorsBlockingOperatorNext_NextObserver:(RxInternalOperatorsBlockingOperatorNext_NextObserver *)observer;

- (jboolean)moveToNext;

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNext_NextIterator, observer_, RxInternalOperatorsBlockingOperatorNext_NextObserver *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNext_NextIterator, items_, RxObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNext_NextIterator, next_, id)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNext_NextIterator, error_, NSException *)

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(RxInternalOperatorsBlockingOperatorNext_NextIterator *self, RxObservable *items, RxInternalOperatorsBlockingOperatorNext_NextObserver *observer);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNext_NextIterator *new_RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(RxObservable *items, RxInternalOperatorsBlockingOperatorNext_NextObserver *observer) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNext_NextIterator *create_RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(RxObservable *items, RxInternalOperatorsBlockingOperatorNext_NextObserver *observer);

__attribute__((unused)) static jboolean RxInternalOperatorsBlockingOperatorNext_NextIterator_moveToNext(RxInternalOperatorsBlockingOperatorNext_NextIterator *self);

@interface RxInternalOperatorsBlockingOperatorNext_NextObserver : RxSubscriber {
 @public
  id<JavaUtilConcurrentBlockingQueue> buf_;
  volatile_jint waiting_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;
#ifdef J2OBJC_RENAME_ALIASES
#define onErrorWithJavaLangThrowable onErrorWithNSException
#endif // J2OBJC_RENAME_ALIASES

- (void)onNextWithId:(RxNotification *)args;

- (RxNotification *)takeNext;

- (void)setWaitingWithInt:(jint)value;

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsBlockingOperatorNext_NextObserver)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNext_NextObserver, buf_, id<JavaUtilConcurrentBlockingQueue>)

inline JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxInternalOperatorsBlockingOperatorNext_NextObserver_get_WAITING_UPDATER();
static JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxInternalOperatorsBlockingOperatorNext_NextObserver_WAITING_UPDATER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsBlockingOperatorNext_NextObserver, WAITING_UPDATER, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *)

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorNext_NextObserver_init(RxInternalOperatorsBlockingOperatorNext_NextObserver *self);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNext_NextObserver *new_RxInternalOperatorsBlockingOperatorNext_NextObserver_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNext_NextObserver *create_RxInternalOperatorsBlockingOperatorNext_NextObserver_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorNext_NextObserver)

@interface RxInternalOperatorsBlockingOperatorNext_$1 : NSObject < JavaLangIterable > {
 @public
  RxObservable *val$items_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithRxObservable:(RxObservable *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorNext_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNext_$1, val$items_, RxObservable *)

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorNext_$1_initWithRxObservable_(RxInternalOperatorsBlockingOperatorNext_$1 *self, RxObservable *capture$0);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNext_$1 *new_RxInternalOperatorsBlockingOperatorNext_$1_initWithRxObservable_(RxObservable *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNext_$1 *create_RxInternalOperatorsBlockingOperatorNext_$1_initWithRxObservable_(RxObservable *capture$0);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorNext_$1)

@implementation RxInternalOperatorsBlockingOperatorNext

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsBlockingOperatorNext_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaLangIterable>)nextWithRxObservable:(RxObservable *)items {
  return RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(items);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BlockingOperatorNext", NULL, 0x2, NULL, NULL },
    { "nextWithRxObservable:", "next", "Ljava.lang.Iterable;", 0x9, NULL, "<T:Ljava/lang/Object;>(Lrx/Observable<+TT;>;)Ljava/lang/Iterable<TT;>;" },
  };
  static const char *inner_classes[] = {"Lrx.internal.operators.BlockingOperatorNext$NextIterator;", "Lrx.internal.operators.BlockingOperatorNext$NextObserver;"};
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorNext = { 2, "BlockingOperatorNext", "rx.internal.operators", NULL, 0x11, 2, methods, 0, NULL, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_RxInternalOperatorsBlockingOperatorNext;
}

@end

void RxInternalOperatorsBlockingOperatorNext_init(RxInternalOperatorsBlockingOperatorNext *self) {
  NSObject_init(self);
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxInternalOperatorsBlockingOperatorNext *new_RxInternalOperatorsBlockingOperatorNext_init() {
  RxInternalOperatorsBlockingOperatorNext *self = [RxInternalOperatorsBlockingOperatorNext alloc];
  RxInternalOperatorsBlockingOperatorNext_init(self);
  return self;
}

RxInternalOperatorsBlockingOperatorNext *create_RxInternalOperatorsBlockingOperatorNext_init() {
  return new_RxInternalOperatorsBlockingOperatorNext_init();
}

id<JavaLangIterable> RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(RxObservable *items) {
  RxInternalOperatorsBlockingOperatorNext_initialize();
  return new_RxInternalOperatorsBlockingOperatorNext_$1_initWithRxObservable_(items);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsBlockingOperatorNext)

@implementation RxInternalOperatorsBlockingOperatorNext_NextIterator

- (instancetype)initWithRxObservable:(RxObservable *)items
withRxInternalOperatorsBlockingOperatorNext_NextObserver:(RxInternalOperatorsBlockingOperatorNext_NextObserver *)observer {
  RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(self, items, observer);
  return self;
}

- (jboolean)hasNext {
  if (error_ != nil) {
    @throw RxExceptionsExceptions_propagateWithNSException_(error_);
  }
  if (hasNext_ == false) {
    return false;
  }
  if (isNextConsumed_ == false) {
    return true;
  }
  return RxInternalOperatorsBlockingOperatorNext_NextIterator_moveToNext(self);
}

- (jboolean)moveToNext {
  return RxInternalOperatorsBlockingOperatorNext_NextIterator_moveToNext(self);
}

- (id)next {
  if (error_ != nil) {
    @throw RxExceptionsExceptions_propagateWithNSException_(error_);
  }
  if ([self hasNext]) {
    isNextConsumed_ = true;
    return next_;
  }
  else {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(@"No more elements");
  }
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Read only iterator");
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxObservable:withRxInternalOperatorsBlockingOperatorNext_NextObserver:", "NextIterator", NULL, 0x2, NULL, "(Lrx/Observable<+TT;>;Lrx/internal/operators/BlockingOperatorNext$NextObserver<TT;>;)V" },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "moveToNext", NULL, "Z", 0x2, NULL, NULL },
    { "next", NULL, "TT;", 0x1, NULL, "()TT;" },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "observer_", NULL, 0x12, "Lrx.internal.operators.BlockingOperatorNext$NextObserver;", NULL, "Lrx/internal/operators/BlockingOperatorNext$NextObserver<TT;>;", .constantValue.asLong = 0 },
    { "items_", NULL, 0x12, "Lrx.Observable;", NULL, "Lrx/Observable<+TT;>;", .constantValue.asLong = 0 },
    { "next_", NULL, 0x2, "TT;", NULL, "TT;", .constantValue.asLong = 0 },
    { "hasNext_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isNextConsumed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "error_", NULL, 0x2, "Ljava.lang.Throwable;", NULL, NULL, .constantValue.asLong = 0 },
    { "started_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorNext_NextIterator = { 2, "NextIterator", "rx.internal.operators", "BlockingOperatorNext", 0x18, 5, methods, 7, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  return &_RxInternalOperatorsBlockingOperatorNext_NextIterator;
}

@end

void RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(RxInternalOperatorsBlockingOperatorNext_NextIterator *self, RxObservable *items, RxInternalOperatorsBlockingOperatorNext_NextObserver *observer) {
  NSObject_init(self);
  self->hasNext_ = true;
  self->isNextConsumed_ = true;
  self->error_ = nil;
  self->started_ = false;
  self->items_ = items;
  self->observer_ = observer;
}

RxInternalOperatorsBlockingOperatorNext_NextIterator *new_RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(RxObservable *items, RxInternalOperatorsBlockingOperatorNext_NextObserver *observer) {
  RxInternalOperatorsBlockingOperatorNext_NextIterator *self = [RxInternalOperatorsBlockingOperatorNext_NextIterator alloc];
  RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(self, items, observer);
  return self;
}

RxInternalOperatorsBlockingOperatorNext_NextIterator *create_RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(RxObservable *items, RxInternalOperatorsBlockingOperatorNext_NextObserver *observer) {
  return new_RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(items, observer);
}

jboolean RxInternalOperatorsBlockingOperatorNext_NextIterator_moveToNext(RxInternalOperatorsBlockingOperatorNext_NextIterator *self) {
  @try {
    if (!self->started_) {
      self->started_ = true;
      [((RxInternalOperatorsBlockingOperatorNext_NextObserver *) nil_chk(self->observer_)) setWaitingWithInt:1];
      (void) [((RxObservable *) nil_chk([((RxObservable *) nil_chk(self->items_)) materialize])) subscribeWithRxSubscriber:self->observer_];
    }
    RxNotification *nextNotification = [((RxInternalOperatorsBlockingOperatorNext_NextObserver *) nil_chk(self->observer_)) takeNext];
    if ([((RxNotification *) nil_chk(nextNotification)) isOnNext]) {
      self->isNextConsumed_ = false;
      self->next_ = [nextNotification getValue];
      return true;
    }
    self->hasNext_ = false;
    if ([nextNotification isOnCompleted]) {
      return false;
    }
    if ([nextNotification isOnError]) {
      self->error_ = [nextNotification getThrowable];
      @throw RxExceptionsExceptions_propagateWithNSException_(self->error_);
    }
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Should not reach here");
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    self->error_ = e;
    @throw RxExceptionsExceptions_propagateWithNSException_(self->error_);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsBlockingOperatorNext_NextIterator)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsBlockingOperatorNext_NextObserver)

@implementation RxInternalOperatorsBlockingOperatorNext_NextObserver

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(RxNotification *)args {
  if ([((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalOperatorsBlockingOperatorNext_NextObserver_WAITING_UPDATER)) getAndSetWithId:self withInt:0] == 1 || ![((RxNotification *) nil_chk(args)) isOnNext]) {
    RxNotification *toOffer = args;
    while (![((id<JavaUtilConcurrentBlockingQueue>) nil_chk(buf_)) offerWithId:toOffer]) {
      RxNotification *concurrentItem = [buf_ poll];
      if (concurrentItem != nil && ![concurrentItem isOnNext]) {
        toOffer = concurrentItem;
      }
    }
  }
}

- (RxNotification *)takeNext {
  [self setWaitingWithInt:1];
  return [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(buf_)) take];
}

- (void)setWaitingWithInt:(jint)value {
  JreAssignVolatileInt(&waiting_, value);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsBlockingOperatorNext_NextObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [RxInternalOperatorsBlockingOperatorNext_NextObserver class]) {
    RxInternalOperatorsBlockingOperatorNext_NextObserver_WAITING_UPDATER = JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_newUpdaterWithIOSClass_withNSString_(RxInternalOperatorsBlockingOperatorNext_NextObserver_class_(), @"waiting");
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsBlockingOperatorNext_NextObserver)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onCompleted", NULL, "V", 0x1, NULL, NULL },
    { "onErrorWithNSException:", "onError", "V", 0x1, NULL, NULL },
    { "onNextWithId:", "onNext", "V", 0x1, NULL, "(Lrx/Notification<+TT;>;)V" },
    { "takeNext", NULL, "Lrx.Notification;", 0x1, "Ljava.lang.InterruptedException;", "()Lrx/Notification<+TT;>;" },
    { "setWaitingWithInt:", "setWaiting", "V", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "buf_", NULL, 0x12, "Ljava.util.concurrent.BlockingQueue;", NULL, "Ljava/util/concurrent/BlockingQueue<Lrx/Notification<+TT;>;>;", .constantValue.asLong = 0 },
    { "waiting_", NULL, 0x40, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "WAITING_UPDATER", "WAITING_UPDATER", 0x18, "Ljava.util.concurrent.atomic.AtomicIntegerFieldUpdater;", &RxInternalOperatorsBlockingOperatorNext_NextObserver_WAITING_UPDATER, "Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater<Lrx/internal/operators/BlockingOperatorNext$NextObserver;>;", .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lrx.Notification;"};
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorNext_NextObserver = { 2, "NextObserver", "rx.internal.operators", "BlockingOperatorNext", 0xa, 6, methods, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "<T:Ljava/lang/Object;>Lrx/Subscriber<Lrx/Notification<+TT;>;>;" };
  return &_RxInternalOperatorsBlockingOperatorNext_NextObserver;
}

@end

void RxInternalOperatorsBlockingOperatorNext_NextObserver_init(RxInternalOperatorsBlockingOperatorNext_NextObserver *self) {
  RxSubscriber_init(self);
  self->buf_ = new_JavaUtilConcurrentArrayBlockingQueue_initWithInt_(1);
}

RxInternalOperatorsBlockingOperatorNext_NextObserver *new_RxInternalOperatorsBlockingOperatorNext_NextObserver_init() {
  RxInternalOperatorsBlockingOperatorNext_NextObserver *self = [RxInternalOperatorsBlockingOperatorNext_NextObserver alloc];
  RxInternalOperatorsBlockingOperatorNext_NextObserver_init(self);
  return self;
}

RxInternalOperatorsBlockingOperatorNext_NextObserver *create_RxInternalOperatorsBlockingOperatorNext_NextObserver_init() {
  return new_RxInternalOperatorsBlockingOperatorNext_NextObserver_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsBlockingOperatorNext_NextObserver)

@implementation RxInternalOperatorsBlockingOperatorNext_$1

- (id<JavaUtilIterator>)iterator {
  RxInternalOperatorsBlockingOperatorNext_NextObserver *nextObserver = new_RxInternalOperatorsBlockingOperatorNext_NextObserver_init();
  return new_RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(val$items_, nextObserver);
}

- (instancetype)initWithRxObservable:(RxObservable *)capture$0 {
  RxInternalOperatorsBlockingOperatorNext_$1_initWithRxObservable_(self, capture$0);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, "()Ljava/util/Iterator<TT;>;" },
    { "initWithRxObservable:", "", NULL, 0x0, NULL, "(Lrx/Observable<+TT;>;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$items_", NULL, 0x1012, "Lrx.Observable;", NULL, "Lrx/Observable<+TT;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxInternalOperatorsBlockingOperatorNext", "nextWithRxObservable:" };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorNext_$1 = { 2, "", "rx.internal.operators", "BlockingOperatorNext", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/lang/Iterable<TT;>;" };
  return &_RxInternalOperatorsBlockingOperatorNext_$1;
}

@end

void RxInternalOperatorsBlockingOperatorNext_$1_initWithRxObservable_(RxInternalOperatorsBlockingOperatorNext_$1 *self, RxObservable *capture$0) {
  self->val$items_ = capture$0;
  NSObject_init(self);
}

RxInternalOperatorsBlockingOperatorNext_$1 *new_RxInternalOperatorsBlockingOperatorNext_$1_initWithRxObservable_(RxObservable *capture$0) {
  RxInternalOperatorsBlockingOperatorNext_$1 *self = [RxInternalOperatorsBlockingOperatorNext_$1 alloc];
  RxInternalOperatorsBlockingOperatorNext_$1_initWithRxObservable_(self, capture$0);
  return self;
}

RxInternalOperatorsBlockingOperatorNext_$1 *create_RxInternalOperatorsBlockingOperatorNext_$1_initWithRxObservable_(RxObservable *capture$0) {
  return new_RxInternalOperatorsBlockingOperatorNext_$1_initWithRxObservable_(capture$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsBlockingOperatorNext_$1)
