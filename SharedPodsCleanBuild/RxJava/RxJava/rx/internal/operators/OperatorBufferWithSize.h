//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/operators/OperatorBufferWithSize.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxInternalOperatorsOperatorBufferWithSize_INCLUDE_ALL")
#ifdef RxInternalOperatorsOperatorBufferWithSize_RESTRICT
#define RxInternalOperatorsOperatorBufferWithSize_INCLUDE_ALL 0
#else
#define RxInternalOperatorsOperatorBufferWithSize_INCLUDE_ALL 1
#endif
#undef RxInternalOperatorsOperatorBufferWithSize_RESTRICT

#if !defined (RxInternalOperatorsOperatorBufferWithSize_) && (RxInternalOperatorsOperatorBufferWithSize_INCLUDE_ALL || defined(RxInternalOperatorsOperatorBufferWithSize_INCLUDE))
#define RxInternalOperatorsOperatorBufferWithSize_

#define RxObservable_RESTRICT 1
#define RxObservable_Operator_INCLUDE 1
#include "rx/Observable.h"

@class RxSubscriber;

@interface RxInternalOperatorsOperatorBufferWithSize : NSObject < RxObservable_Operator > {
 @public
  jint count_;
  jint skip_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)count
                    withInt:(jint)skip;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithSize)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithSize_initWithInt_withInt_(RxInternalOperatorsOperatorBufferWithSize *self, jint count, jint skip);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize *new_RxInternalOperatorsOperatorBufferWithSize_initWithInt_withInt_(jint count, jint skip) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize *create_RxInternalOperatorsOperatorBufferWithSize_initWithInt_withInt_(jint count, jint skip);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithSize)

#endif

#pragma pop_macro("RxInternalOperatorsOperatorBufferWithSize_INCLUDE_ALL")
