//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/internal/operators/OperatorSkipTimed.java
//

#include "J2ObjC_source.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "rx/Scheduler.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/functions/Action0.h"
#include "rx/internal/operators/OperatorSkipTimed.h"

@interface RxInternalOperatorsOperatorSkipTimed_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$gate_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipTimed_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSkipTimed_$1, val$gate_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipTimed_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSkipTimed_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSkipTimed_$1 *new_RxInternalOperatorsOperatorSkipTimed_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSkipTimed_$1 *create_RxInternalOperatorsOperatorSkipTimed_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSkipTimed_$1)

@interface RxInternalOperatorsOperatorSkipTimed_$2 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$gate_;
  RxSubscriber *val$child_;
}

- (void)onNextWithId:(id)t;

- (void)onErrorWithNSException:(NSException *)e;
#ifdef J2OBJC_RENAME_ALIASES
#define onErrorWithJavaLangThrowable onErrorWithNSException
#endif // J2OBJC_RENAME_ALIASES

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                             withRxSubscriber:(RxSubscriber *)capture$1
                                             withRxSubscriber:(RxSubscriber *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipTimed_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSkipTimed_$2, val$gate_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSkipTimed_$2, val$child_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipTimed_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorSkipTimed_$2 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1, RxSubscriber *arg$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSkipTimed_$2 *new_RxInternalOperatorsOperatorSkipTimed_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1, RxSubscriber *arg$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSkipTimed_$2 *create_RxInternalOperatorsOperatorSkipTimed_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1, RxSubscriber *arg$0);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSkipTimed_$2)

@implementation RxInternalOperatorsOperatorSkipTimed

- (instancetype)initWithLong:(jlong)time
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler {
  RxInternalOperatorsOperatorSkipTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(self, time, unit, scheduler);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:worker];
  JavaUtilConcurrentAtomicAtomicBoolean *gate = new_JavaUtilConcurrentAtomicAtomicBoolean_init();
  (void) [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:new_RxInternalOperatorsOperatorSkipTimed_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(gate) withLong:time_ withJavaUtilConcurrentTimeUnit:unit_];
  return new_RxInternalOperatorsOperatorSkipTimed_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_withRxSubscriber_(gate, child, child);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withJavaUtilConcurrentTimeUnit:withRxScheduler:", "OperatorSkipTimed", NULL, 0x1, NULL, NULL },
    { "callWithId:", "call", "Lrx.Subscriber;", 0x1, NULL, "(Lrx/Subscriber<-TT;>;)Lrx/Subscriber<-TT;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "time_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "unit_", NULL, 0x10, "Ljava.util.concurrent.TimeUnit;", NULL, NULL, .constantValue.asLong = 0 },
    { "scheduler_", NULL, 0x10, "Lrx.Scheduler;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipTimed = { 2, "OperatorSkipTimed", "rx.internal.operators", NULL, 0x11, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<TT;TT;>;" };
  return &_RxInternalOperatorsOperatorSkipTimed;
}

@end

void RxInternalOperatorsOperatorSkipTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOperatorSkipTimed *self, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  NSObject_init(self);
  self->time_ = time;
  self->unit_ = unit;
  self->scheduler_ = scheduler;
}

RxInternalOperatorsOperatorSkipTimed *new_RxInternalOperatorsOperatorSkipTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  RxInternalOperatorsOperatorSkipTimed *self = [RxInternalOperatorsOperatorSkipTimed alloc];
  RxInternalOperatorsOperatorSkipTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(self, time, unit, scheduler);
  return self;
}

RxInternalOperatorsOperatorSkipTimed *create_RxInternalOperatorsOperatorSkipTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  return new_RxInternalOperatorsOperatorSkipTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(time, unit, scheduler);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSkipTimed)

@implementation RxInternalOperatorsOperatorSkipTimed_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$gate_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorSkipTimed_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", NULL, "V", 0x1, NULL, NULL },
    { "initWithJavaUtilConcurrentAtomicAtomicBoolean:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$gate_", NULL, 0x1012, "Ljava.util.concurrent.atomic.AtomicBoolean;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxInternalOperatorsOperatorSkipTimed", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipTimed_$1 = { 2, "", "rx.internal.operators", "OperatorSkipTimed", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_RxInternalOperatorsOperatorSkipTimed_$1;
}

@end

void RxInternalOperatorsOperatorSkipTimed_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSkipTimed_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  self->val$gate_ = capture$0;
  NSObject_init(self);
}

RxInternalOperatorsOperatorSkipTimed_$1 *new_RxInternalOperatorsOperatorSkipTimed_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  RxInternalOperatorsOperatorSkipTimed_$1 *self = [RxInternalOperatorsOperatorSkipTimed_$1 alloc];
  RxInternalOperatorsOperatorSkipTimed_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

RxInternalOperatorsOperatorSkipTimed_$1 *create_RxInternalOperatorsOperatorSkipTimed_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  return new_RxInternalOperatorsOperatorSkipTimed_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(capture$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSkipTimed_$1)

@implementation RxInternalOperatorsOperatorSkipTimed_$2

- (void)onNextWithId:(id)t {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$gate_)) get]) {
    [((RxSubscriber *) nil_chk(val$child_)) onNextWithId:t];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  @try {
    [((RxSubscriber *) nil_chk(val$child_)) onErrorWithNSException:e];
  }
  @finally {
    [self unsubscribe];
  }
}

- (void)onCompleted {
  @try {
    [((RxSubscriber *) nil_chk(val$child_)) onCompleted];
  }
  @finally {
    [self unsubscribe];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                             withRxSubscriber:(RxSubscriber *)capture$1
                                             withRxSubscriber:(RxSubscriber *)arg$0 {
  RxInternalOperatorsOperatorSkipTimed_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_withRxSubscriber_(self, capture$0, capture$1, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onNextWithId:", "onNext", "V", 0x1, NULL, "(TT;)V" },
    { "onErrorWithNSException:", "onError", "V", 0x1, NULL, NULL },
    { "onCompleted", NULL, "V", 0x1, NULL, NULL },
    { "initWithJavaUtilConcurrentAtomicAtomicBoolean:withRxSubscriber:withRxSubscriber:", "", NULL, 0x0, NULL, "(Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/Subscriber<-TT;>;Lrx/Subscriber<*>;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$gate_", NULL, 0x1012, "Ljava.util.concurrent.atomic.AtomicBoolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$child_", NULL, 0x1012, "Lrx.Subscriber;", NULL, "Lrx/Subscriber<-TT;>;", .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxInternalOperatorsOperatorSkipTimed", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipTimed_$2 = { 2, "", "rx.internal.operators", "OperatorSkipTimed", 0x8008, 4, methods, 2, fields, 1, superclass_type_args, 0, NULL, &enclosing_method, "Lrx/Subscriber<TT;>;" };
  return &_RxInternalOperatorsOperatorSkipTimed_$2;
}

@end

void RxInternalOperatorsOperatorSkipTimed_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorSkipTimed_$2 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1, RxSubscriber *arg$0) {
  self->val$gate_ = capture$0;
  self->val$child_ = capture$1;
  RxSubscriber_initWithRxSubscriber_(self, arg$0);
}

RxInternalOperatorsOperatorSkipTimed_$2 *new_RxInternalOperatorsOperatorSkipTimed_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1, RxSubscriber *arg$0) {
  RxInternalOperatorsOperatorSkipTimed_$2 *self = [RxInternalOperatorsOperatorSkipTimed_$2 alloc];
  RxInternalOperatorsOperatorSkipTimed_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_withRxSubscriber_(self, capture$0, capture$1, arg$0);
  return self;
}

RxInternalOperatorsOperatorSkipTimed_$2 *create_RxInternalOperatorsOperatorSkipTimed_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1, RxSubscriber *arg$0) {
  return new_RxInternalOperatorsOperatorSkipTimed_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_withRxSubscriber_(capture$0, capture$1, arg$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSkipTimed_$2)
