//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/observables/BlockingObservable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxObservablesBlockingObservable_INCLUDE_ALL")
#ifdef RxObservablesBlockingObservable_RESTRICT
#define RxObservablesBlockingObservable_INCLUDE_ALL 0
#else
#define RxObservablesBlockingObservable_INCLUDE_ALL 1
#endif
#undef RxObservablesBlockingObservable_RESTRICT

#if !defined (RxObservablesBlockingObservable_) && (RxObservablesBlockingObservable_INCLUDE_ALL || defined(RxObservablesBlockingObservable_INCLUDE))
#define RxObservablesBlockingObservable_

@class RxObservable;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilIterator;
@protocol RxFunctionsAction1;
@protocol RxFunctionsFunc1;

@interface RxObservablesBlockingObservable : NSObject

#pragma mark Public

- (id)first;

- (id)firstWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

- (id)firstOrDefaultWithId:(id)defaultValue;

- (id)firstOrDefaultWithId:(id)defaultValue
      withRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

- (void)forEachWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext;

+ (RxObservablesBlockingObservable *)fromWithRxObservable:(RxObservable *)o;

- (id<JavaUtilIterator>)getIterator;

- (id)last;

- (id)lastWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

- (id)lastOrDefaultWithId:(id)defaultValue;

- (id)lastOrDefaultWithId:(id)defaultValue
     withRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

- (id<JavaLangIterable>)latest;

- (id<JavaLangIterable>)mostRecentWithId:(id)initialValue;

- (id<JavaLangIterable>)next;

- (id)single;

- (id)singleWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

- (id)singleOrDefaultWithId:(id)defaultValue;

- (id)singleOrDefaultWithId:(id)defaultValue
       withRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

- (id<JavaUtilConcurrentFuture>)toFuture;

- (id<JavaLangIterable>)toIterable;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservable)

FOUNDATION_EXPORT RxObservablesBlockingObservable *RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable *o);

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesBlockingObservable)

#endif

#pragma pop_macro("RxObservablesBlockingObservable_INCLUDE_ALL")
