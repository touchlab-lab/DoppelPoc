//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/Scheduler.java
//

#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/concurrent/TimeUnit.h"
#include "rx/Scheduler.h"
#include "rx/Subscription.h"
#include "rx/functions/Action0.h"
#include "rx/subscriptions/MultipleAssignmentSubscription.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface RxScheduler_Worker_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxScheduler_Worker *this$0_;
  jlong count_;
  RxSubscriptionsMultipleAssignmentSubscription *val$mas_;
  id<RxFunctionsAction0> val$action_;
  jlong val$startInNanos_;
  jlong val$periodInNanos_;
}

- (void)call;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)outer$
withRxSubscriptionsMultipleAssignmentSubscription:(RxSubscriptionsMultipleAssignmentSubscription *)capture$0
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1
                                  withLong:(jlong)capture$2
                                  withLong:(jlong)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxScheduler_Worker_$1)

J2OBJC_FIELD_SETTER(RxScheduler_Worker_$1, this$0_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxScheduler_Worker_$1, val$mas_, RxSubscriptionsMultipleAssignmentSubscription *)
J2OBJC_FIELD_SETTER(RxScheduler_Worker_$1, val$action_, id<RxFunctionsAction0>)

__attribute__((unused)) static void RxScheduler_Worker_$1_initWithRxScheduler_Worker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_withLong_(RxScheduler_Worker_$1 *self, RxScheduler_Worker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1, jlong capture$2, jlong capture$3);

__attribute__((unused)) static RxScheduler_Worker_$1 *new_RxScheduler_Worker_$1_initWithRxScheduler_Worker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_withLong_(RxScheduler_Worker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1, jlong capture$2, jlong capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxScheduler_Worker_$1 *create_RxScheduler_Worker_$1_initWithRxScheduler_Worker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_withLong_(RxScheduler_Worker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1, jlong capture$2, jlong capture$3);

J2OBJC_TYPE_LITERAL_HEADER(RxScheduler_Worker_$1)

@implementation RxScheduler

- (RxScheduler_Worker *)createWorker {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)now {
  return JavaLangSystem_currentTimeMillis();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createWorker", NULL, "Lrx.Scheduler$Worker;", 0x401, NULL, NULL },
    { "now", NULL, "J", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lrx.Scheduler$Worker;"};
  static const J2ObjcClassInfo _RxScheduler = { 2, "Scheduler", "rx", NULL, 0x401, 3, methods, 0, NULL, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_RxScheduler;
}

@end

void RxScheduler_init(RxScheduler *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxScheduler)

@implementation RxScheduler_Worker

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RxSubscription>)schedulePeriodicallyWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                                        withLong:(jlong)initialDelay
                                                        withLong:(jlong)period
                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  jlong periodInNanos = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:period];
  jlong startInNanos = [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS))) toNanosWithLong:[self now]] + [unit toNanosWithLong:initialDelay];
  RxSubscriptionsMultipleAssignmentSubscription *mas = new_RxSubscriptionsMultipleAssignmentSubscription_init();
  id<RxFunctionsAction0> recursiveAction = new_RxScheduler_Worker_$1_initWithRxScheduler_Worker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_withLong_(self, mas, action, startInNanos, periodInNanos);
  [mas setWithRxSubscription:[self scheduleWithRxFunctionsAction0:recursiveAction withLong:initialDelay withJavaUtilConcurrentTimeUnit:unit]];
  return mas;
}

- (jlong)now {
  return JavaLangSystem_currentTimeMillis();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxScheduler_Worker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "scheduleWithRxFunctionsAction0:", "schedule", "Lrx.Subscription;", 0x401, NULL, NULL },
    { "scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:", "schedule", "Lrx.Subscription;", 0x401, NULL, NULL },
    { "schedulePeriodicallyWithRxFunctionsAction0:withLong:withLong:withJavaUtilConcurrentTimeUnit:", "schedulePeriodically", "Lrx.Subscription;", 0x1, NULL, NULL },
    { "now", NULL, "J", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _RxScheduler_Worker = { 2, "Worker", "rx", "Scheduler", 0x409, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxScheduler_Worker;
}

@end

void RxScheduler_Worker_init(RxScheduler_Worker *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxScheduler_Worker)

@implementation RxScheduler_Worker_$1

- (void)call {
  if (![((RxSubscriptionsMultipleAssignmentSubscription *) nil_chk(val$mas_)) isUnsubscribed]) {
    [((id<RxFunctionsAction0>) nil_chk(val$action_)) call];
    jlong nextTick = val$startInNanos_ + (++count_ * val$periodInNanos_);
    [val$mas_ setWithRxSubscription:[this$0_ scheduleWithRxFunctionsAction0:self withLong:nextTick - [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS))) toNanosWithLong:[this$0_ now]] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS)]];
  }
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)outer$
withRxSubscriptionsMultipleAssignmentSubscription:(RxSubscriptionsMultipleAssignmentSubscription *)capture$0
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1
                                  withLong:(jlong)capture$2
                                  withLong:(jlong)capture$3 {
  RxScheduler_Worker_$1_initWithRxScheduler_Worker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_withLong_(self, outer$, capture$0, capture$1, capture$2, capture$3);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", NULL, "V", 0x1, NULL, NULL },
    { "initWithRxScheduler_Worker:withRxSubscriptionsMultipleAssignmentSubscription:withRxFunctionsAction0:withLong:withLong:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrx.Scheduler$Worker;", NULL, NULL, .constantValue.asLong = 0 },
    { "count_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "val$mas_", NULL, 0x1012, "Lrx.subscriptions.MultipleAssignmentSubscription;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$action_", NULL, 0x1012, "Lrx.functions.Action0;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$startInNanos_", NULL, 0x1012, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "val$periodInNanos_", NULL, 0x1012, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxScheduler_Worker", "schedulePeriodicallyWithRxFunctionsAction0:withLong:withLong:withJavaUtilConcurrentTimeUnit:" };
  static const J2ObjcClassInfo _RxScheduler_Worker_$1 = { 2, "", "rx", "Scheduler$Worker", 0x8008, 2, methods, 6, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_RxScheduler_Worker_$1;
}

@end

void RxScheduler_Worker_$1_initWithRxScheduler_Worker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_withLong_(RxScheduler_Worker_$1 *self, RxScheduler_Worker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1, jlong capture$2, jlong capture$3) {
  self->this$0_ = outer$;
  self->val$mas_ = capture$0;
  self->val$action_ = capture$1;
  self->val$startInNanos_ = capture$2;
  self->val$periodInNanos_ = capture$3;
  NSObject_init(self);
  self->count_ = 0;
}

RxScheduler_Worker_$1 *new_RxScheduler_Worker_$1_initWithRxScheduler_Worker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_withLong_(RxScheduler_Worker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1, jlong capture$2, jlong capture$3) {
  RxScheduler_Worker_$1 *self = [RxScheduler_Worker_$1 alloc];
  RxScheduler_Worker_$1_initWithRxScheduler_Worker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_withLong_(self, outer$, capture$0, capture$1, capture$2, capture$3);
  return self;
}

RxScheduler_Worker_$1 *create_RxScheduler_Worker_$1_initWithRxScheduler_Worker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_withLong_(RxScheduler_Worker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1, jlong capture$2, jlong capture$3) {
  return new_RxScheduler_Worker_$1_initWithRxScheduler_Worker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_withLong_(outer$, capture$0, capture$1, capture$2, capture$3);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxScheduler_Worker_$1)
