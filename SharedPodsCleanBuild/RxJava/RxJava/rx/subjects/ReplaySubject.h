//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/subjects/ReplaySubject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxSubjectsReplaySubject_INCLUDE_ALL")
#ifdef RxSubjectsReplaySubject_RESTRICT
#define RxSubjectsReplaySubject_INCLUDE_ALL 0
#else
#define RxSubjectsReplaySubject_INCLUDE_ALL 1
#endif
#undef RxSubjectsReplaySubject_RESTRICT
#ifdef RxSubjectsReplaySubject_EmptyEvictionPolicy_INCLUDE
#define RxSubjectsReplaySubject_EvictionPolicy_INCLUDE 1
#endif
#ifdef RxSubjectsReplaySubject_PairEvictionPolicy_INCLUDE
#define RxSubjectsReplaySubject_EvictionPolicy_INCLUDE 1
#endif
#ifdef RxSubjectsReplaySubject_TimeEvictionPolicy_INCLUDE
#define RxSubjectsReplaySubject_EvictionPolicy_INCLUDE 1
#endif
#ifdef RxSubjectsReplaySubject_SizeEvictionPolicy_INCLUDE
#define RxSubjectsReplaySubject_EvictionPolicy_INCLUDE 1
#endif
#ifdef RxSubjectsReplaySubject_BoundedState_INCLUDE
#define RxSubjectsReplaySubject_ReplayState_INCLUDE 1
#endif
#ifdef RxSubjectsReplaySubject_UnboundedReplayState_INCLUDE
#define RxSubjectsReplaySubject_ReplayState_INCLUDE 1
#endif

#if !defined (RxSubjectsReplaySubject_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_INCLUDE))
#define RxSubjectsReplaySubject_

#define RxSubjectsSubject_RESTRICT 1
#define RxSubjectsSubject_INCLUDE 1
#include "rx/subjects/Subject.h"

@class JavaUtilConcurrentTimeUnit;
@class RxScheduler;
@class RxSubjectsReplaySubject_BoundedState;
@class RxSubjectsSubjectSubscriptionManager;
@protocol RxFunctionsAction1;
@protocol RxObservable_OnSubscribe;
@protocol RxSubjectsReplaySubject_ReplayState;

@interface RxSubjectsReplaySubject : RxSubjectsSubject {
 @public
  id<RxSubjectsReplaySubject_ReplayState> state_;
  RxSubjectsSubjectSubscriptionManager *ssm_;
}

#pragma mark Public

+ (RxSubjectsReplaySubject *)create;

+ (RxSubjectsReplaySubject *)createWithInt:(jint)capacity;

+ (RxSubjectsReplaySubject *)createWithSizeWithInt:(jint)size;

+ (RxSubjectsReplaySubject *)createWithTimeWithLong:(jlong)time
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                    withRxScheduler:(RxScheduler *)scheduler;

+ (RxSubjectsReplaySubject *)createWithTimeAndSizeWithLong:(jlong)time
                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                                   withInt:(jint)size
                                           withRxScheduler:(RxScheduler *)scheduler;

- (jboolean)hasObservers;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;
#ifdef J2OBJC_RENAME_ALIASES
#define onErrorWithJavaLangThrowable onErrorWithNSException
#endif // J2OBJC_RENAME_ALIASES

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe
        withRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)ssm
         withRxSubjectsReplaySubject_ReplayState:(id<RxSubjectsReplaySubject_ReplayState>)state;

+ (RxSubjectsReplaySubject *)createUnbounded;

+ (RxSubjectsReplaySubject *)createWithStateWithRxSubjectsReplaySubject_BoundedState:(RxSubjectsReplaySubject_BoundedState *)state
                                                              withRxFunctionsAction1:(id<RxFunctionsAction1>)onStart;

- (jint)subscriberCount;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject, state_, id<RxSubjectsReplaySubject_ReplayState>)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject, ssm_, RxSubjectsSubjectSubscriptionManager *)

FOUNDATION_EXPORT RxSubjectsReplaySubject *RxSubjectsReplaySubject_create();

FOUNDATION_EXPORT RxSubjectsReplaySubject *RxSubjectsReplaySubject_createWithInt_(jint capacity);

FOUNDATION_EXPORT RxSubjectsReplaySubject *RxSubjectsReplaySubject_createUnbounded();

FOUNDATION_EXPORT RxSubjectsReplaySubject *RxSubjectsReplaySubject_createWithSizeWithInt_(jint size);

FOUNDATION_EXPORT RxSubjectsReplaySubject *RxSubjectsReplaySubject_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

FOUNDATION_EXPORT RxSubjectsReplaySubject *RxSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, jint size, RxScheduler *scheduler);

FOUNDATION_EXPORT RxSubjectsReplaySubject *RxSubjectsReplaySubject_createWithStateWithRxSubjectsReplaySubject_BoundedState_withRxFunctionsAction1_(RxSubjectsReplaySubject_BoundedState *state, id<RxFunctionsAction1> onStart);

FOUNDATION_EXPORT void RxSubjectsReplaySubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSubjectsReplaySubject_ReplayState_(RxSubjectsReplaySubject *self, id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *ssm, id<RxSubjectsReplaySubject_ReplayState> state);

FOUNDATION_EXPORT RxSubjectsReplaySubject *new_RxSubjectsReplaySubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSubjectsReplaySubject_ReplayState_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *ssm, id<RxSubjectsReplaySubject_ReplayState> state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject *create_RxSubjectsReplaySubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSubjectsReplaySubject_ReplayState_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *ssm, id<RxSubjectsReplaySubject_ReplayState> state);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject)

#endif

#if !defined (RxSubjectsReplaySubject_ReplayState_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_ReplayState_INCLUDE))
#define RxSubjectsReplaySubject_ReplayState_

@class RxSubjectsSubjectSubscriptionManager_SubjectObserver;

@protocol RxSubjectsReplaySubject_ReplayState < NSObject, JavaObject >

- (jboolean)terminated;

- (void)replayObserverWithRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)observer;

- (id)replayObserverFromIndexWithId:(id)idx
withRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)observer;

- (id)replayObserverFromIndexTestWithId:(id)idx
withRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)observer
                               withLong:(jlong)now;

- (void)nextWithId:(id)value;

- (void)errorWithNSException:(NSException *)e;
#ifdef J2OBJC_RENAME_ALIASES
#define errorWithJavaLangThrowable errorWithNSException
#endif // J2OBJC_RENAME_ALIASES

- (void)complete;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_ReplayState)

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_ReplayState)

#endif

#if !defined (RxSubjectsReplaySubject_UnboundedReplayState_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_UnboundedReplayState_INCLUDE))
#define RxSubjectsReplaySubject_UnboundedReplayState_

@class JavaLangInteger;
@class JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater;
@class RxSubjectsSubjectSubscriptionManager_SubjectObserver;
@protocol RxObserver;

@interface RxSubjectsReplaySubject_UnboundedReplayState : NSObject < RxSubjectsReplaySubject_ReplayState > {
 @public
  volatile_jint index_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)initialCapacity;

- (void)acceptWithRxObserver:(id<RxObserver>)o
                     withInt:(jint)idx;

- (void)complete;

- (void)errorWithNSException:(NSException *)e;
#ifdef J2OBJC_RENAME_ALIASES
#define errorWithJavaLangThrowable errorWithNSException
#endif // J2OBJC_RENAME_ALIASES

- (void)nextWithId:(id)n;

- (void)replayObserverWithRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)observer;

- (JavaLangInteger *)replayObserverFromIndexWithId:(JavaLangInteger *)idx
withRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)observer;

- (JavaLangInteger *)replayObserverFromIndexTestWithId:(JavaLangInteger *)idx
withRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)observer
                                              withLong:(jlong)now;

- (jboolean)terminated;

@end

J2OBJC_STATIC_INIT(RxSubjectsReplaySubject_UnboundedReplayState)

inline JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxSubjectsReplaySubject_UnboundedReplayState_get_INDEX_UPDATER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxSubjectsReplaySubject_UnboundedReplayState_INDEX_UPDATER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubjectsReplaySubject_UnboundedReplayState, INDEX_UPDATER, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_UnboundedReplayState_initWithInt_(RxSubjectsReplaySubject_UnboundedReplayState *self, jint initialCapacity);

FOUNDATION_EXPORT RxSubjectsReplaySubject_UnboundedReplayState *new_RxSubjectsReplaySubject_UnboundedReplayState_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_UnboundedReplayState *create_RxSubjectsReplaySubject_UnboundedReplayState_initWithInt_(jint initialCapacity);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_UnboundedReplayState)

#endif

#if !defined (RxSubjectsReplaySubject_BoundedState_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_BoundedState_INCLUDE))
#define RxSubjectsReplaySubject_BoundedState_

@class RxInternalOperatorsNotificationLite;
@class RxSubjectsReplaySubject_NodeList;
@class RxSubjectsReplaySubject_NodeList_Node;
@class RxSubjectsSubjectSubscriptionManager_SubjectObserver;
@protocol RxFunctionsFunc1;
@protocol RxObserver;
@protocol RxSubjectsReplaySubject_EvictionPolicy;

@interface RxSubjectsReplaySubject_BoundedState : NSObject < RxSubjectsReplaySubject_ReplayState > {
 @public
  RxSubjectsReplaySubject_NodeList *list_;
  id<RxSubjectsReplaySubject_EvictionPolicy> evictionPolicy_;
  id<RxFunctionsFunc1> enterTransform_;
  id<RxFunctionsFunc1> leaveTransform_;
  RxInternalOperatorsNotificationLite *nl_;
  volatile_jboolean terminated_;
  volatile_id tail_;
}

#pragma mark Public

- (instancetype)initWithRxSubjectsReplaySubject_EvictionPolicy:(id<RxSubjectsReplaySubject_EvictionPolicy>)evictionPolicy
                                          withRxFunctionsFunc1:(id<RxFunctionsFunc1>)enterTransform
                                          withRxFunctionsFunc1:(id<RxFunctionsFunc1>)leaveTransform;

- (void)acceptWithRxObserver:(id<RxObserver>)o
withRxSubjectsReplaySubject_NodeList_Node:(RxSubjectsReplaySubject_NodeList_Node *)node;

- (void)acceptTestWithRxObserver:(id<RxObserver>)o
withRxSubjectsReplaySubject_NodeList_Node:(RxSubjectsReplaySubject_NodeList_Node *)node
                        withLong:(jlong)now;

- (void)complete;

- (void)errorWithNSException:(NSException *)e;
#ifdef J2OBJC_RENAME_ALIASES
#define errorWithJavaLangThrowable errorWithNSException
#endif // J2OBJC_RENAME_ALIASES

- (RxSubjectsReplaySubject_NodeList_Node *)head;

- (void)nextWithId:(id)value;

- (void)replayObserverWithRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)observer;

- (RxSubjectsReplaySubject_NodeList_Node *)replayObserverFromIndexWithId:(RxSubjectsReplaySubject_NodeList_Node *)l
                withRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)observer;

- (RxSubjectsReplaySubject_NodeList_Node *)replayObserverFromIndexTestWithId:(RxSubjectsReplaySubject_NodeList_Node *)l
                    withRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)observer
                                                                    withLong:(jlong)now;

- (RxSubjectsReplaySubject_NodeList_Node *)tail;

- (jboolean)terminated;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_BoundedState)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_BoundedState, list_, RxSubjectsReplaySubject_NodeList *)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_BoundedState, evictionPolicy_, id<RxSubjectsReplaySubject_EvictionPolicy>)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_BoundedState, enterTransform_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_BoundedState, leaveTransform_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_BoundedState, nl_, RxInternalOperatorsNotificationLite *)
J2OBJC_VOLATILE_FIELD_SETTER(RxSubjectsReplaySubject_BoundedState, tail_, RxSubjectsReplaySubject_NodeList_Node *)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_BoundedState_initWithRxSubjectsReplaySubject_EvictionPolicy_withRxFunctionsFunc1_withRxFunctionsFunc1_(RxSubjectsReplaySubject_BoundedState *self, id<RxSubjectsReplaySubject_EvictionPolicy> evictionPolicy, id<RxFunctionsFunc1> enterTransform, id<RxFunctionsFunc1> leaveTransform);

FOUNDATION_EXPORT RxSubjectsReplaySubject_BoundedState *new_RxSubjectsReplaySubject_BoundedState_initWithRxSubjectsReplaySubject_EvictionPolicy_withRxFunctionsFunc1_withRxFunctionsFunc1_(id<RxSubjectsReplaySubject_EvictionPolicy> evictionPolicy, id<RxFunctionsFunc1> enterTransform, id<RxFunctionsFunc1> leaveTransform) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_BoundedState *create_RxSubjectsReplaySubject_BoundedState_initWithRxSubjectsReplaySubject_EvictionPolicy_withRxFunctionsFunc1_withRxFunctionsFunc1_(id<RxSubjectsReplaySubject_EvictionPolicy> evictionPolicy, id<RxFunctionsFunc1> enterTransform, id<RxFunctionsFunc1> leaveTransform);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_BoundedState)

#endif

#if !defined (RxSubjectsReplaySubject_EvictionPolicy_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_EvictionPolicy_INCLUDE))
#define RxSubjectsReplaySubject_EvictionPolicy_

@class RxSubjectsReplaySubject_NodeList;

@protocol RxSubjectsReplaySubject_EvictionPolicy < NSObject, JavaObject >

- (jboolean)testWithId:(id)value
              withLong:(jlong)now;

- (void)evictWithRxSubjectsReplaySubject_NodeList:(RxSubjectsReplaySubject_NodeList *)list;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_EvictionPolicy)

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_EvictionPolicy)

#endif

#if !defined (RxSubjectsReplaySubject_SizeEvictionPolicy_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_SizeEvictionPolicy_INCLUDE))
#define RxSubjectsReplaySubject_SizeEvictionPolicy_

@class RxSubjectsReplaySubject_NodeList;

@interface RxSubjectsReplaySubject_SizeEvictionPolicy : NSObject < RxSubjectsReplaySubject_EvictionPolicy > {
 @public
  jint maxSize_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)maxSize;

- (void)evictWithRxSubjectsReplaySubject_NodeList:(RxSubjectsReplaySubject_NodeList *)t1;

- (jboolean)testWithId:(id)value
              withLong:(jlong)now;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_SizeEvictionPolicy)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_SizeEvictionPolicy_initWithInt_(RxSubjectsReplaySubject_SizeEvictionPolicy *self, jint maxSize);

FOUNDATION_EXPORT RxSubjectsReplaySubject_SizeEvictionPolicy *new_RxSubjectsReplaySubject_SizeEvictionPolicy_initWithInt_(jint maxSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_SizeEvictionPolicy *create_RxSubjectsReplaySubject_SizeEvictionPolicy_initWithInt_(jint maxSize);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_SizeEvictionPolicy)

#endif

#if !defined (RxSubjectsReplaySubject_TimeEvictionPolicy_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_TimeEvictionPolicy_INCLUDE))
#define RxSubjectsReplaySubject_TimeEvictionPolicy_

@class RxScheduler;
@class RxSubjectsReplaySubject_NodeList;

@interface RxSubjectsReplaySubject_TimeEvictionPolicy : NSObject < RxSubjectsReplaySubject_EvictionPolicy > {
 @public
  jlong maxAgeMillis_;
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)maxAgeMillis
             withRxScheduler:(RxScheduler *)scheduler;

- (void)evictWithRxSubjectsReplaySubject_NodeList:(RxSubjectsReplaySubject_NodeList *)t1;

- (jboolean)testWithId:(id)value
              withLong:(jlong)now;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_TimeEvictionPolicy)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_TimeEvictionPolicy, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_TimeEvictionPolicy_initWithLong_withRxScheduler_(RxSubjectsReplaySubject_TimeEvictionPolicy *self, jlong maxAgeMillis, RxScheduler *scheduler);

FOUNDATION_EXPORT RxSubjectsReplaySubject_TimeEvictionPolicy *new_RxSubjectsReplaySubject_TimeEvictionPolicy_initWithLong_withRxScheduler_(jlong maxAgeMillis, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_TimeEvictionPolicy *create_RxSubjectsReplaySubject_TimeEvictionPolicy_initWithLong_withRxScheduler_(jlong maxAgeMillis, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_TimeEvictionPolicy)

#endif

#if !defined (RxSubjectsReplaySubject_PairEvictionPolicy_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_PairEvictionPolicy_INCLUDE))
#define RxSubjectsReplaySubject_PairEvictionPolicy_

@class RxSubjectsReplaySubject_NodeList;
@protocol RxSubjectsReplaySubject_EvictionPolicy;

@interface RxSubjectsReplaySubject_PairEvictionPolicy : NSObject < RxSubjectsReplaySubject_EvictionPolicy > {
 @public
  id<RxSubjectsReplaySubject_EvictionPolicy> first_;
  id<RxSubjectsReplaySubject_EvictionPolicy> second_;
}

#pragma mark Public

- (instancetype)initWithRxSubjectsReplaySubject_EvictionPolicy:(id<RxSubjectsReplaySubject_EvictionPolicy>)first
                    withRxSubjectsReplaySubject_EvictionPolicy:(id<RxSubjectsReplaySubject_EvictionPolicy>)second;

- (void)evictWithRxSubjectsReplaySubject_NodeList:(RxSubjectsReplaySubject_NodeList *)t1;

- (jboolean)testWithId:(id)value
              withLong:(jlong)now;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_PairEvictionPolicy)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_PairEvictionPolicy, first_, id<RxSubjectsReplaySubject_EvictionPolicy>)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_PairEvictionPolicy, second_, id<RxSubjectsReplaySubject_EvictionPolicy>)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_PairEvictionPolicy_initWithRxSubjectsReplaySubject_EvictionPolicy_withRxSubjectsReplaySubject_EvictionPolicy_(RxSubjectsReplaySubject_PairEvictionPolicy *self, id<RxSubjectsReplaySubject_EvictionPolicy> first, id<RxSubjectsReplaySubject_EvictionPolicy> second);

FOUNDATION_EXPORT RxSubjectsReplaySubject_PairEvictionPolicy *new_RxSubjectsReplaySubject_PairEvictionPolicy_initWithRxSubjectsReplaySubject_EvictionPolicy_withRxSubjectsReplaySubject_EvictionPolicy_(id<RxSubjectsReplaySubject_EvictionPolicy> first, id<RxSubjectsReplaySubject_EvictionPolicy> second) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_PairEvictionPolicy *create_RxSubjectsReplaySubject_PairEvictionPolicy_initWithRxSubjectsReplaySubject_EvictionPolicy_withRxSubjectsReplaySubject_EvictionPolicy_(id<RxSubjectsReplaySubject_EvictionPolicy> first, id<RxSubjectsReplaySubject_EvictionPolicy> second);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_PairEvictionPolicy)

#endif

#if !defined (RxSubjectsReplaySubject_AddTimestamped_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_AddTimestamped_INCLUDE))
#define RxSubjectsReplaySubject_AddTimestamped_

#define RxFunctionsFunc1_RESTRICT 1
#define RxFunctionsFunc1_INCLUDE 1
#include "rx/functions/Func1.h"

@class RxScheduler;

@interface RxSubjectsReplaySubject_AddTimestamped : NSObject < RxFunctionsFunc1 > {
 @public
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithRxScheduler:(RxScheduler *)scheduler;

- (id)callWithId:(id)t1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_AddTimestamped)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_AddTimestamped, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_AddTimestamped_initWithRxScheduler_(RxSubjectsReplaySubject_AddTimestamped *self, RxScheduler *scheduler);

FOUNDATION_EXPORT RxSubjectsReplaySubject_AddTimestamped *new_RxSubjectsReplaySubject_AddTimestamped_initWithRxScheduler_(RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_AddTimestamped *create_RxSubjectsReplaySubject_AddTimestamped_initWithRxScheduler_(RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_AddTimestamped)

#endif

#if !defined (RxSubjectsReplaySubject_RemoveTimestamped_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_RemoveTimestamped_INCLUDE))
#define RxSubjectsReplaySubject_RemoveTimestamped_

#define RxFunctionsFunc1_RESTRICT 1
#define RxFunctionsFunc1_INCLUDE 1
#include "rx/functions/Func1.h"

@interface RxSubjectsReplaySubject_RemoveTimestamped : NSObject < RxFunctionsFunc1 >

#pragma mark Public

- (id)callWithId:(id)t1;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_RemoveTimestamped)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_RemoveTimestamped_init(RxSubjectsReplaySubject_RemoveTimestamped *self);

FOUNDATION_EXPORT RxSubjectsReplaySubject_RemoveTimestamped *new_RxSubjectsReplaySubject_RemoveTimestamped_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_RemoveTimestamped *create_RxSubjectsReplaySubject_RemoveTimestamped_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_RemoveTimestamped)

#endif

#if !defined (RxSubjectsReplaySubject_DefaultOnAdd_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_DefaultOnAdd_INCLUDE))
#define RxSubjectsReplaySubject_DefaultOnAdd_

#define RxFunctionsAction1_RESTRICT 1
#define RxFunctionsAction1_INCLUDE 1
#include "rx/functions/Action1.h"

@class RxSubjectsReplaySubject_BoundedState;
@class RxSubjectsSubjectSubscriptionManager_SubjectObserver;

@interface RxSubjectsReplaySubject_DefaultOnAdd : NSObject < RxFunctionsAction1 > {
 @public
  RxSubjectsReplaySubject_BoundedState *state_;
}

#pragma mark Public

- (instancetype)initWithRxSubjectsReplaySubject_BoundedState:(RxSubjectsReplaySubject_BoundedState *)state;

- (void)callWithId:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)t1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_DefaultOnAdd)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_DefaultOnAdd, state_, RxSubjectsReplaySubject_BoundedState *)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_DefaultOnAdd_initWithRxSubjectsReplaySubject_BoundedState_(RxSubjectsReplaySubject_DefaultOnAdd *self, RxSubjectsReplaySubject_BoundedState *state);

FOUNDATION_EXPORT RxSubjectsReplaySubject_DefaultOnAdd *new_RxSubjectsReplaySubject_DefaultOnAdd_initWithRxSubjectsReplaySubject_BoundedState_(RxSubjectsReplaySubject_BoundedState *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_DefaultOnAdd *create_RxSubjectsReplaySubject_DefaultOnAdd_initWithRxSubjectsReplaySubject_BoundedState_(RxSubjectsReplaySubject_BoundedState *state);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_DefaultOnAdd)

#endif

#if !defined (RxSubjectsReplaySubject_TimedOnAdd_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_TimedOnAdd_INCLUDE))
#define RxSubjectsReplaySubject_TimedOnAdd_

#define RxFunctionsAction1_RESTRICT 1
#define RxFunctionsAction1_INCLUDE 1
#include "rx/functions/Action1.h"

@class RxScheduler;
@class RxSubjectsReplaySubject_BoundedState;
@class RxSubjectsSubjectSubscriptionManager_SubjectObserver;

@interface RxSubjectsReplaySubject_TimedOnAdd : NSObject < RxFunctionsAction1 > {
 @public
  RxSubjectsReplaySubject_BoundedState *state_;
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithRxSubjectsReplaySubject_BoundedState:(RxSubjectsReplaySubject_BoundedState *)state
                                             withRxScheduler:(RxScheduler *)scheduler;

- (void)callWithId:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)t1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_TimedOnAdd)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_TimedOnAdd, state_, RxSubjectsReplaySubject_BoundedState *)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_TimedOnAdd, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_TimedOnAdd_initWithRxSubjectsReplaySubject_BoundedState_withRxScheduler_(RxSubjectsReplaySubject_TimedOnAdd *self, RxSubjectsReplaySubject_BoundedState *state, RxScheduler *scheduler);

FOUNDATION_EXPORT RxSubjectsReplaySubject_TimedOnAdd *new_RxSubjectsReplaySubject_TimedOnAdd_initWithRxSubjectsReplaySubject_BoundedState_withRxScheduler_(RxSubjectsReplaySubject_BoundedState *state, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_TimedOnAdd *create_RxSubjectsReplaySubject_TimedOnAdd_initWithRxSubjectsReplaySubject_BoundedState_withRxScheduler_(RxSubjectsReplaySubject_BoundedState *state, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_TimedOnAdd)

#endif

#if !defined (RxSubjectsReplaySubject_NodeList_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_NodeList_INCLUDE))
#define RxSubjectsReplaySubject_NodeList_

@class RxSubjectsReplaySubject_NodeList_Node;

@interface RxSubjectsReplaySubject_NodeList : NSObject {
 @public
  RxSubjectsReplaySubject_NodeList_Node *head_;
  RxSubjectsReplaySubject_NodeList_Node *tail_;
  jint size_;
}

#pragma mark Public

- (void)addLastWithId:(id)value;

- (void)clear;

- (jboolean)isEmpty;

- (id)removeFirst;

- (jint)size;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_NodeList)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_NodeList, head_, RxSubjectsReplaySubject_NodeList_Node *)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_NodeList, tail_, RxSubjectsReplaySubject_NodeList_Node *)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_NodeList_init(RxSubjectsReplaySubject_NodeList *self);

FOUNDATION_EXPORT RxSubjectsReplaySubject_NodeList *new_RxSubjectsReplaySubject_NodeList_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_NodeList *create_RxSubjectsReplaySubject_NodeList_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_NodeList)

#endif

#if !defined (RxSubjectsReplaySubject_NodeList_Node_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_NodeList_Node_INCLUDE))
#define RxSubjectsReplaySubject_NodeList_Node_

@interface RxSubjectsReplaySubject_NodeList_Node : NSObject {
 @public
  id value_;
  volatile_id next_;
}

#pragma mark Package-Private

- (instancetype)initWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_NodeList_Node)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubject_NodeList_Node, value_, id)
J2OBJC_VOLATILE_FIELD_SETTER(RxSubjectsReplaySubject_NodeList_Node, next_, RxSubjectsReplaySubject_NodeList_Node *)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_NodeList_Node_initWithId_(RxSubjectsReplaySubject_NodeList_Node *self, id value);

FOUNDATION_EXPORT RxSubjectsReplaySubject_NodeList_Node *new_RxSubjectsReplaySubject_NodeList_Node_initWithId_(id value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_NodeList_Node *create_RxSubjectsReplaySubject_NodeList_Node_initWithId_(id value);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_NodeList_Node)

#endif

#if !defined (RxSubjectsReplaySubject_EmptyEvictionPolicy_) && (RxSubjectsReplaySubject_INCLUDE_ALL || defined(RxSubjectsReplaySubject_EmptyEvictionPolicy_INCLUDE))
#define RxSubjectsReplaySubject_EmptyEvictionPolicy_

@class RxSubjectsReplaySubject_NodeList;

@interface RxSubjectsReplaySubject_EmptyEvictionPolicy : NSObject < RxSubjectsReplaySubject_EvictionPolicy >

#pragma mark Public

- (void)evictWithRxSubjectsReplaySubject_NodeList:(RxSubjectsReplaySubject_NodeList *)list;

- (jboolean)testWithId:(id)value
              withLong:(jlong)now;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubject_EmptyEvictionPolicy)

FOUNDATION_EXPORT void RxSubjectsReplaySubject_EmptyEvictionPolicy_init(RxSubjectsReplaySubject_EmptyEvictionPolicy *self);

FOUNDATION_EXPORT RxSubjectsReplaySubject_EmptyEvictionPolicy *new_RxSubjectsReplaySubject_EmptyEvictionPolicy_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubject_EmptyEvictionPolicy *create_RxSubjectsReplaySubject_EmptyEvictionPolicy_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubject_EmptyEvictionPolicy)

#endif

#pragma pop_macro("RxSubjectsReplaySubject_INCLUDE_ALL")
