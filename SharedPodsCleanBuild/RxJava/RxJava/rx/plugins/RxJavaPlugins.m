//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/plugins/RxJavaPlugins.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "rx/plugins/RxJavaErrorHandler.h"
#include "rx/plugins/RxJavaObservableExecutionHook.h"
#include "rx/plugins/RxJavaObservableExecutionHookDefault.h"
#include "rx/plugins/RxJavaPlugins.h"
#include "rx/plugins/RxJavaSchedulersHook.h"

@interface RxPluginsRxJavaPlugins () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *errorHandler_;
  JavaUtilConcurrentAtomicAtomicReference *observableExecutionHook_;
  JavaUtilConcurrentAtomicAtomicReference *schedulersHook_;
}

+ (id)getPluginImplementationViaPropertyWithIOSClass:(IOSClass *)pluginClass;

@end

J2OBJC_FIELD_SETTER(RxPluginsRxJavaPlugins, errorHandler_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxPluginsRxJavaPlugins, observableExecutionHook_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxPluginsRxJavaPlugins, schedulersHook_, JavaUtilConcurrentAtomicAtomicReference *)

inline RxPluginsRxJavaPlugins *RxPluginsRxJavaPlugins_get_INSTANCE();
static RxPluginsRxJavaPlugins *RxPluginsRxJavaPlugins_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxPluginsRxJavaPlugins, INSTANCE, RxPluginsRxJavaPlugins *)

__attribute__((unused)) static id RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_(IOSClass *pluginClass);

@interface RxPluginsRxJavaPlugins_$1 : RxPluginsRxJavaErrorHandler

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaPlugins_$1)

__attribute__((unused)) static void RxPluginsRxJavaPlugins_$1_init(RxPluginsRxJavaPlugins_$1 *self);

__attribute__((unused)) static RxPluginsRxJavaPlugins_$1 *new_RxPluginsRxJavaPlugins_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaPlugins_$1 *create_RxPluginsRxJavaPlugins_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(RxPluginsRxJavaPlugins_$1)

J2OBJC_INITIALIZED_DEFN(RxPluginsRxJavaPlugins)

RxPluginsRxJavaErrorHandler *RxPluginsRxJavaPlugins_DEFAULT_ERROR_HANDLER;

@implementation RxPluginsRxJavaPlugins

+ (RxPluginsRxJavaPlugins *)getInstance {
  return RxPluginsRxJavaPlugins_getInstance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPlugins_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reset {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_INSTANCE))->errorHandler_)) setWithId:nil];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(RxPluginsRxJavaPlugins_INSTANCE->observableExecutionHook_)) setWithId:nil];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(RxPluginsRxJavaPlugins_INSTANCE->schedulersHook_)) setWithId:nil];
}

- (RxPluginsRxJavaErrorHandler *)getErrorHandler {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(errorHandler_)) get] == nil) {
    id impl = RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_(RxPluginsRxJavaErrorHandler_class_());
    if (impl == nil) {
      [errorHandler_ compareAndSetWithId:nil withId:RxPluginsRxJavaPlugins_DEFAULT_ERROR_HANDLER];
    }
    else {
      [errorHandler_ compareAndSetWithId:nil withId:(RxPluginsRxJavaErrorHandler *) cast_chk(impl, [RxPluginsRxJavaErrorHandler class])];
    }
  }
  return [errorHandler_ get];
}

- (void)registerErrorHandlerWithRxPluginsRxJavaErrorHandler:(RxPluginsRxJavaErrorHandler *)impl {
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(errorHandler_)) compareAndSetWithId:nil withId:impl]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Another strategy was already registered: ", [errorHandler_ get]));
  }
}

- (RxPluginsRxJavaObservableExecutionHook *)getObservableExecutionHook {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observableExecutionHook_)) get] == nil) {
    id impl = RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_(RxPluginsRxJavaObservableExecutionHook_class_());
    if (impl == nil) {
      [observableExecutionHook_ compareAndSetWithId:nil withId:RxPluginsRxJavaObservableExecutionHookDefault_getInstance()];
    }
    else {
      [observableExecutionHook_ compareAndSetWithId:nil withId:(RxPluginsRxJavaObservableExecutionHook *) cast_chk(impl, [RxPluginsRxJavaObservableExecutionHook class])];
    }
  }
  return [observableExecutionHook_ get];
}

- (void)registerObservableExecutionHookWithRxPluginsRxJavaObservableExecutionHook:(RxPluginsRxJavaObservableExecutionHook *)impl {
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observableExecutionHook_)) compareAndSetWithId:nil withId:impl]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Another strategy was already registered: ", [observableExecutionHook_ get]));
  }
}

+ (id)getPluginImplementationViaPropertyWithIOSClass:(IOSClass *)pluginClass {
  return RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_(pluginClass);
}

- (RxPluginsRxJavaSchedulersHook *)getSchedulersHook {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(schedulersHook_)) get] == nil) {
    id impl = RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_(RxPluginsRxJavaSchedulersHook_class_());
    if (impl == nil) {
      [schedulersHook_ compareAndSetWithId:nil withId:RxPluginsRxJavaSchedulersHook_getDefaultInstance()];
    }
    else {
      [schedulersHook_ compareAndSetWithId:nil withId:(RxPluginsRxJavaSchedulersHook *) cast_chk(impl, [RxPluginsRxJavaSchedulersHook class])];
    }
  }
  return [schedulersHook_ get];
}

- (void)registerSchedulersHookWithRxPluginsRxJavaSchedulersHook:(RxPluginsRxJavaSchedulersHook *)impl {
  if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(schedulersHook_)) compareAndSetWithId:nil withId:impl]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Another strategy was already registered: ", [schedulersHook_ get]));
  }
}

+ (void)initialize {
  if (self == [RxPluginsRxJavaPlugins class]) {
    RxPluginsRxJavaPlugins_INSTANCE = new_RxPluginsRxJavaPlugins_init();
    RxPluginsRxJavaPlugins_DEFAULT_ERROR_HANDLER = new_RxPluginsRxJavaPlugins_$1_init();
    J2OBJC_SET_INITIALIZED(RxPluginsRxJavaPlugins)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstance", NULL, "Lrx.plugins.RxJavaPlugins;", 0x9, NULL, NULL },
    { "init", "RxJavaPlugins", NULL, 0x0, NULL, NULL },
    { "reset", NULL, "V", 0x0, NULL, NULL },
    { "getErrorHandler", NULL, "Lrx.plugins.RxJavaErrorHandler;", 0x1, NULL, NULL },
    { "registerErrorHandlerWithRxPluginsRxJavaErrorHandler:", "registerErrorHandler", "V", 0x1, NULL, NULL },
    { "getObservableExecutionHook", NULL, "Lrx.plugins.RxJavaObservableExecutionHook;", 0x1, NULL, NULL },
    { "registerObservableExecutionHookWithRxPluginsRxJavaObservableExecutionHook:", "registerObservableExecutionHook", "V", 0x1, NULL, NULL },
    { "getPluginImplementationViaPropertyWithIOSClass:", "getPluginImplementationViaProperty", "Ljava.lang.Object;", 0xa, NULL, "(Ljava/lang/Class<*>;)Ljava/lang/Object;" },
    { "getSchedulersHook", NULL, "Lrx.plugins.RxJavaSchedulersHook;", 0x1, NULL, NULL },
    { "registerSchedulersHookWithRxPluginsRxJavaSchedulersHook:", "registerSchedulersHook", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x1a, "Lrx.plugins.RxJavaPlugins;", &RxPluginsRxJavaPlugins_INSTANCE, NULL, .constantValue.asLong = 0 },
    { "errorHandler_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicReference;", NULL, "Ljava/util/concurrent/atomic/AtomicReference<Lrx/plugins/RxJavaErrorHandler;>;", .constantValue.asLong = 0 },
    { "observableExecutionHook_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicReference;", NULL, "Ljava/util/concurrent/atomic/AtomicReference<Lrx/plugins/RxJavaObservableExecutionHook;>;", .constantValue.asLong = 0 },
    { "schedulersHook_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicReference;", NULL, "Ljava/util/concurrent/atomic/AtomicReference<Lrx/plugins/RxJavaSchedulersHook;>;", .constantValue.asLong = 0 },
    { "DEFAULT_ERROR_HANDLER", "DEFAULT_ERROR_HANDLER", 0x18, "Lrx.plugins.RxJavaErrorHandler;", &RxPluginsRxJavaPlugins_DEFAULT_ERROR_HANDLER, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxPluginsRxJavaPlugins = { 2, "RxJavaPlugins", "rx.plugins", NULL, 0x1, 10, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxPluginsRxJavaPlugins;
}

@end

RxPluginsRxJavaPlugins *RxPluginsRxJavaPlugins_getInstance() {
  RxPluginsRxJavaPlugins_initialize();
  return RxPluginsRxJavaPlugins_INSTANCE;
}

void RxPluginsRxJavaPlugins_init(RxPluginsRxJavaPlugins *self) {
  NSObject_init(self);
  self->errorHandler_ = new_JavaUtilConcurrentAtomicAtomicReference_init();
  self->observableExecutionHook_ = new_JavaUtilConcurrentAtomicAtomicReference_init();
  self->schedulersHook_ = new_JavaUtilConcurrentAtomicAtomicReference_init();
}

RxPluginsRxJavaPlugins *new_RxPluginsRxJavaPlugins_init() {
  RxPluginsRxJavaPlugins *self = [RxPluginsRxJavaPlugins alloc];
  RxPluginsRxJavaPlugins_init(self);
  return self;
}

RxPluginsRxJavaPlugins *create_RxPluginsRxJavaPlugins_init() {
  return new_RxPluginsRxJavaPlugins_init();
}

id RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_(IOSClass *pluginClass) {
  RxPluginsRxJavaPlugins_initialize();
  NSString *classSimpleName = [((IOSClass *) nil_chk(pluginClass)) getSimpleName];
  NSString *implementingClass = JavaLangSystem_getPropertyWithNSString_(JreStrcat("$$$", @"rxjava.plugin.", classSimpleName, @".implementation"));
  if (implementingClass != nil) {
    @try {
      IOSClass *cls = IOSClass_forName_(implementingClass);
      cls = [((IOSClass *) nil_chk(cls)) asSubclass:pluginClass];
      return [((IOSClass *) nil_chk(cls)) newInstance];
    }
    @catch (JavaLangClassCastException *e) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$$$", classSimpleName, @" implementation is not an instance of ", classSimpleName, @": ", implementingClass));
    }
    @catch (JavaLangClassNotFoundException *e) {
      @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$$", classSimpleName, @" implementation class not found: ", implementingClass), e);
    }
    @catch (JavaLangInstantiationException *e) {
      @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$$", classSimpleName, @" implementation not able to be instantiated: ", implementingClass), e);
    }
    @catch (JavaLangIllegalAccessException *e) {
      @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$$", classSimpleName, @" implementation not able to be accessed: ", implementingClass), e);
    }
  }
  else {
    return nil;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxPluginsRxJavaPlugins)

@implementation RxPluginsRxJavaPlugins_$1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPlugins_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _RxPluginsRxJavaPlugins_$1 = { 2, "", "rx.plugins", "RxJavaPlugins", 0x8008, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxPluginsRxJavaPlugins_$1;
}

@end

void RxPluginsRxJavaPlugins_$1_init(RxPluginsRxJavaPlugins_$1 *self) {
  RxPluginsRxJavaErrorHandler_init(self);
}

RxPluginsRxJavaPlugins_$1 *new_RxPluginsRxJavaPlugins_$1_init() {
  RxPluginsRxJavaPlugins_$1 *self = [RxPluginsRxJavaPlugins_$1 alloc];
  RxPluginsRxJavaPlugins_$1_init(self);
  return self;
}

RxPluginsRxJavaPlugins_$1 *create_RxPluginsRxJavaPlugins_$1_init() {
  return new_RxPluginsRxJavaPlugins_$1_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxPluginsRxJavaPlugins_$1)
