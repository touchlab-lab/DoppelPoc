//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/subscriptions/SerialSubscription.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxSubscriptionsSerialSubscription_INCLUDE_ALL")
#ifdef RxSubscriptionsSerialSubscription_RESTRICT
#define RxSubscriptionsSerialSubscription_INCLUDE_ALL 0
#else
#define RxSubscriptionsSerialSubscription_INCLUDE_ALL 1
#endif
#undef RxSubscriptionsSerialSubscription_RESTRICT

#if !defined (RxSubscriptionsSerialSubscription_) && (RxSubscriptionsSerialSubscription_INCLUDE_ALL || defined(RxSubscriptionsSerialSubscription_INCLUDE))
#define RxSubscriptionsSerialSubscription_

#define RxSubscription_RESTRICT 1
#define RxSubscription_INCLUDE 1
#include "rx/Subscription.h"

@class JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;
@class RxSubscriptionsSerialSubscription_State;

@interface RxSubscriptionsSerialSubscription : NSObject < RxSubscription > {
 @public
  volatile_id state_;
}

#pragma mark Public

- (instancetype)init;

- (id<RxSubscription>)get;

- (jboolean)isUnsubscribed;

- (void)setWithRxSubscription:(id<RxSubscription>)s;

- (void)unsubscribe;

@end

J2OBJC_STATIC_INIT(RxSubscriptionsSerialSubscription)

J2OBJC_VOLATILE_FIELD_SETTER(RxSubscriptionsSerialSubscription, state_, RxSubscriptionsSerialSubscription_State *)

inline RxSubscriptionsSerialSubscription_State *RxSubscriptionsSerialSubscription_get_EMPTY_STATE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxSubscriptionsSerialSubscription_State *RxSubscriptionsSerialSubscription_EMPTY_STATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubscriptionsSerialSubscription, EMPTY_STATE, RxSubscriptionsSerialSubscription_State *)

inline JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *RxSubscriptionsSerialSubscription_get_STATE_UPDATER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *RxSubscriptionsSerialSubscription_STATE_UPDATER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubscriptionsSerialSubscription, STATE_UPDATER, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)

FOUNDATION_EXPORT void RxSubscriptionsSerialSubscription_init(RxSubscriptionsSerialSubscription *self);

FOUNDATION_EXPORT RxSubscriptionsSerialSubscription *new_RxSubscriptionsSerialSubscription_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubscriptionsSerialSubscription *create_RxSubscriptionsSerialSubscription_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSubscriptionsSerialSubscription)

#endif

#if !defined (RxSubscriptionsSerialSubscription_State_) && (RxSubscriptionsSerialSubscription_INCLUDE_ALL || defined(RxSubscriptionsSerialSubscription_State_INCLUDE))
#define RxSubscriptionsSerialSubscription_State_

@protocol RxSubscription;

@interface RxSubscriptionsSerialSubscription_State : NSObject {
 @public
  jboolean isUnsubscribed_;
  id<RxSubscription> subscription_;
}

#pragma mark Package-Private

- (instancetype)initWithBoolean:(jboolean)u
             withRxSubscription:(id<RxSubscription>)s;

- (RxSubscriptionsSerialSubscription_State *)setWithRxSubscription:(id<RxSubscription>)s;

- (RxSubscriptionsSerialSubscription_State *)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsSerialSubscription_State)

J2OBJC_FIELD_SETTER(RxSubscriptionsSerialSubscription_State, subscription_, id<RxSubscription>)

FOUNDATION_EXPORT void RxSubscriptionsSerialSubscription_State_initWithBoolean_withRxSubscription_(RxSubscriptionsSerialSubscription_State *self, jboolean u, id<RxSubscription> s);

FOUNDATION_EXPORT RxSubscriptionsSerialSubscription_State *new_RxSubscriptionsSerialSubscription_State_initWithBoolean_withRxSubscription_(jboolean u, id<RxSubscription> s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubscriptionsSerialSubscription_State *create_RxSubscriptionsSerialSubscription_State_initWithBoolean_withRxSubscription_(jboolean u, id<RxSubscription> s);

J2OBJC_TYPE_LITERAL_HEADER(RxSubscriptionsSerialSubscription_State)

#endif

#pragma pop_macro("RxSubscriptionsSerialSubscription_INCLUDE_ALL")
