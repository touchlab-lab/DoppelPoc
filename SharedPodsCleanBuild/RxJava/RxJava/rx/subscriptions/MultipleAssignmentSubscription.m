//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/subscriptions/MultipleAssignmentSubscription.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/atomic/AtomicReferenceFieldUpdater.h"
#include "rx/Subscription.h"
#include "rx/subscriptions/MultipleAssignmentSubscription.h"
#include "rx/subscriptions/Subscriptions.h"

J2OBJC_INITIALIZED_DEFN(RxSubscriptionsMultipleAssignmentSubscription)

RxSubscriptionsMultipleAssignmentSubscription_State *RxSubscriptionsMultipleAssignmentSubscription_EMPTY_STATE;
JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *RxSubscriptionsMultipleAssignmentSubscription_STATE_UPDATER;

@implementation RxSubscriptionsMultipleAssignmentSubscription

- (jboolean)isUnsubscribed {
  return ((RxSubscriptionsMultipleAssignmentSubscription_State *) nil_chk(JreLoadVolatileId(&state_)))->isUnsubscribed_;
}

- (void)unsubscribe {
  RxSubscriptionsMultipleAssignmentSubscription_State *oldState;
  RxSubscriptionsMultipleAssignmentSubscription_State *newState;
  do {
    oldState = JreLoadVolatileId(&state_);
    if (((RxSubscriptionsMultipleAssignmentSubscription_State *) nil_chk(oldState))->isUnsubscribed_) {
      return;
    }
    else {
      newState = [oldState unsubscribe];
    }
  }
  while (![((JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *) nil_chk(RxSubscriptionsMultipleAssignmentSubscription_STATE_UPDATER)) compareAndSetWithId:self withId:oldState withId:newState]);
  [((id<RxSubscription>) nil_chk(((RxSubscriptionsMultipleAssignmentSubscription_State *) nil_chk(oldState))->subscription_)) unsubscribe];
}

- (void)setWithRxSubscription:(id<RxSubscription>)s {
  if (s == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Subscription can not be null");
  }
  RxSubscriptionsMultipleAssignmentSubscription_State *oldState;
  RxSubscriptionsMultipleAssignmentSubscription_State *newState;
  do {
    oldState = JreLoadVolatileId(&state_);
    if (((RxSubscriptionsMultipleAssignmentSubscription_State *) nil_chk(oldState))->isUnsubscribed_) {
      [((id<RxSubscription>) nil_chk(s)) unsubscribe];
      return;
    }
    else {
      newState = [oldState setWithRxSubscription:s];
    }
  }
  while (![((JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *) nil_chk(RxSubscriptionsMultipleAssignmentSubscription_STATE_UPDATER)) compareAndSetWithId:self withId:oldState withId:newState]);
}

- (id<RxSubscription>)get {
  return ((RxSubscriptionsMultipleAssignmentSubscription_State *) nil_chk(JreLoadVolatileId(&state_)))->subscription_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsMultipleAssignmentSubscription_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreReleaseVolatile(&state_);
}

- (void)__javaClone:(RxSubscriptionsMultipleAssignmentSubscription *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&state_, &original->state_);
}

+ (void)initialize {
  if (self == [RxSubscriptionsMultipleAssignmentSubscription class]) {
    RxSubscriptionsMultipleAssignmentSubscription_EMPTY_STATE = new_RxSubscriptionsMultipleAssignmentSubscription_State_initWithBoolean_withRxSubscription_(false, RxSubscriptionsSubscriptions_empty());
    RxSubscriptionsMultipleAssignmentSubscription_STATE_UPDATER = JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_newUpdaterWithIOSClass_withIOSClass_withNSString_(RxSubscriptionsMultipleAssignmentSubscription_class_(), RxSubscriptionsMultipleAssignmentSubscription_State_class_(), @"state");
    J2OBJC_SET_INITIALIZED(RxSubscriptionsMultipleAssignmentSubscription)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isUnsubscribed", NULL, "Z", 0x1, NULL, NULL },
    { "unsubscribe", NULL, "V", 0x1, NULL, NULL },
    { "setWithRxSubscription:", "set", "V", 0x1, NULL, NULL },
    { "get", NULL, "Lrx.Subscription;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_STATE", "EMPTY_STATE", 0x18, "Lrx.subscriptions.MultipleAssignmentSubscription$State;", &RxSubscriptionsMultipleAssignmentSubscription_EMPTY_STATE, NULL, .constantValue.asLong = 0 },
    { "state_", NULL, 0x40, "Lrx.subscriptions.MultipleAssignmentSubscription$State;", NULL, NULL, .constantValue.asLong = 0 },
    { "STATE_UPDATER", "STATE_UPDATER", 0x18, "Ljava.util.concurrent.atomic.AtomicReferenceFieldUpdater;", &RxSubscriptionsMultipleAssignmentSubscription_STATE_UPDATER, "Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lrx/subscriptions/MultipleAssignmentSubscription;Lrx/subscriptions/MultipleAssignmentSubscription$State;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lrx.subscriptions.MultipleAssignmentSubscription$State;"};
  static const J2ObjcClassInfo _RxSubscriptionsMultipleAssignmentSubscription = { 2, "MultipleAssignmentSubscription", "rx.subscriptions", NULL, 0x11, 5, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_RxSubscriptionsMultipleAssignmentSubscription;
}

@end

void RxSubscriptionsMultipleAssignmentSubscription_init(RxSubscriptionsMultipleAssignmentSubscription *self) {
  NSObject_init(self);
  (void) JreVolatileStrongAssign(&self->state_, RxSubscriptionsMultipleAssignmentSubscription_EMPTY_STATE);
}

RxSubscriptionsMultipleAssignmentSubscription *new_RxSubscriptionsMultipleAssignmentSubscription_init() {
  RxSubscriptionsMultipleAssignmentSubscription *self = [RxSubscriptionsMultipleAssignmentSubscription alloc];
  RxSubscriptionsMultipleAssignmentSubscription_init(self);
  return self;
}

RxSubscriptionsMultipleAssignmentSubscription *create_RxSubscriptionsMultipleAssignmentSubscription_init() {
  return new_RxSubscriptionsMultipleAssignmentSubscription_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsMultipleAssignmentSubscription)

@implementation RxSubscriptionsMultipleAssignmentSubscription_State

- (instancetype)initWithBoolean:(jboolean)u
             withRxSubscription:(id<RxSubscription>)s {
  RxSubscriptionsMultipleAssignmentSubscription_State_initWithBoolean_withRxSubscription_(self, u, s);
  return self;
}

- (RxSubscriptionsMultipleAssignmentSubscription_State *)unsubscribe {
  return new_RxSubscriptionsMultipleAssignmentSubscription_State_initWithBoolean_withRxSubscription_(true, subscription_);
}

- (RxSubscriptionsMultipleAssignmentSubscription_State *)setWithRxSubscription:(id<RxSubscription>)s {
  return new_RxSubscriptionsMultipleAssignmentSubscription_State_initWithBoolean_withRxSubscription_(isUnsubscribed_, s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:withRxSubscription:", "State", NULL, 0x0, NULL, NULL },
    { "unsubscribe", NULL, "Lrx.subscriptions.MultipleAssignmentSubscription$State;", 0x0, NULL, NULL },
    { "setWithRxSubscription:", "set", "Lrx.subscriptions.MultipleAssignmentSubscription$State;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isUnsubscribed_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "subscription_", NULL, 0x10, "Lrx.Subscription;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxSubscriptionsMultipleAssignmentSubscription_State = { 2, "State", "rx.subscriptions", "MultipleAssignmentSubscription", 0x1a, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxSubscriptionsMultipleAssignmentSubscription_State;
}

@end

void RxSubscriptionsMultipleAssignmentSubscription_State_initWithBoolean_withRxSubscription_(RxSubscriptionsMultipleAssignmentSubscription_State *self, jboolean u, id<RxSubscription> s) {
  NSObject_init(self);
  self->isUnsubscribed_ = u;
  self->subscription_ = s;
}

RxSubscriptionsMultipleAssignmentSubscription_State *new_RxSubscriptionsMultipleAssignmentSubscription_State_initWithBoolean_withRxSubscription_(jboolean u, id<RxSubscription> s) {
  RxSubscriptionsMultipleAssignmentSubscription_State *self = [RxSubscriptionsMultipleAssignmentSubscription_State alloc];
  RxSubscriptionsMultipleAssignmentSubscription_State_initWithBoolean_withRxSubscription_(self, u, s);
  return self;
}

RxSubscriptionsMultipleAssignmentSubscription_State *create_RxSubscriptionsMultipleAssignmentSubscription_State_initWithBoolean_withRxSubscription_(jboolean u, id<RxSubscription> s) {
  return new_RxSubscriptionsMultipleAssignmentSubscription_State_initWithBoolean_withRxSubscription_(u, s);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsMultipleAssignmentSubscription_State)
