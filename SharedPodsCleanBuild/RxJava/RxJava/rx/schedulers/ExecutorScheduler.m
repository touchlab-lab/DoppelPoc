//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/schedulers/ExecutorScheduler.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/RejectedExecutionException.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicIntegerFieldUpdater.h"
#include "rx/Scheduler.h"
#include "rx/Subscription.h"
#include "rx/functions/Action0.h"
#include "rx/plugins/RxJavaErrorHandler.h"
#include "rx/plugins/RxJavaPlugins.h"
#include "rx/schedulers/ExecutorScheduler.h"
#include "rx/schedulers/GenericScheduledExecutorService.h"
#include "rx/subscriptions/CompositeSubscription.h"
#include "rx/subscriptions/MultipleAssignmentSubscription.h"
#include "rx/subscriptions/Subscriptions.h"

@interface RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1 : NSObject < JavaLangRunnable > {
 @public
  RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *this$0_;
  RxSubscriptionsMultipleAssignmentSubscription *val$mas_;
  id<RxFunctionsAction0> val$action_;
}

- (void)run;

- (instancetype)initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker:(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *)outer$
                            withRxSubscriptionsMultipleAssignmentSubscription:(RxSubscriptionsMultipleAssignmentSubscription *)capture$0
                                                       withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1)

J2OBJC_FIELD_SETTER(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1, this$0_, RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *)
J2OBJC_FIELD_SETTER(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1, val$mas_, RxSubscriptionsMultipleAssignmentSubscription *)
J2OBJC_FIELD_SETTER(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1, val$action_, id<RxFunctionsAction0>)

__attribute__((unused)) static void RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1_initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1 *self, RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1);

__attribute__((unused)) static RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1 *new_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1_initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1 *create_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1_initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1);

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1)

@implementation RxSchedulersExecutorScheduler

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  RxSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(self, executor);
  return self;
}

- (RxScheduler_Worker *)createWorker {
  return new_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(executor_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilConcurrentExecutor:", "ExecutorScheduler", NULL, 0x1, NULL, NULL },
    { "createWorker", NULL, "Lrx.Scheduler$Worker;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "executor_", NULL, 0x10, "Ljava.util.concurrent.Executor;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lrx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker;", "Lrx.schedulers.ExecutorScheduler$ExecutorAction;"};
  static const J2ObjcClassInfo _RxSchedulersExecutorScheduler = { 2, "ExecutorScheduler", "rx.schedulers", NULL, 0x10, 2, methods, 1, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_RxSchedulersExecutorScheduler;
}

@end

void RxSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(RxSchedulersExecutorScheduler *self, id<JavaUtilConcurrentExecutor> executor) {
  RxScheduler_init(self);
  self->executor_ = executor;
}

RxSchedulersExecutorScheduler *new_RxSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) {
  RxSchedulersExecutorScheduler *self = [RxSchedulersExecutorScheduler alloc];
  RxSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(self, executor);
  return self;
}

RxSchedulersExecutorScheduler *create_RxSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) {
  return new_RxSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(executor);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersExecutorScheduler)

@implementation RxSchedulersExecutorScheduler_ExecutorSchedulerWorker

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(self, executor);
  return self;
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  if ([self isUnsubscribed]) {
    return RxSubscriptionsSubscriptions_empty();
  }
  RxSchedulersExecutorScheduler_ExecutorAction *ea = new_RxSchedulersExecutorScheduler_ExecutorAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(action, tasks_);
  [((RxSubscriptionsCompositeSubscription *) nil_chk(tasks_)) addWithRxSubscription:ea];
  [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(queue_)) offerWithId:ea];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) getAndIncrement] == 0) {
    @try {
      [((id<JavaUtilConcurrentExecutor>) nil_chk(executor_)) executeWithJavaLangRunnable:self];
    }
    @catch (JavaUtilConcurrentRejectedExecutionException *t) {
      [tasks_ removeWithRxSubscription:ea];
      [wip_ decrementAndGet];
      [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleErrorWithNSException:t];
      @throw t;
    }
  }
  return ea;
}

- (void)run {
  do {
    [((RxSchedulersExecutorScheduler_ExecutorAction *) nil_chk([((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(queue_)) poll])) run];
  }
  while ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) decrementAndGet] > 0);
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (delayTime <= 0) {
    return [self scheduleWithRxFunctionsAction0:action];
  }
  if ([self isUnsubscribed]) {
    return RxSubscriptionsSubscriptions_empty();
  }
  id<JavaUtilConcurrentScheduledExecutorService> service;
  if ([JavaUtilConcurrentScheduledExecutorService_class_() isInstance:executor_]) {
    service = (id<JavaUtilConcurrentScheduledExecutorService>) cast_check(executor_, JavaUtilConcurrentScheduledExecutorService_class_());
  }
  else {
    service = RxSchedulersGenericScheduledExecutorService_getInstance();
  }
  RxSubscriptionsMultipleAssignmentSubscription *mas = new_RxSubscriptionsMultipleAssignmentSubscription_init();
  @try {
    id<JavaUtilConcurrentFuture> f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(service)) scheduleWithJavaLangRunnable:new_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1_initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_(self, mas, action) withLong:delayTime withJavaUtilConcurrentTimeUnit:unit];
    [mas setWithRxSubscription:RxSubscriptionsSubscriptions_fromWithJavaUtilConcurrentFuture_(f)];
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *t) {
    [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleErrorWithNSException:t];
    @throw t;
  }
  return mas;
}

- (jboolean)isUnsubscribed {
  return [((RxSubscriptionsCompositeSubscription *) nil_chk(tasks_)) isUnsubscribed];
}

- (void)unsubscribe {
  [((RxSubscriptionsCompositeSubscription *) nil_chk(tasks_)) unsubscribe];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilConcurrentExecutor:", "ExecutorSchedulerWorker", NULL, 0x1, NULL, NULL },
    { "scheduleWithRxFunctionsAction0:", "schedule", "Lrx.Subscription;", 0x1, NULL, NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:", "schedule", "Lrx.Subscription;", 0x1, NULL, NULL },
    { "isUnsubscribed", NULL, "Z", 0x1, NULL, NULL },
    { "unsubscribe", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "executor_", NULL, 0x10, "Ljava.util.concurrent.Executor;", NULL, NULL, .constantValue.asLong = 0 },
    { "tasks_", NULL, 0x10, "Lrx.subscriptions.CompositeSubscription;", NULL, NULL, .constantValue.asLong = 0 },
    { "queue_", NULL, 0x10, "Ljava.util.concurrent.ConcurrentLinkedQueue;", NULL, "Ljava/util/concurrent/ConcurrentLinkedQueue<Lrx/schedulers/ExecutorScheduler$ExecutorAction;>;", .constantValue.asLong = 0 },
    { "wip_", NULL, 0x10, "Ljava.util.concurrent.atomic.AtomicInteger;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxSchedulersExecutorScheduler_ExecutorSchedulerWorker = { 2, "ExecutorSchedulerWorker", "rx.schedulers", "ExecutorScheduler", 0x18, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker;
}

@end

void RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *self, id<JavaUtilConcurrentExecutor> executor) {
  RxScheduler_Worker_init(self);
  self->executor_ = executor;
  self->queue_ = new_JavaUtilConcurrentConcurrentLinkedQueue_init();
  self->wip_ = new_JavaUtilConcurrentAtomicAtomicInteger_init();
  self->tasks_ = new_RxSubscriptionsCompositeSubscription_init();
}

RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *new_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) {
  RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *self = [RxSchedulersExecutorScheduler_ExecutorSchedulerWorker alloc];
  RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(self, executor);
  return self;
}

RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *create_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) {
  return new_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(executor);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker)

@implementation RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1

- (void)run {
  if ([((RxSubscriptionsMultipleAssignmentSubscription *) nil_chk(val$mas_)) isUnsubscribed]) {
    return;
  }
  [val$mas_ setWithRxSubscription:[this$0_ scheduleWithRxFunctionsAction0:val$action_]];
}

- (instancetype)initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker:(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *)outer$
                            withRxSubscriptionsMultipleAssignmentSubscription:(RxSubscriptionsMultipleAssignmentSubscription *)capture$0
                                                       withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1 {
  RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1_initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_(self, outer$, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker:withRxSubscriptionsMultipleAssignmentSubscription:withRxFunctionsAction0:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$mas_", NULL, 0x1012, "Lrx.subscriptions.MultipleAssignmentSubscription;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$action_", NULL, 0x1012, "Lrx.functions.Action0;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxSchedulersExecutorScheduler_ExecutorSchedulerWorker", "scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:" };
  static const J2ObjcClassInfo _RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1 = { 2, "", "rx.schedulers", "ExecutorScheduler$ExecutorSchedulerWorker", 0x8008, 2, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1;
}

@end

void RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1_initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1 *self, RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1) {
  self->this$0_ = outer$;
  self->val$mas_ = capture$0;
  self->val$action_ = capture$1;
  NSObject_init(self);
}

RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1 *new_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1_initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1) {
  RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1 *self = [RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1 alloc];
  RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1_initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_(self, outer$, capture$0, capture$1);
  return self;
}

RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1 *create_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1_initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker *outer$, RxSubscriptionsMultipleAssignmentSubscription *capture$0, id<RxFunctionsAction0> capture$1) {
  return new_RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1_initWithRxSchedulersExecutorScheduler_ExecutorSchedulerWorker_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_(outer$, capture$0, capture$1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersExecutorScheduler_ExecutorSchedulerWorker_$1)

J2OBJC_INITIALIZED_DEFN(RxSchedulersExecutorScheduler_ExecutorAction)

JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxSchedulersExecutorScheduler_ExecutorAction_UNSUBSCRIBED_UPDATER;

@implementation RxSchedulersExecutorScheduler_ExecutorAction

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)actual
  withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)parent {
  RxSchedulersExecutorScheduler_ExecutorAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(self, actual, parent);
  return self;
}

- (void)run {
  if ([self isUnsubscribed]) {
    return;
  }
  @try {
    [((id<RxFunctionsAction0>) nil_chk(actual_)) call];
  }
  @catch (NSException *t) {
    [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleErrorWithNSException:t];
    JavaLangThread *thread = JavaLangThread_currentThread();
    [((id<JavaLangThread_UncaughtExceptionHandler>) nil_chk([((JavaLangThread *) nil_chk(thread)) getUncaughtExceptionHandler])) uncaughtExceptionWithJavaLangThread:thread withNSException:t];
  }
  @finally {
    [self unsubscribe];
  }
}

- (jboolean)isUnsubscribed {
  return JreLoadVolatileInt(&unsubscribed_) != 0;
}

- (void)unsubscribe {
  if ([((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxSchedulersExecutorScheduler_ExecutorAction_UNSUBSCRIBED_UPDATER)) compareAndSetWithId:self withInt:0 withInt:1]) {
    [((RxSubscriptionsCompositeSubscription *) nil_chk(parent_)) removeWithRxSubscription:self];
  }
}

+ (void)initialize {
  if (self == [RxSchedulersExecutorScheduler_ExecutorAction class]) {
    RxSchedulersExecutorScheduler_ExecutorAction_UNSUBSCRIBED_UPDATER = JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_newUpdaterWithIOSClass_withNSString_(RxSchedulersExecutorScheduler_ExecutorAction_class_(), @"unsubscribed");
    J2OBJC_SET_INITIALIZED(RxSchedulersExecutorScheduler_ExecutorAction)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxFunctionsAction0:withRxSubscriptionsCompositeSubscription:", "ExecutorAction", NULL, 0x1, NULL, NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "isUnsubscribed", NULL, "Z", 0x1, NULL, NULL },
    { "unsubscribe", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", NULL, 0x10, "Lrx.functions.Action0;", NULL, NULL, .constantValue.asLong = 0 },
    { "parent_", NULL, 0x10, "Lrx.subscriptions.CompositeSubscription;", NULL, NULL, .constantValue.asLong = 0 },
    { "unsubscribed_", NULL, 0x40, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "UNSUBSCRIBED_UPDATER", "UNSUBSCRIBED_UPDATER", 0x18, "Ljava.util.concurrent.atomic.AtomicIntegerFieldUpdater;", &RxSchedulersExecutorScheduler_ExecutorAction_UNSUBSCRIBED_UPDATER, "Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater<Lrx/schedulers/ExecutorScheduler$ExecutorAction;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxSchedulersExecutorScheduler_ExecutorAction = { 2, "ExecutorAction", "rx.schedulers", "ExecutorScheduler", 0x18, 4, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxSchedulersExecutorScheduler_ExecutorAction;
}

@end

void RxSchedulersExecutorScheduler_ExecutorAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(RxSchedulersExecutorScheduler_ExecutorAction *self, id<RxFunctionsAction0> actual, RxSubscriptionsCompositeSubscription *parent) {
  NSObject_init(self);
  self->actual_ = actual;
  self->parent_ = parent;
}

RxSchedulersExecutorScheduler_ExecutorAction *new_RxSchedulersExecutorScheduler_ExecutorAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(id<RxFunctionsAction0> actual, RxSubscriptionsCompositeSubscription *parent) {
  RxSchedulersExecutorScheduler_ExecutorAction *self = [RxSchedulersExecutorScheduler_ExecutorAction alloc];
  RxSchedulersExecutorScheduler_ExecutorAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(self, actual, parent);
  return self;
}

RxSchedulersExecutorScheduler_ExecutorAction *create_RxSchedulersExecutorScheduler_ExecutorAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(id<RxFunctionsAction0> actual, RxSubscriptionsCompositeSubscription *parent) {
  return new_RxSchedulersExecutorScheduler_ExecutorAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(actual, parent);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersExecutorScheduler_ExecutorAction)
