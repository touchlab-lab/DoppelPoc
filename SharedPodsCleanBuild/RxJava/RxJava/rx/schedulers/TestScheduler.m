//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/schedulers/TestScheduler.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/util/Comparator.h"
#include "java/util/PriorityQueue.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/TimeUnit.h"
#include "rx/Scheduler.h"
#include "rx/Subscription.h"
#include "rx/functions/Action0.h"
#include "rx/schedulers/TestScheduler.h"
#include "rx/subscriptions/BooleanSubscription.h"
#include "rx/subscriptions/Subscriptions.h"

@interface RxSchedulersTestScheduler () {
 @public
  id<JavaUtilQueue> queue_;
  jlong time_;
}

- (void)triggerActionsWithLong:(jlong)targetTimeInNanos;

@end

J2OBJC_FIELD_SETTER(RxSchedulersTestScheduler, queue_, id<JavaUtilQueue>)

inline jlong RxSchedulersTestScheduler_get_counter();
inline jlong RxSchedulersTestScheduler_set_counter(jlong value);
inline jlong *RxSchedulersTestScheduler_getRef_counter();
static jlong RxSchedulersTestScheduler_counter = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(RxSchedulersTestScheduler, counter, jlong)

__attribute__((unused)) static void RxSchedulersTestScheduler_triggerActionsWithLong_(RxSchedulersTestScheduler *self, jlong targetTimeInNanos);

@interface RxSchedulersTestScheduler_TimedAction : NSObject {
 @public
  jlong time_;
  id<RxFunctionsAction0> action_;
  RxScheduler_Worker *scheduler_;
  jlong count_;
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)scheduler
                                  withLong:(jlong)time
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestScheduler_TimedAction)

J2OBJC_FIELD_SETTER(RxSchedulersTestScheduler_TimedAction, action_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersTestScheduler_TimedAction, scheduler_, RxScheduler_Worker *)

__attribute__((unused)) static void RxSchedulersTestScheduler_TimedAction_initWithRxScheduler_Worker_withLong_withRxFunctionsAction0_(RxSchedulersTestScheduler_TimedAction *self, RxScheduler_Worker *scheduler, jlong time, id<RxFunctionsAction0> action);

__attribute__((unused)) static RxSchedulersTestScheduler_TimedAction *new_RxSchedulersTestScheduler_TimedAction_initWithRxScheduler_Worker_withLong_withRxFunctionsAction0_(RxScheduler_Worker *scheduler, jlong time, id<RxFunctionsAction0> action) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTestScheduler_TimedAction *create_RxSchedulersTestScheduler_TimedAction_initWithRxScheduler_Worker_withLong_withRxFunctionsAction0_(RxScheduler_Worker *scheduler, jlong time, id<RxFunctionsAction0> action);

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersTestScheduler_TimedAction)

@interface RxSchedulersTestScheduler_CompareActionsByTime : NSObject < JavaUtilComparator >

- (jint)compareWithId:(RxSchedulersTestScheduler_TimedAction *)action1
               withId:(RxSchedulersTestScheduler_TimedAction *)action2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestScheduler_CompareActionsByTime)

__attribute__((unused)) static void RxSchedulersTestScheduler_CompareActionsByTime_init(RxSchedulersTestScheduler_CompareActionsByTime *self);

__attribute__((unused)) static RxSchedulersTestScheduler_CompareActionsByTime *new_RxSchedulersTestScheduler_CompareActionsByTime_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTestScheduler_CompareActionsByTime *create_RxSchedulersTestScheduler_CompareActionsByTime_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersTestScheduler_CompareActionsByTime)

@interface RxSchedulersTestScheduler_InnerTestScheduler : RxScheduler_Worker {
 @public
  RxSchedulersTestScheduler *this$0_;
  RxSubscriptionsBooleanSubscription *s_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (jlong)now;

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestScheduler_InnerTestScheduler)

J2OBJC_FIELD_SETTER(RxSchedulersTestScheduler_InnerTestScheduler, this$0_, RxSchedulersTestScheduler *)
J2OBJC_FIELD_SETTER(RxSchedulersTestScheduler_InnerTestScheduler, s_, RxSubscriptionsBooleanSubscription *)

__attribute__((unused)) static void RxSchedulersTestScheduler_InnerTestScheduler_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler_InnerTestScheduler *self, RxSchedulersTestScheduler *outer$);

__attribute__((unused)) static RxSchedulersTestScheduler_InnerTestScheduler *new_RxSchedulersTestScheduler_InnerTestScheduler_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTestScheduler_InnerTestScheduler *create_RxSchedulersTestScheduler_InnerTestScheduler_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersTestScheduler_InnerTestScheduler)

@interface RxSchedulersTestScheduler_InnerTestScheduler_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersTestScheduler_InnerTestScheduler *this$0_;
  RxSchedulersTestScheduler_TimedAction *val$timedAction_;
}

- (void)call;

- (instancetype)initWithRxSchedulersTestScheduler_InnerTestScheduler:(RxSchedulersTestScheduler_InnerTestScheduler *)outer$
                           withRxSchedulersTestScheduler_TimedAction:(RxSchedulersTestScheduler_TimedAction *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestScheduler_InnerTestScheduler_$1)

J2OBJC_FIELD_SETTER(RxSchedulersTestScheduler_InnerTestScheduler_$1, this$0_, RxSchedulersTestScheduler_InnerTestScheduler *)
J2OBJC_FIELD_SETTER(RxSchedulersTestScheduler_InnerTestScheduler_$1, val$timedAction_, RxSchedulersTestScheduler_TimedAction *)

__attribute__((unused)) static void RxSchedulersTestScheduler_InnerTestScheduler_$1_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler_$1 *self, RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0);

__attribute__((unused)) static RxSchedulersTestScheduler_InnerTestScheduler_$1 *new_RxSchedulersTestScheduler_InnerTestScheduler_$1_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTestScheduler_InnerTestScheduler_$1 *create_RxSchedulersTestScheduler_InnerTestScheduler_$1_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0);

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersTestScheduler_InnerTestScheduler_$1)

@interface RxSchedulersTestScheduler_InnerTestScheduler_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersTestScheduler_InnerTestScheduler *this$0_;
  RxSchedulersTestScheduler_TimedAction *val$timedAction_;
}

- (void)call;

- (instancetype)initWithRxSchedulersTestScheduler_InnerTestScheduler:(RxSchedulersTestScheduler_InnerTestScheduler *)outer$
                           withRxSchedulersTestScheduler_TimedAction:(RxSchedulersTestScheduler_TimedAction *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestScheduler_InnerTestScheduler_$2)

J2OBJC_FIELD_SETTER(RxSchedulersTestScheduler_InnerTestScheduler_$2, this$0_, RxSchedulersTestScheduler_InnerTestScheduler *)
J2OBJC_FIELD_SETTER(RxSchedulersTestScheduler_InnerTestScheduler_$2, val$timedAction_, RxSchedulersTestScheduler_TimedAction *)

__attribute__((unused)) static void RxSchedulersTestScheduler_InnerTestScheduler_$2_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler_$2 *self, RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0);

__attribute__((unused)) static RxSchedulersTestScheduler_InnerTestScheduler_$2 *new_RxSchedulersTestScheduler_InnerTestScheduler_$2_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTestScheduler_InnerTestScheduler_$2 *create_RxSchedulersTestScheduler_InnerTestScheduler_$2_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0);

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersTestScheduler_InnerTestScheduler_$2)

@implementation RxSchedulersTestScheduler

- (jlong)now {
  return [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS))) toMillisWithLong:time_];
}

- (void)advanceTimeByWithLong:(jlong)delayTime
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [self advanceTimeToWithLong:time_ + [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:delayTime] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS)];
}

- (void)advanceTimeToWithLong:(jlong)delayTime
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  jlong targetTime = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:delayTime];
  RxSchedulersTestScheduler_triggerActionsWithLong_(self, targetTime);
}

- (void)triggerActions {
  RxSchedulersTestScheduler_triggerActionsWithLong_(self, time_);
}

- (void)triggerActionsWithLong:(jlong)targetTimeInNanos {
  RxSchedulersTestScheduler_triggerActionsWithLong_(self, targetTimeInNanos);
}

- (RxScheduler_Worker *)createWorker {
  return new_RxSchedulersTestScheduler_InnerTestScheduler_initWithRxSchedulersTestScheduler_(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersTestScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "now", NULL, "J", 0x1, NULL, NULL },
    { "advanceTimeByWithLong:withJavaUtilConcurrentTimeUnit:", "advanceTimeBy", "V", 0x1, NULL, NULL },
    { "advanceTimeToWithLong:withJavaUtilConcurrentTimeUnit:", "advanceTimeTo", "V", 0x1, NULL, NULL },
    { "triggerActions", NULL, "V", 0x1, NULL, NULL },
    { "triggerActionsWithLong:", "triggerActions", "V", 0x2, NULL, NULL },
    { "createWorker", NULL, "Lrx.Scheduler$Worker;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", NULL, 0x12, "Ljava.util.Queue;", NULL, "Ljava/util/Queue<Lrx/schedulers/TestScheduler$TimedAction;>;", .constantValue.asLong = 0 },
    { "counter", "counter", 0xa, "J", &RxSchedulersTestScheduler_counter, NULL, .constantValue.asLong = 0 },
    { "time_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lrx.schedulers.TestScheduler$TimedAction;", "Lrx.schedulers.TestScheduler$CompareActionsByTime;", "Lrx.schedulers.TestScheduler$InnerTestScheduler;"};
  static const J2ObjcClassInfo _RxSchedulersTestScheduler = { 2, "TestScheduler", "rx.schedulers", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_RxSchedulersTestScheduler;
}

@end

void RxSchedulersTestScheduler_triggerActionsWithLong_(RxSchedulersTestScheduler *self, jlong targetTimeInNanos) {
  while (![((id<JavaUtilQueue>) nil_chk(self->queue_)) isEmpty]) {
    RxSchedulersTestScheduler_TimedAction *current = [self->queue_ peek];
    if (((RxSchedulersTestScheduler_TimedAction *) nil_chk(current))->time_ > targetTimeInNanos) {
      break;
    }
    self->time_ = current->time_;
    (void) [self->queue_ remove];
    if (![((RxScheduler_Worker *) nil_chk(current->scheduler_)) isUnsubscribed]) {
      [((id<RxFunctionsAction0>) nil_chk(current->action_)) call];
    }
  }
  self->time_ = targetTimeInNanos;
}

void RxSchedulersTestScheduler_init(RxSchedulersTestScheduler *self) {
  RxScheduler_init(self);
  self->queue_ = new_JavaUtilPriorityQueue_initWithInt_withJavaUtilComparator_(11, new_RxSchedulersTestScheduler_CompareActionsByTime_init());
}

RxSchedulersTestScheduler *new_RxSchedulersTestScheduler_init() {
  RxSchedulersTestScheduler *self = [RxSchedulersTestScheduler alloc];
  RxSchedulersTestScheduler_init(self);
  return self;
}

RxSchedulersTestScheduler *create_RxSchedulersTestScheduler_init() {
  return new_RxSchedulersTestScheduler_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTestScheduler)

@implementation RxSchedulersTestScheduler_TimedAction

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)scheduler
                                  withLong:(jlong)time
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  RxSchedulersTestScheduler_TimedAction_initWithRxScheduler_Worker_withLong_withRxFunctionsAction0_(self, scheduler, time, action);
  return self;
}

- (NSString *)description {
  return NSString_formatWithNSString_withNSObjectArray_(@"TimedAction(time = %d, action = %s)", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(time_), [((id<RxFunctionsAction0>) nil_chk(action_)) description] } count:2 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxScheduler_Worker:withLong:withRxFunctionsAction0:", "TimedAction", NULL, 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "time_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "action_", NULL, 0x12, "Lrx.functions.Action0;", NULL, NULL, .constantValue.asLong = 0 },
    { "scheduler_", NULL, 0x12, "Lrx.Scheduler$Worker;", NULL, NULL, .constantValue.asLong = 0 },
    { "count_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxSchedulersTestScheduler_TimedAction = { 2, "TimedAction", "rx.schedulers", "TestScheduler", 0x1a, 2, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxSchedulersTestScheduler_TimedAction;
}

@end

void RxSchedulersTestScheduler_TimedAction_initWithRxScheduler_Worker_withLong_withRxFunctionsAction0_(RxSchedulersTestScheduler_TimedAction *self, RxScheduler_Worker *scheduler, jlong time, id<RxFunctionsAction0> action) {
  NSObject_init(self);
  self->count_ = (*JreLoadStaticRef(RxSchedulersTestScheduler, counter))++;
  self->time_ = time;
  self->action_ = action;
  self->scheduler_ = scheduler;
}

RxSchedulersTestScheduler_TimedAction *new_RxSchedulersTestScheduler_TimedAction_initWithRxScheduler_Worker_withLong_withRxFunctionsAction0_(RxScheduler_Worker *scheduler, jlong time, id<RxFunctionsAction0> action) {
  RxSchedulersTestScheduler_TimedAction *self = [RxSchedulersTestScheduler_TimedAction alloc];
  RxSchedulersTestScheduler_TimedAction_initWithRxScheduler_Worker_withLong_withRxFunctionsAction0_(self, scheduler, time, action);
  return self;
}

RxSchedulersTestScheduler_TimedAction *create_RxSchedulersTestScheduler_TimedAction_initWithRxScheduler_Worker_withLong_withRxFunctionsAction0_(RxScheduler_Worker *scheduler, jlong time, id<RxFunctionsAction0> action) {
  return new_RxSchedulersTestScheduler_TimedAction_initWithRxScheduler_Worker_withLong_withRxFunctionsAction0_(scheduler, time, action);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTestScheduler_TimedAction)

@implementation RxSchedulersTestScheduler_CompareActionsByTime

- (jint)compareWithId:(RxSchedulersTestScheduler_TimedAction *)action1
               withId:(RxSchedulersTestScheduler_TimedAction *)action2 {
  if (((RxSchedulersTestScheduler_TimedAction *) nil_chk(action1))->time_ == ((RxSchedulersTestScheduler_TimedAction *) nil_chk(action2))->time_) {
    return [JavaLangLong_valueOfWithLong_(action1->count_) compareToWithId:JavaLangLong_valueOfWithLong_(action2->count_)];
  }
  else {
    return [JavaLangLong_valueOfWithLong_(action1->time_) compareToWithId:JavaLangLong_valueOfWithLong_(action2->time_)];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersTestScheduler_CompareActionsByTime_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _RxSchedulersTestScheduler_CompareActionsByTime = { 2, "CompareActionsByTime", "rx.schedulers", "TestScheduler", 0xa, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lrx/schedulers/TestScheduler$TimedAction;>;" };
  return &_RxSchedulersTestScheduler_CompareActionsByTime;
}

@end

void RxSchedulersTestScheduler_CompareActionsByTime_init(RxSchedulersTestScheduler_CompareActionsByTime *self) {
  NSObject_init(self);
}

RxSchedulersTestScheduler_CompareActionsByTime *new_RxSchedulersTestScheduler_CompareActionsByTime_init() {
  RxSchedulersTestScheduler_CompareActionsByTime *self = [RxSchedulersTestScheduler_CompareActionsByTime alloc];
  RxSchedulersTestScheduler_CompareActionsByTime_init(self);
  return self;
}

RxSchedulersTestScheduler_CompareActionsByTime *create_RxSchedulersTestScheduler_CompareActionsByTime_init() {
  return new_RxSchedulersTestScheduler_CompareActionsByTime_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTestScheduler_CompareActionsByTime)

@implementation RxSchedulersTestScheduler_InnerTestScheduler

- (void)unsubscribe {
  [((RxSubscriptionsBooleanSubscription *) nil_chk(s_)) unsubscribe];
}

- (jboolean)isUnsubscribed {
  return [((RxSubscriptionsBooleanSubscription *) nil_chk(s_)) isUnsubscribed];
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  RxSchedulersTestScheduler_TimedAction *timedAction = new_RxSchedulersTestScheduler_TimedAction_initWithRxScheduler_Worker_withLong_withRxFunctionsAction0_(self, this$0_->time_ + [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:delayTime], action);
  [((id<JavaUtilQueue>) nil_chk(this$0_->queue_)) addWithId:timedAction];
  return RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(new_RxSchedulersTestScheduler_InnerTestScheduler_$1_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(self, timedAction));
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  RxSchedulersTestScheduler_TimedAction *timedAction = new_RxSchedulersTestScheduler_TimedAction_initWithRxScheduler_Worker_withLong_withRxFunctionsAction0_(self, 0, action);
  [((id<JavaUtilQueue>) nil_chk(this$0_->queue_)) addWithId:timedAction];
  return RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(new_RxSchedulersTestScheduler_InnerTestScheduler_$2_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(self, timedAction));
}

- (jlong)now {
  return [this$0_ now];
}

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)outer$ {
  RxSchedulersTestScheduler_InnerTestScheduler_initWithRxSchedulersTestScheduler_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "unsubscribe", NULL, "V", 0x1, NULL, NULL },
    { "isUnsubscribed", NULL, "Z", 0x1, NULL, NULL },
    { "scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:", "schedule", "Lrx.Subscription;", 0x1, NULL, NULL },
    { "scheduleWithRxFunctionsAction0:", "schedule", "Lrx.Subscription;", 0x1, NULL, NULL },
    { "now", NULL, "J", 0x1, NULL, NULL },
    { "initWithRxSchedulersTestScheduler:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrx.schedulers.TestScheduler;", NULL, NULL, .constantValue.asLong = 0 },
    { "s_", NULL, 0x2, "Lrx.subscriptions.BooleanSubscription;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxSchedulersTestScheduler_InnerTestScheduler = { 2, "InnerTestScheduler", "rx.schedulers", "TestScheduler", 0x12, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxSchedulersTestScheduler_InnerTestScheduler;
}

@end

void RxSchedulersTestScheduler_InnerTestScheduler_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler_InnerTestScheduler *self, RxSchedulersTestScheduler *outer$) {
  self->this$0_ = outer$;
  RxScheduler_Worker_init(self);
  self->s_ = new_RxSubscriptionsBooleanSubscription_init();
}

RxSchedulersTestScheduler_InnerTestScheduler *new_RxSchedulersTestScheduler_InnerTestScheduler_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *outer$) {
  RxSchedulersTestScheduler_InnerTestScheduler *self = [RxSchedulersTestScheduler_InnerTestScheduler alloc];
  RxSchedulersTestScheduler_InnerTestScheduler_initWithRxSchedulersTestScheduler_(self, outer$);
  return self;
}

RxSchedulersTestScheduler_InnerTestScheduler *create_RxSchedulersTestScheduler_InnerTestScheduler_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *outer$) {
  return new_RxSchedulersTestScheduler_InnerTestScheduler_initWithRxSchedulersTestScheduler_(outer$);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTestScheduler_InnerTestScheduler)

@implementation RxSchedulersTestScheduler_InnerTestScheduler_$1

- (void)call {
  [((id<JavaUtilQueue>) nil_chk(this$0_->this$0_->queue_)) removeWithId:val$timedAction_];
}

- (instancetype)initWithRxSchedulersTestScheduler_InnerTestScheduler:(RxSchedulersTestScheduler_InnerTestScheduler *)outer$
                           withRxSchedulersTestScheduler_TimedAction:(RxSchedulersTestScheduler_TimedAction *)capture$0 {
  RxSchedulersTestScheduler_InnerTestScheduler_$1_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", NULL, "V", 0x1, NULL, NULL },
    { "initWithRxSchedulersTestScheduler_InnerTestScheduler:withRxSchedulersTestScheduler_TimedAction:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrx.schedulers.TestScheduler$InnerTestScheduler;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$timedAction_", NULL, 0x1012, "Lrx.schedulers.TestScheduler$TimedAction;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxSchedulersTestScheduler_InnerTestScheduler", "scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:" };
  static const J2ObjcClassInfo _RxSchedulersTestScheduler_InnerTestScheduler_$1 = { 2, "", "rx.schedulers", "TestScheduler$InnerTestScheduler", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_RxSchedulersTestScheduler_InnerTestScheduler_$1;
}

@end

void RxSchedulersTestScheduler_InnerTestScheduler_$1_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler_$1 *self, RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0) {
  self->this$0_ = outer$;
  self->val$timedAction_ = capture$0;
  NSObject_init(self);
}

RxSchedulersTestScheduler_InnerTestScheduler_$1 *new_RxSchedulersTestScheduler_InnerTestScheduler_$1_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0) {
  RxSchedulersTestScheduler_InnerTestScheduler_$1 *self = [RxSchedulersTestScheduler_InnerTestScheduler_$1 alloc];
  RxSchedulersTestScheduler_InnerTestScheduler_$1_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(self, outer$, capture$0);
  return self;
}

RxSchedulersTestScheduler_InnerTestScheduler_$1 *create_RxSchedulersTestScheduler_InnerTestScheduler_$1_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0) {
  return new_RxSchedulersTestScheduler_InnerTestScheduler_$1_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(outer$, capture$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTestScheduler_InnerTestScheduler_$1)

@implementation RxSchedulersTestScheduler_InnerTestScheduler_$2

- (void)call {
  [((id<JavaUtilQueue>) nil_chk(this$0_->this$0_->queue_)) removeWithId:val$timedAction_];
}

- (instancetype)initWithRxSchedulersTestScheduler_InnerTestScheduler:(RxSchedulersTestScheduler_InnerTestScheduler *)outer$
                           withRxSchedulersTestScheduler_TimedAction:(RxSchedulersTestScheduler_TimedAction *)capture$0 {
  RxSchedulersTestScheduler_InnerTestScheduler_$2_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", NULL, "V", 0x1, NULL, NULL },
    { "initWithRxSchedulersTestScheduler_InnerTestScheduler:withRxSchedulersTestScheduler_TimedAction:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrx.schedulers.TestScheduler$InnerTestScheduler;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$timedAction_", NULL, 0x1012, "Lrx.schedulers.TestScheduler$TimedAction;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxSchedulersTestScheduler_InnerTestScheduler", "scheduleWithRxFunctionsAction0:" };
  static const J2ObjcClassInfo _RxSchedulersTestScheduler_InnerTestScheduler_$2 = { 2, "", "rx.schedulers", "TestScheduler$InnerTestScheduler", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_RxSchedulersTestScheduler_InnerTestScheduler_$2;
}

@end

void RxSchedulersTestScheduler_InnerTestScheduler_$2_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler_$2 *self, RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0) {
  self->this$0_ = outer$;
  self->val$timedAction_ = capture$0;
  NSObject_init(self);
}

RxSchedulersTestScheduler_InnerTestScheduler_$2 *new_RxSchedulersTestScheduler_InnerTestScheduler_$2_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0) {
  RxSchedulersTestScheduler_InnerTestScheduler_$2 *self = [RxSchedulersTestScheduler_InnerTestScheduler_$2 alloc];
  RxSchedulersTestScheduler_InnerTestScheduler_$2_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(self, outer$, capture$0);
  return self;
}

RxSchedulersTestScheduler_InnerTestScheduler_$2 *create_RxSchedulersTestScheduler_InnerTestScheduler_$2_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(RxSchedulersTestScheduler_InnerTestScheduler *outer$, RxSchedulersTestScheduler_TimedAction *capture$0) {
  return new_RxSchedulersTestScheduler_InnerTestScheduler_$2_initWithRxSchedulersTestScheduler_InnerTestScheduler_withRxSchedulersTestScheduler_TimedAction_(outer$, capture$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTestScheduler_InnerTestScheduler_$2)
