//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/schedulers/EventLoopsScheduler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxSchedulersEventLoopsScheduler_INCLUDE_ALL")
#ifdef RxSchedulersEventLoopsScheduler_RESTRICT
#define RxSchedulersEventLoopsScheduler_INCLUDE_ALL 0
#else
#define RxSchedulersEventLoopsScheduler_INCLUDE_ALL 1
#endif
#undef RxSchedulersEventLoopsScheduler_RESTRICT

#if !defined (RxSchedulersEventLoopsScheduler_) && (RxSchedulersEventLoopsScheduler_INCLUDE_ALL || defined(RxSchedulersEventLoopsScheduler_INCLUDE))
#define RxSchedulersEventLoopsScheduler_

#define RxScheduler_RESTRICT 1
#define RxScheduler_INCLUDE 1
#include "rx/Scheduler.h"

@class RxScheduler_Worker;
@class RxSchedulersEventLoopsScheduler_FixedSchedulerPool;

@interface RxSchedulersEventLoopsScheduler : RxScheduler {
 @public
  RxSchedulersEventLoopsScheduler_FixedSchedulerPool *pool_;
}

#pragma mark Public

- (RxScheduler_Worker *)createWorker;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(RxSchedulersEventLoopsScheduler)

J2OBJC_FIELD_SETTER(RxSchedulersEventLoopsScheduler, pool_, RxSchedulersEventLoopsScheduler_FixedSchedulerPool *)

FOUNDATION_EXPORT void RxSchedulersEventLoopsScheduler_init(RxSchedulersEventLoopsScheduler *self);

FOUNDATION_EXPORT RxSchedulersEventLoopsScheduler *new_RxSchedulersEventLoopsScheduler_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSchedulersEventLoopsScheduler *create_RxSchedulersEventLoopsScheduler_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersEventLoopsScheduler)

#endif

#if !defined (RxSchedulersEventLoopsScheduler_FixedSchedulerPool_) && (RxSchedulersEventLoopsScheduler_INCLUDE_ALL || defined(RxSchedulersEventLoopsScheduler_FixedSchedulerPool_INCLUDE))
#define RxSchedulersEventLoopsScheduler_FixedSchedulerPool_

@class IOSObjectArray;
@class RxSchedulersEventLoopsScheduler_PoolWorker;

@interface RxSchedulersEventLoopsScheduler_FixedSchedulerPool : NSObject {
 @public
  jint cores_;
  IOSObjectArray *eventLoops_;
  jlong n_;
}

#pragma mark Public

- (RxSchedulersEventLoopsScheduler_PoolWorker *)getEventLoop;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersEventLoopsScheduler_FixedSchedulerPool)

J2OBJC_FIELD_SETTER(RxSchedulersEventLoopsScheduler_FixedSchedulerPool, eventLoops_, IOSObjectArray *)

FOUNDATION_EXPORT void RxSchedulersEventLoopsScheduler_FixedSchedulerPool_init(RxSchedulersEventLoopsScheduler_FixedSchedulerPool *self);

FOUNDATION_EXPORT RxSchedulersEventLoopsScheduler_FixedSchedulerPool *new_RxSchedulersEventLoopsScheduler_FixedSchedulerPool_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSchedulersEventLoopsScheduler_FixedSchedulerPool *create_RxSchedulersEventLoopsScheduler_FixedSchedulerPool_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersEventLoopsScheduler_FixedSchedulerPool)

#endif

#if !defined (RxSchedulersEventLoopsScheduler_PoolWorker_) && (RxSchedulersEventLoopsScheduler_INCLUDE_ALL || defined(RxSchedulersEventLoopsScheduler_PoolWorker_INCLUDE))
#define RxSchedulersEventLoopsScheduler_PoolWorker_

#define RxInternalSchedulersNewThreadWorker_RESTRICT 1
#define RxInternalSchedulersNewThreadWorker_INCLUDE 1
#include "rx/internal/schedulers/NewThreadWorker.h"

@protocol JavaUtilConcurrentThreadFactory;

@interface RxSchedulersEventLoopsScheduler_PoolWorker : RxInternalSchedulersNewThreadWorker

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersEventLoopsScheduler_PoolWorker)

FOUNDATION_EXPORT void RxSchedulersEventLoopsScheduler_PoolWorker_initWithJavaUtilConcurrentThreadFactory_(RxSchedulersEventLoopsScheduler_PoolWorker *self, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT RxSchedulersEventLoopsScheduler_PoolWorker *new_RxSchedulersEventLoopsScheduler_PoolWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSchedulersEventLoopsScheduler_PoolWorker *create_RxSchedulersEventLoopsScheduler_PoolWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersEventLoopsScheduler_PoolWorker)

#endif

#pragma pop_macro("RxSchedulersEventLoopsScheduler_INCLUDE_ALL")
