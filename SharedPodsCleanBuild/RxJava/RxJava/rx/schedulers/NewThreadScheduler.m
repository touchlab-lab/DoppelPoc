//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/schedulers/NewThreadScheduler.java
//

#include "J2ObjC_source.h"
#include "rx/Scheduler.h"
#include "rx/internal/schedulers/NewThreadWorker.h"
#include "rx/internal/util/RxThreadFactory.h"
#include "rx/schedulers/NewThreadScheduler.h"

@interface RxSchedulersNewThreadScheduler ()

- (instancetype)init;

@end

inline NSString *RxSchedulersNewThreadScheduler_get_THREAD_NAME_PREFIX();
static NSString *RxSchedulersNewThreadScheduler_THREAD_NAME_PREFIX = @"RxNewThreadScheduler-";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSchedulersNewThreadScheduler, THREAD_NAME_PREFIX, NSString *)

inline RxInternalUtilRxThreadFactory *RxSchedulersNewThreadScheduler_get_THREAD_FACTORY();
static RxInternalUtilRxThreadFactory *RxSchedulersNewThreadScheduler_THREAD_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSchedulersNewThreadScheduler, THREAD_FACTORY, RxInternalUtilRxThreadFactory *)

inline RxSchedulersNewThreadScheduler *RxSchedulersNewThreadScheduler_get_INSTANCE();
static RxSchedulersNewThreadScheduler *RxSchedulersNewThreadScheduler_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSchedulersNewThreadScheduler, INSTANCE, RxSchedulersNewThreadScheduler *)

__attribute__((unused)) static void RxSchedulersNewThreadScheduler_init(RxSchedulersNewThreadScheduler *self);

__attribute__((unused)) static RxSchedulersNewThreadScheduler *new_RxSchedulersNewThreadScheduler_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersNewThreadScheduler *create_RxSchedulersNewThreadScheduler_init();

J2OBJC_INITIALIZED_DEFN(RxSchedulersNewThreadScheduler)

@implementation RxSchedulersNewThreadScheduler

+ (RxSchedulersNewThreadScheduler *)instance {
  return RxSchedulersNewThreadScheduler_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersNewThreadScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (RxScheduler_Worker *)createWorker {
  return new_RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(RxSchedulersNewThreadScheduler_THREAD_FACTORY);
}

+ (void)initialize {
  if (self == [RxSchedulersNewThreadScheduler class]) {
    RxSchedulersNewThreadScheduler_THREAD_FACTORY = new_RxInternalUtilRxThreadFactory_initWithNSString_(RxSchedulersNewThreadScheduler_THREAD_NAME_PREFIX);
    RxSchedulersNewThreadScheduler_INSTANCE = new_RxSchedulersNewThreadScheduler_init();
    J2OBJC_SET_INITIALIZED(RxSchedulersNewThreadScheduler)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "instance", NULL, "Lrx.schedulers.NewThreadScheduler;", 0x8, NULL, NULL },
    { "init", "NewThreadScheduler", NULL, 0x2, NULL, NULL },
    { "createWorker", NULL, "Lrx.Scheduler$Worker;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "THREAD_NAME_PREFIX", "THREAD_NAME_PREFIX", 0x1a, "Ljava.lang.String;", &RxSchedulersNewThreadScheduler_THREAD_NAME_PREFIX, NULL, .constantValue.asLong = 0 },
    { "THREAD_FACTORY", "THREAD_FACTORY", 0x1a, "Lrx.internal.util.RxThreadFactory;", &RxSchedulersNewThreadScheduler_THREAD_FACTORY, NULL, .constantValue.asLong = 0 },
    { "INSTANCE", "INSTANCE", 0x1a, "Lrx.schedulers.NewThreadScheduler;", &RxSchedulersNewThreadScheduler_INSTANCE, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxSchedulersNewThreadScheduler = { 2, "NewThreadScheduler", "rx.schedulers", NULL, 0x11, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxSchedulersNewThreadScheduler;
}

@end

RxSchedulersNewThreadScheduler *RxSchedulersNewThreadScheduler_instance() {
  RxSchedulersNewThreadScheduler_initialize();
  return RxSchedulersNewThreadScheduler_INSTANCE;
}

void RxSchedulersNewThreadScheduler_init(RxSchedulersNewThreadScheduler *self) {
  RxScheduler_init(self);
}

RxSchedulersNewThreadScheduler *new_RxSchedulersNewThreadScheduler_init() {
  RxSchedulersNewThreadScheduler *self = [RxSchedulersNewThreadScheduler alloc];
  RxSchedulersNewThreadScheduler_init(self);
  return self;
}

RxSchedulersNewThreadScheduler *create_RxSchedulersNewThreadScheduler_init() {
  return new_RxSchedulersNewThreadScheduler_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersNewThreadScheduler)
