//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/schedulers/TimeInterval.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "rx/schedulers/TimeInterval.h"

@interface RxSchedulersTimeInterval () {
 @public
  jlong intervalInMilliseconds_;
  id value_;
}

@end

J2OBJC_FIELD_SETTER(RxSchedulersTimeInterval, value_, id)

@implementation RxSchedulersTimeInterval

- (instancetype)initWithLong:(jlong)intervalInMilliseconds
                      withId:(id)value {
  RxSchedulersTimeInterval_initWithLong_withId_(self, intervalInMilliseconds, value);
  return self;
}

- (jlong)getIntervalInMilliseconds {
  return intervalInMilliseconds_;
}

- (id)getValue {
  return value_;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + (jint) (intervalInMilliseconds_ ^ (JreURShift64(intervalInMilliseconds_, 32)));
  result = prime * result + ((value_ == nil) ? 0 : ((jint) [value_ hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return true;
  if (obj == nil) return false;
  if ([self getClass] != (id) [nil_chk(obj) getClass]) return false;
  RxSchedulersTimeInterval *other = (RxSchedulersTimeInterval *) cast_chk(obj, [RxSchedulersTimeInterval class]);
  if (intervalInMilliseconds_ != other->intervalInMilliseconds_) return false;
  if (value_ == nil) {
    if (other->value_ != nil) return false;
  }
  else if (![value_ isEqual:other->value_]) return false;
  return true;
}

- (NSString *)description {
  return JreStrcat("$J$@C", @"TimeInterval [intervalInMilliseconds=", intervalInMilliseconds_, @", value=", value_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withId:", "TimeInterval", NULL, 0x1, NULL, "(JTT;)V" },
    { "getIntervalInMilliseconds", NULL, "J", 0x1, NULL, NULL },
    { "getValue", NULL, "TT;", 0x1, NULL, "()TT;" },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "intervalInMilliseconds_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "value_", NULL, 0x12, "TT;", NULL, "TT;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxSchedulersTimeInterval = { 2, "TimeInterval", "rx.schedulers", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_RxSchedulersTimeInterval;
}

@end

void RxSchedulersTimeInterval_initWithLong_withId_(RxSchedulersTimeInterval *self, jlong intervalInMilliseconds, id value) {
  NSObject_init(self);
  self->value_ = value;
  self->intervalInMilliseconds_ = intervalInMilliseconds;
}

RxSchedulersTimeInterval *new_RxSchedulersTimeInterval_initWithLong_withId_(jlong intervalInMilliseconds, id value) {
  RxSchedulersTimeInterval *self = [RxSchedulersTimeInterval alloc];
  RxSchedulersTimeInterval_initWithLong_withId_(self, intervalInMilliseconds, value);
  return self;
}

RxSchedulersTimeInterval *create_RxSchedulersTimeInterval_initWithLong_withId_(jlong intervalInMilliseconds, id value) {
  return new_RxSchedulersTimeInterval_initWithLong_withId_(intervalInMilliseconds, value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTimeInterval)
