//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/schedulers/TrampolineScheduler.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Comparable.h"
#include "java/lang/Long.h"
#include "java/util/PriorityQueue.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicIntegerFieldUpdater.h"
#include "rx/Scheduler.h"
#include "rx/Subscription.h"
#include "rx/functions/Action0.h"
#include "rx/schedulers/SleepingAction.h"
#include "rx/schedulers/TrampolineScheduler.h"
#include "rx/subscriptions/BooleanSubscription.h"
#include "rx/subscriptions/Subscriptions.h"

@class RxSchedulersTrampolineScheduler_TimedAction;

@interface RxSchedulersTrampolineScheduler ()

+ (jint)compareWithInt:(jint)x
               withInt:(jint)y;

@end

inline RxSchedulersTrampolineScheduler *RxSchedulersTrampolineScheduler_get_INSTANCE();
static RxSchedulersTrampolineScheduler *RxSchedulersTrampolineScheduler_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSchedulersTrampolineScheduler, INSTANCE, RxSchedulersTrampolineScheduler *)

__attribute__((unused)) static jint RxSchedulersTrampolineScheduler_compareWithInt_withInt_(jint x, jint y);

@interface RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler : RxScheduler_Worker < RxSubscription > {
 @public
  RxSchedulersTrampolineScheduler *this$0_;
  JavaUtilPriorityQueue *queue_;
  RxSubscriptionsBooleanSubscription *innerSubscription_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<RxSubscription>)enqueueWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                           withLong:(jlong)execTime;

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithRxSchedulersTrampolineScheduler:(RxSchedulersTrampolineScheduler *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler)

J2OBJC_FIELD_SETTER(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, this$0_, RxSchedulersTrampolineScheduler *)
J2OBJC_FIELD_SETTER(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, queue_, JavaUtilPriorityQueue *)
J2OBJC_FIELD_SETTER(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, innerSubscription_, RxSubscriptionsBooleanSubscription *)
J2OBJC_FIELD_SETTER(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, wip_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static id<RxSubscription> RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self, id<RxFunctionsAction0> action, jlong execTime);

__attribute__((unused)) static void RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_initWithRxSchedulersTrampolineScheduler_(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self, RxSchedulersTrampolineScheduler *outer$);

__attribute__((unused)) static RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *new_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_initWithRxSchedulersTrampolineScheduler_(RxSchedulersTrampolineScheduler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *create_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_initWithRxSchedulersTrampolineScheduler_(RxSchedulersTrampolineScheduler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler)

@interface RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *this$0_;
  RxSchedulersTrampolineScheduler_TimedAction *val$timedAction_;
}

- (void)call;

- (instancetype)initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler:(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *)outer$
                                    withRxSchedulersTrampolineScheduler_TimedAction:(RxSchedulersTrampolineScheduler_TimedAction *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1)

J2OBJC_FIELD_SETTER(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1, this$0_, RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *)
J2OBJC_FIELD_SETTER(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1, val$timedAction_, RxSchedulersTrampolineScheduler_TimedAction *)

__attribute__((unused)) static void RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxSchedulersTrampolineScheduler_TimedAction_(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *self, RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxSchedulersTrampolineScheduler_TimedAction *capture$0);

__attribute__((unused)) static RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *new_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxSchedulersTrampolineScheduler_TimedAction_(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxSchedulersTrampolineScheduler_TimedAction *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *create_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxSchedulersTrampolineScheduler_TimedAction_(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxSchedulersTrampolineScheduler_TimedAction *capture$0);

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1)

@interface RxSchedulersTrampolineScheduler_TimedAction : NSObject < JavaLangComparable > {
 @public
  id<RxFunctionsAction0> action_;
  JavaLangLong *execTime_;
  jint count_;
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                          withJavaLangLong:(JavaLangLong *)execTime
                                   withInt:(jint)count;

- (jint)compareToWithId:(RxSchedulersTrampolineScheduler_TimedAction *)that;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineScheduler_TimedAction)

J2OBJC_FIELD_SETTER(RxSchedulersTrampolineScheduler_TimedAction, action_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersTrampolineScheduler_TimedAction, execTime_, JavaLangLong *)

__attribute__((unused)) static void RxSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(RxSchedulersTrampolineScheduler_TimedAction *self, id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count);

__attribute__((unused)) static RxSchedulersTrampolineScheduler_TimedAction *new_RxSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineScheduler_TimedAction *create_RxSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count);

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersTrampolineScheduler_TimedAction)

J2OBJC_INITIALIZED_DEFN(RxSchedulersTrampolineScheduler)

JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxSchedulersTrampolineScheduler_COUNTER_UPDATER;

@implementation RxSchedulersTrampolineScheduler

+ (RxSchedulersTrampolineScheduler *)instance {
  return RxSchedulersTrampolineScheduler_instance();
}

- (RxScheduler_Worker *)createWorker {
  return new_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_initWithRxSchedulersTrampolineScheduler_(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersTrampolineScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)compareWithInt:(jint)x
               withInt:(jint)y {
  return RxSchedulersTrampolineScheduler_compareWithInt_withInt_(x, y);
}

+ (void)initialize {
  if (self == [RxSchedulersTrampolineScheduler class]) {
    RxSchedulersTrampolineScheduler_INSTANCE = new_RxSchedulersTrampolineScheduler_init();
    RxSchedulersTrampolineScheduler_COUNTER_UPDATER = JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_newUpdaterWithIOSClass_withNSString_(RxSchedulersTrampolineScheduler_class_(), @"counter");
    J2OBJC_SET_INITIALIZED(RxSchedulersTrampolineScheduler)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "instance", NULL, "Lrx.schedulers.TrampolineScheduler;", 0x8, NULL, NULL },
    { "createWorker", NULL, "Lrx.Scheduler$Worker;", 0x1, NULL, NULL },
    { "init", "TrampolineScheduler", NULL, 0x0, NULL, NULL },
    { "compareWithInt:withInt:", "compare", "I", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x1a, "Lrx.schedulers.TrampolineScheduler;", &RxSchedulersTrampolineScheduler_INSTANCE, NULL, .constantValue.asLong = 0 },
    { "counter_", NULL, 0x40, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "COUNTER_UPDATER", "COUNTER_UPDATER", 0x18, "Ljava.util.concurrent.atomic.AtomicIntegerFieldUpdater;", &RxSchedulersTrampolineScheduler_COUNTER_UPDATER, "Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater<Lrx/schedulers/TrampolineScheduler;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lrx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler;", "Lrx.schedulers.TrampolineScheduler$TimedAction;"};
  static const J2ObjcClassInfo _RxSchedulersTrampolineScheduler = { 2, "TrampolineScheduler", "rx.schedulers", NULL, 0x11, 4, methods, 3, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_RxSchedulersTrampolineScheduler;
}

@end

RxSchedulersTrampolineScheduler *RxSchedulersTrampolineScheduler_instance() {
  RxSchedulersTrampolineScheduler_initialize();
  return RxSchedulersTrampolineScheduler_INSTANCE;
}

void RxSchedulersTrampolineScheduler_init(RxSchedulersTrampolineScheduler *self) {
  RxScheduler_init(self);
}

RxSchedulersTrampolineScheduler *new_RxSchedulersTrampolineScheduler_init() {
  RxSchedulersTrampolineScheduler *self = [RxSchedulersTrampolineScheduler alloc];
  RxSchedulersTrampolineScheduler_init(self);
  return self;
}

RxSchedulersTrampolineScheduler *create_RxSchedulersTrampolineScheduler_init() {
  return new_RxSchedulersTrampolineScheduler_init();
}

jint RxSchedulersTrampolineScheduler_compareWithInt_withInt_(jint x, jint y) {
  RxSchedulersTrampolineScheduler_initialize();
  return (x < y) ? -1 : ((x == y) ? 0 : 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTrampolineScheduler)

@implementation RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  return RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(self, action, [self now]);
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  jlong execTime = [self now] + [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toMillisWithLong:delayTime];
  return RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(self, new_RxSchedulersSleepingAction_initWithRxFunctionsAction0_withRxScheduler_Worker_withLong_(action, self, execTime), execTime);
}

- (id<RxSubscription>)enqueueWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                           withLong:(jlong)execTime {
  return RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(self, action, execTime);
}

- (void)unsubscribe {
  [((RxSubscriptionsBooleanSubscription *) nil_chk(innerSubscription_)) unsubscribe];
}

- (jboolean)isUnsubscribed {
  return [((RxSubscriptionsBooleanSubscription *) nil_chk(innerSubscription_)) isUnsubscribed];
}

- (instancetype)initWithRxSchedulersTrampolineScheduler:(RxSchedulersTrampolineScheduler *)outer$ {
  RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_initWithRxSchedulersTrampolineScheduler_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "scheduleWithRxFunctionsAction0:", "schedule", "Lrx.Subscription;", 0x1, NULL, NULL },
    { "scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:", "schedule", "Lrx.Subscription;", 0x1, NULL, NULL },
    { "enqueueWithRxFunctionsAction0:withLong:", "enqueue", "Lrx.Subscription;", 0x2, NULL, NULL },
    { "unsubscribe", NULL, "V", 0x1, NULL, NULL },
    { "isUnsubscribed", NULL, "Z", 0x1, NULL, NULL },
    { "initWithRxSchedulersTrampolineScheduler:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrx.schedulers.TrampolineScheduler;", NULL, NULL, .constantValue.asLong = 0 },
    { "queue_", NULL, 0x10, "Ljava.util.PriorityQueue;", NULL, "Ljava/util/PriorityQueue<Lrx/schedulers/TrampolineScheduler$TimedAction;>;", .constantValue.asLong = 0 },
    { "innerSubscription_", NULL, 0x12, "Lrx.subscriptions.BooleanSubscription;", NULL, NULL, .constantValue.asLong = 0 },
    { "wip_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicInteger;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler = { 2, "InnerCurrentThreadScheduler", "rx.schedulers", "TrampolineScheduler", 0x2, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler;
}

@end

id<RxSubscription> RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self, id<RxFunctionsAction0> action, jlong execTime) {
  if ([((RxSubscriptionsBooleanSubscription *) nil_chk(self->innerSubscription_)) isUnsubscribed]) {
    return RxSubscriptionsSubscriptions_empty();
  }
  RxSchedulersTrampolineScheduler_TimedAction *timedAction = new_RxSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(action, JavaLangLong_valueOfWithLong_(execTime), [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(JreLoadStatic(RxSchedulersTrampolineScheduler, COUNTER_UPDATER))) incrementAndGetWithId:self->this$0_]);
  [((JavaUtilPriorityQueue *) nil_chk(self->queue_)) addWithId:timedAction];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->wip_)) getAndIncrement] == 0) {
    do {
      RxSchedulersTrampolineScheduler_TimedAction *polled = [self->queue_ poll];
      if (polled != nil) {
        [((id<RxFunctionsAction0>) nil_chk(polled->action_)) call];
      }
    }
    while ([self->wip_ decrementAndGet] > 0);
    return RxSubscriptionsSubscriptions_empty();
  }
  else {
    return RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(new_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxSchedulersTrampolineScheduler_TimedAction_(self, timedAction));
  }
}

void RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_initWithRxSchedulersTrampolineScheduler_(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self, RxSchedulersTrampolineScheduler *outer$) {
  self->this$0_ = outer$;
  RxScheduler_Worker_init(self);
  self->queue_ = new_JavaUtilPriorityQueue_init();
  self->innerSubscription_ = new_RxSubscriptionsBooleanSubscription_init();
  self->wip_ = new_JavaUtilConcurrentAtomicAtomicInteger_init();
}

RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *new_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_initWithRxSchedulersTrampolineScheduler_(RxSchedulersTrampolineScheduler *outer$) {
  RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self = [RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler alloc];
  RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_initWithRxSchedulersTrampolineScheduler_(self, outer$);
  return self;
}

RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *create_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_initWithRxSchedulersTrampolineScheduler_(RxSchedulersTrampolineScheduler *outer$) {
  return new_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_initWithRxSchedulersTrampolineScheduler_(outer$);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler)

@implementation RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1

- (void)call {
  JavaUtilPriorityQueue *_q = this$0_->queue_;
  if (_q != nil) {
    [_q removeWithId:val$timedAction_];
  }
}

- (instancetype)initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler:(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *)outer$
                                    withRxSchedulersTrampolineScheduler_TimedAction:(RxSchedulersTrampolineScheduler_TimedAction *)capture$0 {
  RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxSchedulersTrampolineScheduler_TimedAction_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", NULL, "V", 0x1, NULL, NULL },
    { "initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler:withRxSchedulersTrampolineScheduler_TimedAction:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$timedAction_", NULL, 0x1012, "Lrx.schedulers.TrampolineScheduler$TimedAction;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler", "enqueueWithRxFunctionsAction0:withLong:" };
  static const J2ObjcClassInfo _RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 = { 2, "", "rx.schedulers", "TrampolineScheduler$InnerCurrentThreadScheduler", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1;
}

@end

void RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxSchedulersTrampolineScheduler_TimedAction_(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *self, RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxSchedulersTrampolineScheduler_TimedAction *capture$0) {
  self->this$0_ = outer$;
  self->val$timedAction_ = capture$0;
  NSObject_init(self);
}

RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *new_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxSchedulersTrampolineScheduler_TimedAction_(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxSchedulersTrampolineScheduler_TimedAction *capture$0) {
  RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *self = [RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 alloc];
  RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxSchedulersTrampolineScheduler_TimedAction_(self, outer$, capture$0);
  return self;
}

RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *create_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxSchedulersTrampolineScheduler_TimedAction_(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxSchedulersTrampolineScheduler_TimedAction *capture$0) {
  return new_RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxSchedulersTrampolineScheduler_TimedAction_(outer$, capture$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1)

@implementation RxSchedulersTrampolineScheduler_TimedAction

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                          withJavaLangLong:(JavaLangLong *)execTime
                                   withInt:(jint)count {
  RxSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(self, action, execTime, count);
  return self;
}

- (jint)compareToWithId:(RxSchedulersTrampolineScheduler_TimedAction *)that {
  (void) cast_chk(that, [RxSchedulersTrampolineScheduler_TimedAction class]);
  jint result = [((JavaLangLong *) nil_chk(execTime_)) compareToWithId:((RxSchedulersTrampolineScheduler_TimedAction *) nil_chk(that))->execTime_];
  if (result == 0) {
    return RxSchedulersTrampolineScheduler_compareWithInt_withInt_(count_, that->count_);
  }
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxFunctionsAction0:withJavaLangLong:withInt:", "TimedAction", NULL, 0x2, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "action_", NULL, 0x10, "Lrx.functions.Action0;", NULL, NULL, .constantValue.asLong = 0 },
    { "execTime_", NULL, 0x10, "Ljava.lang.Long;", NULL, NULL, .constantValue.asLong = 0 },
    { "count_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxSchedulersTrampolineScheduler_TimedAction = { 2, "TimedAction", "rx.schedulers", "TrampolineScheduler", 0x1a, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lrx/schedulers/TrampolineScheduler$TimedAction;>;" };
  return &_RxSchedulersTrampolineScheduler_TimedAction;
}

@end

void RxSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(RxSchedulersTrampolineScheduler_TimedAction *self, id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) {
  NSObject_init(self);
  self->action_ = action;
  self->execTime_ = execTime;
  self->count_ = count;
}

RxSchedulersTrampolineScheduler_TimedAction *new_RxSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) {
  RxSchedulersTrampolineScheduler_TimedAction *self = [RxSchedulersTrampolineScheduler_TimedAction alloc];
  RxSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(self, action, execTime, count);
  return self;
}

RxSchedulersTrampolineScheduler_TimedAction *create_RxSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) {
  return new_RxSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(action, execTime, count);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTrampolineScheduler_TimedAction)
