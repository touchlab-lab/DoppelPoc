//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/observers/TestObserver.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "rx/Notification.h"
#include "rx/Observer.h"
#include "rx/observers/TestObserver.h"

@interface RxObserversTestObserver () {
 @public
  id<RxObserver> delegate_;
  JavaUtilArrayList *onNextEvents_;
  JavaUtilArrayList *onErrorEvents_;
  JavaUtilArrayList *onCompletedEvents_;
}

@end

J2OBJC_FIELD_SETTER(RxObserversTestObserver, delegate_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxObserversTestObserver, onNextEvents_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(RxObserversTestObserver, onErrorEvents_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(RxObserversTestObserver, onCompletedEvents_, JavaUtilArrayList *)

inline id<RxObserver> RxObserversTestObserver_get_INERT();
inline id<RxObserver> RxObserversTestObserver_set_INERT(id<RxObserver> value);
static id<RxObserver> RxObserversTestObserver_INERT;
J2OBJC_STATIC_FIELD_OBJ(RxObserversTestObserver, INERT, id<RxObserver>)

@interface RxObserversTestObserver_$1 : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;
#ifdef J2OBJC_RENAME_ALIASES
#define onErrorWithJavaLangThrowable onErrorWithNSException
#endif // J2OBJC_RENAME_ALIASES

- (void)onNextWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversTestObserver_$1)

__attribute__((unused)) static void RxObserversTestObserver_$1_init(RxObserversTestObserver_$1 *self);

__attribute__((unused)) static RxObserversTestObserver_$1 *new_RxObserversTestObserver_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversTestObserver_$1 *create_RxObserversTestObserver_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObserversTestObserver_$1)

J2OBJC_INITIALIZED_DEFN(RxObserversTestObserver)

@implementation RxObserversTestObserver

- (instancetype)initWithRxObserver:(id<RxObserver>)delegate {
  RxObserversTestObserver_initWithRxObserver_(self, delegate);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCompleted {
  [((JavaUtilArrayList *) nil_chk(onCompletedEvents_)) addWithId:RxNotification_createOnCompleted()];
  [((id<RxObserver>) nil_chk(delegate_)) onCompleted];
}

- (id<JavaUtilList>)getOnCompletedEvents {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(onCompletedEvents_);
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilArrayList *) nil_chk(onErrorEvents_)) addWithId:e];
  [((id<RxObserver>) nil_chk(delegate_)) onErrorWithNSException:e];
}

- (id<JavaUtilList>)getOnErrorEvents {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(onErrorEvents_);
}

- (void)onNextWithId:(id)t {
  [((JavaUtilArrayList *) nil_chk(onNextEvents_)) addWithId:t];
  [((id<RxObserver>) nil_chk(delegate_)) onNextWithId:t];
}

- (id<JavaUtilList>)getOnNextEvents {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(onNextEvents_);
}

- (id<JavaUtilList>)getEvents {
  JavaUtilArrayList *events = new_JavaUtilArrayList_init();
  [events addWithId:onNextEvents_];
  [events addWithId:onErrorEvents_];
  [events addWithId:onCompletedEvents_];
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(events);
}

- (void)assertReceivedOnNextWithJavaUtilList:(id<JavaUtilList>)items {
  if ([((JavaUtilArrayList *) nil_chk(onNextEvents_)) size] != [((id<JavaUtilList>) nil_chk(items)) size]) {
    @throw new_JavaLangAssertionError_initWithId_(JreStrcat("$I$I", @"Number of items does not match. Provided: ", [items size], @"  Actual: ", [onNextEvents_ size]));
  }
  for (jint i = 0; i < [items size]; i++) {
    if ([items getWithInt:i] == nil) {
      if ([onNextEvents_ getWithInt:i] != nil) {
        @throw new_JavaLangAssertionError_initWithId_(JreStrcat("$I$@C", @"Value at index: ", i, @" expected to be [null] but was: [", [onNextEvents_ getWithInt:i], ']'));
      }
    }
    else if (![((id) nil_chk([items getWithInt:i])) isEqual:[onNextEvents_ getWithInt:i]]) {
      @throw new_JavaLangAssertionError_initWithId_(JreStrcat("$I$@$$$@$$C", @"Value at index: ", i, @" expected to be [", [items getWithInt:i], @"] (", [[((id) nil_chk([items getWithInt:i])) getClass] getSimpleName], @") but was: [", [onNextEvents_ getWithInt:i], @"] (", [[((id) nil_chk([onNextEvents_ getWithInt:i])) getClass] getSimpleName], ')'));
    }
  }
}

- (void)assertTerminalEvent {
  if ([((JavaUtilArrayList *) nil_chk(onErrorEvents_)) size] > 1) {
    @throw new_JavaLangAssertionError_initWithId_(JreStrcat("$I", @"Too many onError events: ", [onErrorEvents_ size]));
  }
  if ([((JavaUtilArrayList *) nil_chk(onCompletedEvents_)) size] > 1) {
    @throw new_JavaLangAssertionError_initWithId_(JreStrcat("$I", @"Too many onCompleted events: ", [onCompletedEvents_ size]));
  }
  if ([onCompletedEvents_ size] == 1 && [onErrorEvents_ size] == 1) {
    @throw new_JavaLangAssertionError_initWithId_(@"Received both an onError and onCompleted. Should be one or the other.");
  }
  if ([onCompletedEvents_ size] == 0 && [onErrorEvents_ size] == 0) {
    @throw new_JavaLangAssertionError_initWithId_(@"No terminal events received.");
  }
}

+ (void)initialize {
  if (self == [RxObserversTestObserver class]) {
    RxObserversTestObserver_INERT = new_RxObserversTestObserver_$1_init();
    J2OBJC_SET_INITIALIZED(RxObserversTestObserver)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxObserver:", "TestObserver", NULL, 0x1, NULL, "(Lrx/Observer<TT;>;)V" },
    { "init", "TestObserver", NULL, 0x1, NULL, NULL },
    { "onCompleted", NULL, "V", 0x1, NULL, NULL },
    { "getOnCompletedEvents", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lrx/Notification<TT;>;>;" },
    { "onErrorWithNSException:", "onError", "V", 0x1, NULL, NULL },
    { "getOnErrorEvents", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Ljava/lang/Throwable;>;" },
    { "onNextWithId:", "onNext", "V", 0x1, NULL, "(TT;)V" },
    { "getOnNextEvents", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<TT;>;" },
    { "getEvents", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Ljava/lang/Object;>;" },
    { "assertReceivedOnNextWithJavaUtilList:", "assertReceivedOnNext", "V", 0x1, NULL, "(Ljava/util/List<TT;>;)V" },
    { "assertTerminalEvent", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", NULL, 0x12, "Lrx.Observer;", NULL, "Lrx/Observer<TT;>;", .constantValue.asLong = 0 },
    { "onNextEvents_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<TT;>;", .constantValue.asLong = 0 },
    { "onErrorEvents_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Throwable;>;", .constantValue.asLong = 0 },
    { "onCompletedEvents_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lrx/Notification<TT;>;>;", .constantValue.asLong = 0 },
    { "INERT", "INERT", 0xa, "Lrx.Observer;", &RxObserversTestObserver_INERT, "Lrx/Observer<Ljava/lang/Object;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxObserversTestObserver = { 2, "TestObserver", "rx.observers", NULL, 0x1, 11, methods, 5, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observer<TT;>;" };
  return &_RxObserversTestObserver;
}

@end

void RxObserversTestObserver_initWithRxObserver_(RxObserversTestObserver *self, id<RxObserver> delegate) {
  NSObject_init(self);
  self->onNextEvents_ = new_JavaUtilArrayList_init();
  self->onErrorEvents_ = new_JavaUtilArrayList_init();
  self->onCompletedEvents_ = new_JavaUtilArrayList_init();
  self->delegate_ = delegate;
}

RxObserversTestObserver *new_RxObserversTestObserver_initWithRxObserver_(id<RxObserver> delegate) {
  RxObserversTestObserver *self = [RxObserversTestObserver alloc];
  RxObserversTestObserver_initWithRxObserver_(self, delegate);
  return self;
}

RxObserversTestObserver *create_RxObserversTestObserver_initWithRxObserver_(id<RxObserver> delegate) {
  return new_RxObserversTestObserver_initWithRxObserver_(delegate);
}

void RxObserversTestObserver_init(RxObserversTestObserver *self) {
  NSObject_init(self);
  self->onNextEvents_ = new_JavaUtilArrayList_init();
  self->onErrorEvents_ = new_JavaUtilArrayList_init();
  self->onCompletedEvents_ = new_JavaUtilArrayList_init();
  self->delegate_ = RxObserversTestObserver_INERT;
}

RxObserversTestObserver *new_RxObserversTestObserver_init() {
  RxObserversTestObserver *self = [RxObserversTestObserver alloc];
  RxObserversTestObserver_init(self);
  return self;
}

RxObserversTestObserver *create_RxObserversTestObserver_init() {
  return new_RxObserversTestObserver_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversTestObserver)

@implementation RxObserversTestObserver_$1

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(id)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestObserver_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onCompleted", NULL, "V", 0x1, NULL, NULL },
    { "onErrorWithNSException:", "onError", "V", 0x1, NULL, NULL },
    { "onNextWithId:", "onNext", "V", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _RxObserversTestObserver_$1 = { 2, "", "rx.observers", "TestObserver", 0x8008, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Object;>;" };
  return &_RxObserversTestObserver_$1;
}

@end

void RxObserversTestObserver_$1_init(RxObserversTestObserver_$1 *self) {
  NSObject_init(self);
}

RxObserversTestObserver_$1 *new_RxObserversTestObserver_$1_init() {
  RxObserversTestObserver_$1 *self = [RxObserversTestObserver_$1 alloc];
  RxObserversTestObserver_$1_init(self);
  return self;
}

RxObserversTestObserver_$1 *create_RxObserversTestObserver_$1_init() {
  return new_RxObserversTestObserver_$1_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversTestObserver_$1)
