//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/observers/SafeSubscriber.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "rx/Subscriber.h"
#include "rx/exceptions/CompositeException.h"
#include "rx/exceptions/Exceptions.h"
#include "rx/exceptions/OnErrorFailedException.h"
#include "rx/exceptions/OnErrorNotImplementedException.h"
#include "rx/observers/SafeSubscriber.h"
#include "rx/plugins/RxJavaErrorHandler.h"
#include "rx/plugins/RxJavaPlugins.h"

@interface RxObserversSafeSubscriber () {
 @public
  RxSubscriber *actual_;
}

- (void)handlePluginExceptionWithNSException:(NSException *)pluginException;
#ifdef J2OBJC_RENAME_ALIASES
#define handlePluginExceptionWithJavaLangThrowable handlePluginExceptionWithNSException
#endif // J2OBJC_RENAME_ALIASES

@end

J2OBJC_FIELD_SETTER(RxObserversSafeSubscriber, actual_, RxSubscriber *)

__attribute__((unused)) static void RxObserversSafeSubscriber_handlePluginExceptionWithNSException_(RxObserversSafeSubscriber *self, NSException *pluginException);

@implementation RxObserversSafeSubscriber

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual {
  RxObserversSafeSubscriber_initWithRxSubscriber_(self, actual);
  return self;
}

- (void)onCompleted {
  if (!done_) {
    done_ = true;
    @try {
      [((RxSubscriber *) nil_chk(actual_)) onCompleted];
    }
    @catch (NSException *e) {
      RxExceptionsExceptions_throwIfFatalWithNSException_(e);
      [self _onErrorWithNSException:e];
    }
    @finally {
      [self unsubscribe];
    }
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  RxExceptionsExceptions_throwIfFatalWithNSException_(e);
  if (!done_) {
    done_ = true;
    [self _onErrorWithNSException:e];
  }
}

- (void)onNextWithId:(id)args {
  @try {
    if (!done_) {
      [((RxSubscriber *) nil_chk(actual_)) onNextWithId:args];
    }
  }
  @catch (NSException *e) {
    RxExceptionsExceptions_throwIfFatalWithNSException_(e);
    [self onErrorWithNSException:e];
  }
}

- (void)_onErrorWithNSException:(NSException *)e {
  @try {
    [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleErrorWithNSException:e];
  }
  @catch (NSException *pluginException) {
    RxObserversSafeSubscriber_handlePluginExceptionWithNSException_(self, pluginException);
  }
  @try {
    [((RxSubscriber *) nil_chk(actual_)) onErrorWithNSException:e];
  }
  @catch (NSException *e2) {
    if ([e2 isKindOfClass:[RxExceptionsOnErrorNotImplementedException class]]) {
      @try {
        [self unsubscribe];
      }
      @catch (NSException *unsubscribeException) {
        @try {
          [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleErrorWithNSException:unsubscribeException];
        }
        @catch (NSException *pluginException) {
          RxObserversSafeSubscriber_handlePluginExceptionWithNSException_(self, pluginException);
        }
        @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(@"Observer.onError not implemented and error while unsubscribing.", new_RxExceptionsCompositeException_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ e, unsubscribeException } count:2 type:NSException_class_()])));
      }
      @throw (RxExceptionsOnErrorNotImplementedException *) cast_chk(e2, [RxExceptionsOnErrorNotImplementedException class]);
    }
    else {
      @try {
        [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleErrorWithNSException:e2];
      }
      @catch (NSException *pluginException) {
        RxObserversSafeSubscriber_handlePluginExceptionWithNSException_(self, pluginException);
      }
      @try {
        [self unsubscribe];
      }
      @catch (NSException *unsubscribeException) {
        @try {
          [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleErrorWithNSException:unsubscribeException];
        }
        @catch (NSException *pluginException) {
          RxObserversSafeSubscriber_handlePluginExceptionWithNSException_(self, pluginException);
        }
        @throw new_RxExceptionsOnErrorFailedException_initWithNSString_withNSException_(@"Error occurred when trying to propagate error to Observer.onError and during unsubscription.", new_RxExceptionsCompositeException_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ e, e2, unsubscribeException } count:3 type:NSException_class_()])));
      }
      @throw new_RxExceptionsOnErrorFailedException_initWithNSString_withNSException_(@"Error occurred when trying to propagate error to Observer.onError", new_RxExceptionsCompositeException_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ e, e2 } count:2 type:NSException_class_()])));
    }
  }
  @try {
    [self unsubscribe];
  }
  @catch (JavaLangRuntimeException *unsubscribeException) {
    @try {
      [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleErrorWithNSException:unsubscribeException];
    }
    @catch (NSException *pluginException) {
      RxObserversSafeSubscriber_handlePluginExceptionWithNSException_(self, pluginException);
    }
    @throw new_RxExceptionsOnErrorFailedException_initWithNSException_(unsubscribeException);
  }
}

- (void)handlePluginExceptionWithNSException:(NSException *)pluginException {
  RxObserversSafeSubscriber_handlePluginExceptionWithNSException_(self, pluginException);
}

- (RxSubscriber *)getActual {
  return actual_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxSubscriber:", "SafeSubscriber", NULL, 0x1, NULL, "(Lrx/Subscriber<-TT;>;)V" },
    { "onCompleted", NULL, "V", 0x1, NULL, NULL },
    { "onErrorWithNSException:", "onError", "V", 0x1, NULL, NULL },
    { "onNextWithId:", "onNext", "V", 0x1, NULL, "(TT;)V" },
    { "_onErrorWithNSException:", "_onError", "V", 0x4, NULL, NULL },
    { "handlePluginExceptionWithNSException:", "handlePluginException", "V", 0x2, NULL, NULL },
    { "getActual", NULL, "Lrx.Subscriber;", 0x1, NULL, "()Lrx/Subscriber<-TT;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", NULL, 0x12, "Lrx.Subscriber;", NULL, "Lrx/Subscriber<-TT;>;", .constantValue.asLong = 0 },
    { "done_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjcClassInfo _RxObserversSafeSubscriber = { 2, "SafeSubscriber", "rx.observers", NULL, 0x1, 7, methods, 2, fields, 1, superclass_type_args, 0, NULL, NULL, "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;" };
  return &_RxObserversSafeSubscriber;
}

@end

void RxObserversSafeSubscriber_initWithRxSubscriber_(RxObserversSafeSubscriber *self, RxSubscriber *actual) {
  RxSubscriber_initWithRxSubscriber_(self, actual);
  self->done_ = false;
  self->actual_ = actual;
}

RxObserversSafeSubscriber *new_RxObserversSafeSubscriber_initWithRxSubscriber_(RxSubscriber *actual) {
  RxObserversSafeSubscriber *self = [RxObserversSafeSubscriber alloc];
  RxObserversSafeSubscriber_initWithRxSubscriber_(self, actual);
  return self;
}

RxObserversSafeSubscriber *create_RxObserversSafeSubscriber_initWithRxSubscriber_(RxSubscriber *actual) {
  return new_RxObserversSafeSubscriber_initWithRxSubscriber_(actual);
}

void RxObserversSafeSubscriber_handlePluginExceptionWithNSException_(RxObserversSafeSubscriber *self, NSException *pluginException) {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"RxJavaErrorHandler threw an Exception. It shouldn't. => ", [((NSException *) nil_chk(pluginException)) getMessage])];
  [pluginException printStackTrace];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSafeSubscriber)
