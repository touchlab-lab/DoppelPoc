//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/exceptions/CompositeException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxExceptionsCompositeException_INCLUDE_ALL")
#ifdef RxExceptionsCompositeException_RESTRICT
#define RxExceptionsCompositeException_INCLUDE_ALL 0
#else
#define RxExceptionsCompositeException_INCLUDE_ALL 1
#endif
#undef RxExceptionsCompositeException_RESTRICT

#if !defined (RxExceptionsCompositeException_) && (RxExceptionsCompositeException_INCLUDE_ALL || defined(RxExceptionsCompositeException_INCLUDE))
#define RxExceptionsCompositeException_

#define JavaLangRuntimeException_RESTRICT 1
#define JavaLangRuntimeException_INCLUDE 1
#include "java/lang/RuntimeException.h"

@class JavaIoPrintStream;
@class JavaIoPrintWriter;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

@interface RxExceptionsCompositeException : JavaLangRuntimeException

#pragma mark Public

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)errors;

- (instancetype)initWithNSString:(NSString *)messagePrefix
          withJavaUtilCollection:(id<JavaUtilCollection>)errors;

- (NSException *)getCause;

- (id<JavaUtilList>)getExceptions;

- (NSString *)getMessage;

- (void)printStackTrace;

- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)s;

- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsCompositeException)

FOUNDATION_EXPORT void RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(RxExceptionsCompositeException *self, NSString *messagePrefix, id<JavaUtilCollection> errors);

FOUNDATION_EXPORT RxExceptionsCompositeException *new_RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(NSString *messagePrefix, id<JavaUtilCollection> errors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsCompositeException *create_RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(NSString *messagePrefix, id<JavaUtilCollection> errors);

FOUNDATION_EXPORT void RxExceptionsCompositeException_initWithJavaUtilCollection_(RxExceptionsCompositeException *self, id<JavaUtilCollection> errors);

FOUNDATION_EXPORT RxExceptionsCompositeException *new_RxExceptionsCompositeException_initWithJavaUtilCollection_(id<JavaUtilCollection> errors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsCompositeException *create_RxExceptionsCompositeException_initWithJavaUtilCollection_(id<JavaUtilCollection> errors);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsCompositeException)

#endif

#if !defined (RxExceptionsCompositeException_CompositeExceptionCausalChain_) && (RxExceptionsCompositeException_INCLUDE_ALL || defined(RxExceptionsCompositeException_CompositeExceptionCausalChain_INCLUDE))
#define RxExceptionsCompositeException_CompositeExceptionCausalChain_

#define JavaLangRuntimeException_RESTRICT 1
#define JavaLangRuntimeException_INCLUDE 1
#include "java/lang/RuntimeException.h"

@interface RxExceptionsCompositeException_CompositeExceptionCausalChain : JavaLangRuntimeException

#pragma mark Public

- (NSString *)getMessage;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsCompositeException_CompositeExceptionCausalChain)

inline NSString *RxExceptionsCompositeException_CompositeExceptionCausalChain_get_MESSAGE();
inline NSString *RxExceptionsCompositeException_CompositeExceptionCausalChain_set_MESSAGE(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *RxExceptionsCompositeException_CompositeExceptionCausalChain_MESSAGE;
J2OBJC_STATIC_FIELD_OBJ(RxExceptionsCompositeException_CompositeExceptionCausalChain, MESSAGE, NSString *)

FOUNDATION_EXPORT void RxExceptionsCompositeException_CompositeExceptionCausalChain_init(RxExceptionsCompositeException_CompositeExceptionCausalChain *self);

FOUNDATION_EXPORT RxExceptionsCompositeException_CompositeExceptionCausalChain *new_RxExceptionsCompositeException_CompositeExceptionCausalChain_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsCompositeException_CompositeExceptionCausalChain *create_RxExceptionsCompositeException_CompositeExceptionCausalChain_init();

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsCompositeException_CompositeExceptionCausalChain)

#endif

#pragma pop_macro("RxExceptionsCompositeException_INCLUDE_ALL")
