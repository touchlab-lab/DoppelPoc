//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/exceptions/Exceptions.java
//

#include "J2ObjC_source.h"
#include "java/lang/Error.h"
#include "java/lang/LinkageError.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StackOverflowError.h"
#include "java/lang/ThreadDeath.h"
#include "java/lang/VirtualMachineError.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "rx/exceptions/Exceptions.h"
#include "rx/exceptions/OnErrorFailedException.h"
#include "rx/exceptions/OnErrorNotImplementedException.h"

@interface RxExceptionsExceptions ()

- (instancetype)init;

@end

inline jint RxExceptionsExceptions_get_MAX_DEPTH();
#define RxExceptionsExceptions_MAX_DEPTH 25
J2OBJC_STATIC_FIELD_CONSTANT(RxExceptionsExceptions, MAX_DEPTH, jint)

__attribute__((unused)) static void RxExceptionsExceptions_init(RxExceptionsExceptions *self);

__attribute__((unused)) static RxExceptionsExceptions *new_RxExceptionsExceptions_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptions *create_RxExceptionsExceptions_init();

@implementation RxExceptionsExceptions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaLangRuntimeException *)propagateWithNSException:(NSException *)t {
  return RxExceptionsExceptions_propagateWithNSException_(t);
}

+ (void)throwIfFatalWithNSException:(NSException *)t {
  RxExceptionsExceptions_throwIfFatalWithNSException_(t);
}

+ (void)addCauseWithNSException:(NSException *)e
                withNSException:(NSException *)cause {
  RxExceptionsExceptions_addCauseWithNSException_withNSException_(e, cause);
}

+ (NSException *)getFinalCauseWithNSException:(NSException *)e {
  return RxExceptionsExceptions_getFinalCauseWithNSException_(e);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Exceptions", NULL, 0x2, NULL, NULL },
    { "propagateWithNSException:", "propagate", "Ljava.lang.RuntimeException;", 0x9, NULL, NULL },
    { "throwIfFatalWithNSException:", "throwIfFatal", "V", 0x9, NULL, NULL },
    { "addCauseWithNSException:withNSException:", "addCause", "V", 0x9, NULL, NULL },
    { "getFinalCauseWithNSException:", "getFinalCause", "Ljava.lang.Throwable;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_DEPTH", "MAX_DEPTH", 0x1a, "I", NULL, NULL, .constantValue.asInt = RxExceptionsExceptions_MAX_DEPTH },
  };
  static const J2ObjcClassInfo _RxExceptionsExceptions = { 2, "Exceptions", "rx.exceptions", NULL, 0x11, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxExceptionsExceptions;
}

@end

void RxExceptionsExceptions_init(RxExceptionsExceptions *self) {
  NSObject_init(self);
}

RxExceptionsExceptions *new_RxExceptionsExceptions_init() {
  RxExceptionsExceptions *self = [RxExceptionsExceptions alloc];
  RxExceptionsExceptions_init(self);
  return self;
}

RxExceptionsExceptions *create_RxExceptionsExceptions_init() {
  return new_RxExceptionsExceptions_init();
}

JavaLangRuntimeException *RxExceptionsExceptions_propagateWithNSException_(NSException *t) {
  RxExceptionsExceptions_initialize();
  if ([t isKindOfClass:[JavaLangRuntimeException class]]) {
    @throw (JavaLangRuntimeException *) cast_chk(t, [JavaLangRuntimeException class]);
  }
  else if ([t isKindOfClass:[JavaLangError class]]) {
    @throw (JavaLangError *) cast_chk(t, [JavaLangError class]);
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSException_(t);
  }
}

void RxExceptionsExceptions_throwIfFatalWithNSException_(NSException *t) {
  RxExceptionsExceptions_initialize();
  if ([t isKindOfClass:[RxExceptionsOnErrorNotImplementedException class]]) {
    @throw (RxExceptionsOnErrorNotImplementedException *) cast_chk(t, [RxExceptionsOnErrorNotImplementedException class]);
  }
  else if ([t isKindOfClass:[RxExceptionsOnErrorFailedException class]]) {
    NSException *cause = [((RxExceptionsOnErrorFailedException *) nil_chk(((RxExceptionsOnErrorFailedException *) cast_chk(t, [RxExceptionsOnErrorFailedException class])))) getCause];
    if ([cause isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(cause, [JavaLangRuntimeException class]);
    }
    else {
      @throw (RxExceptionsOnErrorFailedException *) cast_chk(t, [RxExceptionsOnErrorFailedException class]);
    }
  }
  else if ([t isKindOfClass:[JavaLangStackOverflowError class]]) {
    @throw (JavaLangStackOverflowError *) cast_chk(t, [JavaLangStackOverflowError class]);
  }
  else if ([t isKindOfClass:[JavaLangVirtualMachineError class]]) {
    @throw (JavaLangVirtualMachineError *) cast_chk(t, [JavaLangVirtualMachineError class]);
  }
  else if ([t isKindOfClass:[JavaLangThreadDeath class]]) {
    @throw (JavaLangThreadDeath *) cast_chk(t, [JavaLangThreadDeath class]);
  }
  else if ([t isKindOfClass:[JavaLangLinkageError class]]) {
    @throw (JavaLangLinkageError *) cast_chk(t, [JavaLangLinkageError class]);
  }
}

void RxExceptionsExceptions_addCauseWithNSException_withNSException_(NSException *e, NSException *cause) {
  RxExceptionsExceptions_initialize();
  id<JavaUtilSet> seenCauses = new_JavaUtilHashSet_init();
  jint i = 0;
  while ([((NSException *) nil_chk(e)) getCause] != nil) {
    if (i++ >= RxExceptionsExceptions_MAX_DEPTH) {
      return;
    }
    e = [e getCause];
    if ([seenCauses containsWithId:[((NSException *) nil_chk(e)) getCause]]) {
      break;
    }
    else {
      [seenCauses addWithId:[e getCause]];
    }
  }
  @try {
    (void) [((NSException *) nil_chk(e)) initCauseWithNSException:cause];
  }
  @catch (NSException *t) {
  }
}

NSException *RxExceptionsExceptions_getFinalCauseWithNSException_(NSException *e) {
  RxExceptionsExceptions_initialize();
  jint i = 0;
  while ([((NSException *) nil_chk(e)) getCause] != nil) {
    if (i++ >= RxExceptionsExceptions_MAX_DEPTH) {
      return new_JavaLangRuntimeException_initWithNSString_(@"Stack too deep to get final cause");
    }
    e = [e getCause];
  }
  return e;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsExceptions)
