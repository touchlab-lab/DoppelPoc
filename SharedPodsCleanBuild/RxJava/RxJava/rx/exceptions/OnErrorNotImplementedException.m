//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/RxJava/src/main/java/rx/exceptions/OnErrorNotImplementedException.java
//

#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "rx/exceptions/OnErrorNotImplementedException.h"

inline jlong RxExceptionsOnErrorNotImplementedException_get_serialVersionUID();
#define RxExceptionsOnErrorNotImplementedException_serialVersionUID -6298857009889503852LL
J2OBJC_STATIC_FIELD_CONSTANT(RxExceptionsOnErrorNotImplementedException, serialVersionUID, jlong)

@implementation RxExceptionsOnErrorNotImplementedException

- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)e {
  RxExceptionsOnErrorNotImplementedException_initWithNSString_withNSException_(self, message, e);
  return self;
}

- (instancetype)initWithNSException:(NSException *)e {
  RxExceptionsOnErrorNotImplementedException_initWithNSException_(self, e);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSException:", "OnErrorNotImplementedException", NULL, 0x1, NULL, NULL },
    { "initWithNSException:", "OnErrorNotImplementedException", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = RxExceptionsOnErrorNotImplementedException_serialVersionUID },
  };
  static const J2ObjcClassInfo _RxExceptionsOnErrorNotImplementedException = { 2, "OnErrorNotImplementedException", "rx.exceptions", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxExceptionsOnErrorNotImplementedException;
}

@end

void RxExceptionsOnErrorNotImplementedException_initWithNSString_withNSException_(RxExceptionsOnErrorNotImplementedException *self, NSString *message, NSException *e) {
  JavaLangRuntimeException_initWithNSString_withNSException_(self, message, e);
}

RxExceptionsOnErrorNotImplementedException *new_RxExceptionsOnErrorNotImplementedException_initWithNSString_withNSException_(NSString *message, NSException *e) {
  RxExceptionsOnErrorNotImplementedException *self = [RxExceptionsOnErrorNotImplementedException alloc];
  RxExceptionsOnErrorNotImplementedException_initWithNSString_withNSException_(self, message, e);
  return self;
}

RxExceptionsOnErrorNotImplementedException *create_RxExceptionsOnErrorNotImplementedException_initWithNSString_withNSException_(NSString *message, NSException *e) {
  return new_RxExceptionsOnErrorNotImplementedException_initWithNSString_withNSException_(message, e);
}

void RxExceptionsOnErrorNotImplementedException_initWithNSException_(RxExceptionsOnErrorNotImplementedException *self, NSException *e) {
  JavaLangRuntimeException_initWithNSString_withNSException_(self, [((NSException *) nil_chk(e)) getMessage], e);
}

RxExceptionsOnErrorNotImplementedException *new_RxExceptionsOnErrorNotImplementedException_initWithNSException_(NSException *e) {
  RxExceptionsOnErrorNotImplementedException *self = [RxExceptionsOnErrorNotImplementedException alloc];
  RxExceptionsOnErrorNotImplementedException_initWithNSException_(self, e);
  return self;
}

RxExceptionsOnErrorNotImplementedException *create_RxExceptionsOnErrorNotImplementedException_initWithNSException_(NSException *e) {
  return new_RxExceptionsOnErrorNotImplementedException_initWithNSException_(e);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsOnErrorNotImplementedException)
