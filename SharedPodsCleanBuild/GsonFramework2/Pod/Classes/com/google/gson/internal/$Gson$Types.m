//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/gson/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/internal/$Gson$Preconditions.h"
#include "com/google/gson/internal/$Gson$Types.h"
#include "java/io/Serializable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/GenericDeclaration.h"
#include "java/lang/reflect/Modifier.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/lang/reflect/WildcardType.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Properties.h"

@interface ComGoogleGsonInternal$Gson$Types ()

- (instancetype)init;

+ (jint)indexOfWithNSObjectArray:(IOSObjectArray *)array
                          withId:(id)toFind;

+ (IOSClass *)declaringClassOfWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable;

@end

__attribute__((unused)) static void ComGoogleGsonInternal$Gson$Types_init(ComGoogleGsonInternal$Gson$Types *self);

__attribute__((unused)) static ComGoogleGsonInternal$Gson$Types *new_ComGoogleGsonInternal$Gson$Types_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonInternal$Gson$Types *create_ComGoogleGsonInternal$Gson$Types_init();

__attribute__((unused)) static jint ComGoogleGsonInternal$Gson$Types_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id toFind);

__attribute__((unused)) static IOSClass *ComGoogleGsonInternal$Gson$Types_declaringClassOfWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable);

@interface ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl : NSObject < JavaLangReflectParameterizedType, JavaIoSerializable > {
 @public
  id<JavaLangReflectType> ownerType_;
  id<JavaLangReflectType> rawType_;
  IOSObjectArray *typeArguments_;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)ownerType
                    withJavaLangReflectType:(id<JavaLangReflectType>)rawType
               withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments;

- (IOSObjectArray *)getActualTypeArguments;

- (id<JavaLangReflectType>)getRawType;

- (id<JavaLangReflectType>)getOwnerType;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl)

J2OBJC_FIELD_SETTER(ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl, ownerType_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl, rawType_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl, typeArguments_, IOSObjectArray *)

inline jlong ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_get_serialVersionUID();
#define ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl, serialVersionUID, jlong)

__attribute__((unused)) static void ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl *self, id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments);

__attribute__((unused)) static ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl *new_ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl *create_ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl)

@interface ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl : NSObject < JavaLangReflectGenericArrayType, JavaIoSerializable > {
 @public
  id<JavaLangReflectType> componentType_;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)componentType;

- (id<JavaLangReflectType>)getGenericComponentType;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl)

J2OBJC_FIELD_SETTER(ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl, componentType_, id<JavaLangReflectType>)

inline jlong ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_get_serialVersionUID();
#define ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl, serialVersionUID, jlong)

__attribute__((unused)) static void ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl *self, id<JavaLangReflectType> componentType);

__attribute__((unused)) static ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl *new_ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl *create_ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl)

@interface ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl : NSObject < JavaLangReflectWildcardType, JavaIoSerializable > {
 @public
  id<JavaLangReflectType> upperBound_;
  id<JavaLangReflectType> lowerBound_;
}

- (instancetype)initWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds
                    withJavaLangReflectTypeArray:(IOSObjectArray *)lowerBounds;

- (IOSObjectArray *)getUpperBounds;

- (IOSObjectArray *)getLowerBounds;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl)

J2OBJC_FIELD_SETTER(ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl, upperBound_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl, lowerBound_, id<JavaLangReflectType>)

inline jlong ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_get_serialVersionUID();
#define ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl, serialVersionUID, jlong)

__attribute__((unused)) static void ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl *self, IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds);

__attribute__((unused)) static ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl *new_ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl *create_ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl)

J2OBJC_INITIALIZED_DEFN(ComGoogleGsonInternal$Gson$Types)

IOSObjectArray *ComGoogleGsonInternal$Gson$Types_EMPTY_TYPE_ARRAY;

@implementation ComGoogleGsonInternal$Gson$Types

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonInternal$Gson$Types_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaLangReflectParameterizedType>)newParameterizedTypeWithOwnerWithJavaLangReflectType:(id<JavaLangReflectType>)ownerType
                                                                     withJavaLangReflectType:(id<JavaLangReflectType>)rawType
                                                                withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments {
  return ComGoogleGsonInternal$Gson$Types_newParameterizedTypeWithOwnerWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(ownerType, rawType, typeArguments);
}

+ (id<JavaLangReflectGenericArrayType>)arrayOfWithJavaLangReflectType:(id<JavaLangReflectType>)componentType {
  return ComGoogleGsonInternal$Gson$Types_arrayOfWithJavaLangReflectType_(componentType);
}

+ (id<JavaLangReflectWildcardType>)subtypeOfWithJavaLangReflectType:(id<JavaLangReflectType>)bound {
  return ComGoogleGsonInternal$Gson$Types_subtypeOfWithJavaLangReflectType_(bound);
}

+ (id<JavaLangReflectWildcardType>)supertypeOfWithJavaLangReflectType:(id<JavaLangReflectType>)bound {
  return ComGoogleGsonInternal$Gson$Types_supertypeOfWithJavaLangReflectType_(bound);
}

+ (id<JavaLangReflectType>)canonicalizeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return ComGoogleGsonInternal$Gson$Types_canonicalizeWithJavaLangReflectType_(type);
}

+ (IOSClass *)getRawTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return ComGoogleGsonInternal$Gson$Types_getRawTypeWithJavaLangReflectType_(type);
}

+ (jboolean)equalWithId:(id)a
                 withId:(id)b {
  return ComGoogleGsonInternal$Gson$Types_equalWithId_withId_(a, b);
}

+ (jboolean)equalsWithJavaLangReflectType:(id<JavaLangReflectType>)a
                  withJavaLangReflectType:(id<JavaLangReflectType>)b {
  return ComGoogleGsonInternal$Gson$Types_equalsWithJavaLangReflectType_withJavaLangReflectType_(a, b);
}

+ (jint)hashCodeOrZeroWithId:(id)o {
  return ComGoogleGsonInternal$Gson$Types_hashCodeOrZeroWithId_(o);
}

+ (NSString *)typeToStringWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return ComGoogleGsonInternal$Gson$Types_typeToStringWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)getGenericSupertypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                         withIOSClass:(IOSClass *)rawType
                                                         withIOSClass:(IOSClass *)toResolve {
  return ComGoogleGsonInternal$Gson$Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, rawType, toResolve);
}

+ (id<JavaLangReflectType>)getSupertypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                  withIOSClass:(IOSClass *)contextRawType
                                                  withIOSClass:(IOSClass *)supertype {
  return ComGoogleGsonInternal$Gson$Types_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, supertype);
}

+ (id<JavaLangReflectType>)getArrayComponentTypeWithJavaLangReflectType:(id<JavaLangReflectType>)array {
  return ComGoogleGsonInternal$Gson$Types_getArrayComponentTypeWithJavaLangReflectType_(array);
}

+ (id<JavaLangReflectType>)getCollectionElementTypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                              withIOSClass:(IOSClass *)contextRawType {
  return ComGoogleGsonInternal$Gson$Types_getCollectionElementTypeWithJavaLangReflectType_withIOSClass_(context, contextRawType);
}

+ (IOSObjectArray *)getMapKeyAndValueTypesWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                     withIOSClass:(IOSClass *)contextRawType {
  return ComGoogleGsonInternal$Gson$Types_getMapKeyAndValueTypesWithJavaLangReflectType_withIOSClass_(context, contextRawType);
}

+ (id<JavaLangReflectType>)resolveWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                             withIOSClass:(IOSClass *)contextRawType
                                  withJavaLangReflectType:(id<JavaLangReflectType>)toResolve {
  return ComGoogleGsonInternal$Gson$Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, toResolve);
}

+ (id<JavaLangReflectType>)resolveTypeVariableWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                         withIOSClass:(IOSClass *)contextRawType
                                      withJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)unknown {
  return ComGoogleGsonInternal$Gson$Types_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(context, contextRawType, unknown);
}

+ (jint)indexOfWithNSObjectArray:(IOSObjectArray *)array
                          withId:(id)toFind {
  return ComGoogleGsonInternal$Gson$Types_indexOfWithNSObjectArray_withId_(array, toFind);
}

+ (IOSClass *)declaringClassOfWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable {
  return ComGoogleGsonInternal$Gson$Types_declaringClassOfWithJavaLangReflectTypeVariable_(typeVariable);
}

+ (void)checkNotPrimitiveWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  ComGoogleGsonInternal$Gson$Types_checkNotPrimitiveWithJavaLangReflectType_(type);
}

+ (void)initialize {
  if (self == [ComGoogleGsonInternal$Gson$Types class]) {
    ComGoogleGsonInternal$Gson$Types_EMPTY_TYPE_ARRAY = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:JavaLangReflectType_class_()];
    J2OBJC_SET_INITIALIZED(ComGoogleGsonInternal$Gson$Types)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "$Gson$Types", NULL, 0x2, NULL, NULL },
    { "newParameterizedTypeWithOwnerWithJavaLangReflectType:withJavaLangReflectType:withJavaLangReflectTypeArray:", "newParameterizedTypeWithOwner", "Ljava.lang.reflect.ParameterizedType;", 0x89, NULL, NULL },
    { "arrayOfWithJavaLangReflectType:", "arrayOf", "Ljava.lang.reflect.GenericArrayType;", 0x9, NULL, NULL },
    { "subtypeOfWithJavaLangReflectType:", "subtypeOf", "Ljava.lang.reflect.WildcardType;", 0x9, NULL, NULL },
    { "supertypeOfWithJavaLangReflectType:", "supertypeOf", "Ljava.lang.reflect.WildcardType;", 0x9, NULL, NULL },
    { "canonicalizeWithJavaLangReflectType:", "canonicalize", "Ljava.lang.reflect.Type;", 0x9, NULL, NULL },
    { "getRawTypeWithJavaLangReflectType:", "getRawType", "Ljava.lang.Class;", 0x9, NULL, "(Ljava/lang/reflect/Type;)Ljava/lang/Class<*>;" },
    { "equalWithId:withId:", "equal", "Z", 0x8, NULL, NULL },
    { "equalsWithJavaLangReflectType:withJavaLangReflectType:", "equals", "Z", 0x9, NULL, NULL },
    { "hashCodeOrZeroWithId:", "hashCodeOrZero", "I", 0x8, NULL, NULL },
    { "typeToStringWithJavaLangReflectType:", "typeToString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getGenericSupertypeWithJavaLangReflectType:withIOSClass:withIOSClass:", "getGenericSupertype", "Ljava.lang.reflect.Type;", 0x8, NULL, "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/Class<*>;)Ljava/lang/reflect/Type;" },
    { "getSupertypeWithJavaLangReflectType:withIOSClass:withIOSClass:", "getSupertype", "Ljava.lang.reflect.Type;", 0x8, NULL, "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/Class<*>;)Ljava/lang/reflect/Type;" },
    { "getArrayComponentTypeWithJavaLangReflectType:", "getArrayComponentType", "Ljava.lang.reflect.Type;", 0x9, NULL, NULL },
    { "getCollectionElementTypeWithJavaLangReflectType:withIOSClass:", "getCollectionElementType", "Ljava.lang.reflect.Type;", 0x9, NULL, "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;)Ljava/lang/reflect/Type;" },
    { "getMapKeyAndValueTypesWithJavaLangReflectType:withIOSClass:", "getMapKeyAndValueTypes", "[Ljava.lang.reflect.Type;", 0x9, NULL, "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;)[Ljava/lang/reflect/Type;" },
    { "resolveWithJavaLangReflectType:withIOSClass:withJavaLangReflectType:", "resolve", "Ljava.lang.reflect.Type;", 0x9, NULL, "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;" },
    { "resolveTypeVariableWithJavaLangReflectType:withIOSClass:withJavaLangReflectTypeVariable:", "resolveTypeVariable", "Ljava.lang.reflect.Type;", 0x8, NULL, "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/reflect/TypeVariable<*>;)Ljava/lang/reflect/Type;" },
    { "indexOfWithNSObjectArray:withId:", "indexOf", "I", 0xa, NULL, NULL },
    { "declaringClassOfWithJavaLangReflectTypeVariable:", "declaringClassOf", "Ljava.lang.Class;", 0xa, NULL, "(Ljava/lang/reflect/TypeVariable<*>;)Ljava/lang/Class<*>;" },
    { "checkNotPrimitiveWithJavaLangReflectType:", "checkNotPrimitive", "V", 0x8, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_TYPE_ARRAY", "EMPTY_TYPE_ARRAY", 0x18, "[Ljava.lang.reflect.Type;", &ComGoogleGsonInternal$Gson$Types_EMPTY_TYPE_ARRAY, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.google.gson.internal.$Gson$Types$ParameterizedTypeImpl;", "Lcom.google.gson.internal.$Gson$Types$GenericArrayTypeImpl;", "Lcom.google.gson.internal.$Gson$Types$WildcardTypeImpl;"};
  static const J2ObjcClassInfo _ComGoogleGsonInternal$Gson$Types = { 2, "$Gson$Types", "com.google.gson.internal", NULL, 0x11, 21, methods, 1, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_ComGoogleGsonInternal$Gson$Types;
}

@end

void ComGoogleGsonInternal$Gson$Types_init(ComGoogleGsonInternal$Gson$Types *self) {
  NSObject_init(self);
  @throw new_JavaLangUnsupportedOperationException_init();
}

ComGoogleGsonInternal$Gson$Types *new_ComGoogleGsonInternal$Gson$Types_init() {
  ComGoogleGsonInternal$Gson$Types *self = [ComGoogleGsonInternal$Gson$Types alloc];
  ComGoogleGsonInternal$Gson$Types_init(self);
  return self;
}

ComGoogleGsonInternal$Gson$Types *create_ComGoogleGsonInternal$Gson$Types_init() {
  return new_ComGoogleGsonInternal$Gson$Types_init();
}

id<JavaLangReflectParameterizedType> ComGoogleGsonInternal$Gson$Types_newParameterizedTypeWithOwnerWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  return new_ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(ownerType, rawType, typeArguments);
}

id<JavaLangReflectGenericArrayType> ComGoogleGsonInternal$Gson$Types_arrayOfWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  return new_ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(componentType);
}

id<JavaLangReflectWildcardType> ComGoogleGsonInternal$Gson$Types_subtypeOfWithJavaLangReflectType_(id<JavaLangReflectType> bound) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  return new_ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_([IOSObjectArray newArrayWithObjects:(id[]){ bound } count:1 type:JavaLangReflectType_class_()], ComGoogleGsonInternal$Gson$Types_EMPTY_TYPE_ARRAY);
}

id<JavaLangReflectWildcardType> ComGoogleGsonInternal$Gson$Types_supertypeOfWithJavaLangReflectType_(id<JavaLangReflectType> bound) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  return new_ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_([IOSObjectArray newArrayWithObjects:(id[]){ NSObject_class_() } count:1 type:JavaLangReflectType_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ bound } count:1 type:JavaLangReflectType_class_()]);
}

id<JavaLangReflectType> ComGoogleGsonInternal$Gson$Types_canonicalizeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  if ([type isKindOfClass:[IOSClass class]]) {
    IOSClass *c = (IOSClass *) cast_chk(type, [IOSClass class]);
    return [((IOSClass *) nil_chk(c)) isArray] ? new_ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(ComGoogleGsonInternal$Gson$Types_canonicalizeWithJavaLangReflectType_([c getComponentType])) : c;
  }
  else if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    id<JavaLangReflectParameterizedType> p = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
    return new_ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_([((id<JavaLangReflectParameterizedType>) nil_chk(p)) getOwnerType], [p getRawType], [p getActualTypeArguments]);
  }
  else if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    id<JavaLangReflectGenericArrayType> g = (id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_());
    return new_ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_([((id<JavaLangReflectGenericArrayType>) nil_chk(g)) getGenericComponentType]);
  }
  else if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    id<JavaLangReflectWildcardType> w = (id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_());
    return new_ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_([((id<JavaLangReflectWildcardType>) nil_chk(w)) getUpperBounds], [w getLowerBounds]);
  }
  else {
    return type;
  }
}

IOSClass *ComGoogleGsonInternal$Gson$Types_getRawTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  if ([type isKindOfClass:[IOSClass class]]) {
    return (IOSClass *) cast_chk(type, [IOSClass class]);
  }
  else if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectType> rawType = [((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getRawType];
    ComGoogleGsonInternal$Gson$Preconditions_checkArgumentWithBoolean_([rawType isKindOfClass:[IOSClass class]]);
    return (IOSClass *) cast_chk(rawType, [IOSClass class]);
  }
  else if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    id<JavaLangReflectType> componentType = [((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_())))) getGenericComponentType];
    return [nil_chk(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(ComGoogleGsonInternal$Gson$Types_getRawTypeWithJavaLangReflectType_(componentType), 0)) getClass];
  }
  else if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    return NSObject_class_();
  }
  else if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    return ComGoogleGsonInternal$Gson$Types_getRawTypeWithJavaLangReflectType_(IOSObjectArray_Get(nil_chk([((id<JavaLangReflectWildcardType>) nil_chk(((id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_())))) getUpperBounds]), 0));
  }
  else {
    NSString *className_ = type == nil ? @"null" : [[type getClass] getName];
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$$", @"Expected a Class, ParameterizedType, or GenericArrayType, but <", type, @"> is of type ", className_));
  }
}

jboolean ComGoogleGsonInternal$Gson$Types_equalWithId_withId_(id a, id b) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  return a == b || (a != nil && [a isEqual:b]);
}

jboolean ComGoogleGsonInternal$Gson$Types_equalsWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> a, id<JavaLangReflectType> b) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  if (a == b) {
    return true;
  }
  else if ([a isKindOfClass:[IOSClass class]]) {
    return [((id<JavaLangReflectType>) nil_chk(a)) isEqual:b];
  }
  else if ([JavaLangReflectParameterizedType_class_() isInstance:a]) {
    if (!([JavaLangReflectParameterizedType_class_() isInstance:b])) {
      return false;
    }
    id<JavaLangReflectParameterizedType> pa = (id<JavaLangReflectParameterizedType>) cast_check(a, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectParameterizedType> pb = (id<JavaLangReflectParameterizedType>) cast_check(b, JavaLangReflectParameterizedType_class_());
    return ComGoogleGsonInternal$Gson$Types_equalWithId_withId_([((id<JavaLangReflectParameterizedType>) nil_chk(pa)) getOwnerType], [((id<JavaLangReflectParameterizedType>) nil_chk(pb)) getOwnerType]) && [((id<JavaLangReflectType>) nil_chk([pa getRawType])) isEqual:[pb getRawType]] && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([pa getActualTypeArguments], [pb getActualTypeArguments]);
  }
  else if ([JavaLangReflectGenericArrayType_class_() isInstance:a]) {
    if (!([JavaLangReflectGenericArrayType_class_() isInstance:b])) {
      return false;
    }
    id<JavaLangReflectGenericArrayType> ga = (id<JavaLangReflectGenericArrayType>) cast_check(a, JavaLangReflectGenericArrayType_class_());
    id<JavaLangReflectGenericArrayType> gb = (id<JavaLangReflectGenericArrayType>) cast_check(b, JavaLangReflectGenericArrayType_class_());
    return ComGoogleGsonInternal$Gson$Types_equalsWithJavaLangReflectType_withJavaLangReflectType_([((id<JavaLangReflectGenericArrayType>) nil_chk(ga)) getGenericComponentType], [((id<JavaLangReflectGenericArrayType>) nil_chk(gb)) getGenericComponentType]);
  }
  else if ([JavaLangReflectWildcardType_class_() isInstance:a]) {
    if (!([JavaLangReflectWildcardType_class_() isInstance:b])) {
      return false;
    }
    id<JavaLangReflectWildcardType> wa = (id<JavaLangReflectWildcardType>) cast_check(a, JavaLangReflectWildcardType_class_());
    id<JavaLangReflectWildcardType> wb = (id<JavaLangReflectWildcardType>) cast_check(b, JavaLangReflectWildcardType_class_());
    return JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([((id<JavaLangReflectWildcardType>) nil_chk(wa)) getUpperBounds], [((id<JavaLangReflectWildcardType>) nil_chk(wb)) getUpperBounds]) && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([wa getLowerBounds], [wb getLowerBounds]);
  }
  else if ([JavaLangReflectTypeVariable_class_() isInstance:a]) {
    if (!([JavaLangReflectTypeVariable_class_() isInstance:b])) {
      return false;
    }
    id<JavaLangReflectTypeVariable> va = (id<JavaLangReflectTypeVariable>) cast_check(a, JavaLangReflectTypeVariable_class_());
    id<JavaLangReflectTypeVariable> vb = (id<JavaLangReflectTypeVariable>) cast_check(b, JavaLangReflectTypeVariable_class_());
    return [((id<JavaLangReflectTypeVariable>) nil_chk(va)) getGenericDeclaration] == (id) [((id<JavaLangReflectTypeVariable>) nil_chk(vb)) getGenericDeclaration] && [((NSString *) nil_chk([va getName])) isEqual:[vb getName]];
  }
  else {
    return false;
  }
}

jint ComGoogleGsonInternal$Gson$Types_hashCodeOrZeroWithId_(id o) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  return o != nil ? ((jint) [o hash]) : 0;
}

NSString *ComGoogleGsonInternal$Gson$Types_typeToStringWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  return [type isKindOfClass:[IOSClass class]] ? [((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) getName] : [((id<JavaLangReflectType>) nil_chk(type)) description];
}

id<JavaLangReflectType> ComGoogleGsonInternal$Gson$Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *rawType, IOSClass *toResolve) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  if (toResolve == rawType) {
    return context;
  }
  if ([((IOSClass *) nil_chk(toResolve)) isInterface]) {
    IOSObjectArray *interfaces = [((IOSClass *) nil_chk(rawType)) getInterfaces];
    for (jint i = 0, length = ((IOSObjectArray *) nil_chk(interfaces))->size_; i < length; i++) {
      if (IOSObjectArray_Get(interfaces, i) == toResolve) {
        return IOSObjectArray_Get(nil_chk([rawType getGenericInterfaces]), i);
      }
      else if ([toResolve isAssignableFrom:IOSObjectArray_Get(interfaces, i)]) {
        return ComGoogleGsonInternal$Gson$Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(IOSObjectArray_Get(nil_chk([rawType getGenericInterfaces]), i), IOSObjectArray_Get(interfaces, i), toResolve);
      }
    }
  }
  if (![((IOSClass *) nil_chk(rawType)) isInterface]) {
    while (rawType != NSObject_class_()) {
      IOSClass *rawSupertype = [rawType getSuperclass];
      if (rawSupertype == toResolve) {
        return [rawType getGenericSuperclass];
      }
      else if ([toResolve isAssignableFrom:rawSupertype]) {
        return ComGoogleGsonInternal$Gson$Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_([rawType getGenericSuperclass], rawSupertype, toResolve);
      }
      rawType = rawSupertype;
    }
  }
  return toResolve;
}

id<JavaLangReflectType> ComGoogleGsonInternal$Gson$Types_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *contextRawType, IOSClass *supertype) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  ComGoogleGsonInternal$Gson$Preconditions_checkArgumentWithBoolean_([((IOSClass *) nil_chk(supertype)) isAssignableFrom:contextRawType]);
  return ComGoogleGsonInternal$Gson$Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, ComGoogleGsonInternal$Gson$Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, supertype));
}

id<JavaLangReflectType> ComGoogleGsonInternal$Gson$Types_getArrayComponentTypeWithJavaLangReflectType_(id<JavaLangReflectType> array) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  return [JavaLangReflectGenericArrayType_class_() isInstance:array] ? ((id) [((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) cast_check(array, JavaLangReflectGenericArrayType_class_())))) getGenericComponentType]) : [((IOSClass *) nil_chk(((IOSClass *) cast_chk(array, [IOSClass class])))) getComponentType];
}

id<JavaLangReflectType> ComGoogleGsonInternal$Gson$Types_getCollectionElementTypeWithJavaLangReflectType_withIOSClass_(id<JavaLangReflectType> context, IOSClass *contextRawType) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  id<JavaLangReflectType> collectionType = ComGoogleGsonInternal$Gson$Types_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, JavaUtilCollection_class_());
  if ([JavaLangReflectWildcardType_class_() isInstance:collectionType]) {
    collectionType = IOSObjectArray_Get(nil_chk([((id<JavaLangReflectWildcardType>) nil_chk(((id<JavaLangReflectWildcardType>) cast_check(collectionType, JavaLangReflectWildcardType_class_())))) getUpperBounds]), 0);
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:collectionType]) {
    return IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(collectionType, JavaLangReflectParameterizedType_class_())))) getActualTypeArguments]), 0);
  }
  return NSObject_class_();
}

IOSObjectArray *ComGoogleGsonInternal$Gson$Types_getMapKeyAndValueTypesWithJavaLangReflectType_withIOSClass_(id<JavaLangReflectType> context, IOSClass *contextRawType) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  if (context == JavaUtilProperties_class_()) {
    return [IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_(), NSString_class_() } count:2 type:JavaLangReflectType_class_()];
  }
  id<JavaLangReflectType> mapType = ComGoogleGsonInternal$Gson$Types_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, JavaUtilMap_class_());
  if ([JavaLangReflectParameterizedType_class_() isInstance:mapType]) {
    id<JavaLangReflectParameterizedType> mapParameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(mapType, JavaLangReflectParameterizedType_class_());
    return [((id<JavaLangReflectParameterizedType>) nil_chk(mapParameterizedType)) getActualTypeArguments];
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ NSObject_class_(), NSObject_class_() } count:2 type:JavaLangReflectType_class_()];
}

id<JavaLangReflectType> ComGoogleGsonInternal$Gson$Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectType> toResolve) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  while (true) {
    if ([JavaLangReflectTypeVariable_class_() isInstance:toResolve]) {
      id<JavaLangReflectTypeVariable> typeVariable = (id<JavaLangReflectTypeVariable>) cast_check(toResolve, JavaLangReflectTypeVariable_class_());
      toResolve = ComGoogleGsonInternal$Gson$Types_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(context, contextRawType, typeVariable);
      if (toResolve == typeVariable) {
        return toResolve;
      }
    }
    else if ([toResolve isKindOfClass:[IOSClass class]] && [((IOSClass *) nil_chk(((IOSClass *) cast_chk(toResolve, [IOSClass class])))) isArray]) {
      IOSClass *original = (IOSClass *) cast_chk(toResolve, [IOSClass class]);
      id<JavaLangReflectType> componentType = [((IOSClass *) nil_chk(original)) getComponentType];
      id<JavaLangReflectType> newComponentType = ComGoogleGsonInternal$Gson$Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, componentType);
      return componentType == newComponentType ? original : ((id) ComGoogleGsonInternal$Gson$Types_arrayOfWithJavaLangReflectType_(newComponentType));
    }
    else if ([JavaLangReflectGenericArrayType_class_() isInstance:toResolve]) {
      id<JavaLangReflectGenericArrayType> original = (id<JavaLangReflectGenericArrayType>) cast_check(toResolve, JavaLangReflectGenericArrayType_class_());
      id<JavaLangReflectType> componentType = [((id<JavaLangReflectGenericArrayType>) nil_chk(original)) getGenericComponentType];
      id<JavaLangReflectType> newComponentType = ComGoogleGsonInternal$Gson$Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, componentType);
      return componentType == newComponentType ? original : ComGoogleGsonInternal$Gson$Types_arrayOfWithJavaLangReflectType_(newComponentType);
    }
    else if ([JavaLangReflectParameterizedType_class_() isInstance:toResolve]) {
      id<JavaLangReflectParameterizedType> original = (id<JavaLangReflectParameterizedType>) cast_check(toResolve, JavaLangReflectParameterizedType_class_());
      id<JavaLangReflectType> ownerType = [((id<JavaLangReflectParameterizedType>) nil_chk(original)) getOwnerType];
      id<JavaLangReflectType> newOwnerType = ComGoogleGsonInternal$Gson$Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, ownerType);
      jboolean changed = newOwnerType != ownerType;
      IOSObjectArray *args = [original getActualTypeArguments];
      for (jint t = 0, length = ((IOSObjectArray *) nil_chk(args))->size_; t < length; t++) {
        id<JavaLangReflectType> resolvedTypeArgument = ComGoogleGsonInternal$Gson$Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, IOSObjectArray_Get(args, t));
        if (resolvedTypeArgument != IOSObjectArray_Get(args, t)) {
          if (!changed) {
            args = [args clone];
            changed = true;
          }
          (void) IOSObjectArray_Set(nil_chk(args), t, resolvedTypeArgument);
        }
      }
      return changed ? ComGoogleGsonInternal$Gson$Types_newParameterizedTypeWithOwnerWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(newOwnerType, [original getRawType], args) : original;
    }
    else if ([JavaLangReflectWildcardType_class_() isInstance:toResolve]) {
      id<JavaLangReflectWildcardType> original = (id<JavaLangReflectWildcardType>) cast_check(toResolve, JavaLangReflectWildcardType_class_());
      IOSObjectArray *originalLowerBound = [((id<JavaLangReflectWildcardType>) nil_chk(original)) getLowerBounds];
      IOSObjectArray *originalUpperBound = [original getUpperBounds];
      if (((IOSObjectArray *) nil_chk(originalLowerBound))->size_ == 1) {
        id<JavaLangReflectType> lowerBound = ComGoogleGsonInternal$Gson$Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, IOSObjectArray_Get(originalLowerBound, 0));
        if (lowerBound != IOSObjectArray_Get(originalLowerBound, 0)) {
          return ComGoogleGsonInternal$Gson$Types_supertypeOfWithJavaLangReflectType_(lowerBound);
        }
      }
      else if (((IOSObjectArray *) nil_chk(originalUpperBound))->size_ == 1) {
        id<JavaLangReflectType> upperBound = ComGoogleGsonInternal$Gson$Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, IOSObjectArray_Get(originalUpperBound, 0));
        if (upperBound != IOSObjectArray_Get(originalUpperBound, 0)) {
          return ComGoogleGsonInternal$Gson$Types_subtypeOfWithJavaLangReflectType_(upperBound);
        }
      }
      return original;
    }
    else {
      return toResolve;
    }
  }
}

id<JavaLangReflectType> ComGoogleGsonInternal$Gson$Types_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectTypeVariable> unknown) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  IOSClass *declaredByRaw = ComGoogleGsonInternal$Gson$Types_declaringClassOfWithJavaLangReflectTypeVariable_(unknown);
  if (declaredByRaw == nil) {
    return unknown;
  }
  id<JavaLangReflectType> declaredBy = ComGoogleGsonInternal$Gson$Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, declaredByRaw);
  if ([JavaLangReflectParameterizedType_class_() isInstance:declaredBy]) {
    jint index = ComGoogleGsonInternal$Gson$Types_indexOfWithNSObjectArray_withId_([((IOSClass *) nil_chk(declaredByRaw)) getTypeParameters], unknown);
    return IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(declaredBy, JavaLangReflectParameterizedType_class_())))) getActualTypeArguments]), index);
  }
  return unknown;
}

jint ComGoogleGsonInternal$Gson$Types_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id toFind) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(array))->size_; i++) {
    if ([nil_chk(toFind) isEqual:IOSObjectArray_Get(array, i)]) {
      return i;
    }
  }
  @throw new_JavaUtilNoSuchElementException_init();
}

IOSClass *ComGoogleGsonInternal$Gson$Types_declaringClassOfWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  id<JavaLangReflectGenericDeclaration> genericDeclaration = [((id<JavaLangReflectTypeVariable>) nil_chk(typeVariable)) getGenericDeclaration];
  return [genericDeclaration isKindOfClass:[IOSClass class]] ? (IOSClass *) cast_chk(genericDeclaration, [IOSClass class]) : nil;
}

void ComGoogleGsonInternal$Gson$Types_checkNotPrimitiveWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  ComGoogleGsonInternal$Gson$Types_initialize();
  ComGoogleGsonInternal$Gson$Preconditions_checkArgumentWithBoolean_(!([type isKindOfClass:[IOSClass class]]) || ![((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) isPrimitive]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonInternal$Gson$Types)

@implementation ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)ownerType
                    withJavaLangReflectType:(id<JavaLangReflectType>)rawType
               withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments {
  ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(self, ownerType, rawType, typeArguments);
  return self;
}

- (IOSObjectArray *)getActualTypeArguments {
  return [((IOSObjectArray *) nil_chk(typeArguments_)) clone];
}

- (id<JavaLangReflectType>)getRawType {
  return rawType_;
}

- (id<JavaLangReflectType>)getOwnerType {
  return ownerType_;
}

- (jboolean)isEqual:(id)other {
  return [JavaLangReflectParameterizedType_class_() isInstance:other] && ComGoogleGsonInternal$Gson$Types_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectParameterizedType>) cast_check(other, JavaLangReflectParameterizedType_class_()));
}

- (NSUInteger)hash {
  return JavaUtilArrays_hashCodeWithNSObjectArray_(typeArguments_) ^ ((jint) [((id<JavaLangReflectType>) nil_chk(rawType_)) hash]) ^ ComGoogleGsonInternal$Gson$Types_hashCodeOrZeroWithId_(ownerType_);
}

- (NSString *)description {
  JavaLangStringBuilder *stringBuilder = new_JavaLangStringBuilder_initWithInt_(30 * (((IOSObjectArray *) nil_chk(typeArguments_))->size_ + 1));
  (void) [stringBuilder appendWithNSString:ComGoogleGsonInternal$Gson$Types_typeToStringWithJavaLangReflectType_(rawType_)];
  if (typeArguments_->size_ == 0) {
    return [stringBuilder description];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([stringBuilder appendWithNSString:@"<"])) appendWithNSString:ComGoogleGsonInternal$Gson$Types_typeToStringWithJavaLangReflectType_(IOSObjectArray_Get(typeArguments_, 0))];
  for (jint i = 1; i < typeArguments_->size_; i++) {
    (void) [((JavaLangStringBuilder *) nil_chk([stringBuilder appendWithNSString:@", "])) appendWithNSString:ComGoogleGsonInternal$Gson$Types_typeToStringWithJavaLangReflectType_(IOSObjectArray_Get(typeArguments_, i))];
  }
  return [((JavaLangStringBuilder *) nil_chk([stringBuilder appendWithNSString:@">"])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangReflectType:withJavaLangReflectType:withJavaLangReflectTypeArray:", "ParameterizedTypeImpl", NULL, 0x81, NULL, NULL },
    { "getActualTypeArguments", NULL, "[Ljava.lang.reflect.Type;", 0x1, NULL, NULL },
    { "getRawType", NULL, "Ljava.lang.reflect.Type;", 0x1, NULL, NULL },
    { "getOwnerType", NULL, "Ljava.lang.reflect.Type;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ownerType_", NULL, 0x12, "Ljava.lang.reflect.Type;", NULL, NULL, .constantValue.asLong = 0 },
    { "rawType_", NULL, 0x12, "Ljava.lang.reflect.Type;", NULL, NULL, .constantValue.asLong = 0 },
    { "typeArguments_", NULL, 0x12, "[Ljava.lang.reflect.Type;", NULL, NULL, .constantValue.asLong = 0 },
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_serialVersionUID },
  };
  static const J2ObjcClassInfo _ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl = { 2, "ParameterizedTypeImpl", "com.google.gson.internal", "$Gson$Types", 0x1a, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl;
}

@end

void ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl *self, id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  NSObject_init(self);
  if ([rawType isKindOfClass:[IOSClass class]]) {
    IOSClass *rawTypeAsClass = (IOSClass *) cast_chk(rawType, [IOSClass class]);
    jboolean isStaticOrTopLevelClass = JavaLangReflectModifier_isStaticWithInt_([((IOSClass *) nil_chk(rawTypeAsClass)) getModifiers]) || [rawTypeAsClass getEnclosingClass] == nil;
    ComGoogleGsonInternal$Gson$Preconditions_checkArgumentWithBoolean_(ownerType != nil || isStaticOrTopLevelClass);
  }
  self->ownerType_ = ownerType == nil ? nil : ComGoogleGsonInternal$Gson$Types_canonicalizeWithJavaLangReflectType_(ownerType);
  self->rawType_ = ComGoogleGsonInternal$Gson$Types_canonicalizeWithJavaLangReflectType_(rawType);
  self->typeArguments_ = [((IOSObjectArray *) nil_chk(typeArguments)) clone];
  for (jint t = 0; t < ((IOSObjectArray *) nil_chk(self->typeArguments_))->size_; t++) {
    (void) ComGoogleGsonInternal$Gson$Preconditions_checkNotNullWithId_(IOSObjectArray_Get(self->typeArguments_, t));
    ComGoogleGsonInternal$Gson$Types_checkNotPrimitiveWithJavaLangReflectType_(IOSObjectArray_Get(self->typeArguments_, t));
    (void) IOSObjectArray_Set(self->typeArguments_, t, ComGoogleGsonInternal$Gson$Types_canonicalizeWithJavaLangReflectType_(IOSObjectArray_Get(self->typeArguments_, t)));
  }
}

ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl *new_ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl *self = [ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl alloc];
  ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(self, ownerType, rawType, typeArguments);
  return self;
}

ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl *create_ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  return new_ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(ownerType, rawType, typeArguments);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonInternal$Gson$Types_ParameterizedTypeImpl)

@implementation ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)componentType {
  ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(self, componentType);
  return self;
}

- (id<JavaLangReflectType>)getGenericComponentType {
  return componentType_;
}

- (jboolean)isEqual:(id)o {
  return [JavaLangReflectGenericArrayType_class_() isInstance:o] && ComGoogleGsonInternal$Gson$Types_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectGenericArrayType>) cast_check(o, JavaLangReflectGenericArrayType_class_()));
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaLangReflectType>) nil_chk(componentType_)) hash]);
}

- (NSString *)description {
  return JreStrcat("$$", ComGoogleGsonInternal$Gson$Types_typeToStringWithJavaLangReflectType_(componentType_), @"[]");
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangReflectType:", "GenericArrayTypeImpl", NULL, 0x1, NULL, NULL },
    { "getGenericComponentType", NULL, "Ljava.lang.reflect.Type;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "componentType_", NULL, 0x12, "Ljava.lang.reflect.Type;", NULL, NULL, .constantValue.asLong = 0 },
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_serialVersionUID },
  };
  static const J2ObjcClassInfo _ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl = { 2, "GenericArrayTypeImpl", "com.google.gson.internal", "$Gson$Types", 0x1a, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl;
}

@end

void ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl *self, id<JavaLangReflectType> componentType) {
  NSObject_init(self);
  self->componentType_ = ComGoogleGsonInternal$Gson$Types_canonicalizeWithJavaLangReflectType_(componentType);
}

ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl *new_ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl *self = [ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl alloc];
  ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(self, componentType);
  return self;
}

ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl *create_ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  return new_ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(componentType);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonInternal$Gson$Types_GenericArrayTypeImpl)

@implementation ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl

- (instancetype)initWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds
                    withJavaLangReflectTypeArray:(IOSObjectArray *)lowerBounds {
  ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(self, upperBounds, lowerBounds);
  return self;
}

- (IOSObjectArray *)getUpperBounds {
  return [IOSObjectArray newArrayWithObjects:(id[]){ upperBound_ } count:1 type:JavaLangReflectType_class_()];
}

- (IOSObjectArray *)getLowerBounds {
  return lowerBound_ != nil ? [IOSObjectArray newArrayWithObjects:(id[]){ lowerBound_ } count:1 type:JavaLangReflectType_class_()] : JreLoadStatic(ComGoogleGsonInternal$Gson$Types, EMPTY_TYPE_ARRAY);
}

- (jboolean)isEqual:(id)other {
  return [JavaLangReflectWildcardType_class_() isInstance:other] && ComGoogleGsonInternal$Gson$Types_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectWildcardType>) cast_check(other, JavaLangReflectWildcardType_class_()));
}

- (NSUInteger)hash {
  return (lowerBound_ != nil ? 31 + ((jint) [lowerBound_ hash]) : 1) ^ (31 + ((jint) [((id<JavaLangReflectType>) nil_chk(upperBound_)) hash]));
}

- (NSString *)description {
  if (lowerBound_ != nil) {
    return JreStrcat("$$", @"? super ", ComGoogleGsonInternal$Gson$Types_typeToStringWithJavaLangReflectType_(lowerBound_));
  }
  else if (upperBound_ == NSObject_class_()) {
    return @"?";
  }
  else {
    return JreStrcat("$$", @"? extends ", ComGoogleGsonInternal$Gson$Types_typeToStringWithJavaLangReflectType_(upperBound_));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangReflectTypeArray:withJavaLangReflectTypeArray:", "WildcardTypeImpl", NULL, 0x1, NULL, NULL },
    { "getUpperBounds", NULL, "[Ljava.lang.reflect.Type;", 0x1, NULL, NULL },
    { "getLowerBounds", NULL, "[Ljava.lang.reflect.Type;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "upperBound_", NULL, 0x12, "Ljava.lang.reflect.Type;", NULL, NULL, .constantValue.asLong = 0 },
    { "lowerBound_", NULL, 0x12, "Ljava.lang.reflect.Type;", NULL, NULL, .constantValue.asLong = 0 },
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_serialVersionUID },
  };
  static const J2ObjcClassInfo _ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl = { 2, "WildcardTypeImpl", "com.google.gson.internal", "$Gson$Types", 0x1a, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl;
}

@end

void ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl *self, IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  NSObject_init(self);
  ComGoogleGsonInternal$Gson$Preconditions_checkArgumentWithBoolean_(((IOSObjectArray *) nil_chk(lowerBounds))->size_ <= 1);
  ComGoogleGsonInternal$Gson$Preconditions_checkArgumentWithBoolean_(((IOSObjectArray *) nil_chk(upperBounds))->size_ == 1);
  if (lowerBounds->size_ == 1) {
    (void) ComGoogleGsonInternal$Gson$Preconditions_checkNotNullWithId_(IOSObjectArray_Get(lowerBounds, 0));
    ComGoogleGsonInternal$Gson$Types_checkNotPrimitiveWithJavaLangReflectType_(IOSObjectArray_Get(lowerBounds, 0));
    ComGoogleGsonInternal$Gson$Preconditions_checkArgumentWithBoolean_(IOSObjectArray_Get(upperBounds, 0) == NSObject_class_());
    self->lowerBound_ = ComGoogleGsonInternal$Gson$Types_canonicalizeWithJavaLangReflectType_(IOSObjectArray_Get(lowerBounds, 0));
    self->upperBound_ = NSObject_class_();
  }
  else {
    (void) ComGoogleGsonInternal$Gson$Preconditions_checkNotNullWithId_(IOSObjectArray_Get(upperBounds, 0));
    ComGoogleGsonInternal$Gson$Types_checkNotPrimitiveWithJavaLangReflectType_(IOSObjectArray_Get(upperBounds, 0));
    self->lowerBound_ = nil;
    self->upperBound_ = ComGoogleGsonInternal$Gson$Types_canonicalizeWithJavaLangReflectType_(IOSObjectArray_Get(upperBounds, 0));
  }
}

ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl *new_ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl *self = [ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl alloc];
  ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(self, upperBounds, lowerBounds);
  return self;
}

ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl *create_ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  return new_ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(upperBounds, lowerBounds);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonInternal$Gson$Types_WildcardTypeImpl)
