//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/gson/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/gson/DefaultDateTypeAdapter.h"
#include "com/google/gson/JsonDeserializationContext.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonParseException.h"
#include "com/google/gson/JsonPrimitive.h"
#include "com/google/gson/JsonSerializationContext.h"
#include "com/google/gson/JsonSyntaxException.h"
#include "com/google/gson/internal/bind/util/ISO8601Utils.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Type.h"
#include "java/sql/Date.h"
#include "java/sql/Timestamp.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"

@interface ComGoogleGsonDefaultDateTypeAdapter () {
 @public
  JavaTextDateFormat *enUsFormat_;
  JavaTextDateFormat *localFormat_;
}

- (JavaUtilDate *)deserializeToDateWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)json;

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonDefaultDateTypeAdapter, enUsFormat_, JavaTextDateFormat *)
J2OBJC_FIELD_SETTER(ComGoogleGsonDefaultDateTypeAdapter, localFormat_, JavaTextDateFormat *)

__attribute__((unused)) static JavaUtilDate *ComGoogleGsonDefaultDateTypeAdapter_deserializeToDateWithComGoogleGsonJsonElement_(ComGoogleGsonDefaultDateTypeAdapter *self, ComGoogleGsonJsonElement *json);

@implementation ComGoogleGsonDefaultDateTypeAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonDefaultDateTypeAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)datePattern {
  ComGoogleGsonDefaultDateTypeAdapter_initWithNSString_(self, datePattern);
  return self;
}

- (instancetype)initWithInt:(jint)style {
  ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(self, style);
  return self;
}

- (instancetype)initWithInt:(jint)dateStyle
                    withInt:(jint)timeStyle {
  ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(self, dateStyle, timeStyle);
  return self;
}

- (instancetype)initWithJavaTextDateFormat:(JavaTextDateFormat *)enUsFormat
                    withJavaTextDateFormat:(JavaTextDateFormat *)localFormat {
  ComGoogleGsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(self, enUsFormat, localFormat);
  return self;
}

- (ComGoogleGsonJsonElement *)serializeWithId:(JavaUtilDate *)src
                      withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
    withComGoogleGsonJsonSerializationContext:(id<ComGoogleGsonJsonSerializationContext>)context {
  @synchronized(localFormat_) {
    NSString *dateFormatAsString = [((JavaTextDateFormat *) nil_chk(enUsFormat_)) formatWithJavaUtilDate:src];
    return new_ComGoogleGsonJsonPrimitive_initWithNSString_(dateFormatAsString);
  }
}

- (JavaUtilDate *)deserializeWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)json
                                  withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT
              withComGoogleGsonJsonDeserializationContext:(id<ComGoogleGsonJsonDeserializationContext>)context {
  if (!([json isKindOfClass:[ComGoogleGsonJsonPrimitive class]])) {
    @throw new_ComGoogleGsonJsonParseException_initWithNSString_(@"The date should be a string value");
  }
  JavaUtilDate *date = ComGoogleGsonDefaultDateTypeAdapter_deserializeToDateWithComGoogleGsonJsonElement_(self, json);
  if (typeOfT == JavaUtilDate_class_()) {
    return date;
  }
  else if (typeOfT == JavaSqlTimestamp_class_()) {
    return new_JavaSqlTimestamp_initWithLong_([((JavaUtilDate *) nil_chk(date)) getTime]);
  }
  else if (typeOfT == JavaSqlDate_class_()) {
    return new_JavaSqlDate_initWithLong_([((JavaUtilDate *) nil_chk(date)) getTime]);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("@$@", [self getClass], @" cannot deserialize to ", typeOfT));
  }
}

- (JavaUtilDate *)deserializeToDateWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)json {
  return ComGoogleGsonDefaultDateTypeAdapter_deserializeToDateWithComGoogleGsonJsonElement_(self, json);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:[ComGoogleGsonDefaultDateTypeAdapter_class_() getSimpleName]];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'('])) appendWithNSString:[[((JavaTextDateFormat *) nil_chk(localFormat_)) getClass] getSimpleName]])) appendWithChar:')'];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DefaultDateTypeAdapter", NULL, 0x0, NULL, NULL },
    { "initWithNSString:", "DefaultDateTypeAdapter", NULL, 0x0, NULL, NULL },
    { "initWithInt:", "DefaultDateTypeAdapter", NULL, 0x0, NULL, NULL },
    { "initWithInt:withInt:", "DefaultDateTypeAdapter", NULL, 0x1, NULL, NULL },
    { "initWithJavaTextDateFormat:withJavaTextDateFormat:", "DefaultDateTypeAdapter", NULL, 0x0, NULL, NULL },
    { "serializeWithId:withJavaLangReflectType:withComGoogleGsonJsonSerializationContext:", "serialize", "Lcom.google.gson.JsonElement;", 0x1, NULL, NULL },
    { "deserializeWithComGoogleGsonJsonElement:withJavaLangReflectType:withComGoogleGsonJsonDeserializationContext:", "deserialize", "Ljava.util.Date;", 0x1, "Lcom.google.gson.JsonParseException;", NULL },
    { "deserializeToDateWithComGoogleGsonJsonElement:", "deserializeToDate", "Ljava.util.Date;", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "enUsFormat_", NULL, 0x12, "Ljava.text.DateFormat;", NULL, NULL, .constantValue.asLong = 0 },
    { "localFormat_", NULL, 0x12, "Ljava.text.DateFormat;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComGoogleGsonDefaultDateTypeAdapter = { 2, "DefaultDateTypeAdapter", "com.google.gson", NULL, 0x10, 9, methods, 2, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Lcom/google/gson/JsonSerializer<Ljava/util/Date;>;Lcom/google/gson/JsonDeserializer<Ljava/util/Date;>;" };
  return &_ComGoogleGsonDefaultDateTypeAdapter;
}

@end

void ComGoogleGsonDefaultDateTypeAdapter_init(ComGoogleGsonDefaultDateTypeAdapter *self) {
  ComGoogleGsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(self, JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT, JreLoadStatic(JavaUtilLocale, US)), JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_(JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT));
}

ComGoogleGsonDefaultDateTypeAdapter *new_ComGoogleGsonDefaultDateTypeAdapter_init() {
  ComGoogleGsonDefaultDateTypeAdapter *self = [ComGoogleGsonDefaultDateTypeAdapter alloc];
  ComGoogleGsonDefaultDateTypeAdapter_init(self);
  return self;
}

ComGoogleGsonDefaultDateTypeAdapter *create_ComGoogleGsonDefaultDateTypeAdapter_init() {
  return new_ComGoogleGsonDefaultDateTypeAdapter_init();
}

void ComGoogleGsonDefaultDateTypeAdapter_initWithNSString_(ComGoogleGsonDefaultDateTypeAdapter *self, NSString *datePattern) {
  ComGoogleGsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(self, new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(datePattern, JreLoadStatic(JavaUtilLocale, US)), new_JavaTextSimpleDateFormat_initWithNSString_(datePattern));
}

ComGoogleGsonDefaultDateTypeAdapter *new_ComGoogleGsonDefaultDateTypeAdapter_initWithNSString_(NSString *datePattern) {
  ComGoogleGsonDefaultDateTypeAdapter *self = [ComGoogleGsonDefaultDateTypeAdapter alloc];
  ComGoogleGsonDefaultDateTypeAdapter_initWithNSString_(self, datePattern);
  return self;
}

ComGoogleGsonDefaultDateTypeAdapter *create_ComGoogleGsonDefaultDateTypeAdapter_initWithNSString_(NSString *datePattern) {
  return new_ComGoogleGsonDefaultDateTypeAdapter_initWithNSString_(datePattern);
}

void ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(ComGoogleGsonDefaultDateTypeAdapter *self, jint style) {
  ComGoogleGsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(self, JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(style, JreLoadStatic(JavaUtilLocale, US)), JavaTextDateFormat_getDateInstanceWithInt_(style));
}

ComGoogleGsonDefaultDateTypeAdapter *new_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(jint style) {
  ComGoogleGsonDefaultDateTypeAdapter *self = [ComGoogleGsonDefaultDateTypeAdapter alloc];
  ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(self, style);
  return self;
}

ComGoogleGsonDefaultDateTypeAdapter *create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(jint style) {
  return new_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_(style);
}

void ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(ComGoogleGsonDefaultDateTypeAdapter *self, jint dateStyle, jint timeStyle) {
  ComGoogleGsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(self, JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(dateStyle, timeStyle, JreLoadStatic(JavaUtilLocale, US)), JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_(dateStyle, timeStyle));
}

ComGoogleGsonDefaultDateTypeAdapter *new_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(jint dateStyle, jint timeStyle) {
  ComGoogleGsonDefaultDateTypeAdapter *self = [ComGoogleGsonDefaultDateTypeAdapter alloc];
  ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(self, dateStyle, timeStyle);
  return self;
}

ComGoogleGsonDefaultDateTypeAdapter *create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(jint dateStyle, jint timeStyle) {
  return new_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(dateStyle, timeStyle);
}

void ComGoogleGsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(ComGoogleGsonDefaultDateTypeAdapter *self, JavaTextDateFormat *enUsFormat, JavaTextDateFormat *localFormat) {
  NSObject_init(self);
  self->enUsFormat_ = enUsFormat;
  self->localFormat_ = localFormat;
}

ComGoogleGsonDefaultDateTypeAdapter *new_ComGoogleGsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(JavaTextDateFormat *enUsFormat, JavaTextDateFormat *localFormat) {
  ComGoogleGsonDefaultDateTypeAdapter *self = [ComGoogleGsonDefaultDateTypeAdapter alloc];
  ComGoogleGsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(self, enUsFormat, localFormat);
  return self;
}

ComGoogleGsonDefaultDateTypeAdapter *create_ComGoogleGsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(JavaTextDateFormat *enUsFormat, JavaTextDateFormat *localFormat) {
  return new_ComGoogleGsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(enUsFormat, localFormat);
}

JavaUtilDate *ComGoogleGsonDefaultDateTypeAdapter_deserializeToDateWithComGoogleGsonJsonElement_(ComGoogleGsonDefaultDateTypeAdapter *self, ComGoogleGsonJsonElement *json) {
  @synchronized(self->localFormat_) {
    @try {
      return [((JavaTextDateFormat *) nil_chk(self->localFormat_)) parseWithNSString:[((ComGoogleGsonJsonElement *) nil_chk(json)) getAsString]];
    }
    @catch (JavaTextParseException *ignored) {
    }
    @try {
      return [((JavaTextDateFormat *) nil_chk(self->enUsFormat_)) parseWithNSString:[((ComGoogleGsonJsonElement *) nil_chk(json)) getAsString]];
    }
    @catch (JavaTextParseException *ignored) {
    }
    @try {
      return ComGoogleGsonInternalBindUtilISO8601Utils_parseWithNSString_withJavaTextParsePosition_([((ComGoogleGsonJsonElement *) nil_chk(json)) getAsString], new_JavaTextParsePosition_initWithInt_(0));
    }
    @catch (JavaTextParseException *e) {
      @throw new_ComGoogleGsonJsonSyntaxException_initWithNSString_withNSException_([((ComGoogleGsonJsonElement *) nil_chk(json)) getAsString], e);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonDefaultDateTypeAdapter)
