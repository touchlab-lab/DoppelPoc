//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/magicthreads/library/src/main/java/co/touchlab/android/threading/tasks/utils/TaskQueueHelper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_INCLUDE_ALL")
#ifdef CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_RESTRICT
#define CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_INCLUDE_ALL 0
#else
#define CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_INCLUDE_ALL 1
#endif
#undef CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_RESTRICT

#if !defined (CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_) && (CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_INCLUDE_ALL || defined(CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_INCLUDE))
#define CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_

@class CoTouchlabAndroidThreadingTasksBaseTaskQueue;
@class CoTouchlabAndroidThreadingTasksStickyStickyTaskManager;
@class IOSObjectArray;

@interface CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper : NSObject

#pragma mark Public

- (instancetype)init;

+ (jboolean)hasTasksOfTypeWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:(CoTouchlabAndroidThreadingTasksBaseTaskQueue *)taskQueueActual
                                                         withIOSClassArray:(IOSObjectArray *)classes;

+ (jboolean)hasTasksOfTypeWithCoTouchlabAndroidThreadingTasksStickyStickyTaskManager:(CoTouchlabAndroidThreadingTasksStickyStickyTaskManager *)stickyTaskManager
                                    withCoTouchlabAndroidThreadingTasksBaseTaskQueue:(CoTouchlabAndroidThreadingTasksBaseTaskQueue *)taskQueueActual
                                                                   withIOSClassArray:(IOSObjectArray *)classes;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper)

FOUNDATION_EXPORT jboolean CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_hasTasksOfTypeWithCoTouchlabAndroidThreadingTasksBaseTaskQueue_withIOSClassArray_(CoTouchlabAndroidThreadingTasksBaseTaskQueue *taskQueueActual, IOSObjectArray *classes);

FOUNDATION_EXPORT jboolean CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_hasTasksOfTypeWithCoTouchlabAndroidThreadingTasksStickyStickyTaskManager_withCoTouchlabAndroidThreadingTasksBaseTaskQueue_withIOSClassArray_(CoTouchlabAndroidThreadingTasksStickyStickyTaskManager *stickyTaskManager, CoTouchlabAndroidThreadingTasksBaseTaskQueue *taskQueueActual, IOSObjectArray *classes);

FOUNDATION_EXPORT void CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_init(CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper *self);

FOUNDATION_EXPORT CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper *new_CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper *create_CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper)

#endif

#if !defined (CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery_) && (CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_INCLUDE_ALL || defined(CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery_INCLUDE))
#define CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery_

#define CoTouchlabAndroidThreadingTasksBaseTaskQueue_RESTRICT 1
#define CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery_INCLUDE 1
#include "co/touchlab/android/threading/tasks/BaseTaskQueue.h"

@class CoTouchlabAndroidThreadingTasksBaseTaskQueue;
@class CoTouchlabAndroidThreadingTasksStickyStickyTaskManager;
@class CoTouchlabAndroidThreadingTasksTask;
@class IOSObjectArray;

@interface CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery : NSObject < CoTouchlabAndroidThreadingTasksBaseTaskQueue_QueueQuery > {
 @public
  jboolean found_;
  IOSObjectArray *classes_;
  CoTouchlabAndroidThreadingTasksStickyStickyTaskManager *stickyTaskManager_;
}

#pragma mark Public

- (void)queryWithCoTouchlabAndroidThreadingTasksBaseTaskQueue:(CoTouchlabAndroidThreadingTasksBaseTaskQueue *)queue
                      withCoTouchlabAndroidThreadingTasksTask:(CoTouchlabAndroidThreadingTasksTask *)task;

#pragma mark Package-Private

- (instancetype)initWithCoTouchlabAndroidThreadingTasksStickyStickyTaskManager:(CoTouchlabAndroidThreadingTasksStickyStickyTaskManager *)stickyTaskManager
                                                             withIOSClassArray:(IOSObjectArray *)classes;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery)

J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery, classes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery, stickyTaskManager_, CoTouchlabAndroidThreadingTasksStickyStickyTaskManager *)

FOUNDATION_EXPORT void CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery_initWithCoTouchlabAndroidThreadingTasksStickyStickyTaskManager_withIOSClassArray_(CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery *self, CoTouchlabAndroidThreadingTasksStickyStickyTaskManager *stickyTaskManager, IOSObjectArray *classes);

FOUNDATION_EXPORT CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery *new_CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery_initWithCoTouchlabAndroidThreadingTasksStickyStickyTaskManager_withIOSClassArray_(CoTouchlabAndroidThreadingTasksStickyStickyTaskManager *stickyTaskManager, IOSObjectArray *classes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery *create_CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery_initWithCoTouchlabAndroidThreadingTasksStickyStickyTaskManager_withIOSClassArray_(CoTouchlabAndroidThreadingTasksStickyStickyTaskManager *stickyTaskManager, IOSObjectArray *classes);

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_ClassesQuery)

#endif

#pragma pop_macro("CoTouchlabAndroidThreadingTasksUtilsTaskQueueHelper_INCLUDE_ALL")
