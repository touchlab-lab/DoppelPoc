//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/magicthreads/library/src/main/java/co/touchlab/android/threading/tasks/persisted/storage/sqlite/ClearSQLiteDatabase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/content/ContentValues.h"
#include "android/database/Cursor.h"
#include "android/database/sqlite/SQLiteDatabase.h"
#include "co/touchlab/android/threading/tasks/persisted/storage/sqlite/ClearSQLiteDatabase.h"
#include "co/touchlab/android/threading/tasks/persisted/storage/sqlite/CursorIntf.h"

@interface CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase () {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *db_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase, db_, AndroidDatabaseSqliteSQLiteDatabase *)

@interface CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor () {
 @public
  id<AndroidDatabaseCursor> cursor_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor, cursor_, id<AndroidDatabaseCursor>)

@implementation CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db {
  CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(self, db);
  return self;
}

- (id<CoTouchlabAndroidThreadingTasksPersistedStorageSqliteCursorIntf>)queryWithNSString:(NSString *)tableName
                                                                       withNSStringArray:(IOSObjectArray *)columnList {
  return new_CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor_initWithAndroidDatabaseCursor_([((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) queryWithNSString:tableName withNSStringArray:columnList withNSString:nil withNSStringArray:nil withNSString:nil withNSString:nil withNSString:nil]);
}

- (void)execSQLWithNSString:(NSString *)sql {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) execSQLWithNSString:sql];
}

- (jint)delete__WithNSString:(NSString *)tableName
                withNSString:(NSString *)query
           withNSStringArray:(IOSObjectArray *)params {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) delete__WithNSString:tableName withNSString:query withNSStringArray:params];
}

- (jlong)insertOrThrowWithNSString:(NSString *)tableName
                      withNSString:(NSString *)nullColHack
   withAndroidContentContentValues:(AndroidContentContentValues *)values {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) insertOrThrowWithNSString:tableName withNSString:nullColHack withAndroidContentContentValues:values];
}

- (jint)updateWithNSString:(NSString *)tableName
withAndroidContentContentValues:(AndroidContentContentValues *)values
              withNSString:(NSString *)whereClause
         withNSStringArray:(IOSObjectArray *)whereArgs {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) updateWithNSString:tableName withAndroidContentContentValues:values withNSString:whereClause withNSStringArray:whereArgs];
}

- (void)beginTransaction {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) beginTransaction];
}

- (void)setTransactionSuccessful {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) setTransactionSuccessful];
}

- (void)endTransaction {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db_)) endTransaction];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithAndroidDatabaseSqliteSQLiteDatabase:", "ClearSQLiteDatabase", NULL, 0x1, NULL, NULL },
    { "queryWithNSString:withNSStringArray:", "query", "Lco.touchlab.android.threading.tasks.persisted.storage.sqlite.CursorIntf;", 0x1, NULL, NULL },
    { "execSQLWithNSString:", "execSQL", "V", 0x1, NULL, NULL },
    { "delete__WithNSString:withNSString:withNSStringArray:", "delete", "I", 0x1, NULL, NULL },
    { "insertOrThrowWithNSString:withNSString:withAndroidContentContentValues:", "insertOrThrow", "J", 0x1, NULL, NULL },
    { "updateWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:", "update", "I", 0x1, NULL, NULL },
    { "beginTransaction", NULL, "V", 0x1, NULL, NULL },
    { "setTransactionSuccessful", NULL, "V", 0x1, NULL, NULL },
    { "endTransaction", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "db_", NULL, 0x2, "Landroid.database.sqlite.SQLiteDatabase;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lco.touchlab.android.threading.tasks.persisted.storage.sqlite.ClearSQLiteDatabase$ClearCursor;"};
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase = { 2, "ClearSQLiteDatabase", "co.touchlab.android.threading.tasks.persisted.storage.sqlite", NULL, 0x1, 9, methods, 1, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase;
}

@end

void CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase *self, AndroidDatabaseSqliteSQLiteDatabase *db) {
  NSObject_init(self);
  self->db_ = db;
}

CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase *new_CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *db) {
  CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase *self = [CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase alloc];
  CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(self, db);
  return self;
}

CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase *create_CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *db) {
  return new_CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_initWithAndroidDatabaseSqliteSQLiteDatabase_(db);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase)

@implementation CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor

- (instancetype)initWithAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)cursor {
  CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor_initWithAndroidDatabaseCursor_(self, cursor);
  return self;
}

- (jboolean)moveToNext {
  return [((id<AndroidDatabaseCursor>) nil_chk(cursor_)) moveToNext];
}

- (void)close {
  [((id<AndroidDatabaseCursor>) nil_chk(cursor_)) close];
}

- (jlong)getLongWithInt:(jint)i {
  return [((id<AndroidDatabaseCursor>) nil_chk(cursor_)) getLongWithInt:i];
}

- (NSString *)getStringWithInt:(jint)i {
  return [((id<AndroidDatabaseCursor>) nil_chk(cursor_)) getStringWithInt:i];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithAndroidDatabaseCursor:", "ClearCursor", NULL, 0x1, NULL, NULL },
    { "moveToNext", NULL, "Z", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "getLongWithInt:", "getLong", "J", 0x1, NULL, NULL },
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cursor_", NULL, 0x2, "Landroid.database.Cursor;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor = { 2, "ClearCursor", "co.touchlab.android.threading.tasks.persisted.storage.sqlite", "ClearSQLiteDatabase", 0x9, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor;
}

@end

void CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor_initWithAndroidDatabaseCursor_(CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor *self, id<AndroidDatabaseCursor> cursor) {
  NSObject_init(self);
  self->cursor_ = cursor;
}

CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor *new_CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor_initWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor *self = [CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor alloc];
  CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor_initWithAndroidDatabaseCursor_(self, cursor);
  return self;
}

CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor *create_CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor_initWithAndroidDatabaseCursor_(id<AndroidDatabaseCursor> cursor) {
  return new_CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor_initWithAndroidDatabaseCursor_(cursor);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingTasksPersistedStorageSqliteClearSQLiteDatabase_ClearCursor)
