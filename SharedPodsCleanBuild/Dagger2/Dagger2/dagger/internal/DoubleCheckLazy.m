//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/dagger/core/src/main/java/dagger/internal/DoubleCheckLazy.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "dagger/Lazy.h"
#include "dagger/internal/DoubleCheckLazy.h"
#include "java/lang/NullPointerException.h"
#include "javax/inject/Provider.h"

@interface DaggerInternalDoubleCheckLazy () {
 @public
  id<JavaxInjectProvider> provider_;
  volatile_id instance_;
}

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)provider;

@end

J2OBJC_FIELD_SETTER(DaggerInternalDoubleCheckLazy, provider_, id<JavaxInjectProvider>)
J2OBJC_VOLATILE_FIELD_SETTER(DaggerInternalDoubleCheckLazy, instance_, id)

inline id DaggerInternalDoubleCheckLazy_get_UNINITIALIZED();
static id DaggerInternalDoubleCheckLazy_UNINITIALIZED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DaggerInternalDoubleCheckLazy, UNINITIALIZED, id)

__attribute__((unused)) static void DaggerInternalDoubleCheckLazy_initWithJavaxInjectProvider_(DaggerInternalDoubleCheckLazy *self, id<JavaxInjectProvider> provider);

__attribute__((unused)) static DaggerInternalDoubleCheckLazy *new_DaggerInternalDoubleCheckLazy_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) NS_RETURNS_RETAINED;

__attribute__((unused)) static DaggerInternalDoubleCheckLazy *create_DaggerInternalDoubleCheckLazy_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider);

J2OBJC_INITIALIZED_DEFN(DaggerInternalDoubleCheckLazy)

@implementation DaggerInternalDoubleCheckLazy

- (instancetype)initWithJavaxInjectProvider:(id<JavaxInjectProvider>)provider {
  DaggerInternalDoubleCheckLazy_initWithJavaxInjectProvider_(self, provider);
  return self;
}

- (id)get {
  id result = JreLoadVolatileId(&instance_);
  if (result == DaggerInternalDoubleCheckLazy_UNINITIALIZED) {
    @synchronized(self) {
      result = JreLoadVolatileId(&instance_);
      if (result == DaggerInternalDoubleCheckLazy_UNINITIALIZED) {
        (void) JreVolatileStrongAssign(&instance_, result = [((id<JavaxInjectProvider>) nil_chk(provider_)) get]);
      }
    }
  }
  return result;
}

+ (id<DaggerLazy>)createWithJavaxInjectProvider:(id<JavaxInjectProvider>)provider {
  return DaggerInternalDoubleCheckLazy_createWithJavaxInjectProvider_(provider);
}

- (void)dealloc {
  JreReleaseVolatile(&instance_);
}

- (void)__javaClone:(DaggerInternalDoubleCheckLazy *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&instance_, &original->instance_);
}

+ (void)initialize {
  if (self == [DaggerInternalDoubleCheckLazy class]) {
    DaggerInternalDoubleCheckLazy_UNINITIALIZED = new_NSObject_init();
    J2OBJC_SET_INITIALIZED(DaggerInternalDoubleCheckLazy)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaxInjectProvider:", "DoubleCheckLazy", NULL, 0x2, NULL, "(Ljavax/inject/Provider<TT;>;)V" },
    { "get", NULL, "TT;", 0x1, NULL, "()TT;" },
    { "createWithJavaxInjectProvider:", "create", "Ldagger.Lazy;", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljavax/inject/Provider<TT;>;)Ldagger/Lazy<TT;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "UNINITIALIZED", "UNINITIALIZED", 0x1a, "Ljava.lang.Object;", &DaggerInternalDoubleCheckLazy_UNINITIALIZED, NULL, .constantValue.asLong = 0 },
    { "provider_", NULL, 0x12, "Ljavax.inject.Provider;", NULL, "Ljavax/inject/Provider<TT;>;", .constantValue.asLong = 0 },
    { "instance_", NULL, 0x42, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _DaggerInternalDoubleCheckLazy = { 2, "DoubleCheckLazy", "dagger.internal", NULL, 0x11, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Ldagger/Lazy<TT;>;" };
  return &_DaggerInternalDoubleCheckLazy;
}

@end

void DaggerInternalDoubleCheckLazy_initWithJavaxInjectProvider_(DaggerInternalDoubleCheckLazy *self, id<JavaxInjectProvider> provider) {
  NSObject_init(self);
  (void) JreVolatileStrongAssign(&self->instance_, DaggerInternalDoubleCheckLazy_UNINITIALIZED);
  JreAssert((provider != nil), (@"dagger/internal/DoubleCheckLazy.java:36 condition failed: assert provider != null;"));
  self->provider_ = provider;
}

DaggerInternalDoubleCheckLazy *new_DaggerInternalDoubleCheckLazy_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) {
  DaggerInternalDoubleCheckLazy *self = [DaggerInternalDoubleCheckLazy alloc];
  DaggerInternalDoubleCheckLazy_initWithJavaxInjectProvider_(self, provider);
  return self;
}

DaggerInternalDoubleCheckLazy *create_DaggerInternalDoubleCheckLazy_initWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) {
  return new_DaggerInternalDoubleCheckLazy_initWithJavaxInjectProvider_(provider);
}

id<DaggerLazy> DaggerInternalDoubleCheckLazy_createWithJavaxInjectProvider_(id<JavaxInjectProvider> provider) {
  DaggerInternalDoubleCheckLazy_initialize();
  if (provider == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  if ([DaggerLazy_class_() isInstance:provider]) {
    id<DaggerLazy> lazy = (id<DaggerLazy>) cast_check(provider, DaggerLazy_class_());
    return lazy;
  }
  return new_DaggerInternalDoubleCheckLazy_initWithJavaxInjectProvider_(provider);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DaggerInternalDoubleCheckLazy)
