//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/Address.java
//

#include "J2ObjC_header.h"

#pragma push_macro("ComSquareupOkhttpAddress_INCLUDE_ALL")
#ifdef ComSquareupOkhttpAddress_RESTRICT
#define ComSquareupOkhttpAddress_INCLUDE_ALL 0
#else
#define ComSquareupOkhttpAddress_INCLUDE_ALL 1
#endif
#undef ComSquareupOkhttpAddress_RESTRICT

#if !defined (ComSquareupOkhttpAddress_) && (ComSquareupOkhttpAddress_INCLUDE_ALL || defined(ComSquareupOkhttpAddress_INCLUDE))
#define ComSquareupOkhttpAddress_

@class ComSquareupOkhttpCertificatePinner;
@class JavaNetProxy;
@class JavaNetProxySelector;
@class JavaxNetSocketFactory;
@class JavaxNetSslSSLSocketFactory;
@protocol ComSquareupOkhttpAuthenticator;
@protocol JavaUtilList;
@protocol JavaxNetSslHostnameVerifier;

@interface ComSquareupOkhttpAddress : NSObject {
 @public
  JavaNetProxy *proxy_;
  NSString *uriHost_;
  jint uriPort_;
  JavaxNetSocketFactory *socketFactory_;
  JavaxNetSslSSLSocketFactory *sslSocketFactory_;
  id<JavaxNetSslHostnameVerifier> hostnameVerifier_;
  ComSquareupOkhttpCertificatePinner *certificatePinner_;
  id<ComSquareupOkhttpAuthenticator> authenticator_;
  id<JavaUtilList> protocols_;
  id<JavaUtilList> connectionSpecs_;
  JavaNetProxySelector *proxySelector_;
}

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)uriHost
                         withInt:(jint)uriPort
       withJavaxNetSocketFactory:(JavaxNetSocketFactory *)socketFactory
 withJavaxNetSslSSLSocketFactory:(JavaxNetSslSSLSocketFactory *)sslSocketFactory
 withJavaxNetSslHostnameVerifier:(id<JavaxNetSslHostnameVerifier>)hostnameVerifier
withComSquareupOkhttpCertificatePinner:(ComSquareupOkhttpCertificatePinner *)certificatePinner
withComSquareupOkhttpAuthenticator:(id<ComSquareupOkhttpAuthenticator>)authenticator
                withJavaNetProxy:(JavaNetProxy *)proxy
                withJavaUtilList:(id<JavaUtilList>)protocols
                withJavaUtilList:(id<JavaUtilList>)connectionSpecs
        withJavaNetProxySelector:(JavaNetProxySelector *)proxySelector;

- (jboolean)isEqual:(id)other;

- (id<ComSquareupOkhttpAuthenticator>)getAuthenticator;

- (id<JavaUtilList>)getConnectionSpecs;

- (id<JavaxNetSslHostnameVerifier>)getHostnameVerifier;

- (id<JavaUtilList>)getProtocols;

- (JavaNetProxy *)getProxy;

- (JavaNetProxySelector *)getProxySelector;

- (JavaxNetSocketFactory *)getSocketFactory;

- (JavaxNetSslSSLSocketFactory *)getSslSocketFactory;

- (NSString *)getUriHost;

- (jint)getUriPort;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpAddress)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpAddress, proxy_, JavaNetProxy *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpAddress, uriHost_, NSString *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpAddress, socketFactory_, JavaxNetSocketFactory *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpAddress, sslSocketFactory_, JavaxNetSslSSLSocketFactory *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpAddress, hostnameVerifier_, id<JavaxNetSslHostnameVerifier>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpAddress, certificatePinner_, ComSquareupOkhttpCertificatePinner *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpAddress, authenticator_, id<ComSquareupOkhttpAuthenticator>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpAddress, protocols_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpAddress, connectionSpecs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpAddress, proxySelector_, JavaNetProxySelector *)

FOUNDATION_EXPORT void ComSquareupOkhttpAddress_initWithNSString_withInt_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withComSquareupOkhttpCertificatePinner_withComSquareupOkhttpAuthenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(ComSquareupOkhttpAddress *self, NSString *uriHost, jint uriPort, JavaxNetSocketFactory *socketFactory, JavaxNetSslSSLSocketFactory *sslSocketFactory, id<JavaxNetSslHostnameVerifier> hostnameVerifier, ComSquareupOkhttpCertificatePinner *certificatePinner, id<ComSquareupOkhttpAuthenticator> authenticator, JavaNetProxy *proxy, id<JavaUtilList> protocols, id<JavaUtilList> connectionSpecs, JavaNetProxySelector *proxySelector);

FOUNDATION_EXPORT ComSquareupOkhttpAddress *new_ComSquareupOkhttpAddress_initWithNSString_withInt_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withComSquareupOkhttpCertificatePinner_withComSquareupOkhttpAuthenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(NSString *uriHost, jint uriPort, JavaxNetSocketFactory *socketFactory, JavaxNetSslSSLSocketFactory *sslSocketFactory, id<JavaxNetSslHostnameVerifier> hostnameVerifier, ComSquareupOkhttpCertificatePinner *certificatePinner, id<ComSquareupOkhttpAuthenticator> authenticator, JavaNetProxy *proxy, id<JavaUtilList> protocols, id<JavaUtilList> connectionSpecs, JavaNetProxySelector *proxySelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComSquareupOkhttpAddress *create_ComSquareupOkhttpAddress_initWithNSString_withInt_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withComSquareupOkhttpCertificatePinner_withComSquareupOkhttpAuthenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(NSString *uriHost, jint uriPort, JavaxNetSocketFactory *socketFactory, JavaxNetSslSSLSocketFactory *sslSocketFactory, id<JavaxNetSslHostnameVerifier> hostnameVerifier, ComSquareupOkhttpCertificatePinner *certificatePinner, id<ComSquareupOkhttpAuthenticator> authenticator, JavaNetProxy *proxy, id<JavaUtilList> protocols, id<JavaUtilList> connectionSpecs, JavaNetProxySelector *proxySelector);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpAddress)

#endif

#pragma pop_macro("ComSquareupOkhttpAddress_INCLUDE_ALL")
