//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/MediaType.java
//

#include "J2ObjC_source.h"
#include "com/squareup/okhttp/MediaType.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/nio/charset/Charset.h"
#include "java/util/Locale.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface ComSquareupOkhttpMediaType () {
 @public
  NSString *mediaType_;
  NSString *type_;
  NSString *subtype_;
  NSString *charset_;
}

- (instancetype)initWithNSString:(NSString *)mediaType
                    withNSString:(NSString *)type
                    withNSString:(NSString *)subtype
                    withNSString:(NSString *)charset;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpMediaType, mediaType_, NSString *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpMediaType, type_, NSString *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpMediaType, subtype_, NSString *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpMediaType, charset_, NSString *)

inline NSString *ComSquareupOkhttpMediaType_get_TOKEN();
static NSString *ComSquareupOkhttpMediaType_TOKEN = @"([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpMediaType, TOKEN, NSString *)

inline NSString *ComSquareupOkhttpMediaType_get_QUOTED();
static NSString *ComSquareupOkhttpMediaType_QUOTED = @"\"([^\"]*)\"";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpMediaType, QUOTED, NSString *)

inline JavaUtilRegexPattern *ComSquareupOkhttpMediaType_get_TYPE_SUBTYPE();
static JavaUtilRegexPattern *ComSquareupOkhttpMediaType_TYPE_SUBTYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpMediaType, TYPE_SUBTYPE, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ComSquareupOkhttpMediaType_get_PARAMETER();
static JavaUtilRegexPattern *ComSquareupOkhttpMediaType_PARAMETER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpMediaType, PARAMETER, JavaUtilRegexPattern *)

__attribute__((unused)) static void ComSquareupOkhttpMediaType_initWithNSString_withNSString_withNSString_withNSString_(ComSquareupOkhttpMediaType *self, NSString *mediaType, NSString *type, NSString *subtype, NSString *charset);

__attribute__((unused)) static ComSquareupOkhttpMediaType *new_ComSquareupOkhttpMediaType_initWithNSString_withNSString_withNSString_withNSString_(NSString *mediaType, NSString *type, NSString *subtype, NSString *charset) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpMediaType *create_ComSquareupOkhttpMediaType_initWithNSString_withNSString_withNSString_withNSString_(NSString *mediaType, NSString *type, NSString *subtype, NSString *charset);

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpMediaType)

@implementation ComSquareupOkhttpMediaType

- (instancetype)initWithNSString:(NSString *)mediaType
                    withNSString:(NSString *)type
                    withNSString:(NSString *)subtype
                    withNSString:(NSString *)charset {
  ComSquareupOkhttpMediaType_initWithNSString_withNSString_withNSString_withNSString_(self, mediaType, type, subtype, charset);
  return self;
}

+ (ComSquareupOkhttpMediaType *)parseWithNSString:(NSString *)string {
  return ComSquareupOkhttpMediaType_parseWithNSString_(string);
}

- (NSString *)type {
  return type_;
}

- (NSString *)subtype {
  return subtype_;
}

- (JavaNioCharsetCharset *)charset {
  return charset_ != nil ? JavaNioCharsetCharset_forNameWithNSString_(charset_) : nil;
}

- (JavaNioCharsetCharset *)charsetWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)defaultValue {
  return charset_ != nil ? JavaNioCharsetCharset_forNameWithNSString_(charset_) : defaultValue;
}

- (NSString *)description {
  return mediaType_;
}

- (jboolean)isEqual:(id)o {
  return [o isKindOfClass:[ComSquareupOkhttpMediaType class]] && [((NSString *) nil_chk(((ComSquareupOkhttpMediaType *) nil_chk(((ComSquareupOkhttpMediaType *) cast_chk(o, [ComSquareupOkhttpMediaType class]))))->mediaType_)) isEqual:mediaType_];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(mediaType_)) hash]);
}

+ (void)initialize {
  if (self == [ComSquareupOkhttpMediaType class]) {
    ComSquareupOkhttpMediaType_TYPE_SUBTYPE = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$C$", ComSquareupOkhttpMediaType_TOKEN, '/', ComSquareupOkhttpMediaType_TOKEN));
    ComSquareupOkhttpMediaType_PARAMETER = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$$C$$", @";\\s*(?:", ComSquareupOkhttpMediaType_TOKEN, @"=(?:", ComSquareupOkhttpMediaType_TOKEN, '|', ComSquareupOkhttpMediaType_QUOTED, @"))?"));
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpMediaType)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withNSString:withNSString:", "MediaType", NULL, 0x2, NULL, NULL },
    { "parseWithNSString:", "parse", "Lcom.squareup.okhttp.MediaType;", 0x9, NULL, NULL },
    { "type", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "subtype", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "charset", NULL, "Ljava.nio.charset.Charset;", 0x1, NULL, NULL },
    { "charsetWithJavaNioCharsetCharset:", "charset", "Ljava.nio.charset.Charset;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TOKEN", "TOKEN", 0x1a, "Ljava.lang.String;", &ComSquareupOkhttpMediaType_TOKEN, NULL, .constantValue.asLong = 0 },
    { "QUOTED", "QUOTED", 0x1a, "Ljava.lang.String;", &ComSquareupOkhttpMediaType_QUOTED, NULL, .constantValue.asLong = 0 },
    { "TYPE_SUBTYPE", "TYPE_SUBTYPE", 0x1a, "Ljava.util.regex.Pattern;", &ComSquareupOkhttpMediaType_TYPE_SUBTYPE, NULL, .constantValue.asLong = 0 },
    { "PARAMETER", "PARAMETER", 0x1a, "Ljava.util.regex.Pattern;", &ComSquareupOkhttpMediaType_PARAMETER, NULL, .constantValue.asLong = 0 },
    { "mediaType_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "type_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "subtype_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "charset_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpMediaType = { 2, "MediaType", "com.squareup.okhttp", NULL, 0x11, 9, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpMediaType;
}

@end

void ComSquareupOkhttpMediaType_initWithNSString_withNSString_withNSString_withNSString_(ComSquareupOkhttpMediaType *self, NSString *mediaType, NSString *type, NSString *subtype, NSString *charset) {
  NSObject_init(self);
  self->mediaType_ = mediaType;
  self->type_ = type;
  self->subtype_ = subtype;
  self->charset_ = charset;
}

ComSquareupOkhttpMediaType *new_ComSquareupOkhttpMediaType_initWithNSString_withNSString_withNSString_withNSString_(NSString *mediaType, NSString *type, NSString *subtype, NSString *charset) {
  ComSquareupOkhttpMediaType *self = [ComSquareupOkhttpMediaType alloc];
  ComSquareupOkhttpMediaType_initWithNSString_withNSString_withNSString_withNSString_(self, mediaType, type, subtype, charset);
  return self;
}

ComSquareupOkhttpMediaType *create_ComSquareupOkhttpMediaType_initWithNSString_withNSString_withNSString_withNSString_(NSString *mediaType, NSString *type, NSString *subtype, NSString *charset) {
  return new_ComSquareupOkhttpMediaType_initWithNSString_withNSString_withNSString_withNSString_(mediaType, type, subtype, charset);
}

ComSquareupOkhttpMediaType *ComSquareupOkhttpMediaType_parseWithNSString_(NSString *string) {
  ComSquareupOkhttpMediaType_initialize();
  JavaUtilRegexMatcher *typeSubtype = [((JavaUtilRegexPattern *) nil_chk(ComSquareupOkhttpMediaType_TYPE_SUBTYPE)) matcherWithJavaLangCharSequence:string];
  if (![((JavaUtilRegexMatcher *) nil_chk(typeSubtype)) lookingAt]) return nil;
  NSString *type = [((NSString *) nil_chk([typeSubtype groupWithInt:1])) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  NSString *subtype = [((NSString *) nil_chk([typeSubtype groupWithInt:2])) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  NSString *charset = nil;
  JavaUtilRegexMatcher *parameter = [((JavaUtilRegexPattern *) nil_chk(ComSquareupOkhttpMediaType_PARAMETER)) matcherWithJavaLangCharSequence:string];
  for (jint s = [typeSubtype end]; s < ((jint) [((NSString *) nil_chk(string)) length]); s = [parameter end]) {
    (void) [((JavaUtilRegexMatcher *) nil_chk(parameter)) regionWithInt:s withInt:((jint) [string length])];
    if (![parameter lookingAt]) return nil;
    NSString *name = [parameter groupWithInt:1];
    if (name == nil || ![name equalsIgnoreCase:@"charset"]) continue;
    NSString *charsetParameter = [parameter groupWithInt:2] != nil ? [parameter groupWithInt:2] : [parameter groupWithInt:3];
    if (charset != nil && ![charsetParameter equalsIgnoreCase:charset]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Multiple different charsets: ", string));
    }
    charset = charsetParameter;
  }
  return new_ComSquareupOkhttpMediaType_initWithNSString_withNSString_withNSString_withNSString_(string, type, subtype, charset);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpMediaType)
