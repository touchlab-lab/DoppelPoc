//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/Handshake.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Handshake.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/Principal.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "javax/net/ssl/SSLPeerUnverifiedException.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface ComSquareupOkhttpHandshake () {
 @public
  NSString *cipherSuite_;
  id<JavaUtilList> peerCertificates_;
  id<JavaUtilList> localCertificates_;
}

- (instancetype)initWithNSString:(NSString *)cipherSuite
                withJavaUtilList:(id<JavaUtilList>)peerCertificates
                withJavaUtilList:(id<JavaUtilList>)localCertificates;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpHandshake, cipherSuite_, NSString *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpHandshake, peerCertificates_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpHandshake, localCertificates_, id<JavaUtilList>)

__attribute__((unused)) static void ComSquareupOkhttpHandshake_initWithNSString_withJavaUtilList_withJavaUtilList_(ComSquareupOkhttpHandshake *self, NSString *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates);

__attribute__((unused)) static ComSquareupOkhttpHandshake *new_ComSquareupOkhttpHandshake_initWithNSString_withJavaUtilList_withJavaUtilList_(NSString *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpHandshake *create_ComSquareupOkhttpHandshake_initWithNSString_withJavaUtilList_withJavaUtilList_(NSString *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates);

@implementation ComSquareupOkhttpHandshake

- (instancetype)initWithNSString:(NSString *)cipherSuite
                withJavaUtilList:(id<JavaUtilList>)peerCertificates
                withJavaUtilList:(id<JavaUtilList>)localCertificates {
  ComSquareupOkhttpHandshake_initWithNSString_withJavaUtilList_withJavaUtilList_(self, cipherSuite, peerCertificates, localCertificates);
  return self;
}

+ (ComSquareupOkhttpHandshake *)getWithJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)session {
  return ComSquareupOkhttpHandshake_getWithJavaxNetSslSSLSession_(session);
}

+ (ComSquareupOkhttpHandshake *)getWithNSString:(NSString *)cipherSuite
                               withJavaUtilList:(id<JavaUtilList>)peerCertificates
                               withJavaUtilList:(id<JavaUtilList>)localCertificates {
  return ComSquareupOkhttpHandshake_getWithNSString_withJavaUtilList_withJavaUtilList_(cipherSuite, peerCertificates, localCertificates);
}

- (NSString *)cipherSuite {
  return cipherSuite_;
}

- (id<JavaUtilList>)peerCertificates {
  return peerCertificates_;
}

- (id<JavaSecurityPrincipal>)peerPrincipal {
  return ![((id<JavaUtilList>) nil_chk(peerCertificates_)) isEmpty] ? [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([peerCertificates_ getWithInt:0], [JavaSecurityCertX509Certificate class])))) getSubjectX500Principal] : nil;
}

- (id<JavaUtilList>)localCertificates {
  return localCertificates_;
}

- (id<JavaSecurityPrincipal>)localPrincipal {
  return ![((id<JavaUtilList>) nil_chk(localCertificates_)) isEmpty] ? [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([localCertificates_ getWithInt:0], [JavaSecurityCertX509Certificate class])))) getSubjectX500Principal] : nil;
}

- (jboolean)isEqual:(id)other {
  if (!([other isKindOfClass:[ComSquareupOkhttpHandshake class]])) return false;
  ComSquareupOkhttpHandshake *that = (ComSquareupOkhttpHandshake *) cast_chk(other, [ComSquareupOkhttpHandshake class]);
  return [((NSString *) nil_chk(cipherSuite_)) isEqual:((ComSquareupOkhttpHandshake *) nil_chk(that))->cipherSuite_] && [((id<JavaUtilList>) nil_chk(peerCertificates_)) isEqual:that->peerCertificates_] && [((id<JavaUtilList>) nil_chk(localCertificates_)) isEqual:that->localCertificates_];
}

- (NSUInteger)hash {
  jint result = 17;
  result = 31 * result + ((jint) [((NSString *) nil_chk(cipherSuite_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(peerCertificates_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(localCertificates_)) hash]);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaUtilList:withJavaUtilList:", "Handshake", NULL, 0x2, NULL, "(Ljava/lang/String;Ljava/util/List<Ljava/security/cert/Certificate;>;Ljava/util/List<Ljava/security/cert/Certificate;>;)V" },
    { "getWithJavaxNetSslSSLSession:", "get", "Lcom.squareup.okhttp.Handshake;", 0x9, NULL, NULL },
    { "getWithNSString:withJavaUtilList:withJavaUtilList:", "get", "Lcom.squareup.okhttp.Handshake;", 0x9, NULL, "(Ljava/lang/String;Ljava/util/List<Ljava/security/cert/Certificate;>;Ljava/util/List<Ljava/security/cert/Certificate;>;)Lcom/squareup/okhttp/Handshake;" },
    { "cipherSuite", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "peerCertificates", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Ljava/security/cert/Certificate;>;" },
    { "peerPrincipal", NULL, "Ljava.security.Principal;", 0x1, NULL, NULL },
    { "localCertificates", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Ljava/security/cert/Certificate;>;" },
    { "localPrincipal", NULL, "Ljava.security.Principal;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cipherSuite_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "peerCertificates_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/security/cert/Certificate;>;", .constantValue.asLong = 0 },
    { "localCertificates_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/security/cert/Certificate;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpHandshake = { 2, "Handshake", "com.squareup.okhttp", NULL, 0x11, 10, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpHandshake;
}

@end

void ComSquareupOkhttpHandshake_initWithNSString_withJavaUtilList_withJavaUtilList_(ComSquareupOkhttpHandshake *self, NSString *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates) {
  NSObject_init(self);
  self->cipherSuite_ = cipherSuite;
  self->peerCertificates_ = peerCertificates;
  self->localCertificates_ = localCertificates;
}

ComSquareupOkhttpHandshake *new_ComSquareupOkhttpHandshake_initWithNSString_withJavaUtilList_withJavaUtilList_(NSString *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates) {
  ComSquareupOkhttpHandshake *self = [ComSquareupOkhttpHandshake alloc];
  ComSquareupOkhttpHandshake_initWithNSString_withJavaUtilList_withJavaUtilList_(self, cipherSuite, peerCertificates, localCertificates);
  return self;
}

ComSquareupOkhttpHandshake *create_ComSquareupOkhttpHandshake_initWithNSString_withJavaUtilList_withJavaUtilList_(NSString *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates) {
  return new_ComSquareupOkhttpHandshake_initWithNSString_withJavaUtilList_withJavaUtilList_(cipherSuite, peerCertificates, localCertificates);
}

ComSquareupOkhttpHandshake *ComSquareupOkhttpHandshake_getWithJavaxNetSslSSLSession_(id<JavaxNetSslSSLSession> session) {
  ComSquareupOkhttpHandshake_initialize();
  NSString *cipherSuite = [((id<JavaxNetSslSSLSession>) nil_chk(session)) getCipherSuite];
  if (cipherSuite == nil) @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipherSuite == null");
  IOSObjectArray *peerCertificates;
  @try {
    peerCertificates = [session getPeerCertificates];
  }
  @catch (JavaxNetSslSSLPeerUnverifiedException *ignored) {
    peerCertificates = nil;
  }
  id<JavaUtilList> peerCertificatesList = peerCertificates != nil ? ComSquareupOkhttpInternalUtil_immutableListWithNSObjectArray_(peerCertificates) : JavaUtilCollections_emptyList();
  IOSObjectArray *localCertificates = [session getLocalCertificates];
  id<JavaUtilList> localCertificatesList = localCertificates != nil ? ComSquareupOkhttpInternalUtil_immutableListWithNSObjectArray_(localCertificates) : JavaUtilCollections_emptyList();
  return new_ComSquareupOkhttpHandshake_initWithNSString_withJavaUtilList_withJavaUtilList_(cipherSuite, peerCertificatesList, localCertificatesList);
}

ComSquareupOkhttpHandshake *ComSquareupOkhttpHandshake_getWithNSString_withJavaUtilList_withJavaUtilList_(NSString *cipherSuite, id<JavaUtilList> peerCertificates, id<JavaUtilList> localCertificates) {
  ComSquareupOkhttpHandshake_initialize();
  if (cipherSuite == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cipherSuite == null");
  return new_ComSquareupOkhttpHandshake_initWithNSString_withJavaUtilList_withJavaUtilList_(cipherSuite, ComSquareupOkhttpInternalUtil_immutableListWithJavaUtilList_(peerCertificates), ComSquareupOkhttpInternalUtil_immutableListWithJavaUtilList_(localCertificates));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpHandshake)
