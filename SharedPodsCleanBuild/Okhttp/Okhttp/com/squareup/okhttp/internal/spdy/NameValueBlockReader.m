//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/internal/spdy/NameValueBlockReader.h"
#include "com/squareup/okhttp/internal/spdy/Spdy3.h"
#include "com/squareup/okhttp/internal/spdy/SpdyHeader.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/zip/DataFormatException.h"
#include "java/util/zip/Inflater.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/ForwardingSource.h"
#include "okio/InflaterSource.h"
#include "okio/Okio.h"
#include "okio/Source.h"

@interface ComSquareupOkhttpInternalSpdyNameValueBlockReader () {
 @public
  OkioInflaterSource *inflaterSource_;
  jint compressedLimit_;
  id<OkioBufferedSource> source_;
}

- (OkioByteString *)readByteString;

- (void)doneReading;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalSpdyNameValueBlockReader, inflaterSource_, OkioInflaterSource *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalSpdyNameValueBlockReader, source_, id<OkioBufferedSource>)

__attribute__((unused)) static OkioByteString *ComSquareupOkhttpInternalSpdyNameValueBlockReader_readByteString(ComSquareupOkhttpInternalSpdyNameValueBlockReader *self);

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdyNameValueBlockReader_doneReading(ComSquareupOkhttpInternalSpdyNameValueBlockReader *self);

@interface ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1 : OkioForwardingSource {
 @public
  ComSquareupOkhttpInternalSpdyNameValueBlockReader *this$0_;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (instancetype)initWithComSquareupOkhttpInternalSpdyNameValueBlockReader:(ComSquareupOkhttpInternalSpdyNameValueBlockReader *)outer$
                                                           withOkioSource:(id<OkioSource>)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1, this$0_, ComSquareupOkhttpInternalSpdyNameValueBlockReader *)

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1_initWithComSquareupOkhttpInternalSpdyNameValueBlockReader_withOkioSource_(ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1 *self, ComSquareupOkhttpInternalSpdyNameValueBlockReader *outer$, id<OkioSource> arg$0);

__attribute__((unused)) static ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1 *new_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1_initWithComSquareupOkhttpInternalSpdyNameValueBlockReader_withOkioSource_(ComSquareupOkhttpInternalSpdyNameValueBlockReader *outer$, id<OkioSource> arg$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1 *create_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1_initWithComSquareupOkhttpInternalSpdyNameValueBlockReader_withOkioSource_(ComSquareupOkhttpInternalSpdyNameValueBlockReader *outer$, id<OkioSource> arg$0);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1)

@interface ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2 : JavaUtilZipInflater

- (jint)inflateWithByteArray:(IOSByteArray *)buffer
                     withInt:(jint)offset
                     withInt:(jint)count;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2)

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2_init(ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2 *self);

__attribute__((unused)) static ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2 *new_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2 *create_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2_init();

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2)

@implementation ComSquareupOkhttpInternalSpdyNameValueBlockReader

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)source {
  ComSquareupOkhttpInternalSpdyNameValueBlockReader_initWithOkioBufferedSource_(self, source);
  return self;
}

- (id<JavaUtilList>)readNameValueBlockWithInt:(jint)length {
  self->compressedLimit_ += length;
  jint numberOfPairs = [((id<OkioBufferedSource>) nil_chk(source_)) readInt];
  if (numberOfPairs < 0) @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"numberOfPairs < 0: ", numberOfPairs));
  if (numberOfPairs > 1024) @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"numberOfPairs > 1024: ", numberOfPairs));
  id<JavaUtilList> entries = new_JavaUtilArrayList_initWithInt_(numberOfPairs);
  for (jint i = 0; i < numberOfPairs; i++) {
    OkioByteString *name = [((OkioByteString *) nil_chk(ComSquareupOkhttpInternalSpdyNameValueBlockReader_readByteString(self))) toAsciiLowercase];
    OkioByteString *values = ComSquareupOkhttpInternalSpdyNameValueBlockReader_readByteString(self);
    if ([((OkioByteString *) nil_chk(name)) size] == 0) @throw new_JavaIoIOException_initWithNSString_(@"name.size == 0");
    [entries addWithId:new_ComSquareupOkhttpInternalSpdySpdyHeader_initWithOkioByteString_withOkioByteString_(name, values)];
  }
  ComSquareupOkhttpInternalSpdyNameValueBlockReader_doneReading(self);
  return entries;
}

- (OkioByteString *)readByteString {
  return ComSquareupOkhttpInternalSpdyNameValueBlockReader_readByteString(self);
}

- (void)doneReading {
  ComSquareupOkhttpInternalSpdyNameValueBlockReader_doneReading(self);
}

- (void)close {
  [((id<OkioBufferedSource>) nil_chk(source_)) close];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOkioBufferedSource:", "NameValueBlockReader", NULL, 0x1, NULL, NULL },
    { "readNameValueBlockWithInt:", "readNameValueBlock", "Ljava.util.List;", 0x1, "Ljava.io.IOException;", "(I)Ljava/util/List<Lcom/squareup/okhttp/internal/spdy/SpdyHeader;>;" },
    { "readByteString", NULL, "Lokio.ByteString;", 0x2, "Ljava.io.IOException;", NULL },
    { "doneReading", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inflaterSource_", NULL, 0x12, "Lokio.InflaterSource;", NULL, NULL, .constantValue.asLong = 0 },
    { "compressedLimit_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "source_", NULL, 0x12, "Lokio.BufferedSource;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalSpdyNameValueBlockReader = { 2, "NameValueBlockReader", "com.squareup.okhttp.internal.spdy", NULL, 0x0, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalSpdyNameValueBlockReader;
}

@end

void ComSquareupOkhttpInternalSpdyNameValueBlockReader_initWithOkioBufferedSource_(ComSquareupOkhttpInternalSpdyNameValueBlockReader *self, id<OkioBufferedSource> source) {
  NSObject_init(self);
  id<OkioSource> throttleSource = new_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1_initWithComSquareupOkhttpInternalSpdyNameValueBlockReader_withOkioSource_(self, source);
  JavaUtilZipInflater *inflater = new_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2_init();
  self->inflaterSource_ = new_OkioInflaterSource_initWithOkioSource_withJavaUtilZipInflater_(throttleSource, inflater);
  self->source_ = OkioOkio_bufferWithOkioSource_(self->inflaterSource_);
}

ComSquareupOkhttpInternalSpdyNameValueBlockReader *new_ComSquareupOkhttpInternalSpdyNameValueBlockReader_initWithOkioBufferedSource_(id<OkioBufferedSource> source) {
  ComSquareupOkhttpInternalSpdyNameValueBlockReader *self = [ComSquareupOkhttpInternalSpdyNameValueBlockReader alloc];
  ComSquareupOkhttpInternalSpdyNameValueBlockReader_initWithOkioBufferedSource_(self, source);
  return self;
}

ComSquareupOkhttpInternalSpdyNameValueBlockReader *create_ComSquareupOkhttpInternalSpdyNameValueBlockReader_initWithOkioBufferedSource_(id<OkioBufferedSource> source) {
  return new_ComSquareupOkhttpInternalSpdyNameValueBlockReader_initWithOkioBufferedSource_(source);
}

OkioByteString *ComSquareupOkhttpInternalSpdyNameValueBlockReader_readByteString(ComSquareupOkhttpInternalSpdyNameValueBlockReader *self) {
  jint length = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  return [self->source_ readByteStringWithLong:length];
}

void ComSquareupOkhttpInternalSpdyNameValueBlockReader_doneReading(ComSquareupOkhttpInternalSpdyNameValueBlockReader *self) {
  if (self->compressedLimit_ > 0) {
    [((OkioInflaterSource *) nil_chk(self->inflaterSource_)) refill];
    if (self->compressedLimit_ != 0) @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"compressedLimit > 0: ", self->compressedLimit_));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalSpdyNameValueBlockReader)

@implementation ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (this$0_->compressedLimit_ == 0) return -1;
  jlong read = [super readWithOkioBuffer:sink withLong:JavaLangMath_minWithLong_withLong_(byteCount, this$0_->compressedLimit_)];
  if (read == -1) return -1;
  this$0_->compressedLimit_ -= read;
  return read;
}

- (instancetype)initWithComSquareupOkhttpInternalSpdyNameValueBlockReader:(ComSquareupOkhttpInternalSpdyNameValueBlockReader *)outer$
                                                           withOkioSource:(id<OkioSource>)arg$0 {
  ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1_initWithComSquareupOkhttpInternalSpdyNameValueBlockReader_withOkioSource_(self, outer$, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readWithOkioBuffer:withLong:", "read", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "initWithComSquareupOkhttpInternalSpdyNameValueBlockReader:withOkioSource:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.squareup.okhttp.internal.spdy.NameValueBlockReader;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ComSquareupOkhttpInternalSpdyNameValueBlockReader", "initWithOkioBufferedSource:" };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1 = { 2, "", "com.squareup.okhttp.internal.spdy", "NameValueBlockReader", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1;
}

@end

void ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1_initWithComSquareupOkhttpInternalSpdyNameValueBlockReader_withOkioSource_(ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1 *self, ComSquareupOkhttpInternalSpdyNameValueBlockReader *outer$, id<OkioSource> arg$0) {
  self->this$0_ = outer$;
  OkioForwardingSource_initWithOkioSource_(self, arg$0);
}

ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1 *new_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1_initWithComSquareupOkhttpInternalSpdyNameValueBlockReader_withOkioSource_(ComSquareupOkhttpInternalSpdyNameValueBlockReader *outer$, id<OkioSource> arg$0) {
  ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1 *self = [ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1 alloc];
  ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1_initWithComSquareupOkhttpInternalSpdyNameValueBlockReader_withOkioSource_(self, outer$, arg$0);
  return self;
}

ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1 *create_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1_initWithComSquareupOkhttpInternalSpdyNameValueBlockReader_withOkioSource_(ComSquareupOkhttpInternalSpdyNameValueBlockReader *outer$, id<OkioSource> arg$0) {
  return new_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1_initWithComSquareupOkhttpInternalSpdyNameValueBlockReader_withOkioSource_(outer$, arg$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalSpdyNameValueBlockReader_$1)

@implementation ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2

- (jint)inflateWithByteArray:(IOSByteArray *)buffer
                     withInt:(jint)offset
                     withInt:(jint)count {
  jint result = [super inflateWithByteArray:buffer withInt:offset withInt:count];
  if (result == 0 && [self needsDictionary]) {
    [self setDictionaryWithByteArray:JreLoadStatic(ComSquareupOkhttpInternalSpdySpdy3, DICTIONARY)];
    result = [super inflateWithByteArray:buffer withInt:offset withInt:count];
  }
  return result;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "inflateWithByteArray:withInt:withInt:", "inflate", "I", 0x1, "Ljava.util.zip.DataFormatException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ComSquareupOkhttpInternalSpdyNameValueBlockReader", "initWithOkioBufferedSource:" };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2 = { 2, "", "com.squareup.okhttp.internal.spdy", "NameValueBlockReader", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2;
}

@end

void ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2_init(ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2 *self) {
  JavaUtilZipInflater_init(self);
}

ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2 *new_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2_init() {
  ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2 *self = [ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2 alloc];
  ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2_init(self);
  return self;
}

ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2 *create_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2_init() {
  return new_ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalSpdyNameValueBlockReader_$2)
