//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Protocol.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "com/squareup/okhttp/internal/spdy/ErrorCode.h"
#include "com/squareup/okhttp/internal/spdy/FrameReader.h"
#include "com/squareup/okhttp/internal/spdy/FrameWriter.h"
#include "com/squareup/okhttp/internal/spdy/HeadersMode.h"
#include "com/squareup/okhttp/internal/spdy/NameValueBlockReader.h"
#include "com/squareup/okhttp/internal/spdy/Settings.h"
#include "com/squareup/okhttp/internal/spdy/Spdy3.h"
#include "com/squareup/okhttp/internal/spdy/SpdyHeader.h"
#include "java/io/IOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/net/ProtocolException.h"
#include "java/nio/charset/Charset.h"
#include "java/util/List.h"
#include "java/util/zip/Deflater.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/DeflaterSink.h"
#include "okio/Okio.h"

@interface ComSquareupOkhttpInternalSpdySpdy3_Reader () {
 @public
  id<OkioBufferedSource> source_;
  jboolean client_;
  ComSquareupOkhttpInternalSpdyNameValueBlockReader *headerBlockReader_;
}

- (void)readSynStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                  withInt:(jint)flags
                                                                  withInt:(jint)length;

- (void)readSynReplyWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                 withInt:(jint)flags
                                                                 withInt:(jint)length;

- (void)readRstStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                  withInt:(jint)flags
                                                                  withInt:(jint)length;

- (void)readHeadersWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                withInt:(jint)flags
                                                                withInt:(jint)length;

- (void)readWindowUpdateWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                     withInt:(jint)flags
                                                                     withInt:(jint)length;

- (void)readPingWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                             withInt:(jint)flags
                                                             withInt:(jint)length;

- (void)readGoAwayWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                               withInt:(jint)flags
                                                               withInt:(jint)length;

- (void)readSettingsWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                 withInt:(jint)flags
                                                                 withInt:(jint)length;

+ (JavaIoIOException *)ioExceptionWithNSString:(NSString *)message
                             withNSObjectArray:(IOSObjectArray *)args;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalSpdySpdy3_Reader, source_, id<OkioBufferedSource>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalSpdySpdy3_Reader, headerBlockReader_, ComSquareupOkhttpInternalSpdyNameValueBlockReader *)

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdySpdy3_Reader_readSynStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdySpdy3_Reader_readSynReplyWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdySpdy3_Reader_readRstStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdySpdy3_Reader_readHeadersWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdySpdy3_Reader_readWindowUpdateWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdySpdy3_Reader_readPingWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdySpdy3_Reader_readGoAwayWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdySpdy3_Reader_readSettingsWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length);

__attribute__((unused)) static JavaIoIOException *ComSquareupOkhttpInternalSpdySpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(NSString *message, IOSObjectArray *args);

@interface ComSquareupOkhttpInternalSpdySpdy3_Writer () {
 @public
  id<OkioBufferedSink> sink_;
  OkioBuffer *headerBlockBuffer_;
  id<OkioBufferedSink> headerBlockOut_;
  jboolean client_;
  jboolean closed_;
}

- (void)writeNameValueBlockToBufferWithJavaUtilList:(id<JavaUtilList>)headerBlock;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalSpdySpdy3_Writer, sink_, id<OkioBufferedSink>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalSpdySpdy3_Writer, headerBlockBuffer_, OkioBuffer *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalSpdySpdy3_Writer, headerBlockOut_, id<OkioBufferedSink>)

__attribute__((unused)) static void ComSquareupOkhttpInternalSpdySpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(ComSquareupOkhttpInternalSpdySpdy3_Writer *self, id<JavaUtilList> headerBlock);

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpInternalSpdySpdy3)

IOSByteArray *ComSquareupOkhttpInternalSpdySpdy3_DICTIONARY;

@implementation ComSquareupOkhttpInternalSpdySpdy3

- (ComSquareupOkhttpProtocol *)getProtocol {
  return JreLoadEnum(ComSquareupOkhttpProtocol, SPDY_3);
}

- (id<ComSquareupOkhttpInternalSpdyFrameReader>)newReaderWithOkioBufferedSource:(id<OkioBufferedSource>)source
                                                                    withBoolean:(jboolean)client {
  return new_ComSquareupOkhttpInternalSpdySpdy3_Reader_initWithOkioBufferedSource_withBoolean_(source, client);
}

- (id<ComSquareupOkhttpInternalSpdyFrameWriter>)newWriterWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                                                                  withBoolean:(jboolean)client {
  return new_ComSquareupOkhttpInternalSpdySpdy3_Writer_initWithOkioBufferedSink_withBoolean_(sink, client);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpInternalSpdySpdy3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [ComSquareupOkhttpInternalSpdySpdy3 class]) {
    {
      @try {
        ComSquareupOkhttpInternalSpdySpdy3_DICTIONARY = [(@"\x00\x00\x00\x07options\x00\x00\x00\x04head\x00\x00\x00\x04post\x00\x00\x00\x03put\x00\x00\x00\x06""delete\x00\x00\x00\x05trace\x00\x00\x00\x06""accept\x00\x00\x00\x0e""accept-charset\x00\x00\x00\x0f""accept-encoding\x00\x00\x00\x0f""accept-language\x00\x00\x00\x0d""accept-ranges\x00\x00\x00\x03""age\x00\x00\x00\x05""allow\x00\x00\x00\x0d""authorization\x00\x00\x00\x0d""cache-control\x00\x00\x00\nconnection\x00\x00\x00\x0c""content-base\x00\x00\x00\x10""content-encoding\x00\x00\x00\x10""content-language\x00\x00\x00\x0e""content-length\x00\x00\x00\x10""content-location\x00\x00\x00\x0b""content-md5\x00\x00\x00\x0d""content-range\x00\x00\x00\x0c""content-type\x00\x00\x00\x04""date\x00\x00\x00\x04""etag\x00\x00\x00\x06""expect\x00\x00\x00\x07""expires\x00\x00\x00\x04""from\x00\x00\x00\x04host\x00\x00\x00\x08if-match\x00\x00\x00\x11if-modified-since\x00\x00\x00\x0dif-none-match\x00\x00\x00\x08if-range\x00\x00\x00\x13if-unmodified-since\x00\x00\x00\x0dlast-modified\x00\x00\x00\x08location\x00\x00\x00\x0cmax-forwards\x00\x00\x00\x06pragma\x00\x00\x00\x12proxy-authenticate\x00\x00\x00\x13proxy-authorization\x00\x00\x00\x05range\x00\x00\x00\x07referer\x00\x00\x00\x0bretry-after\x00\x00\x00\x06server\x00\x00\x00\x02te\x00\x00\x00\x07trailer\x00\x00\x00\x11transfer-encoding\x00\x00\x00\x07upgrade\x00\x00\x00\nuser-agent\x00\x00\x00\x04vary\x00\x00\x00\x03via\x00\x00\x00\x07warning\x00\x00\x00\x10www-authenticate\x00\x00\x00\x06method\x00\x00\x00\x03get\x00\x00\x00\x06status\x00\x00\x00\x06""200 OK\x00\x00\x00\x07version\x00\x00\x00\x08HTTP/1.1\x00\x00\x00\x03url\x00\x00\x00\x06public\x00\x00\x00\nset-cookie\x00\x00\x00\nkeep-alive\x00\x00\x00\x06origin100101201202205206300302303304305306307402405406407408409410411412413414415416417502504505203 Non-Authoritative Information204 No Content301 Moved Permanently400 Bad Request401 Unauthorized403 Forbidden404 Not Found500 Internal Server Error501 Not Implemented503 Service UnavailableJan Feb Mar Apr May Jun Jul Aug Sept Oct Nov Dec 00:00:00 Mon, Tue, Wed, Thu, Fri, Sat, Sun, GMTchunked,text/html,image/png,image/jpg,image/gif,application/xml,application/xhtml+xml,text/plain,text/javascript,publicprivatemax-age=gzip,deflate,sdchcharset=utf-8charset=iso-8859-1,utf-,*,enq=0.") getBytesWithCharsetName:[((JavaNioCharsetCharset *) nil_chk(JreLoadStatic(ComSquareupOkhttpInternalUtil, UTF_8))) name]];
      }
      @catch (JavaIoUnsupportedEncodingException *e) {
        @throw new_JavaLangAssertionError_init();
      }
    }
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpInternalSpdySpdy3)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getProtocol", NULL, "Lcom.squareup.okhttp.Protocol;", 0x1, NULL, NULL },
    { "newReaderWithOkioBufferedSource:withBoolean:", "newReader", "Lcom.squareup.okhttp.internal.spdy.FrameReader;", 0x1, NULL, NULL },
    { "newWriterWithOkioBufferedSink:withBoolean:", "newWriter", "Lcom.squareup.okhttp.internal.spdy.FrameWriter;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_DATA", "TYPE_DATA", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_TYPE_DATA },
    { "TYPE_SYN_STREAM", "TYPE_SYN_STREAM", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_TYPE_SYN_STREAM },
    { "TYPE_SYN_REPLY", "TYPE_SYN_REPLY", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_TYPE_SYN_REPLY },
    { "TYPE_RST_STREAM", "TYPE_RST_STREAM", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_TYPE_RST_STREAM },
    { "TYPE_SETTINGS", "TYPE_SETTINGS", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_TYPE_SETTINGS },
    { "TYPE_PING", "TYPE_PING", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_TYPE_PING },
    { "TYPE_GOAWAY", "TYPE_GOAWAY", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_TYPE_GOAWAY },
    { "TYPE_HEADERS", "TYPE_HEADERS", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_TYPE_HEADERS },
    { "TYPE_WINDOW_UPDATE", "TYPE_WINDOW_UPDATE", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_TYPE_WINDOW_UPDATE },
    { "FLAG_FIN", "FLAG_FIN", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_FLAG_FIN },
    { "FLAG_UNIDIRECTIONAL", "FLAG_UNIDIRECTIONAL", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_FLAG_UNIDIRECTIONAL },
    { "VERSION", "VERSION", 0x18, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalSpdySpdy3_VERSION },
    { "DICTIONARY", "DICTIONARY", 0x18, "[B", &ComSquareupOkhttpInternalSpdySpdy3_DICTIONARY, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.squareup.okhttp.internal.spdy.Spdy3$Reader;", "Lcom.squareup.okhttp.internal.spdy.Spdy3$Writer;"};
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalSpdySpdy3 = { 2, "Spdy3", "com.squareup.okhttp.internal.spdy", NULL, 0x11, 4, methods, 13, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_ComSquareupOkhttpInternalSpdySpdy3;
}

@end

void ComSquareupOkhttpInternalSpdySpdy3_init(ComSquareupOkhttpInternalSpdySpdy3 *self) {
  NSObject_init(self);
}

ComSquareupOkhttpInternalSpdySpdy3 *new_ComSquareupOkhttpInternalSpdySpdy3_init() {
  ComSquareupOkhttpInternalSpdySpdy3 *self = [ComSquareupOkhttpInternalSpdySpdy3 alloc];
  ComSquareupOkhttpInternalSpdySpdy3_init(self);
  return self;
}

ComSquareupOkhttpInternalSpdySpdy3 *create_ComSquareupOkhttpInternalSpdySpdy3_init() {
  return new_ComSquareupOkhttpInternalSpdySpdy3_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalSpdySpdy3)

@implementation ComSquareupOkhttpInternalSpdySpdy3_Reader

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)source
                               withBoolean:(jboolean)client {
  ComSquareupOkhttpInternalSpdySpdy3_Reader_initWithOkioBufferedSource_withBoolean_(self, source, client);
  return self;
}

- (void)readConnectionPreface {
}

- (jboolean)nextFrameWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler {
  jint w1;
  jint w2;
  @try {
    w1 = [((id<OkioBufferedSource>) nil_chk(source_)) readInt];
    w2 = [source_ readInt];
  }
  @catch (JavaIoIOException *e) {
    return false;
  }
  jboolean control = (w1 & -0x7fffffff - 1) != 0;
  jint flags = JreURShift32((w2 & (jint) 0xff000000), 24);
  jint length = (w2 & (jint) 0xffffff);
  if (control) {
    jint version_ = JreURShift32((w1 & (jint) 0x7fff0000), 16);
    jint type = (w1 & (jint) 0xffff);
    if (version_ != 3) {
      @throw new_JavaNetProtocolException_initWithNSString_(JreStrcat("$I", @"version != 3: ", version_));
    }
    switch (type) {
      case ComSquareupOkhttpInternalSpdySpdy3_TYPE_SYN_STREAM:
      ComSquareupOkhttpInternalSpdySpdy3_Reader_readSynStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case ComSquareupOkhttpInternalSpdySpdy3_TYPE_SYN_REPLY:
      ComSquareupOkhttpInternalSpdySpdy3_Reader_readSynReplyWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case ComSquareupOkhttpInternalSpdySpdy3_TYPE_RST_STREAM:
      ComSquareupOkhttpInternalSpdySpdy3_Reader_readRstStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case ComSquareupOkhttpInternalSpdySpdy3_TYPE_SETTINGS:
      ComSquareupOkhttpInternalSpdySpdy3_Reader_readSettingsWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case ComSquareupOkhttpInternalSpdySpdy3_TYPE_PING:
      ComSquareupOkhttpInternalSpdySpdy3_Reader_readPingWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case ComSquareupOkhttpInternalSpdySpdy3_TYPE_GOAWAY:
      ComSquareupOkhttpInternalSpdySpdy3_Reader_readGoAwayWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case ComSquareupOkhttpInternalSpdySpdy3_TYPE_HEADERS:
      ComSquareupOkhttpInternalSpdySpdy3_Reader_readHeadersWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      case ComSquareupOkhttpInternalSpdySpdy3_TYPE_WINDOW_UPDATE:
      ComSquareupOkhttpInternalSpdySpdy3_Reader_readWindowUpdateWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
      return true;
      default:
      [((id<OkioBufferedSource>) nil_chk(source_)) skipWithLong:length];
      return true;
    }
  }
  else {
    jint streamId = w1 & (jint) 0x7fffffff;
    jboolean inFinished = (flags & ComSquareupOkhttpInternalSpdySpdy3_FLAG_FIN) != 0;
    [((id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>) nil_chk(handler)) dataWithBoolean:inFinished withInt:streamId withOkioBufferedSource:source_ withInt:length];
    return true;
  }
}

- (void)readSynStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                  withInt:(jint)flags
                                                                  withInt:(jint)length {
  ComSquareupOkhttpInternalSpdySpdy3_Reader_readSynStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readSynReplyWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                 withInt:(jint)flags
                                                                 withInt:(jint)length {
  ComSquareupOkhttpInternalSpdySpdy3_Reader_readSynReplyWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readRstStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                  withInt:(jint)flags
                                                                  withInt:(jint)length {
  ComSquareupOkhttpInternalSpdySpdy3_Reader_readRstStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readHeadersWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                withInt:(jint)flags
                                                                withInt:(jint)length {
  ComSquareupOkhttpInternalSpdySpdy3_Reader_readHeadersWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readWindowUpdateWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                     withInt:(jint)flags
                                                                     withInt:(jint)length {
  ComSquareupOkhttpInternalSpdySpdy3_Reader_readWindowUpdateWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readPingWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                             withInt:(jint)flags
                                                             withInt:(jint)length {
  ComSquareupOkhttpInternalSpdySpdy3_Reader_readPingWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readGoAwayWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                               withInt:(jint)flags
                                                               withInt:(jint)length {
  ComSquareupOkhttpInternalSpdySpdy3_Reader_readGoAwayWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

- (void)readSettingsWithComSquareupOkhttpInternalSpdyFrameReader_Handler:(id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>)handler
                                                                 withInt:(jint)flags
                                                                 withInt:(jint)length {
  ComSquareupOkhttpInternalSpdySpdy3_Reader_readSettingsWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(self, handler, flags, length);
}

+ (JavaIoIOException *)ioExceptionWithNSString:(NSString *)message
                             withNSObjectArray:(IOSObjectArray *)args {
  return ComSquareupOkhttpInternalSpdySpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(message, args);
}

- (void)close {
  [((ComSquareupOkhttpInternalSpdyNameValueBlockReader *) nil_chk(headerBlockReader_)) close];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOkioBufferedSource:withBoolean:", "Reader", NULL, 0x0, NULL, NULL },
    { "readConnectionPreface", NULL, "V", 0x1, NULL, NULL },
    { "nextFrameWithComSquareupOkhttpInternalSpdyFrameReader_Handler:", "nextFrame", "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "readSynStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler:withInt:withInt:", "readSynStream", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readSynReplyWithComSquareupOkhttpInternalSpdyFrameReader_Handler:withInt:withInt:", "readSynReply", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readRstStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler:withInt:withInt:", "readRstStream", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readHeadersWithComSquareupOkhttpInternalSpdyFrameReader_Handler:withInt:withInt:", "readHeaders", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readWindowUpdateWithComSquareupOkhttpInternalSpdyFrameReader_Handler:withInt:withInt:", "readWindowUpdate", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readPingWithComSquareupOkhttpInternalSpdyFrameReader_Handler:withInt:withInt:", "readPing", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readGoAwayWithComSquareupOkhttpInternalSpdyFrameReader_Handler:withInt:withInt:", "readGoAway", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readSettingsWithComSquareupOkhttpInternalSpdyFrameReader_Handler:withInt:withInt:", "readSettings", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "ioExceptionWithNSString:withNSObjectArray:", "ioException", "Ljava.io.IOException;", 0x8a, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "source_", NULL, 0x12, "Lokio.BufferedSource;", NULL, NULL, .constantValue.asLong = 0 },
    { "client_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "headerBlockReader_", NULL, 0x12, "Lcom.squareup.okhttp.internal.spdy.NameValueBlockReader;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalSpdySpdy3_Reader = { 2, "Reader", "com.squareup.okhttp.internal.spdy", "Spdy3", 0x18, 13, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalSpdySpdy3_Reader;
}

@end

void ComSquareupOkhttpInternalSpdySpdy3_Reader_initWithOkioBufferedSource_withBoolean_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<OkioBufferedSource> source, jboolean client) {
  NSObject_init(self);
  self->source_ = source;
  self->headerBlockReader_ = new_ComSquareupOkhttpInternalSpdyNameValueBlockReader_initWithOkioBufferedSource_(self->source_);
  self->client_ = client;
}

ComSquareupOkhttpInternalSpdySpdy3_Reader *new_ComSquareupOkhttpInternalSpdySpdy3_Reader_initWithOkioBufferedSource_withBoolean_(id<OkioBufferedSource> source, jboolean client) {
  ComSquareupOkhttpInternalSpdySpdy3_Reader *self = [ComSquareupOkhttpInternalSpdySpdy3_Reader alloc];
  ComSquareupOkhttpInternalSpdySpdy3_Reader_initWithOkioBufferedSource_withBoolean_(self, source, client);
  return self;
}

ComSquareupOkhttpInternalSpdySpdy3_Reader *create_ComSquareupOkhttpInternalSpdySpdy3_Reader_initWithOkioBufferedSource_withBoolean_(id<OkioBufferedSource> source, jboolean client) {
  return new_ComSquareupOkhttpInternalSpdySpdy3_Reader_initWithOkioBufferedSource_withBoolean_(source, client);
}

void ComSquareupOkhttpInternalSpdySpdy3_Reader_readSynStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length) {
  jint w1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint w2 = [self->source_ readInt];
  jint streamId = w1 & (jint) 0x7fffffff;
  jint associatedStreamId = w2 & (jint) 0x7fffffff;
  [self->source_ readShort];
  id<JavaUtilList> headerBlock = [((ComSquareupOkhttpInternalSpdyNameValueBlockReader *) nil_chk(self->headerBlockReader_)) readNameValueBlockWithInt:length - 10];
  jboolean inFinished = (flags & ComSquareupOkhttpInternalSpdySpdy3_FLAG_FIN) != 0;
  jboolean outFinished = (flags & ComSquareupOkhttpInternalSpdySpdy3_FLAG_UNIDIRECTIONAL) != 0;
  [((id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>) nil_chk(handler)) headersWithBoolean:outFinished withBoolean:inFinished withInt:streamId withInt:associatedStreamId withJavaUtilList:headerBlock withComSquareupOkhttpInternalSpdyHeadersMode:JreLoadEnum(ComSquareupOkhttpInternalSpdyHeadersMode, SPDY_SYN_STREAM)];
}

void ComSquareupOkhttpInternalSpdySpdy3_Reader_readSynReplyWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length) {
  jint w1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint streamId = w1 & (jint) 0x7fffffff;
  id<JavaUtilList> headerBlock = [((ComSquareupOkhttpInternalSpdyNameValueBlockReader *) nil_chk(self->headerBlockReader_)) readNameValueBlockWithInt:length - 4];
  jboolean inFinished = (flags & ComSquareupOkhttpInternalSpdySpdy3_FLAG_FIN) != 0;
  [((id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>) nil_chk(handler)) headersWithBoolean:false withBoolean:inFinished withInt:streamId withInt:-1 withJavaUtilList:headerBlock withComSquareupOkhttpInternalSpdyHeadersMode:JreLoadEnum(ComSquareupOkhttpInternalSpdyHeadersMode, SPDY_REPLY)];
}

void ComSquareupOkhttpInternalSpdySpdy3_Reader_readRstStreamWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length) {
  if (length != 8) @throw ComSquareupOkhttpInternalSpdySpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_RST_STREAM length: %d != 8", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]);
  jint streamId = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt] & (jint) 0x7fffffff;
  jint errorCodeInt = [self->source_ readInt];
  ComSquareupOkhttpInternalSpdyErrorCode *errorCode = ComSquareupOkhttpInternalSpdyErrorCode_fromSpdy3RstWithInt_(errorCodeInt);
  if (errorCode == nil) {
    @throw ComSquareupOkhttpInternalSpdySpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_RST_STREAM unexpected error code: %d", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(errorCodeInt) } count:1 type:NSObject_class_()]);
  }
  [((id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>) nil_chk(handler)) rstStreamWithInt:streamId withComSquareupOkhttpInternalSpdyErrorCode:errorCode];
}

void ComSquareupOkhttpInternalSpdySpdy3_Reader_readHeadersWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length) {
  jint w1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint streamId = w1 & (jint) 0x7fffffff;
  id<JavaUtilList> headerBlock = [((ComSquareupOkhttpInternalSpdyNameValueBlockReader *) nil_chk(self->headerBlockReader_)) readNameValueBlockWithInt:length - 4];
  [((id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>) nil_chk(handler)) headersWithBoolean:false withBoolean:false withInt:streamId withInt:-1 withJavaUtilList:headerBlock withComSquareupOkhttpInternalSpdyHeadersMode:JreLoadEnum(ComSquareupOkhttpInternalSpdyHeadersMode, SPDY_HEADERS)];
}

void ComSquareupOkhttpInternalSpdySpdy3_Reader_readWindowUpdateWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length) {
  if (length != 8) @throw ComSquareupOkhttpInternalSpdySpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_WINDOW_UPDATE length: %d != 8", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]);
  jint w1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint w2 = [self->source_ readInt];
  jint streamId = w1 & (jint) 0x7fffffff;
  jlong increment = w2 & (jint) 0x7fffffff;
  if (increment == 0) @throw ComSquareupOkhttpInternalSpdySpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"windowSizeIncrement was 0", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(increment) } count:1 type:NSObject_class_()]);
  [((id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>) nil_chk(handler)) windowUpdateWithInt:streamId withLong:increment];
}

void ComSquareupOkhttpInternalSpdySpdy3_Reader_readPingWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length) {
  if (length != 4) @throw ComSquareupOkhttpInternalSpdySpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_PING length: %d != 4", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]);
  jint id_ = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jboolean ack = self->client_ == ((id_ & 1) == 1);
  [((id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>) nil_chk(handler)) pingWithBoolean:ack withInt:id_ withInt:0];
}

void ComSquareupOkhttpInternalSpdySpdy3_Reader_readGoAwayWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length) {
  if (length != 8) @throw ComSquareupOkhttpInternalSpdySpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_GOAWAY length: %d != 8", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]);
  jint lastGoodStreamId = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt] & (jint) 0x7fffffff;
  jint errorCodeInt = [self->source_ readInt];
  ComSquareupOkhttpInternalSpdyErrorCode *errorCode = ComSquareupOkhttpInternalSpdyErrorCode_fromSpdyGoAwayWithInt_(errorCodeInt);
  if (errorCode == nil) {
    @throw ComSquareupOkhttpInternalSpdySpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_GOAWAY unexpected error code: %d", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(errorCodeInt) } count:1 type:NSObject_class_()]);
  }
  [((id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>) nil_chk(handler)) goAwayWithInt:lastGoodStreamId withComSquareupOkhttpInternalSpdyErrorCode:errorCode withOkioByteString:JreLoadStatic(OkioByteString, EMPTY)];
}

void ComSquareupOkhttpInternalSpdySpdy3_Reader_readSettingsWithComSquareupOkhttpInternalSpdyFrameReader_Handler_withInt_withInt_(ComSquareupOkhttpInternalSpdySpdy3_Reader *self, id<ComSquareupOkhttpInternalSpdyFrameReader_Handler> handler, jint flags, jint length) {
  jint numberOfEntries = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  if (length != 4 + 8 * numberOfEntries) {
    @throw ComSquareupOkhttpInternalSpdySpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_SETTINGS length: %d != 4 + 8 * %d", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length), JavaLangInteger_valueOfWithInt_(numberOfEntries) } count:2 type:NSObject_class_()]);
  }
  ComSquareupOkhttpInternalSpdySettings *settings = new_ComSquareupOkhttpInternalSpdySettings_init();
  for (jint i = 0; i < numberOfEntries; i++) {
    jint w1 = [self->source_ readInt];
    jint value = [self->source_ readInt];
    jint idFlags = JreURShift32((w1 & (jint) 0xff000000), 24);
    jint id_ = w1 & (jint) 0xffffff;
    (void) [settings setWithInt:id_ withInt:idFlags withInt:value];
  }
  jboolean clearPrevious = (flags & ComSquareupOkhttpInternalSpdySettings_FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS) != 0;
  [((id<ComSquareupOkhttpInternalSpdyFrameReader_Handler>) nil_chk(handler)) settingsWithBoolean:clearPrevious withComSquareupOkhttpInternalSpdySettings:settings];
}

JavaIoIOException *ComSquareupOkhttpInternalSpdySpdy3_Reader_ioExceptionWithNSString_withNSObjectArray_(NSString *message, IOSObjectArray *args) {
  ComSquareupOkhttpInternalSpdySpdy3_Reader_initialize();
  @throw new_JavaIoIOException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(message, args));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalSpdySpdy3_Reader)

@implementation ComSquareupOkhttpInternalSpdySpdy3_Writer

- (instancetype)initWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                             withBoolean:(jboolean)client {
  ComSquareupOkhttpInternalSpdySpdy3_Writer_initWithOkioBufferedSink_withBoolean_(self, sink, client);
  return self;
}

- (void)ackSettingsWithComSquareupOkhttpInternalSpdySettings:(ComSquareupOkhttpInternalSpdySettings *)peerSettings {
}

- (void)pushPromiseWithInt:(jint)streamId
                   withInt:(jint)promisedStreamId
          withJavaUtilList:(id<JavaUtilList>)requestHeaders {
}

- (void)connectionPreface {
  @synchronized(self) {
  }
}

- (void)flush {
  @synchronized(self) {
    if (closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
    [((id<OkioBufferedSink>) nil_chk(sink_)) flush];
  }
}

- (void)synStreamWithBoolean:(jboolean)outFinished
                 withBoolean:(jboolean)inFinished
                     withInt:(jint)streamId
                     withInt:(jint)associatedStreamId
            withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
    ComSquareupOkhttpInternalSpdySpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(self, headerBlock);
    jint length = (jint) (10 + [((OkioBuffer *) nil_chk(headerBlockBuffer_)) size]);
    jint type = ComSquareupOkhttpInternalSpdySpdy3_TYPE_SYN_STREAM;
    jint flags = (outFinished ? ComSquareupOkhttpInternalSpdySpdy3_FLAG_FIN : 0) | (inFinished ? ComSquareupOkhttpInternalSpdySpdy3_FLAG_UNIDIRECTIONAL : 0);
    jint unused = 0;
    (void) [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((ComSquareupOkhttpInternalSpdySpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    (void) [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    (void) [sink_ writeIntWithInt:streamId & (jint) 0x7fffffff];
    (void) [sink_ writeIntWithInt:associatedStreamId & (jint) 0x7fffffff];
    (void) [sink_ writeShortWithInt:(JreLShift32((unused & (jint) 0x7), 13)) | (JreLShift32((unused & (jint) 0x1f), 8)) | (unused & (jint) 0xff)];
    [sink_ writeAllWithOkioSource:headerBlockBuffer_];
    [sink_ flush];
  }
}

- (void)synReplyWithBoolean:(jboolean)outFinished
                    withInt:(jint)streamId
           withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
    ComSquareupOkhttpInternalSpdySpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(self, headerBlock);
    jint type = ComSquareupOkhttpInternalSpdySpdy3_TYPE_SYN_REPLY;
    jint flags = (outFinished ? ComSquareupOkhttpInternalSpdySpdy3_FLAG_FIN : 0);
    jint length = (jint) ([((OkioBuffer *) nil_chk(headerBlockBuffer_)) size] + 4);
    (void) [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((ComSquareupOkhttpInternalSpdySpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    (void) [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    (void) [sink_ writeIntWithInt:streamId & (jint) 0x7fffffff];
    [sink_ writeAllWithOkioSource:headerBlockBuffer_];
    [sink_ flush];
  }
}

- (void)headersWithInt:(jint)streamId
      withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
    ComSquareupOkhttpInternalSpdySpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(self, headerBlock);
    jint flags = 0;
    jint type = ComSquareupOkhttpInternalSpdySpdy3_TYPE_HEADERS;
    jint length = (jint) ([((OkioBuffer *) nil_chk(headerBlockBuffer_)) size] + 4);
    (void) [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((ComSquareupOkhttpInternalSpdySpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    (void) [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    (void) [sink_ writeIntWithInt:streamId & (jint) 0x7fffffff];
    [sink_ writeAllWithOkioSource:headerBlockBuffer_];
  }
}

- (void)rstStreamWithInt:(jint)streamId
withComSquareupOkhttpInternalSpdyErrorCode:(ComSquareupOkhttpInternalSpdyErrorCode *)errorCode {
  @synchronized(self) {
    if (closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
    if (((ComSquareupOkhttpInternalSpdyErrorCode *) nil_chk(errorCode))->spdyRstCode_ == -1) @throw new_JavaLangIllegalArgumentException_init();
    jint flags = 0;
    jint type = ComSquareupOkhttpInternalSpdySpdy3_TYPE_RST_STREAM;
    jint length = 8;
    (void) [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((ComSquareupOkhttpInternalSpdySpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    (void) [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    (void) [sink_ writeIntWithInt:streamId & (jint) 0x7fffffff];
    (void) [sink_ writeIntWithInt:errorCode->spdyRstCode_];
    [sink_ flush];
  }
}

- (jint)maxDataLength {
  return 16383;
}

- (void)dataWithBoolean:(jboolean)outFinished
                withInt:(jint)streamId
         withOkioBuffer:(OkioBuffer *)source
                withInt:(jint)byteCount {
  @synchronized(self) {
    jint flags = (outFinished ? ComSquareupOkhttpInternalSpdySpdy3_FLAG_FIN : 0);
    [self sendDataFrameWithInt:streamId withInt:flags withOkioBuffer:source withInt:byteCount];
  }
}

- (void)sendDataFrameWithInt:(jint)streamId
                     withInt:(jint)flags
              withOkioBuffer:(OkioBuffer *)buffer
                     withInt:(jint)byteCount {
  if (closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
  if (byteCount > (jlong) 0xffffffLL) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"FRAME_TOO_LARGE max size is 16Mib: ", byteCount));
  }
  (void) [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:streamId & (jint) 0x7fffffff];
  (void) [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (byteCount & (jint) 0xffffff)];
  if (byteCount > 0) {
    [sink_ writeWithOkioBuffer:buffer withLong:byteCount];
  }
}

- (void)writeNameValueBlockToBufferWithJavaUtilList:(id<JavaUtilList>)headerBlock {
  ComSquareupOkhttpInternalSpdySpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(self, headerBlock);
}

- (void)settingsWithComSquareupOkhttpInternalSpdySettings:(ComSquareupOkhttpInternalSpdySettings *)settings {
  @synchronized(self) {
    if (closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
    jint type = ComSquareupOkhttpInternalSpdySpdy3_TYPE_SETTINGS;
    jint flags = 0;
    jint size = [((ComSquareupOkhttpInternalSpdySettings *) nil_chk(settings)) size];
    jint length = 4 + size * 8;
    (void) [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((ComSquareupOkhttpInternalSpdySpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    (void) [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    (void) [sink_ writeIntWithInt:size];
    for (jint i = 0; i <= ComSquareupOkhttpInternalSpdySettings_COUNT; i++) {
      if (![settings isSetWithInt:i]) continue;
      jint settingsFlags = [settings flagsWithInt:i];
      (void) [sink_ writeIntWithInt:(JreLShift32((settingsFlags & (jint) 0xff), 24)) | (i & (jint) 0xffffff)];
      (void) [sink_ writeIntWithInt:[settings getWithInt:i]];
    }
    [sink_ flush];
  }
}

- (void)pingWithBoolean:(jboolean)reply
                withInt:(jint)payload1
                withInt:(jint)payload2 {
  @synchronized(self) {
    if (closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
    jboolean payloadIsReply = client_ != ((payload1 & 1) == 1);
    if (reply != payloadIsReply) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"payload != reply");
    jint type = ComSquareupOkhttpInternalSpdySpdy3_TYPE_PING;
    jint flags = 0;
    jint length = 4;
    (void) [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((ComSquareupOkhttpInternalSpdySpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    (void) [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    (void) [sink_ writeIntWithInt:payload1];
    [sink_ flush];
  }
}

- (void)goAwayWithInt:(jint)lastGoodStreamId
withComSquareupOkhttpInternalSpdyErrorCode:(ComSquareupOkhttpInternalSpdyErrorCode *)errorCode
        withByteArray:(IOSByteArray *)ignored {
  @synchronized(self) {
    if (closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
    if (((ComSquareupOkhttpInternalSpdyErrorCode *) nil_chk(errorCode))->spdyGoAwayCode_ == -1) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"errorCode.spdyGoAwayCode == -1");
    }
    jint type = ComSquareupOkhttpInternalSpdySpdy3_TYPE_GOAWAY;
    jint flags = 0;
    jint length = 8;
    (void) [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((ComSquareupOkhttpInternalSpdySpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    (void) [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    (void) [sink_ writeIntWithInt:lastGoodStreamId];
    (void) [sink_ writeIntWithInt:errorCode->spdyGoAwayCode_];
    [sink_ flush];
  }
}

- (void)windowUpdateWithInt:(jint)streamId
                   withLong:(jlong)increment {
  @synchronized(self) {
    if (closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
    if (increment == 0 || increment > (jlong) 0x7fffffffLL) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"windowSizeIncrement must be between 1 and 0x7fffffff: ", increment));
    }
    jint type = ComSquareupOkhttpInternalSpdySpdy3_TYPE_WINDOW_UPDATE;
    jint flags = 0;
    jint length = 8;
    (void) [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:-0x7fffffff - 1 | (JreLShift32((ComSquareupOkhttpInternalSpdySpdy3_VERSION & (jint) 0x7fff), 16)) | (type & (jint) 0xffff)];
    (void) [sink_ writeIntWithInt:(JreLShift32((flags & (jint) 0xff), 24)) | (length & (jint) 0xffffff)];
    (void) [sink_ writeIntWithInt:streamId];
    (void) [sink_ writeIntWithInt:(jint) increment];
    [sink_ flush];
  }
}

- (void)close {
  @synchronized(self) {
    closed_ = true;
    ComSquareupOkhttpInternalUtil_closeAllWithJavaIoCloseable_withJavaIoCloseable_(sink_, headerBlockOut_);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOkioBufferedSink:withBoolean:", "Writer", NULL, 0x0, NULL, NULL },
    { "ackSettingsWithComSquareupOkhttpInternalSpdySettings:", "ackSettings", "V", 0x1, NULL, NULL },
    { "pushPromiseWithInt:withInt:withJavaUtilList:", "pushPromise", "V", 0x1, "Ljava.io.IOException;", "(IILjava/util/List<Lcom/squareup/okhttp/internal/spdy/SpdyHeader;>;)V" },
    { "connectionPreface", NULL, "V", 0x21, NULL, NULL },
    { "flush", NULL, "V", 0x21, "Ljava.io.IOException;", NULL },
    { "synStreamWithBoolean:withBoolean:withInt:withInt:withJavaUtilList:", "synStream", "V", 0x21, "Ljava.io.IOException;", "(ZZIILjava/util/List<Lcom/squareup/okhttp/internal/spdy/SpdyHeader;>;)V" },
    { "synReplyWithBoolean:withInt:withJavaUtilList:", "synReply", "V", 0x21, "Ljava.io.IOException;", "(ZILjava/util/List<Lcom/squareup/okhttp/internal/spdy/SpdyHeader;>;)V" },
    { "headersWithInt:withJavaUtilList:", "headers", "V", 0x21, "Ljava.io.IOException;", "(ILjava/util/List<Lcom/squareup/okhttp/internal/spdy/SpdyHeader;>;)V" },
    { "rstStreamWithInt:withComSquareupOkhttpInternalSpdyErrorCode:", "rstStream", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "maxDataLength", NULL, "I", 0x1, NULL, NULL },
    { "dataWithBoolean:withInt:withOkioBuffer:withInt:", "data", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "sendDataFrameWithInt:withInt:withOkioBuffer:withInt:", "sendDataFrame", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "writeNameValueBlockToBufferWithJavaUtilList:", "writeNameValueBlockToBuffer", "V", 0x2, "Ljava.io.IOException;", "(Ljava/util/List<Lcom/squareup/okhttp/internal/spdy/SpdyHeader;>;)V" },
    { "settingsWithComSquareupOkhttpInternalSpdySettings:", "settings", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "pingWithBoolean:withInt:withInt:", "ping", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "goAwayWithInt:withComSquareupOkhttpInternalSpdyErrorCode:withByteArray:", "goAway", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "windowUpdateWithInt:withLong:", "windowUpdate", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x21, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sink_", NULL, 0x12, "Lokio.BufferedSink;", NULL, NULL, .constantValue.asLong = 0 },
    { "headerBlockBuffer_", NULL, 0x12, "Lokio.Buffer;", NULL, NULL, .constantValue.asLong = 0 },
    { "headerBlockOut_", NULL, 0x12, "Lokio.BufferedSink;", NULL, NULL, .constantValue.asLong = 0 },
    { "client_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "closed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalSpdySpdy3_Writer = { 2, "Writer", "com.squareup.okhttp.internal.spdy", "Spdy3", 0x18, 18, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalSpdySpdy3_Writer;
}

@end

void ComSquareupOkhttpInternalSpdySpdy3_Writer_initWithOkioBufferedSink_withBoolean_(ComSquareupOkhttpInternalSpdySpdy3_Writer *self, id<OkioBufferedSink> sink, jboolean client) {
  NSObject_init(self);
  self->sink_ = sink;
  self->client_ = client;
  JavaUtilZipDeflater *deflater = new_JavaUtilZipDeflater_init();
  [deflater setDictionaryWithByteArray:JreLoadStatic(ComSquareupOkhttpInternalSpdySpdy3, DICTIONARY)];
  self->headerBlockBuffer_ = new_OkioBuffer_init();
  self->headerBlockOut_ = OkioOkio_bufferWithOkioSink_(new_OkioDeflaterSink_initWithOkioSink_withJavaUtilZipDeflater_(self->headerBlockBuffer_, deflater));
}

ComSquareupOkhttpInternalSpdySpdy3_Writer *new_ComSquareupOkhttpInternalSpdySpdy3_Writer_initWithOkioBufferedSink_withBoolean_(id<OkioBufferedSink> sink, jboolean client) {
  ComSquareupOkhttpInternalSpdySpdy3_Writer *self = [ComSquareupOkhttpInternalSpdySpdy3_Writer alloc];
  ComSquareupOkhttpInternalSpdySpdy3_Writer_initWithOkioBufferedSink_withBoolean_(self, sink, client);
  return self;
}

ComSquareupOkhttpInternalSpdySpdy3_Writer *create_ComSquareupOkhttpInternalSpdySpdy3_Writer_initWithOkioBufferedSink_withBoolean_(id<OkioBufferedSink> sink, jboolean client) {
  return new_ComSquareupOkhttpInternalSpdySpdy3_Writer_initWithOkioBufferedSink_withBoolean_(sink, client);
}

void ComSquareupOkhttpInternalSpdySpdy3_Writer_writeNameValueBlockToBufferWithJavaUtilList_(ComSquareupOkhttpInternalSpdySpdy3_Writer *self, id<JavaUtilList> headerBlock) {
  if ([((OkioBuffer *) nil_chk(self->headerBlockBuffer_)) size] != 0) @throw new_JavaLangIllegalStateException_init();
  (void) [((id<OkioBufferedSink>) nil_chk(self->headerBlockOut_)) writeIntWithInt:[((id<JavaUtilList>) nil_chk(headerBlock)) size]];
  for (jint i = 0, size = [headerBlock size]; i < size; i++) {
    OkioByteString *name = ((ComSquareupOkhttpInternalSpdySpdyHeader *) nil_chk([headerBlock getWithInt:i]))->name_;
    (void) [self->headerBlockOut_ writeIntWithInt:[((OkioByteString *) nil_chk(name)) size]];
    (void) [self->headerBlockOut_ writeWithOkioByteString:name];
    OkioByteString *value = ((ComSquareupOkhttpInternalSpdySpdyHeader *) nil_chk([headerBlock getWithInt:i]))->value_;
    (void) [self->headerBlockOut_ writeIntWithInt:[((OkioByteString *) nil_chk(value)) size]];
    (void) [self->headerBlockOut_ writeWithOkioByteString:value];
  }
  [self->headerBlockOut_ flush];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalSpdySpdy3_Writer)
