//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Connection.h"
#include "com/squareup/okhttp/Headers.h"
#include "com/squareup/okhttp/Protocol.h"
#include "com/squareup/okhttp/Request.h"
#include "com/squareup/okhttp/Response.h"
#include "com/squareup/okhttp/ResponseBody.h"
#include "com/squareup/okhttp/Route.h"
#include "com/squareup/okhttp/internal/http/HttpConnection.h"
#include "com/squareup/okhttp/internal/http/HttpEngine.h"
#include "com/squareup/okhttp/internal/http/HttpTransport.h"
#include "com/squareup/okhttp/internal/http/OkHeaders.h"
#include "com/squareup/okhttp/internal/http/RealResponseBody.h"
#include "com/squareup/okhttp/internal/http/RequestLine.h"
#include "com/squareup/okhttp/internal/http/RetryableSink.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/net/Proxy.h"
#include "okio/BufferedSource.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"

@interface ComSquareupOkhttpInternalHttpHttpTransport () {
 @public
  ComSquareupOkhttpInternalHttpHttpEngine *httpEngine_;
  ComSquareupOkhttpInternalHttpHttpConnection *httpConnection_;
}

- (id<OkioSource>)getTransferStreamWithComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpTransport, httpEngine_, ComSquareupOkhttpInternalHttpHttpEngine *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpTransport, httpConnection_, ComSquareupOkhttpInternalHttpHttpConnection *)

__attribute__((unused)) static id<OkioSource> ComSquareupOkhttpInternalHttpHttpTransport_getTransferStreamWithComSquareupOkhttpResponse_(ComSquareupOkhttpInternalHttpHttpTransport *self, ComSquareupOkhttpResponse *response);

@implementation ComSquareupOkhttpInternalHttpHttpTransport

- (instancetype)initWithComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)httpEngine
                withComSquareupOkhttpInternalHttpHttpConnection:(ComSquareupOkhttpInternalHttpHttpConnection *)httpConnection {
  ComSquareupOkhttpInternalHttpHttpTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalHttpHttpConnection_(self, httpEngine, httpConnection);
  return self;
}

- (id<OkioSink>)createRequestBodyWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request
                                                     withLong:(jlong)contentLength {
  if ([@"chunked" equalsIgnoreCase:[((ComSquareupOkhttpRequest *) nil_chk(request)) headerWithNSString:@"Transfer-Encoding"]]) {
    return [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(httpConnection_)) newChunkedSink];
  }
  if (contentLength != -1) {
    return [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(httpConnection_)) newFixedLengthSinkWithLong:contentLength];
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot stream a request body without chunked encoding or a known content length!");
}

- (void)finishRequest {
  [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(httpConnection_)) flush];
}

- (void)writeRequestBodyWithComSquareupOkhttpInternalHttpRetryableSink:(ComSquareupOkhttpInternalHttpRetryableSink *)requestBody {
  [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(httpConnection_)) writeRequestBodyWithComSquareupOkhttpInternalHttpRetryableSink:requestBody];
}

- (void)writeRequestHeadersWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request {
  [((ComSquareupOkhttpInternalHttpHttpEngine *) nil_chk(httpEngine_)) writingRequestHeaders];
  NSString *requestLine = ComSquareupOkhttpInternalHttpRequestLine_getWithComSquareupOkhttpRequest_withJavaNetProxy_Type_withComSquareupOkhttpProtocol_(request, [((JavaNetProxy *) nil_chk([((ComSquareupOkhttpRoute *) nil_chk([((ComSquareupOkhttpConnection *) nil_chk([httpEngine_ getConnection])) getRoute])) getProxy])) type], [((ComSquareupOkhttpConnection *) nil_chk([httpEngine_ getConnection])) getProtocol]);
  [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(httpConnection_)) writeRequestWithComSquareupOkhttpHeaders:[((ComSquareupOkhttpRequest *) nil_chk(request)) headers] withNSString:requestLine];
}

- (ComSquareupOkhttpResponse_Builder *)readResponseHeaders {
  return [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(httpConnection_)) readResponse];
}

- (void)releaseConnectionOnIdle {
  if ([self canReuseConnection]) {
    [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(httpConnection_)) poolOnIdle];
  }
  else {
    [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(httpConnection_)) closeOnIdle];
  }
}

- (jboolean)canReuseConnection {
  if ([@"close" equalsIgnoreCase:[((ComSquareupOkhttpRequest *) nil_chk([((ComSquareupOkhttpInternalHttpHttpEngine *) nil_chk(httpEngine_)) getRequest])) headerWithNSString:@"Connection"]]) {
    return false;
  }
  if ([@"close" equalsIgnoreCase:[((ComSquareupOkhttpResponse *) nil_chk([httpEngine_ getResponse])) headerWithNSString:@"Connection"]]) {
    return false;
  }
  if ([((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(httpConnection_)) isClosed]) {
    return false;
  }
  return true;
}

- (ComSquareupOkhttpResponseBody *)openResponseBodyWithComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response {
  id<OkioSource> source = ComSquareupOkhttpInternalHttpHttpTransport_getTransferStreamWithComSquareupOkhttpResponse_(self, response);
  return new_ComSquareupOkhttpInternalHttpRealResponseBody_initWithComSquareupOkhttpHeaders_withOkioBufferedSource_([((ComSquareupOkhttpResponse *) nil_chk(response)) headers], OkioOkio_bufferWithOkioSource_(source));
}

- (id<OkioSource>)getTransferStreamWithComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response {
  return ComSquareupOkhttpInternalHttpHttpTransport_getTransferStreamWithComSquareupOkhttpResponse_(self, response);
}

- (void)disconnectWithComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)engine {
  [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(httpConnection_)) closeIfOwnedByWithId:engine];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpInternalHttpHttpEngine:withComSquareupOkhttpInternalHttpHttpConnection:", "HttpTransport", NULL, 0x1, NULL, NULL },
    { "createRequestBodyWithComSquareupOkhttpRequest:withLong:", "createRequestBody", "Lokio.Sink;", 0x1, "Ljava.io.IOException;", NULL },
    { "finishRequest", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeRequestBodyWithComSquareupOkhttpInternalHttpRetryableSink:", "writeRequestBody", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeRequestHeadersWithComSquareupOkhttpRequest:", "writeRequestHeaders", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readResponseHeaders", NULL, "Lcom.squareup.okhttp.Response$Builder;", 0x1, "Ljava.io.IOException;", NULL },
    { "releaseConnectionOnIdle", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "canReuseConnection", NULL, "Z", 0x1, NULL, NULL },
    { "openResponseBodyWithComSquareupOkhttpResponse:", "openResponseBody", "Lcom.squareup.okhttp.ResponseBody;", 0x1, "Ljava.io.IOException;", NULL },
    { "getTransferStreamWithComSquareupOkhttpResponse:", "getTransferStream", "Lokio.Source;", 0x2, "Ljava.io.IOException;", NULL },
    { "disconnectWithComSquareupOkhttpInternalHttpHttpEngine:", "disconnect", "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "httpEngine_", NULL, 0x12, "Lcom.squareup.okhttp.internal.http.HttpEngine;", NULL, NULL, .constantValue.asLong = 0 },
    { "httpConnection_", NULL, 0x12, "Lcom.squareup.okhttp.internal.http.HttpConnection;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalHttpHttpTransport = { 2, "HttpTransport", "com.squareup.okhttp.internal.http", NULL, 0x11, 11, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalHttpHttpTransport;
}

@end

void ComSquareupOkhttpInternalHttpHttpTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalHttpHttpConnection_(ComSquareupOkhttpInternalHttpHttpTransport *self, ComSquareupOkhttpInternalHttpHttpEngine *httpEngine, ComSquareupOkhttpInternalHttpHttpConnection *httpConnection) {
  NSObject_init(self);
  self->httpEngine_ = httpEngine;
  self->httpConnection_ = httpConnection;
}

ComSquareupOkhttpInternalHttpHttpTransport *new_ComSquareupOkhttpInternalHttpHttpTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalHttpHttpConnection_(ComSquareupOkhttpInternalHttpHttpEngine *httpEngine, ComSquareupOkhttpInternalHttpHttpConnection *httpConnection) {
  ComSquareupOkhttpInternalHttpHttpTransport *self = [ComSquareupOkhttpInternalHttpHttpTransport alloc];
  ComSquareupOkhttpInternalHttpHttpTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalHttpHttpConnection_(self, httpEngine, httpConnection);
  return self;
}

ComSquareupOkhttpInternalHttpHttpTransport *create_ComSquareupOkhttpInternalHttpHttpTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalHttpHttpConnection_(ComSquareupOkhttpInternalHttpHttpEngine *httpEngine, ComSquareupOkhttpInternalHttpHttpConnection *httpConnection) {
  return new_ComSquareupOkhttpInternalHttpHttpTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalHttpHttpConnection_(httpEngine, httpConnection);
}

id<OkioSource> ComSquareupOkhttpInternalHttpHttpTransport_getTransferStreamWithComSquareupOkhttpResponse_(ComSquareupOkhttpInternalHttpHttpTransport *self, ComSquareupOkhttpResponse *response) {
  if (!ComSquareupOkhttpInternalHttpHttpEngine_hasBodyWithComSquareupOkhttpResponse_(response)) {
    return [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(self->httpConnection_)) newFixedLengthSourceWithLong:0];
  }
  if ([@"chunked" equalsIgnoreCase:[((ComSquareupOkhttpResponse *) nil_chk(response)) headerWithNSString:@"Transfer-Encoding"]]) {
    return [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(self->httpConnection_)) newChunkedSourceWithComSquareupOkhttpInternalHttpHttpEngine:self->httpEngine_];
  }
  jlong contentLength = ComSquareupOkhttpInternalHttpOkHeaders_contentLengthWithComSquareupOkhttpResponse_(response);
  if (contentLength != -1) {
    return [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(self->httpConnection_)) newFixedLengthSourceWithLong:contentLength];
  }
  return [((ComSquareupOkhttpInternalHttpHttpConnection *) nil_chk(self->httpConnection_)) newUnknownLengthSource];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalHttpHttpTransport)
