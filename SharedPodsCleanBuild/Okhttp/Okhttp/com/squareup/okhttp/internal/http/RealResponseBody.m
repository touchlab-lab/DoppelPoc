//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/http/RealResponseBody.java
//

#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Headers.h"
#include "com/squareup/okhttp/MediaType.h"
#include "com/squareup/okhttp/ResponseBody.h"
#include "com/squareup/okhttp/internal/http/OkHeaders.h"
#include "com/squareup/okhttp/internal/http/RealResponseBody.h"
#include "okio/BufferedSource.h"

@interface ComSquareupOkhttpInternalHttpRealResponseBody () {
 @public
  ComSquareupOkhttpHeaders *headers_;
  id<OkioBufferedSource> source_;
}

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpRealResponseBody, headers_, ComSquareupOkhttpHeaders *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpRealResponseBody, source_, id<OkioBufferedSource>)

@implementation ComSquareupOkhttpInternalHttpRealResponseBody

- (instancetype)initWithComSquareupOkhttpHeaders:(ComSquareupOkhttpHeaders *)headers
                          withOkioBufferedSource:(id<OkioBufferedSource>)source {
  ComSquareupOkhttpInternalHttpRealResponseBody_initWithComSquareupOkhttpHeaders_withOkioBufferedSource_(self, headers, source);
  return self;
}

- (ComSquareupOkhttpMediaType *)contentType {
  NSString *contentType = [((ComSquareupOkhttpHeaders *) nil_chk(headers_)) getWithNSString:@"Content-Type"];
  return contentType != nil ? ComSquareupOkhttpMediaType_parseWithNSString_(contentType) : nil;
}

- (jlong)contentLength {
  return ComSquareupOkhttpInternalHttpOkHeaders_contentLengthWithComSquareupOkhttpHeaders_(headers_);
}

- (id<OkioBufferedSource>)source {
  return source_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpHeaders:withOkioBufferedSource:", "RealResponseBody", NULL, 0x1, NULL, NULL },
    { "contentType", NULL, "Lcom.squareup.okhttp.MediaType;", 0x1, NULL, NULL },
    { "contentLength", NULL, "J", 0x1, NULL, NULL },
    { "source", NULL, "Lokio.BufferedSource;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "headers_", NULL, 0x12, "Lcom.squareup.okhttp.Headers;", NULL, NULL, .constantValue.asLong = 0 },
    { "source_", NULL, 0x12, "Lokio.BufferedSource;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalHttpRealResponseBody = { 2, "RealResponseBody", "com.squareup.okhttp.internal.http", NULL, 0x11, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalHttpRealResponseBody;
}

@end

void ComSquareupOkhttpInternalHttpRealResponseBody_initWithComSquareupOkhttpHeaders_withOkioBufferedSource_(ComSquareupOkhttpInternalHttpRealResponseBody *self, ComSquareupOkhttpHeaders *headers, id<OkioBufferedSource> source) {
  ComSquareupOkhttpResponseBody_init(self);
  self->headers_ = headers;
  self->source_ = source;
}

ComSquareupOkhttpInternalHttpRealResponseBody *new_ComSquareupOkhttpInternalHttpRealResponseBody_initWithComSquareupOkhttpHeaders_withOkioBufferedSource_(ComSquareupOkhttpHeaders *headers, id<OkioBufferedSource> source) {
  ComSquareupOkhttpInternalHttpRealResponseBody *self = [ComSquareupOkhttpInternalHttpRealResponseBody alloc];
  ComSquareupOkhttpInternalHttpRealResponseBody_initWithComSquareupOkhttpHeaders_withOkioBufferedSource_(self, headers, source);
  return self;
}

ComSquareupOkhttpInternalHttpRealResponseBody *create_ComSquareupOkhttpInternalHttpRealResponseBody_initWithComSquareupOkhttpHeaders_withOkioBufferedSource_(ComSquareupOkhttpHeaders *headers, id<OkioBufferedSource> source) {
  return new_ComSquareupOkhttpInternalHttpRealResponseBody_initWithComSquareupOkhttpHeaders_withOkioBufferedSource_(headers, source);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalHttpRealResponseBody)
