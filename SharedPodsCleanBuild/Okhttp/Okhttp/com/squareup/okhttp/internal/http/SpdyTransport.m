//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Connection.h"
#include "com/squareup/okhttp/Headers.h"
#include "com/squareup/okhttp/OkHttpClient.h"
#include "com/squareup/okhttp/Protocol.h"
#include "com/squareup/okhttp/Request.h"
#include "com/squareup/okhttp/Response.h"
#include "com/squareup/okhttp/ResponseBody.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "com/squareup/okhttp/internal/http/HttpEngine.h"
#include "com/squareup/okhttp/internal/http/OkHeaders.h"
#include "com/squareup/okhttp/internal/http/RealResponseBody.h"
#include "com/squareup/okhttp/internal/http/RequestLine.h"
#include "com/squareup/okhttp/internal/http/RetryableSink.h"
#include "com/squareup/okhttp/internal/http/SpdyTransport.h"
#include "com/squareup/okhttp/internal/http/StatusLine.h"
#include "com/squareup/okhttp/internal/spdy/ErrorCode.h"
#include "com/squareup/okhttp/internal/spdy/SpdyConnection.h"
#include "com/squareup/okhttp/internal/spdy/SpdyHeader.h"
#include "com/squareup/okhttp/internal/spdy/SpdyStream.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/StringBuilder.h"
#include "java/net/ProtocolException.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface ComSquareupOkhttpInternalHttpSpdyTransport () {
 @public
  ComSquareupOkhttpInternalHttpHttpEngine *httpEngine_;
  ComSquareupOkhttpInternalSpdySpdyConnection *spdyConnection_;
  ComSquareupOkhttpInternalSpdySpdyStream *stream_;
}

+ (NSString *)joinOnNullWithNSString:(NSString *)first
                        withNSString:(NSString *)second;

+ (jboolean)isProhibitedHeaderWithComSquareupOkhttpProtocol:(ComSquareupOkhttpProtocol *)protocol
                                         withOkioByteString:(OkioByteString *)name;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpSpdyTransport, httpEngine_, ComSquareupOkhttpInternalHttpHttpEngine *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpSpdyTransport, spdyConnection_, ComSquareupOkhttpInternalSpdySpdyConnection *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpSpdyTransport, stream_, ComSquareupOkhttpInternalSpdySpdyStream *)

inline id<JavaUtilList> ComSquareupOkhttpInternalHttpSpdyTransport_get_SPDY_3_PROHIBITED_HEADERS();
static id<JavaUtilList> ComSquareupOkhttpInternalHttpSpdyTransport_SPDY_3_PROHIBITED_HEADERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalHttpSpdyTransport, SPDY_3_PROHIBITED_HEADERS, id<JavaUtilList>)

inline id<JavaUtilList> ComSquareupOkhttpInternalHttpSpdyTransport_get_HTTP_2_PROHIBITED_HEADERS();
static id<JavaUtilList> ComSquareupOkhttpInternalHttpSpdyTransport_HTTP_2_PROHIBITED_HEADERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalHttpSpdyTransport, HTTP_2_PROHIBITED_HEADERS, id<JavaUtilList>)

__attribute__((unused)) static NSString *ComSquareupOkhttpInternalHttpSpdyTransport_joinOnNullWithNSString_withNSString_(NSString *first, NSString *second);

__attribute__((unused)) static jboolean ComSquareupOkhttpInternalHttpSpdyTransport_isProhibitedHeaderWithComSquareupOkhttpProtocol_withOkioByteString_(ComSquareupOkhttpProtocol *protocol, OkioByteString *name);

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpInternalHttpSpdyTransport)

@implementation ComSquareupOkhttpInternalHttpSpdyTransport

- (instancetype)initWithComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)httpEngine
                withComSquareupOkhttpInternalSpdySpdyConnection:(ComSquareupOkhttpInternalSpdySpdyConnection *)spdyConnection {
  ComSquareupOkhttpInternalHttpSpdyTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalSpdySpdyConnection_(self, httpEngine, spdyConnection);
  return self;
}

- (id<OkioSink>)createRequestBodyWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request
                                                     withLong:(jlong)contentLength {
  return [((ComSquareupOkhttpInternalSpdySpdyStream *) nil_chk(stream_)) getSink];
}

- (void)writeRequestHeadersWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request {
  if (stream_ != nil) return;
  [((ComSquareupOkhttpInternalHttpHttpEngine *) nil_chk(httpEngine_)) writingRequestHeaders];
  jboolean permitsRequestBody = [httpEngine_ permitsRequestBody];
  jboolean hasResponseBody = true;
  NSString *version_ = ComSquareupOkhttpInternalHttpRequestLine_version__WithComSquareupOkhttpProtocol_([((ComSquareupOkhttpConnection *) nil_chk([httpEngine_ getConnection])) getProtocol]);
  stream_ = [spdyConnection_ newStreamWithJavaUtilList:ComSquareupOkhttpInternalHttpSpdyTransport_writeNameValueBlockWithComSquareupOkhttpRequest_withComSquareupOkhttpProtocol_withNSString_(request, [((ComSquareupOkhttpInternalSpdySpdyConnection *) nil_chk(spdyConnection_)) getProtocol], version_) withBoolean:permitsRequestBody withBoolean:hasResponseBody];
  (void) [((OkioTimeout *) nil_chk([((ComSquareupOkhttpInternalSpdySpdyStream *) nil_chk(stream_)) readTimeout])) timeoutWithLong:[((ComSquareupOkhttpOkHttpClient *) nil_chk(httpEngine_->client_)) getReadTimeout] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (void)writeRequestBodyWithComSquareupOkhttpInternalHttpRetryableSink:(ComSquareupOkhttpInternalHttpRetryableSink *)requestBody {
  [((ComSquareupOkhttpInternalHttpRetryableSink *) nil_chk(requestBody)) writeToSocketWithOkioSink:[((ComSquareupOkhttpInternalSpdySpdyStream *) nil_chk(stream_)) getSink]];
}

- (void)finishRequest {
  [((id<OkioSink>) nil_chk([((ComSquareupOkhttpInternalSpdySpdyStream *) nil_chk(stream_)) getSink])) close];
}

- (ComSquareupOkhttpResponse_Builder *)readResponseHeaders {
  return ComSquareupOkhttpInternalHttpSpdyTransport_readNameValueBlockWithJavaUtilList_withComSquareupOkhttpProtocol_([((ComSquareupOkhttpInternalSpdySpdyStream *) nil_chk(stream_)) getResponseHeaders], [((ComSquareupOkhttpInternalSpdySpdyConnection *) nil_chk(spdyConnection_)) getProtocol]);
}

+ (id<JavaUtilList>)writeNameValueBlockWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request
                                      withComSquareupOkhttpProtocol:(ComSquareupOkhttpProtocol *)protocol
                                                       withNSString:(NSString *)version_ {
  return ComSquareupOkhttpInternalHttpSpdyTransport_writeNameValueBlockWithComSquareupOkhttpRequest_withComSquareupOkhttpProtocol_withNSString_(request, protocol, version_);
}

+ (NSString *)joinOnNullWithNSString:(NSString *)first
                        withNSString:(NSString *)second {
  return ComSquareupOkhttpInternalHttpSpdyTransport_joinOnNullWithNSString_withNSString_(first, second);
}

+ (ComSquareupOkhttpResponse_Builder *)readNameValueBlockWithJavaUtilList:(id<JavaUtilList>)headerBlock
                                            withComSquareupOkhttpProtocol:(ComSquareupOkhttpProtocol *)protocol {
  return ComSquareupOkhttpInternalHttpSpdyTransport_readNameValueBlockWithJavaUtilList_withComSquareupOkhttpProtocol_(headerBlock, protocol);
}

- (ComSquareupOkhttpResponseBody *)openResponseBodyWithComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response {
  return new_ComSquareupOkhttpInternalHttpRealResponseBody_initWithComSquareupOkhttpHeaders_withOkioBufferedSource_([((ComSquareupOkhttpResponse *) nil_chk(response)) headers], OkioOkio_bufferWithOkioSource_([((ComSquareupOkhttpInternalSpdySpdyStream *) nil_chk(stream_)) getSource]));
}

- (void)releaseConnectionOnIdle {
}

- (void)disconnectWithComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)engine {
  if (stream_ != nil) [stream_ closeWithComSquareupOkhttpInternalSpdyErrorCode:JreLoadEnum(ComSquareupOkhttpInternalSpdyErrorCode, CANCEL)];
}

- (jboolean)canReuseConnection {
  return true;
}

+ (jboolean)isProhibitedHeaderWithComSquareupOkhttpProtocol:(ComSquareupOkhttpProtocol *)protocol
                                         withOkioByteString:(OkioByteString *)name {
  return ComSquareupOkhttpInternalHttpSpdyTransport_isProhibitedHeaderWithComSquareupOkhttpProtocol_withOkioByteString_(protocol, name);
}

+ (void)initialize {
  if (self == [ComSquareupOkhttpInternalHttpSpdyTransport class]) {
    ComSquareupOkhttpInternalHttpSpdyTransport_SPDY_3_PROHIBITED_HEADERS = ComSquareupOkhttpInternalUtil_immutableListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ OkioByteString_encodeUtf8WithNSString_(@"connection"), OkioByteString_encodeUtf8WithNSString_(@"host"), OkioByteString_encodeUtf8WithNSString_(@"keep-alive"), OkioByteString_encodeUtf8WithNSString_(@"proxy-connection"), OkioByteString_encodeUtf8WithNSString_(@"transfer-encoding") } count:5 type:OkioByteString_class_()]);
    ComSquareupOkhttpInternalHttpSpdyTransport_HTTP_2_PROHIBITED_HEADERS = ComSquareupOkhttpInternalUtil_immutableListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ OkioByteString_encodeUtf8WithNSString_(@"connection"), OkioByteString_encodeUtf8WithNSString_(@"host"), OkioByteString_encodeUtf8WithNSString_(@"keep-alive"), OkioByteString_encodeUtf8WithNSString_(@"proxy-connection"), OkioByteString_encodeUtf8WithNSString_(@"te"), OkioByteString_encodeUtf8WithNSString_(@"transfer-encoding"), OkioByteString_encodeUtf8WithNSString_(@"encoding"), OkioByteString_encodeUtf8WithNSString_(@"upgrade") } count:8 type:OkioByteString_class_()]);
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpInternalHttpSpdyTransport)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpInternalHttpHttpEngine:withComSquareupOkhttpInternalSpdySpdyConnection:", "SpdyTransport", NULL, 0x1, NULL, NULL },
    { "createRequestBodyWithComSquareupOkhttpRequest:withLong:", "createRequestBody", "Lokio.Sink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeRequestHeadersWithComSquareupOkhttpRequest:", "writeRequestHeaders", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeRequestBodyWithComSquareupOkhttpInternalHttpRetryableSink:", "writeRequestBody", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "finishRequest", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readResponseHeaders", NULL, "Lcom.squareup.okhttp.Response$Builder;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeNameValueBlockWithComSquareupOkhttpRequest:withComSquareupOkhttpProtocol:withNSString:", "writeNameValueBlock", "Ljava.util.List;", 0x9, NULL, "(Lcom/squareup/okhttp/Request;Lcom/squareup/okhttp/Protocol;Ljava/lang/String;)Ljava/util/List<Lcom/squareup/okhttp/internal/spdy/SpdyHeader;>;" },
    { "joinOnNullWithNSString:withNSString:", "joinOnNull", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "readNameValueBlockWithJavaUtilList:withComSquareupOkhttpProtocol:", "readNameValueBlock", "Lcom.squareup.okhttp.Response$Builder;", 0x9, "Ljava.io.IOException;", "(Ljava/util/List<Lcom/squareup/okhttp/internal/spdy/SpdyHeader;>;Lcom/squareup/okhttp/Protocol;)Lcom/squareup/okhttp/Response$Builder;" },
    { "openResponseBodyWithComSquareupOkhttpResponse:", "openResponseBody", "Lcom.squareup.okhttp.ResponseBody;", 0x1, "Ljava.io.IOException;", NULL },
    { "releaseConnectionOnIdle", NULL, "V", 0x1, NULL, NULL },
    { "disconnectWithComSquareupOkhttpInternalHttpHttpEngine:", "disconnect", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "canReuseConnection", NULL, "Z", 0x1, NULL, NULL },
    { "isProhibitedHeaderWithComSquareupOkhttpProtocol:withOkioByteString:", "isProhibitedHeader", "Z", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SPDY_3_PROHIBITED_HEADERS", "SPDY_3_PROHIBITED_HEADERS", 0x1a, "Ljava.util.List;", &ComSquareupOkhttpInternalHttpSpdyTransport_SPDY_3_PROHIBITED_HEADERS, "Ljava/util/List<Lokio/ByteString;>;", .constantValue.asLong = 0 },
    { "HTTP_2_PROHIBITED_HEADERS", "HTTP_2_PROHIBITED_HEADERS", 0x1a, "Ljava.util.List;", &ComSquareupOkhttpInternalHttpSpdyTransport_HTTP_2_PROHIBITED_HEADERS, "Ljava/util/List<Lokio/ByteString;>;", .constantValue.asLong = 0 },
    { "httpEngine_", NULL, 0x12, "Lcom.squareup.okhttp.internal.http.HttpEngine;", NULL, NULL, .constantValue.asLong = 0 },
    { "spdyConnection_", NULL, 0x12, "Lcom.squareup.okhttp.internal.spdy.SpdyConnection;", NULL, NULL, .constantValue.asLong = 0 },
    { "stream_", NULL, 0x2, "Lcom.squareup.okhttp.internal.spdy.SpdyStream;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalHttpSpdyTransport = { 2, "SpdyTransport", "com.squareup.okhttp.internal.http", NULL, 0x11, 14, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalHttpSpdyTransport;
}

@end

void ComSquareupOkhttpInternalHttpSpdyTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalSpdySpdyConnection_(ComSquareupOkhttpInternalHttpSpdyTransport *self, ComSquareupOkhttpInternalHttpHttpEngine *httpEngine, ComSquareupOkhttpInternalSpdySpdyConnection *spdyConnection) {
  NSObject_init(self);
  self->httpEngine_ = httpEngine;
  self->spdyConnection_ = spdyConnection;
}

ComSquareupOkhttpInternalHttpSpdyTransport *new_ComSquareupOkhttpInternalHttpSpdyTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalSpdySpdyConnection_(ComSquareupOkhttpInternalHttpHttpEngine *httpEngine, ComSquareupOkhttpInternalSpdySpdyConnection *spdyConnection) {
  ComSquareupOkhttpInternalHttpSpdyTransport *self = [ComSquareupOkhttpInternalHttpSpdyTransport alloc];
  ComSquareupOkhttpInternalHttpSpdyTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalSpdySpdyConnection_(self, httpEngine, spdyConnection);
  return self;
}

ComSquareupOkhttpInternalHttpSpdyTransport *create_ComSquareupOkhttpInternalHttpSpdyTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalSpdySpdyConnection_(ComSquareupOkhttpInternalHttpHttpEngine *httpEngine, ComSquareupOkhttpInternalSpdySpdyConnection *spdyConnection) {
  return new_ComSquareupOkhttpInternalHttpSpdyTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalSpdySpdyConnection_(httpEngine, spdyConnection);
}

id<JavaUtilList> ComSquareupOkhttpInternalHttpSpdyTransport_writeNameValueBlockWithComSquareupOkhttpRequest_withComSquareupOkhttpProtocol_withNSString_(ComSquareupOkhttpRequest *request, ComSquareupOkhttpProtocol *protocol, NSString *version_) {
  ComSquareupOkhttpInternalHttpSpdyTransport_initialize();
  ComSquareupOkhttpHeaders *headers = [((ComSquareupOkhttpRequest *) nil_chk(request)) headers];
  id<JavaUtilList> result = new_JavaUtilArrayList_initWithInt_([((ComSquareupOkhttpHeaders *) nil_chk(headers)) size] + 10);
  [result addWithId:new_ComSquareupOkhttpInternalSpdySpdyHeader_initWithOkioByteString_withNSString_(JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, TARGET_METHOD), [request method])];
  [result addWithId:new_ComSquareupOkhttpInternalSpdySpdyHeader_initWithOkioByteString_withNSString_(JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, TARGET_PATH), ComSquareupOkhttpInternalHttpRequestLine_requestPathWithJavaNetURL_([request url]))];
  NSString *host = ComSquareupOkhttpInternalHttpHttpEngine_hostHeaderWithJavaNetURL_([request url]);
  if (JreLoadEnum(ComSquareupOkhttpProtocol, SPDY_3) == protocol) {
    [result addWithId:new_ComSquareupOkhttpInternalSpdySpdyHeader_initWithOkioByteString_withNSString_(JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, VERSION), version_)];
    [result addWithId:new_ComSquareupOkhttpInternalSpdySpdyHeader_initWithOkioByteString_withNSString_(JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, TARGET_HOST), host)];
  }
  else if (JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_2) == protocol) {
    [result addWithId:new_ComSquareupOkhttpInternalSpdySpdyHeader_initWithOkioByteString_withNSString_(JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, TARGET_AUTHORITY), host)];
  }
  else {
    @throw new_JavaLangAssertionError_init();
  }
  [result addWithId:new_ComSquareupOkhttpInternalSpdySpdyHeader_initWithOkioByteString_withNSString_(JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, TARGET_SCHEME), [((JavaNetURL *) nil_chk([request url])) getProtocol])];
  id<JavaUtilSet> names = new_JavaUtilLinkedHashSet_init();
  for (jint i = 0, size = [headers size]; i < size; i++) {
    OkioByteString *name = OkioByteString_encodeUtf8WithNSString_([((NSString *) nil_chk([headers nameWithInt:i])) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]);
    NSString *value = [headers valueWithInt:i];
    if (ComSquareupOkhttpInternalHttpSpdyTransport_isProhibitedHeaderWithComSquareupOkhttpProtocol_withOkioByteString_(protocol, name)) continue;
    if ([((OkioByteString *) nil_chk(name)) isEqual:JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, TARGET_METHOD)] || [name isEqual:JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, TARGET_PATH)] || [name isEqual:JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, TARGET_SCHEME)] || [name isEqual:JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, TARGET_AUTHORITY)] || [name isEqual:JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, TARGET_HOST)] || [name isEqual:JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, VERSION)]) {
      continue;
    }
    if ([names addWithId:name]) {
      [result addWithId:new_ComSquareupOkhttpInternalSpdySpdyHeader_initWithOkioByteString_withNSString_(name, value)];
      continue;
    }
    for (jint j = 0; j < [result size]; j++) {
      if ([((OkioByteString *) nil_chk(((ComSquareupOkhttpInternalSpdySpdyHeader *) nil_chk([result getWithInt:j]))->name_)) isEqual:name]) {
        NSString *concatenated = ComSquareupOkhttpInternalHttpSpdyTransport_joinOnNullWithNSString_withNSString_([((OkioByteString *) nil_chk(((ComSquareupOkhttpInternalSpdySpdyHeader *) nil_chk([result getWithInt:j]))->value_)) utf8], value);
        (void) [result setWithInt:j withId:new_ComSquareupOkhttpInternalSpdySpdyHeader_initWithOkioByteString_withNSString_(name, concatenated)];
        break;
      }
    }
  }
  return result;
}

NSString *ComSquareupOkhttpInternalHttpSpdyTransport_joinOnNullWithNSString_withNSString_(NSString *first, NSString *second) {
  ComSquareupOkhttpInternalHttpSpdyTransport_initialize();
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_(first) appendWithChar:0x0000])) appendWithNSString:second])) description];
}

ComSquareupOkhttpResponse_Builder *ComSquareupOkhttpInternalHttpSpdyTransport_readNameValueBlockWithJavaUtilList_withComSquareupOkhttpProtocol_(id<JavaUtilList> headerBlock, ComSquareupOkhttpProtocol *protocol) {
  ComSquareupOkhttpInternalHttpSpdyTransport_initialize();
  NSString *status = nil;
  NSString *version_ = @"HTTP/1.1";
  ComSquareupOkhttpHeaders_Builder *headersBuilder = new_ComSquareupOkhttpHeaders_Builder_init();
  (void) [headersBuilder setWithNSString:JreLoadStatic(ComSquareupOkhttpInternalHttpOkHeaders, SELECTED_PROTOCOL) withNSString:[((ComSquareupOkhttpProtocol *) nil_chk(protocol)) description]];
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(headerBlock)) size]; i < size; i++) {
    OkioByteString *name = ((ComSquareupOkhttpInternalSpdySpdyHeader *) nil_chk([headerBlock getWithInt:i]))->name_;
    NSString *values = [((OkioByteString *) nil_chk(((ComSquareupOkhttpInternalSpdySpdyHeader *) nil_chk([headerBlock getWithInt:i]))->value_)) utf8];
    for (jint start = 0; start < ((jint) [((NSString *) nil_chk(values)) length]); ) {
      jint end = [values indexOf:0x0000 fromIndex:start];
      if (end == -1) {
        end = ((jint) [values length]);
      }
      NSString *value = [values substring:start endIndex:end];
      if ([((OkioByteString *) nil_chk(name)) isEqual:JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, RESPONSE_STATUS)]) {
        status = value;
      }
      else if ([name isEqual:JreLoadStatic(ComSquareupOkhttpInternalSpdySpdyHeader, VERSION)]) {
        version_ = value;
      }
      else if (!ComSquareupOkhttpInternalHttpSpdyTransport_isProhibitedHeaderWithComSquareupOkhttpProtocol_withOkioByteString_(protocol, name)) {
        (void) [headersBuilder addWithNSString:[name utf8] withNSString:value];
      }
      start = end + 1;
    }
  }
  if (status == nil) @throw new_JavaNetProtocolException_initWithNSString_(@"Expected ':status' header not present");
  ComSquareupOkhttpInternalHttpStatusLine *statusLine = ComSquareupOkhttpInternalHttpStatusLine_parseWithNSString_(JreStrcat("$C$", version_, ' ', status));
  return [((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([new_ComSquareupOkhttpResponse_Builder_init() protocolWithComSquareupOkhttpProtocol:protocol])) codeWithInt:((ComSquareupOkhttpInternalHttpStatusLine *) nil_chk(statusLine))->code_])) messageWithNSString:statusLine->message_])) headersWithComSquareupOkhttpHeaders:[headersBuilder build]];
}

jboolean ComSquareupOkhttpInternalHttpSpdyTransport_isProhibitedHeaderWithComSquareupOkhttpProtocol_withOkioByteString_(ComSquareupOkhttpProtocol *protocol, OkioByteString *name) {
  ComSquareupOkhttpInternalHttpSpdyTransport_initialize();
  if (protocol == JreLoadEnum(ComSquareupOkhttpProtocol, SPDY_3)) {
    return [((id<JavaUtilList>) nil_chk(ComSquareupOkhttpInternalHttpSpdyTransport_SPDY_3_PROHIBITED_HEADERS)) containsWithId:name];
  }
  else if (protocol == JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_2)) {
    return [((id<JavaUtilList>) nil_chk(ComSquareupOkhttpInternalHttpSpdyTransport_HTTP_2_PROHIBITED_HEADERS)) containsWithId:name];
  }
  else {
    @throw new_JavaLangAssertionError_initWithId_(protocol);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalHttpSpdyTransport)
