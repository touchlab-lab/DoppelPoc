//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Authenticator.h"
#include "com/squareup/okhttp/Cache.h"
#include "com/squareup/okhttp/Call.h"
#include "com/squareup/okhttp/CertificatePinner.h"
#include "com/squareup/okhttp/Connection.h"
#include "com/squareup/okhttp/ConnectionPool.h"
#include "com/squareup/okhttp/ConnectionSpec.h"
#include "com/squareup/okhttp/Dispatcher.h"
#include "com/squareup/okhttp/Headers.h"
#include "com/squareup/okhttp/OkHttpClient.h"
#include "com/squareup/okhttp/Protocol.h"
#include "com/squareup/okhttp/Request.h"
#include "com/squareup/okhttp/Response.h"
#include "com/squareup/okhttp/internal/Internal.h"
#include "com/squareup/okhttp/internal/InternalCache.h"
#include "com/squareup/okhttp/internal/Network.h"
#include "com/squareup/okhttp/internal/RouteDatabase.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "com/squareup/okhttp/internal/http/AuthenticatorAdapter.h"
#include "com/squareup/okhttp/internal/http/HttpEngine.h"
#include "com/squareup/okhttp/internal/http/Transport.h"
#include "com/squareup/okhttp/internal/tls/OkHostnameVerifier.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/net/CookieHandler.h"
#include "java/net/Proxy.h"
#include "java/net/ProxySelector.h"
#include "java/security/GeneralSecurityException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "javax/net/SocketFactory.h"
#include "javax/net/ssl/HostnameVerifier.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLSocketFactory.h"

@interface ComSquareupOkhttpOkHttpClient () {
 @public
  ComSquareupOkhttpInternalRouteDatabase *routeDatabase_;
  ComSquareupOkhttpDispatcher *dispatcher_;
  JavaNetProxy *proxy_;
  id<JavaUtilList> protocols_;
  id<JavaUtilList> connectionSpecs_;
  id<JavaUtilList> interceptors_;
  id<JavaUtilList> networkInterceptors_;
  JavaNetProxySelector *proxySelector_;
  JavaNetCookieHandler *cookieHandler_;
  id<ComSquareupOkhttpInternalInternalCache> internalCache_;
  ComSquareupOkhttpCache *cache_;
  JavaxNetSocketFactory *socketFactory_;
  JavaxNetSslSSLSocketFactory *sslSocketFactory_;
  id<JavaxNetSslHostnameVerifier> hostnameVerifier_;
  ComSquareupOkhttpCertificatePinner *certificatePinner_;
  id<ComSquareupOkhttpAuthenticator> authenticator_;
  ComSquareupOkhttpConnectionPool *connectionPool_;
  id<ComSquareupOkhttpInternalNetwork> network_;
  jboolean followSslRedirects_;
  jboolean followRedirects_;
  jboolean retryOnConnectionFailure_;
  jint connectTimeout_;
  jint readTimeout_;
  jint writeTimeout_;
}

- (instancetype)initWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)okHttpClient;

- (JavaxNetSslSSLSocketFactory *)getDefaultSSLSocketFactory;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, routeDatabase_, ComSquareupOkhttpInternalRouteDatabase *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, dispatcher_, ComSquareupOkhttpDispatcher *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, proxy_, JavaNetProxy *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, protocols_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, connectionSpecs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, interceptors_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, networkInterceptors_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, proxySelector_, JavaNetProxySelector *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, cookieHandler_, JavaNetCookieHandler *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, internalCache_, id<ComSquareupOkhttpInternalInternalCache>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, cache_, ComSquareupOkhttpCache *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, socketFactory_, JavaxNetSocketFactory *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, sslSocketFactory_, JavaxNetSslSSLSocketFactory *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, hostnameVerifier_, id<JavaxNetSslHostnameVerifier>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, certificatePinner_, ComSquareupOkhttpCertificatePinner *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, authenticator_, id<ComSquareupOkhttpAuthenticator>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, connectionPool_, ComSquareupOkhttpConnectionPool *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpOkHttpClient, network_, id<ComSquareupOkhttpInternalNetwork>)

inline id<JavaUtilList> ComSquareupOkhttpOkHttpClient_get_DEFAULT_PROTOCOLS();
static id<JavaUtilList> ComSquareupOkhttpOkHttpClient_DEFAULT_PROTOCOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpOkHttpClient, DEFAULT_PROTOCOLS, id<JavaUtilList>)

inline id<JavaUtilList> ComSquareupOkhttpOkHttpClient_get_DEFAULT_CONNECTION_SPECS();
static id<JavaUtilList> ComSquareupOkhttpOkHttpClient_DEFAULT_CONNECTION_SPECS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpOkHttpClient, DEFAULT_CONNECTION_SPECS, id<JavaUtilList>)

inline JavaxNetSslSSLSocketFactory *ComSquareupOkhttpOkHttpClient_get_defaultSslSocketFactory();
inline JavaxNetSslSSLSocketFactory *ComSquareupOkhttpOkHttpClient_set_defaultSslSocketFactory(JavaxNetSslSSLSocketFactory *value);
static JavaxNetSslSSLSocketFactory *ComSquareupOkhttpOkHttpClient_defaultSslSocketFactory;
J2OBJC_STATIC_FIELD_OBJ(ComSquareupOkhttpOkHttpClient, defaultSslSocketFactory, JavaxNetSslSSLSocketFactory *)

__attribute__((unused)) static void ComSquareupOkhttpOkHttpClient_initWithComSquareupOkhttpOkHttpClient_(ComSquareupOkhttpOkHttpClient *self, ComSquareupOkhttpOkHttpClient *okHttpClient);

__attribute__((unused)) static ComSquareupOkhttpOkHttpClient *new_ComSquareupOkhttpOkHttpClient_initWithComSquareupOkhttpOkHttpClient_(ComSquareupOkhttpOkHttpClient *okHttpClient) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpOkHttpClient *create_ComSquareupOkhttpOkHttpClient_initWithComSquareupOkhttpOkHttpClient_(ComSquareupOkhttpOkHttpClient *okHttpClient);

__attribute__((unused)) static void ComSquareupOkhttpOkHttpClient_setInternalCacheWithComSquareupOkhttpInternalInternalCache_(ComSquareupOkhttpOkHttpClient *self, id<ComSquareupOkhttpInternalInternalCache> internalCache);

__attribute__((unused)) static id<ComSquareupOkhttpInternalInternalCache> ComSquareupOkhttpOkHttpClient_internalCache(ComSquareupOkhttpOkHttpClient *self);

__attribute__((unused)) static ComSquareupOkhttpInternalRouteDatabase *ComSquareupOkhttpOkHttpClient_routeDatabase(ComSquareupOkhttpOkHttpClient *self);

__attribute__((unused)) static ComSquareupOkhttpDispatcher *ComSquareupOkhttpOkHttpClient_getDispatcher(ComSquareupOkhttpOkHttpClient *self);

__attribute__((unused)) static JavaxNetSslSSLSocketFactory *ComSquareupOkhttpOkHttpClient_getDefaultSSLSocketFactory(ComSquareupOkhttpOkHttpClient *self);

@interface ComSquareupOkhttpOkHttpClient_$1 : ComSquareupOkhttpInternalInternal

- (id<ComSquareupOkhttpInternalHttpTransport>)newTransportWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                                              withComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)httpEngine OBJC_METHOD_FAMILY_NONE;

- (jboolean)clearOwnerWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection;

- (void)closeIfOwnedByWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                                               withId:(id)owner;

- (jint)recycleCountWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection;

- (void)setProtocolWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                     withComSquareupOkhttpProtocol:(ComSquareupOkhttpProtocol *)protocol;

- (void)setOwnerWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
    withComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)httpEngine;

- (jboolean)isReadableWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)pooled;

- (void)addLineWithComSquareupOkhttpHeaders_Builder:(ComSquareupOkhttpHeaders_Builder *)builder
                                       withNSString:(NSString *)line;

- (void)setCacheWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client
       withComSquareupOkhttpInternalInternalCache:(id<ComSquareupOkhttpInternalInternalCache>)internalCache;

- (id<ComSquareupOkhttpInternalInternalCache>)internalCacheWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client;

- (void)recycleWithComSquareupOkhttpConnectionPool:(ComSquareupOkhttpConnectionPool *)pool
                   withComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection;

- (ComSquareupOkhttpInternalRouteDatabase *)routeDatabaseWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client;

- (id<ComSquareupOkhttpInternalNetwork>)networkWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client;

- (void)setNetworkWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client
               withComSquareupOkhttpInternalNetwork:(id<ComSquareupOkhttpInternalNetwork>)network;

- (void)connectAndSetOwnerWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client
                            withComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                withComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)owner
                               withComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request;

- (ComSquareupOkhttpCall *)newCallWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client
                                       withComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request OBJC_METHOD_FAMILY_NONE;

- (ComSquareupOkhttpResponse *)callGetResponseWithComSquareupOkhttpCall:(ComSquareupOkhttpCall *)call
                                                            withBoolean:(jboolean)forWebSocket;

- (void)callEngineReleaseConnectionWithComSquareupOkhttpCall:(ComSquareupOkhttpCall *)call;

- (ComSquareupOkhttpConnection *)callEngineGetConnectionWithComSquareupOkhttpCall:(ComSquareupOkhttpCall *)call;

- (jboolean)connectionClearOwnerWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection;

- (void)connectionSetOwnerWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                                                   withId:(id)owner;

- (void)connectionCloseIfOwnedByWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                                                         withId:(id)owner;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpOkHttpClient_$1)

__attribute__((unused)) static void ComSquareupOkhttpOkHttpClient_$1_init(ComSquareupOkhttpOkHttpClient_$1 *self);

__attribute__((unused)) static ComSquareupOkhttpOkHttpClient_$1 *new_ComSquareupOkhttpOkHttpClient_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpOkHttpClient_$1 *create_ComSquareupOkhttpOkHttpClient_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpOkHttpClient_$1)

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpOkHttpClient)

@implementation ComSquareupOkhttpOkHttpClient

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpOkHttpClient_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)okHttpClient {
  ComSquareupOkhttpOkHttpClient_initWithComSquareupOkhttpOkHttpClient_(self, okHttpClient);
  return self;
}

- (void)setConnectTimeoutWithLong:(jlong)timeout
   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (timeout < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"timeout < 0");
  if (unit == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unit == null");
  jlong millis = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toMillisWithLong:timeout];
  if (millis > JavaLangInteger_MAX_VALUE) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Timeout too large.");
  connectTimeout_ = (jint) millis;
}

- (jint)getConnectTimeout {
  return connectTimeout_;
}

- (void)setReadTimeoutWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (timeout < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"timeout < 0");
  if (unit == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unit == null");
  jlong millis = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toMillisWithLong:timeout];
  if (millis > JavaLangInteger_MAX_VALUE) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Timeout too large.");
  readTimeout_ = (jint) millis;
}

- (jint)getReadTimeout {
  return readTimeout_;
}

- (void)setWriteTimeoutWithLong:(jlong)timeout
 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (timeout < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"timeout < 0");
  if (unit == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unit == null");
  jlong millis = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toMillisWithLong:timeout];
  if (millis > JavaLangInteger_MAX_VALUE) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Timeout too large.");
  writeTimeout_ = (jint) millis;
}

- (jint)getWriteTimeout {
  return writeTimeout_;
}

- (ComSquareupOkhttpOkHttpClient *)setProxyWithJavaNetProxy:(JavaNetProxy *)proxy {
  self->proxy_ = proxy;
  return self;
}

- (JavaNetProxy *)getProxy {
  return proxy_;
}

- (ComSquareupOkhttpOkHttpClient *)setProxySelectorWithJavaNetProxySelector:(JavaNetProxySelector *)proxySelector {
  self->proxySelector_ = proxySelector;
  return self;
}

- (JavaNetProxySelector *)getProxySelector {
  return proxySelector_;
}

- (ComSquareupOkhttpOkHttpClient *)setCookieHandlerWithJavaNetCookieHandler:(JavaNetCookieHandler *)cookieHandler {
  self->cookieHandler_ = cookieHandler;
  return self;
}

- (JavaNetCookieHandler *)getCookieHandler {
  return cookieHandler_;
}

- (void)setInternalCacheWithComSquareupOkhttpInternalInternalCache:(id<ComSquareupOkhttpInternalInternalCache>)internalCache {
  ComSquareupOkhttpOkHttpClient_setInternalCacheWithComSquareupOkhttpInternalInternalCache_(self, internalCache);
}

- (id<ComSquareupOkhttpInternalInternalCache>)internalCache {
  return ComSquareupOkhttpOkHttpClient_internalCache(self);
}

- (ComSquareupOkhttpOkHttpClient *)setCacheWithComSquareupOkhttpCache:(ComSquareupOkhttpCache *)cache {
  self->cache_ = cache;
  self->internalCache_ = nil;
  return self;
}

- (ComSquareupOkhttpCache *)getCache {
  return cache_;
}

- (ComSquareupOkhttpOkHttpClient *)setSocketFactoryWithJavaxNetSocketFactory:(JavaxNetSocketFactory *)socketFactory {
  self->socketFactory_ = socketFactory;
  return self;
}

- (JavaxNetSocketFactory *)getSocketFactory {
  return socketFactory_;
}

- (ComSquareupOkhttpOkHttpClient *)setSslSocketFactoryWithJavaxNetSslSSLSocketFactory:(JavaxNetSslSSLSocketFactory *)sslSocketFactory {
  self->sslSocketFactory_ = sslSocketFactory;
  return self;
}

- (JavaxNetSslSSLSocketFactory *)getSslSocketFactory {
  return sslSocketFactory_;
}

- (ComSquareupOkhttpOkHttpClient *)setHostnameVerifierWithJavaxNetSslHostnameVerifier:(id<JavaxNetSslHostnameVerifier>)hostnameVerifier {
  self->hostnameVerifier_ = hostnameVerifier;
  return self;
}

- (id<JavaxNetSslHostnameVerifier>)getHostnameVerifier {
  return hostnameVerifier_;
}

- (ComSquareupOkhttpOkHttpClient *)setCertificatePinnerWithComSquareupOkhttpCertificatePinner:(ComSquareupOkhttpCertificatePinner *)certificatePinner {
  self->certificatePinner_ = certificatePinner;
  return self;
}

- (ComSquareupOkhttpCertificatePinner *)getCertificatePinner {
  return certificatePinner_;
}

- (ComSquareupOkhttpOkHttpClient *)setAuthenticatorWithComSquareupOkhttpAuthenticator:(id<ComSquareupOkhttpAuthenticator>)authenticator {
  self->authenticator_ = authenticator;
  return self;
}

- (id<ComSquareupOkhttpAuthenticator>)getAuthenticator {
  return authenticator_;
}

- (ComSquareupOkhttpOkHttpClient *)setConnectionPoolWithComSquareupOkhttpConnectionPool:(ComSquareupOkhttpConnectionPool *)connectionPool {
  self->connectionPool_ = connectionPool;
  return self;
}

- (ComSquareupOkhttpConnectionPool *)getConnectionPool {
  return connectionPool_;
}

- (ComSquareupOkhttpOkHttpClient *)setFollowSslRedirectsWithBoolean:(jboolean)followProtocolRedirects {
  self->followSslRedirects_ = followProtocolRedirects;
  return self;
}

- (jboolean)getFollowSslRedirects {
  return followSslRedirects_;
}

- (void)setFollowRedirectsWithBoolean:(jboolean)followRedirects {
  self->followRedirects_ = followRedirects;
}

- (jboolean)getFollowRedirects {
  return followRedirects_;
}

- (void)setRetryOnConnectionFailureWithBoolean:(jboolean)retryOnConnectionFailure {
  self->retryOnConnectionFailure_ = retryOnConnectionFailure;
}

- (jboolean)getRetryOnConnectionFailure {
  return retryOnConnectionFailure_;
}

- (ComSquareupOkhttpInternalRouteDatabase *)routeDatabase {
  return ComSquareupOkhttpOkHttpClient_routeDatabase(self);
}

- (ComSquareupOkhttpOkHttpClient *)setDispatcherWithComSquareupOkhttpDispatcher:(ComSquareupOkhttpDispatcher *)dispatcher {
  if (dispatcher == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"dispatcher == null");
  self->dispatcher_ = dispatcher;
  return self;
}

- (ComSquareupOkhttpDispatcher *)getDispatcher {
  return ComSquareupOkhttpOkHttpClient_getDispatcher(self);
}

- (ComSquareupOkhttpOkHttpClient *)setProtocolsWithJavaUtilList:(id<JavaUtilList>)protocols {
  protocols = ComSquareupOkhttpInternalUtil_immutableListWithJavaUtilList_(protocols);
  if (![((id<JavaUtilList>) nil_chk(protocols)) containsWithId:JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_1_1)]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"protocols doesn't contain http/1.1: ", protocols));
  }
  if ([protocols containsWithId:JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_1_0)]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"protocols must not contain http/1.0: ", protocols));
  }
  if ([protocols containsWithId:nil]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"protocols must not contain null");
  }
  self->protocols_ = ComSquareupOkhttpInternalUtil_immutableListWithJavaUtilList_(protocols);
  return self;
}

- (id<JavaUtilList>)getProtocols {
  return protocols_;
}

- (ComSquareupOkhttpOkHttpClient *)setConnectionSpecsWithJavaUtilList:(id<JavaUtilList>)connectionSpecs {
  self->connectionSpecs_ = ComSquareupOkhttpInternalUtil_immutableListWithJavaUtilList_(connectionSpecs);
  return self;
}

- (id<JavaUtilList>)getConnectionSpecs {
  return connectionSpecs_;
}

- (id<JavaUtilList>)interceptors {
  return interceptors_;
}

- (id<JavaUtilList>)networkInterceptors {
  return networkInterceptors_;
}

- (ComSquareupOkhttpCall *)newCallWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request {
  return new_ComSquareupOkhttpCall_initWithComSquareupOkhttpOkHttpClient_withComSquareupOkhttpRequest_(self, request);
}

- (ComSquareupOkhttpOkHttpClient *)cancelWithId:(id)tag {
  [((ComSquareupOkhttpDispatcher *) nil_chk(ComSquareupOkhttpOkHttpClient_getDispatcher(self))) cancelWithId:tag];
  return self;
}

- (ComSquareupOkhttpOkHttpClient *)copyWithDefaults {
  ComSquareupOkhttpOkHttpClient *result = new_ComSquareupOkhttpOkHttpClient_initWithComSquareupOkhttpOkHttpClient_(self);
  if (result->proxySelector_ == nil) {
    result->proxySelector_ = JavaNetProxySelector_getDefault();
  }
  if (result->cookieHandler_ == nil) {
    result->cookieHandler_ = JavaNetCookieHandler_getDefault();
  }
  if (result->socketFactory_ == nil) {
    result->socketFactory_ = JavaxNetSocketFactory_getDefault();
  }
  if (result->sslSocketFactory_ == nil) {
    result->sslSocketFactory_ = ComSquareupOkhttpOkHttpClient_getDefaultSSLSocketFactory(self);
  }
  if (result->hostnameVerifier_ == nil) {
    result->hostnameVerifier_ = JreLoadStatic(ComSquareupOkhttpInternalTlsOkHostnameVerifier, INSTANCE);
  }
  if (result->certificatePinner_ == nil) {
    result->certificatePinner_ = JreLoadStatic(ComSquareupOkhttpCertificatePinner, DEFAULT);
  }
  if (result->authenticator_ == nil) {
    result->authenticator_ = JreLoadStatic(ComSquareupOkhttpInternalHttpAuthenticatorAdapter, INSTANCE);
  }
  if (result->connectionPool_ == nil) {
    result->connectionPool_ = ComSquareupOkhttpConnectionPool_getDefault();
  }
  if (result->protocols_ == nil) {
    result->protocols_ = ComSquareupOkhttpOkHttpClient_DEFAULT_PROTOCOLS;
  }
  if (result->connectionSpecs_ == nil) {
    result->connectionSpecs_ = ComSquareupOkhttpOkHttpClient_DEFAULT_CONNECTION_SPECS;
  }
  if (result->network_ == nil) {
    result->network_ = JreLoadStatic(ComSquareupOkhttpInternalNetwork, DEFAULT);
  }
  return result;
}

- (JavaxNetSslSSLSocketFactory *)getDefaultSSLSocketFactory {
  return ComSquareupOkhttpOkHttpClient_getDefaultSSLSocketFactory(self);
}

- (ComSquareupOkhttpOkHttpClient *)clone {
  @try {
    return (ComSquareupOkhttpOkHttpClient *) cast_chk([super clone], [ComSquareupOkhttpOkHttpClient class]);
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw new_JavaLangAssertionError_init();
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (void)initialize {
  if (self == [ComSquareupOkhttpOkHttpClient class]) {
    ComSquareupOkhttpOkHttpClient_DEFAULT_PROTOCOLS = ComSquareupOkhttpInternalUtil_immutableListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_2), JreLoadEnum(ComSquareupOkhttpProtocol, SPDY_3), JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_1_1) } count:3 type:ComSquareupOkhttpProtocol_class_()]);
    ComSquareupOkhttpOkHttpClient_DEFAULT_CONNECTION_SPECS = ComSquareupOkhttpInternalUtil_immutableListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(ComSquareupOkhttpConnectionSpec, MODERN_TLS), JreLoadStatic(ComSquareupOkhttpConnectionSpec, COMPATIBLE_TLS), JreLoadStatic(ComSquareupOkhttpConnectionSpec, CLEARTEXT) } count:3 type:ComSquareupOkhttpConnectionSpec_class_()]);
    {
      *JreLoadStaticRef(ComSquareupOkhttpInternalInternal, instance) = new_ComSquareupOkhttpOkHttpClient_$1_init();
    }
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpOkHttpClient)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "OkHttpClient", NULL, 0x1, NULL, NULL },
    { "initWithComSquareupOkhttpOkHttpClient:", "OkHttpClient", NULL, 0x2, NULL, NULL },
    { "setConnectTimeoutWithLong:withJavaUtilConcurrentTimeUnit:", "setConnectTimeout", "V", 0x11, NULL, NULL },
    { "getConnectTimeout", NULL, "I", 0x11, NULL, NULL },
    { "setReadTimeoutWithLong:withJavaUtilConcurrentTimeUnit:", "setReadTimeout", "V", 0x11, NULL, NULL },
    { "getReadTimeout", NULL, "I", 0x11, NULL, NULL },
    { "setWriteTimeoutWithLong:withJavaUtilConcurrentTimeUnit:", "setWriteTimeout", "V", 0x11, NULL, NULL },
    { "getWriteTimeout", NULL, "I", 0x11, NULL, NULL },
    { "setProxyWithJavaNetProxy:", "setProxy", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getProxy", NULL, "Ljava.net.Proxy;", 0x11, NULL, NULL },
    { "setProxySelectorWithJavaNetProxySelector:", "setProxySelector", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getProxySelector", NULL, "Ljava.net.ProxySelector;", 0x11, NULL, NULL },
    { "setCookieHandlerWithJavaNetCookieHandler:", "setCookieHandler", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getCookieHandler", NULL, "Ljava.net.CookieHandler;", 0x11, NULL, NULL },
    { "setInternalCacheWithComSquareupOkhttpInternalInternalCache:", "setInternalCache", "V", 0x10, NULL, NULL },
    { "internalCache", NULL, "Lcom.squareup.okhttp.internal.InternalCache;", 0x10, NULL, NULL },
    { "setCacheWithComSquareupOkhttpCache:", "setCache", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getCache", NULL, "Lcom.squareup.okhttp.Cache;", 0x11, NULL, NULL },
    { "setSocketFactoryWithJavaxNetSocketFactory:", "setSocketFactory", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getSocketFactory", NULL, "Ljavax.net.SocketFactory;", 0x11, NULL, NULL },
    { "setSslSocketFactoryWithJavaxNetSslSSLSocketFactory:", "setSslSocketFactory", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getSslSocketFactory", NULL, "Ljavax.net.ssl.SSLSocketFactory;", 0x11, NULL, NULL },
    { "setHostnameVerifierWithJavaxNetSslHostnameVerifier:", "setHostnameVerifier", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getHostnameVerifier", NULL, "Ljavax.net.ssl.HostnameVerifier;", 0x11, NULL, NULL },
    { "setCertificatePinnerWithComSquareupOkhttpCertificatePinner:", "setCertificatePinner", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getCertificatePinner", NULL, "Lcom.squareup.okhttp.CertificatePinner;", 0x11, NULL, NULL },
    { "setAuthenticatorWithComSquareupOkhttpAuthenticator:", "setAuthenticator", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getAuthenticator", NULL, "Lcom.squareup.okhttp.Authenticator;", 0x11, NULL, NULL },
    { "setConnectionPoolWithComSquareupOkhttpConnectionPool:", "setConnectionPool", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getConnectionPool", NULL, "Lcom.squareup.okhttp.ConnectionPool;", 0x11, NULL, NULL },
    { "setFollowSslRedirectsWithBoolean:", "setFollowSslRedirects", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getFollowSslRedirects", NULL, "Z", 0x11, NULL, NULL },
    { "setFollowRedirectsWithBoolean:", "setFollowRedirects", "V", 0x11, NULL, NULL },
    { "getFollowRedirects", NULL, "Z", 0x11, NULL, NULL },
    { "setRetryOnConnectionFailureWithBoolean:", "setRetryOnConnectionFailure", "V", 0x11, NULL, NULL },
    { "getRetryOnConnectionFailure", NULL, "Z", 0x11, NULL, NULL },
    { "routeDatabase", NULL, "Lcom.squareup.okhttp.internal.RouteDatabase;", 0x10, NULL, NULL },
    { "setDispatcherWithComSquareupOkhttpDispatcher:", "setDispatcher", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
    { "getDispatcher", NULL, "Lcom.squareup.okhttp.Dispatcher;", 0x11, NULL, NULL },
    { "setProtocolsWithJavaUtilList:", "setProtocols", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, "(Ljava/util/List<Lcom/squareup/okhttp/Protocol;>;)Lcom/squareup/okhttp/OkHttpClient;" },
    { "getProtocols", NULL, "Ljava.util.List;", 0x11, NULL, "()Ljava/util/List<Lcom/squareup/okhttp/Protocol;>;" },
    { "setConnectionSpecsWithJavaUtilList:", "setConnectionSpecs", "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, "(Ljava/util/List<Lcom/squareup/okhttp/ConnectionSpec;>;)Lcom/squareup/okhttp/OkHttpClient;" },
    { "getConnectionSpecs", NULL, "Ljava.util.List;", 0x11, NULL, "()Ljava/util/List<Lcom/squareup/okhttp/ConnectionSpec;>;" },
    { "interceptors", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lcom/squareup/okhttp/Interceptor;>;" },
    { "networkInterceptors", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lcom/squareup/okhttp/Interceptor;>;" },
    { "newCallWithComSquareupOkhttpRequest:", "newCall", "Lcom.squareup.okhttp.Call;", 0x1, NULL, NULL },
    { "cancelWithId:", "cancel", "Lcom.squareup.okhttp.OkHttpClient;", 0x1, NULL, NULL },
    { "copyWithDefaults", NULL, "Lcom.squareup.okhttp.OkHttpClient;", 0x10, NULL, NULL },
    { "getDefaultSSLSocketFactory", NULL, "Ljavax.net.ssl.SSLSocketFactory;", 0x22, NULL, NULL },
    { "clone", NULL, "Lcom.squareup.okhttp.OkHttpClient;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_PROTOCOLS", "DEFAULT_PROTOCOLS", 0x1a, "Ljava.util.List;", &ComSquareupOkhttpOkHttpClient_DEFAULT_PROTOCOLS, "Ljava/util/List<Lcom/squareup/okhttp/Protocol;>;", .constantValue.asLong = 0 },
    { "DEFAULT_CONNECTION_SPECS", "DEFAULT_CONNECTION_SPECS", 0x1a, "Ljava.util.List;", &ComSquareupOkhttpOkHttpClient_DEFAULT_CONNECTION_SPECS, "Ljava/util/List<Lcom/squareup/okhttp/ConnectionSpec;>;", .constantValue.asLong = 0 },
    { "defaultSslSocketFactory", "defaultSslSocketFactory", 0xa, "Ljavax.net.ssl.SSLSocketFactory;", &ComSquareupOkhttpOkHttpClient_defaultSslSocketFactory, NULL, .constantValue.asLong = 0 },
    { "routeDatabase_", NULL, 0x12, "Lcom.squareup.okhttp.internal.RouteDatabase;", NULL, NULL, .constantValue.asLong = 0 },
    { "dispatcher_", NULL, 0x2, "Lcom.squareup.okhttp.Dispatcher;", NULL, NULL, .constantValue.asLong = 0 },
    { "proxy_", NULL, 0x2, "Ljava.net.Proxy;", NULL, NULL, .constantValue.asLong = 0 },
    { "protocols_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lcom/squareup/okhttp/Protocol;>;", .constantValue.asLong = 0 },
    { "connectionSpecs_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lcom/squareup/okhttp/ConnectionSpec;>;", .constantValue.asLong = 0 },
    { "interceptors_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lcom/squareup/okhttp/Interceptor;>;", .constantValue.asLong = 0 },
    { "networkInterceptors_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lcom/squareup/okhttp/Interceptor;>;", .constantValue.asLong = 0 },
    { "proxySelector_", NULL, 0x2, "Ljava.net.ProxySelector;", NULL, NULL, .constantValue.asLong = 0 },
    { "cookieHandler_", NULL, 0x2, "Ljava.net.CookieHandler;", NULL, NULL, .constantValue.asLong = 0 },
    { "internalCache_", NULL, 0x2, "Lcom.squareup.okhttp.internal.InternalCache;", NULL, NULL, .constantValue.asLong = 0 },
    { "cache_", NULL, 0x2, "Lcom.squareup.okhttp.Cache;", NULL, NULL, .constantValue.asLong = 0 },
    { "socketFactory_", NULL, 0x2, "Ljavax.net.SocketFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "sslSocketFactory_", NULL, 0x2, "Ljavax.net.ssl.SSLSocketFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "hostnameVerifier_", NULL, 0x2, "Ljavax.net.ssl.HostnameVerifier;", NULL, NULL, .constantValue.asLong = 0 },
    { "certificatePinner_", NULL, 0x2, "Lcom.squareup.okhttp.CertificatePinner;", NULL, NULL, .constantValue.asLong = 0 },
    { "authenticator_", NULL, 0x2, "Lcom.squareup.okhttp.Authenticator;", NULL, NULL, .constantValue.asLong = 0 },
    { "connectionPool_", NULL, 0x2, "Lcom.squareup.okhttp.ConnectionPool;", NULL, NULL, .constantValue.asLong = 0 },
    { "network_", NULL, 0x2, "Lcom.squareup.okhttp.internal.Network;", NULL, NULL, .constantValue.asLong = 0 },
    { "followSslRedirects_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "followRedirects_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "retryOnConnectionFailure_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "connectTimeout_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "readTimeout_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "writeTimeout_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpOkHttpClient = { 2, "OkHttpClient", "com.squareup.okhttp", NULL, 0x1, 50, methods, 27, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpOkHttpClient;
}

@end

void ComSquareupOkhttpOkHttpClient_init(ComSquareupOkhttpOkHttpClient *self) {
  NSObject_init(self);
  self->interceptors_ = new_JavaUtilArrayList_init();
  self->networkInterceptors_ = new_JavaUtilArrayList_init();
  self->followSslRedirects_ = true;
  self->followRedirects_ = true;
  self->retryOnConnectionFailure_ = true;
  self->routeDatabase_ = new_ComSquareupOkhttpInternalRouteDatabase_init();
  self->dispatcher_ = new_ComSquareupOkhttpDispatcher_init();
}

ComSquareupOkhttpOkHttpClient *new_ComSquareupOkhttpOkHttpClient_init() {
  ComSquareupOkhttpOkHttpClient *self = [ComSquareupOkhttpOkHttpClient alloc];
  ComSquareupOkhttpOkHttpClient_init(self);
  return self;
}

ComSquareupOkhttpOkHttpClient *create_ComSquareupOkhttpOkHttpClient_init() {
  return new_ComSquareupOkhttpOkHttpClient_init();
}

void ComSquareupOkhttpOkHttpClient_initWithComSquareupOkhttpOkHttpClient_(ComSquareupOkhttpOkHttpClient *self, ComSquareupOkhttpOkHttpClient *okHttpClient) {
  NSObject_init(self);
  self->interceptors_ = new_JavaUtilArrayList_init();
  self->networkInterceptors_ = new_JavaUtilArrayList_init();
  self->followSslRedirects_ = true;
  self->followRedirects_ = true;
  self->retryOnConnectionFailure_ = true;
  self->routeDatabase_ = ((ComSquareupOkhttpOkHttpClient *) nil_chk(okHttpClient))->routeDatabase_;
  self->dispatcher_ = okHttpClient->dispatcher_;
  self->proxy_ = okHttpClient->proxy_;
  self->protocols_ = okHttpClient->protocols_;
  self->connectionSpecs_ = okHttpClient->connectionSpecs_;
  [self->interceptors_ addAllWithJavaUtilCollection:okHttpClient->interceptors_];
  [self->networkInterceptors_ addAllWithJavaUtilCollection:okHttpClient->networkInterceptors_];
  self->proxySelector_ = okHttpClient->proxySelector_;
  self->cookieHandler_ = okHttpClient->cookieHandler_;
  self->cache_ = okHttpClient->cache_;
  self->internalCache_ = self->cache_ != nil ? self->cache_->internalCache_ : okHttpClient->internalCache_;
  self->socketFactory_ = okHttpClient->socketFactory_;
  self->sslSocketFactory_ = okHttpClient->sslSocketFactory_;
  self->hostnameVerifier_ = okHttpClient->hostnameVerifier_;
  self->certificatePinner_ = okHttpClient->certificatePinner_;
  self->authenticator_ = okHttpClient->authenticator_;
  self->connectionPool_ = okHttpClient->connectionPool_;
  self->network_ = okHttpClient->network_;
  self->followSslRedirects_ = okHttpClient->followSslRedirects_;
  self->followRedirects_ = okHttpClient->followRedirects_;
  self->retryOnConnectionFailure_ = okHttpClient->retryOnConnectionFailure_;
  self->connectTimeout_ = okHttpClient->connectTimeout_;
  self->readTimeout_ = okHttpClient->readTimeout_;
  self->writeTimeout_ = okHttpClient->writeTimeout_;
}

ComSquareupOkhttpOkHttpClient *new_ComSquareupOkhttpOkHttpClient_initWithComSquareupOkhttpOkHttpClient_(ComSquareupOkhttpOkHttpClient *okHttpClient) {
  ComSquareupOkhttpOkHttpClient *self = [ComSquareupOkhttpOkHttpClient alloc];
  ComSquareupOkhttpOkHttpClient_initWithComSquareupOkhttpOkHttpClient_(self, okHttpClient);
  return self;
}

ComSquareupOkhttpOkHttpClient *create_ComSquareupOkhttpOkHttpClient_initWithComSquareupOkhttpOkHttpClient_(ComSquareupOkhttpOkHttpClient *okHttpClient) {
  return new_ComSquareupOkhttpOkHttpClient_initWithComSquareupOkhttpOkHttpClient_(okHttpClient);
}

void ComSquareupOkhttpOkHttpClient_setInternalCacheWithComSquareupOkhttpInternalInternalCache_(ComSquareupOkhttpOkHttpClient *self, id<ComSquareupOkhttpInternalInternalCache> internalCache) {
  self->internalCache_ = internalCache;
  self->cache_ = nil;
}

id<ComSquareupOkhttpInternalInternalCache> ComSquareupOkhttpOkHttpClient_internalCache(ComSquareupOkhttpOkHttpClient *self) {
  return self->internalCache_;
}

ComSquareupOkhttpInternalRouteDatabase *ComSquareupOkhttpOkHttpClient_routeDatabase(ComSquareupOkhttpOkHttpClient *self) {
  return self->routeDatabase_;
}

ComSquareupOkhttpDispatcher *ComSquareupOkhttpOkHttpClient_getDispatcher(ComSquareupOkhttpOkHttpClient *self) {
  return self->dispatcher_;
}

JavaxNetSslSSLSocketFactory *ComSquareupOkhttpOkHttpClient_getDefaultSSLSocketFactory(ComSquareupOkhttpOkHttpClient *self) {
  @synchronized(self) {
    if (ComSquareupOkhttpOkHttpClient_defaultSslSocketFactory == nil) {
      @try {
        JavaxNetSslSSLContext *sslContext = JavaxNetSslSSLContext_getInstanceWithNSString_(@"TLS");
        [((JavaxNetSslSSLContext *) nil_chk(sslContext)) init__WithJavaxNetSslKeyManagerArray:nil withJavaxNetSslTrustManagerArray:nil withJavaSecuritySecureRandom:nil];
        ComSquareupOkhttpOkHttpClient_defaultSslSocketFactory = [sslContext getSocketFactory];
      }
      @catch (JavaSecurityGeneralSecurityException *e) {
        @throw new_JavaLangAssertionError_init();
      }
    }
    return ComSquareupOkhttpOkHttpClient_defaultSslSocketFactory;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpOkHttpClient)

@implementation ComSquareupOkhttpOkHttpClient_$1

- (id<ComSquareupOkhttpInternalHttpTransport>)newTransportWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                                              withComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)httpEngine {
  return [((ComSquareupOkhttpConnection *) nil_chk(connection)) newTransportWithComSquareupOkhttpInternalHttpHttpEngine:httpEngine];
}

- (jboolean)clearOwnerWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection {
  return [((ComSquareupOkhttpConnection *) nil_chk(connection)) clearOwner];
}

- (void)closeIfOwnedByWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                                               withId:(id)owner {
  [((ComSquareupOkhttpConnection *) nil_chk(connection)) closeIfOwnedByWithId:owner];
}

- (jint)recycleCountWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection {
  return [((ComSquareupOkhttpConnection *) nil_chk(connection)) recycleCount];
}

- (void)setProtocolWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                     withComSquareupOkhttpProtocol:(ComSquareupOkhttpProtocol *)protocol {
  [((ComSquareupOkhttpConnection *) nil_chk(connection)) setProtocolWithComSquareupOkhttpProtocol:protocol];
}

- (void)setOwnerWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
    withComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)httpEngine {
  [((ComSquareupOkhttpConnection *) nil_chk(connection)) setOwnerWithId:httpEngine];
}

- (jboolean)isReadableWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)pooled {
  return [((ComSquareupOkhttpConnection *) nil_chk(pooled)) isReadable];
}

- (void)addLineWithComSquareupOkhttpHeaders_Builder:(ComSquareupOkhttpHeaders_Builder *)builder
                                       withNSString:(NSString *)line {
  (void) [((ComSquareupOkhttpHeaders_Builder *) nil_chk(builder)) addLineWithNSString:line];
}

- (void)setCacheWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client
       withComSquareupOkhttpInternalInternalCache:(id<ComSquareupOkhttpInternalInternalCache>)internalCache {
  ComSquareupOkhttpOkHttpClient_setInternalCacheWithComSquareupOkhttpInternalInternalCache_(nil_chk(client), internalCache);
}

- (id<ComSquareupOkhttpInternalInternalCache>)internalCacheWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client {
  return ComSquareupOkhttpOkHttpClient_internalCache(nil_chk(client));
}

- (void)recycleWithComSquareupOkhttpConnectionPool:(ComSquareupOkhttpConnectionPool *)pool
                   withComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection {
  [((ComSquareupOkhttpConnectionPool *) nil_chk(pool)) recycleWithComSquareupOkhttpConnection:connection];
}

- (ComSquareupOkhttpInternalRouteDatabase *)routeDatabaseWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client {
  return ComSquareupOkhttpOkHttpClient_routeDatabase(nil_chk(client));
}

- (id<ComSquareupOkhttpInternalNetwork>)networkWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client {
  return ((ComSquareupOkhttpOkHttpClient *) nil_chk(client))->network_;
}

- (void)setNetworkWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client
               withComSquareupOkhttpInternalNetwork:(id<ComSquareupOkhttpInternalNetwork>)network {
  ((ComSquareupOkhttpOkHttpClient *) nil_chk(client))->network_ = network;
}

- (void)connectAndSetOwnerWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client
                            withComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                withComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)owner
                               withComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request {
  [((ComSquareupOkhttpConnection *) nil_chk(connection)) connectAndSetOwnerWithComSquareupOkhttpOkHttpClient:client withId:owner withComSquareupOkhttpRequest:request];
}

- (ComSquareupOkhttpCall *)newCallWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client
                                       withComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request {
  return new_ComSquareupOkhttpCall_initWithComSquareupOkhttpOkHttpClient_withComSquareupOkhttpRequest_(client, request);
}

- (ComSquareupOkhttpResponse *)callGetResponseWithComSquareupOkhttpCall:(ComSquareupOkhttpCall *)call
                                                            withBoolean:(jboolean)forWebSocket {
  return [call getResponseWithComSquareupOkhttpRequest:((ComSquareupOkhttpCall *) nil_chk(call))->originalRequest_ withBoolean:forWebSocket];
}

- (void)callEngineReleaseConnectionWithComSquareupOkhttpCall:(ComSquareupOkhttpCall *)call {
  [((ComSquareupOkhttpInternalHttpHttpEngine *) nil_chk(((ComSquareupOkhttpCall *) nil_chk(call))->engine_)) releaseConnection];
}

- (ComSquareupOkhttpConnection *)callEngineGetConnectionWithComSquareupOkhttpCall:(ComSquareupOkhttpCall *)call {
  return [((ComSquareupOkhttpInternalHttpHttpEngine *) nil_chk(((ComSquareupOkhttpCall *) nil_chk(call))->engine_)) getConnection];
}

- (jboolean)connectionClearOwnerWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection {
  return [((ComSquareupOkhttpConnection *) nil_chk(connection)) clearOwner];
}

- (void)connectionSetOwnerWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                                                   withId:(id)owner {
  [((ComSquareupOkhttpConnection *) nil_chk(connection)) setOwnerWithId:owner];
}

- (void)connectionCloseIfOwnedByWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
                                                         withId:(id)owner {
  [((ComSquareupOkhttpConnection *) nil_chk(connection)) closeIfOwnedByWithId:owner];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpOkHttpClient_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newTransportWithComSquareupOkhttpConnection:withComSquareupOkhttpInternalHttpHttpEngine:", "newTransport", "Lcom.squareup.okhttp.internal.http.Transport;", 0x1, "Ljava.io.IOException;", NULL },
    { "clearOwnerWithComSquareupOkhttpConnection:", "clearOwner", "Z", 0x1, NULL, NULL },
    { "closeIfOwnedByWithComSquareupOkhttpConnection:withId:", "closeIfOwnedBy", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "recycleCountWithComSquareupOkhttpConnection:", "recycleCount", "I", 0x1, NULL, NULL },
    { "setProtocolWithComSquareupOkhttpConnection:withComSquareupOkhttpProtocol:", "setProtocol", "V", 0x1, NULL, NULL },
    { "setOwnerWithComSquareupOkhttpConnection:withComSquareupOkhttpInternalHttpHttpEngine:", "setOwner", "V", 0x1, NULL, NULL },
    { "isReadableWithComSquareupOkhttpConnection:", "isReadable", "Z", 0x1, NULL, NULL },
    { "addLineWithComSquareupOkhttpHeaders_Builder:withNSString:", "addLine", "V", 0x1, NULL, NULL },
    { "setCacheWithComSquareupOkhttpOkHttpClient:withComSquareupOkhttpInternalInternalCache:", "setCache", "V", 0x1, NULL, NULL },
    { "internalCacheWithComSquareupOkhttpOkHttpClient:", "internalCache", "Lcom.squareup.okhttp.internal.InternalCache;", 0x1, NULL, NULL },
    { "recycleWithComSquareupOkhttpConnectionPool:withComSquareupOkhttpConnection:", "recycle", "V", 0x1, NULL, NULL },
    { "routeDatabaseWithComSquareupOkhttpOkHttpClient:", "routeDatabase", "Lcom.squareup.okhttp.internal.RouteDatabase;", 0x1, NULL, NULL },
    { "networkWithComSquareupOkhttpOkHttpClient:", "network", "Lcom.squareup.okhttp.internal.Network;", 0x1, NULL, NULL },
    { "setNetworkWithComSquareupOkhttpOkHttpClient:withComSquareupOkhttpInternalNetwork:", "setNetwork", "V", 0x1, NULL, NULL },
    { "connectAndSetOwnerWithComSquareupOkhttpOkHttpClient:withComSquareupOkhttpConnection:withComSquareupOkhttpInternalHttpHttpEngine:withComSquareupOkhttpRequest:", "connectAndSetOwner", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "newCallWithComSquareupOkhttpOkHttpClient:withComSquareupOkhttpRequest:", "newCall", "Lcom.squareup.okhttp.Call;", 0x1, NULL, NULL },
    { "callGetResponseWithComSquareupOkhttpCall:withBoolean:", "callGetResponse", "Lcom.squareup.okhttp.Response;", 0x1, "Ljava.io.IOException;", NULL },
    { "callEngineReleaseConnectionWithComSquareupOkhttpCall:", "callEngineReleaseConnection", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "callEngineGetConnectionWithComSquareupOkhttpCall:", "callEngineGetConnection", "Lcom.squareup.okhttp.Connection;", 0x1, NULL, NULL },
    { "connectionClearOwnerWithComSquareupOkhttpConnection:", "connectionClearOwner", "Z", 0x1, NULL, NULL },
    { "connectionSetOwnerWithComSquareupOkhttpConnection:withId:", "connectionSetOwner", "V", 0x1, NULL, NULL },
    { "connectionCloseIfOwnedByWithComSquareupOkhttpConnection:withId:", "connectionCloseIfOwnedBy", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpOkHttpClient_$1 = { 2, "", "com.squareup.okhttp", "OkHttpClient", 0x8008, 23, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpOkHttpClient_$1;
}

@end

void ComSquareupOkhttpOkHttpClient_$1_init(ComSquareupOkhttpOkHttpClient_$1 *self) {
  ComSquareupOkhttpInternalInternal_init(self);
}

ComSquareupOkhttpOkHttpClient_$1 *new_ComSquareupOkhttpOkHttpClient_$1_init() {
  ComSquareupOkhttpOkHttpClient_$1 *self = [ComSquareupOkhttpOkHttpClient_$1 alloc];
  ComSquareupOkhttpOkHttpClient_$1_init(self);
  return self;
}

ComSquareupOkhttpOkHttpClient_$1 *create_ComSquareupOkhttpOkHttpClient_$1_init() {
  return new_ComSquareupOkhttpOkHttpClient_$1_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpOkHttpClient_$1)
