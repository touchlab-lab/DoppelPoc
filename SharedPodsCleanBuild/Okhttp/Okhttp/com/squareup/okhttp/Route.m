//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/Route.java
//

#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Address.h"
#include "com/squareup/okhttp/ConnectionSpec.h"
#include "com/squareup/okhttp/Route.h"
#include "java/lang/NullPointerException.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/Proxy.h"
#include "javax/net/ssl/SSLSocketFactory.h"

@implementation ComSquareupOkhttpRoute

- (instancetype)initWithComSquareupOkhttpAddress:(ComSquareupOkhttpAddress *)address
                                withJavaNetProxy:(JavaNetProxy *)proxy
                    withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)inetSocketAddress
             withComSquareupOkhttpConnectionSpec:(ComSquareupOkhttpConnectionSpec *)connectionSpec {
  ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_(self, address, proxy, inetSocketAddress, connectionSpec);
  return self;
}

- (instancetype)initWithComSquareupOkhttpAddress:(ComSquareupOkhttpAddress *)address
                                withJavaNetProxy:(JavaNetProxy *)proxy
                    withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)inetSocketAddress
             withComSquareupOkhttpConnectionSpec:(ComSquareupOkhttpConnectionSpec *)connectionSpec
                                     withBoolean:(jboolean)shouldSendTlsFallbackIndicator {
  ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_withBoolean_(self, address, proxy, inetSocketAddress, connectionSpec, shouldSendTlsFallbackIndicator);
  return self;
}

- (ComSquareupOkhttpAddress *)getAddress {
  return address_;
}

- (JavaNetProxy *)getProxy {
  return proxy_;
}

- (JavaNetInetSocketAddress *)getSocketAddress {
  return inetSocketAddress_;
}

- (ComSquareupOkhttpConnectionSpec *)getConnectionSpec {
  return connectionSpec_;
}

- (jboolean)getShouldSendTlsFallbackIndicator {
  return shouldSendTlsFallbackIndicator_;
}

- (jboolean)requiresTunnel {
  return ((ComSquareupOkhttpAddress *) nil_chk(address_))->sslSocketFactory_ != nil && [((JavaNetProxy *) nil_chk(proxy_)) type] == JreLoadEnum(JavaNetProxy_Type, HTTP);
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[ComSquareupOkhttpRoute class]]) {
    ComSquareupOkhttpRoute *other = (ComSquareupOkhttpRoute *) cast_chk(obj, [ComSquareupOkhttpRoute class]);
    return [((ComSquareupOkhttpAddress *) nil_chk(address_)) isEqual:((ComSquareupOkhttpRoute *) nil_chk(other))->address_] && [((JavaNetProxy *) nil_chk(proxy_)) isEqual:other->proxy_] && [((JavaNetInetSocketAddress *) nil_chk(inetSocketAddress_)) isEqual:other->inetSocketAddress_] && [((ComSquareupOkhttpConnectionSpec *) nil_chk(connectionSpec_)) isEqual:other->connectionSpec_] && shouldSendTlsFallbackIndicator_ == other->shouldSendTlsFallbackIndicator_;
  }
  return false;
}

- (NSUInteger)hash {
  jint result = 17;
  result = 31 * result + ((jint) [((ComSquareupOkhttpAddress *) nil_chk(address_)) hash]);
  result = 31 * result + ((jint) [((JavaNetProxy *) nil_chk(proxy_)) hash]);
  result = 31 * result + ((jint) [((JavaNetInetSocketAddress *) nil_chk(inetSocketAddress_)) hash]);
  result = 31 * result + ((jint) [((ComSquareupOkhttpConnectionSpec *) nil_chk(connectionSpec_)) hash]);
  result = 31 * result + (shouldSendTlsFallbackIndicator_ ? 1 : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpAddress:withJavaNetProxy:withJavaNetInetSocketAddress:withComSquareupOkhttpConnectionSpec:", "Route", NULL, 0x1, NULL, NULL },
    { "initWithComSquareupOkhttpAddress:withJavaNetProxy:withJavaNetInetSocketAddress:withComSquareupOkhttpConnectionSpec:withBoolean:", "Route", NULL, 0x1, NULL, NULL },
    { "getAddress", NULL, "Lcom.squareup.okhttp.Address;", 0x1, NULL, NULL },
    { "getProxy", NULL, "Ljava.net.Proxy;", 0x1, NULL, NULL },
    { "getSocketAddress", NULL, "Ljava.net.InetSocketAddress;", 0x1, NULL, NULL },
    { "getConnectionSpec", NULL, "Lcom.squareup.okhttp.ConnectionSpec;", 0x1, NULL, NULL },
    { "getShouldSendTlsFallbackIndicator", NULL, "Z", 0x1, NULL, NULL },
    { "requiresTunnel", NULL, "Z", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "address_", NULL, 0x10, "Lcom.squareup.okhttp.Address;", NULL, NULL, .constantValue.asLong = 0 },
    { "proxy_", NULL, 0x10, "Ljava.net.Proxy;", NULL, NULL, .constantValue.asLong = 0 },
    { "inetSocketAddress_", NULL, 0x10, "Ljava.net.InetSocketAddress;", NULL, NULL, .constantValue.asLong = 0 },
    { "connectionSpec_", NULL, 0x10, "Lcom.squareup.okhttp.ConnectionSpec;", NULL, NULL, .constantValue.asLong = 0 },
    { "shouldSendTlsFallbackIndicator_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpRoute = { 2, "Route", "com.squareup.okhttp", NULL, 0x11, 10, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpRoute;
}

@end

void ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_(ComSquareupOkhttpRoute *self, ComSquareupOkhttpAddress *address, JavaNetProxy *proxy, JavaNetInetSocketAddress *inetSocketAddress, ComSquareupOkhttpConnectionSpec *connectionSpec) {
  ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_withBoolean_(self, address, proxy, inetSocketAddress, connectionSpec, false);
}

ComSquareupOkhttpRoute *new_ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_(ComSquareupOkhttpAddress *address, JavaNetProxy *proxy, JavaNetInetSocketAddress *inetSocketAddress, ComSquareupOkhttpConnectionSpec *connectionSpec) {
  ComSquareupOkhttpRoute *self = [ComSquareupOkhttpRoute alloc];
  ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_(self, address, proxy, inetSocketAddress, connectionSpec);
  return self;
}

ComSquareupOkhttpRoute *create_ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_(ComSquareupOkhttpAddress *address, JavaNetProxy *proxy, JavaNetInetSocketAddress *inetSocketAddress, ComSquareupOkhttpConnectionSpec *connectionSpec) {
  return new_ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_(address, proxy, inetSocketAddress, connectionSpec);
}

void ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_withBoolean_(ComSquareupOkhttpRoute *self, ComSquareupOkhttpAddress *address, JavaNetProxy *proxy, JavaNetInetSocketAddress *inetSocketAddress, ComSquareupOkhttpConnectionSpec *connectionSpec, jboolean shouldSendTlsFallbackIndicator) {
  NSObject_init(self);
  if (address == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"address == null");
  }
  if (proxy == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"proxy == null");
  }
  if (inetSocketAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"inetSocketAddress == null");
  }
  if (connectionSpec == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"connectionConfiguration == null");
  }
  self->address_ = address;
  self->proxy_ = proxy;
  self->inetSocketAddress_ = inetSocketAddress;
  self->connectionSpec_ = connectionSpec;
  self->shouldSendTlsFallbackIndicator_ = shouldSendTlsFallbackIndicator;
}

ComSquareupOkhttpRoute *new_ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_withBoolean_(ComSquareupOkhttpAddress *address, JavaNetProxy *proxy, JavaNetInetSocketAddress *inetSocketAddress, ComSquareupOkhttpConnectionSpec *connectionSpec, jboolean shouldSendTlsFallbackIndicator) {
  ComSquareupOkhttpRoute *self = [ComSquareupOkhttpRoute alloc];
  ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_withBoolean_(self, address, proxy, inetSocketAddress, connectionSpec, shouldSendTlsFallbackIndicator);
  return self;
}

ComSquareupOkhttpRoute *create_ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_withBoolean_(ComSquareupOkhttpAddress *address, JavaNetProxy *proxy, JavaNetInetSocketAddress *inetSocketAddress, ComSquareupOkhttpConnectionSpec *connectionSpec, jboolean shouldSendTlsFallbackIndicator) {
  return new_ComSquareupOkhttpRoute_initWithComSquareupOkhttpAddress_withJavaNetProxy_withJavaNetInetSocketAddress_withComSquareupOkhttpConnectionSpec_withBoolean_(address, proxy, inetSocketAddress, connectionSpec, shouldSendTlsFallbackIndicator);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpRoute)
