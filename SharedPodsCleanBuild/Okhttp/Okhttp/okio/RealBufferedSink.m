//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/okio/RealBufferedSink.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/nio/charset/Charset.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/ByteString.h"
#include "okio/OkioUtil.h"
#include "okio/RealBufferedSink.h"
#include "okio/Segment.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface OkioRealBufferedSink () {
 @public
  jboolean closed_;
}

@end

@interface OkioRealBufferedSink_$1 : JavaIoOutputStream {
 @public
  OkioRealBufferedSink *this$0_;
}

- (void)writeWithInt:(jint)b;

- (void)writeWithByteArray:(IOSByteArray *)data
                   withInt:(jint)offset
                   withInt:(jint)byteCount;

- (void)flush;

- (void)close;

- (NSString *)description;

- (instancetype)initWithOkioRealBufferedSink:(OkioRealBufferedSink *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioRealBufferedSink_$1)

J2OBJC_FIELD_SETTER(OkioRealBufferedSink_$1, this$0_, OkioRealBufferedSink *)

__attribute__((unused)) static void OkioRealBufferedSink_$1_initWithOkioRealBufferedSink_(OkioRealBufferedSink_$1 *self, OkioRealBufferedSink *outer$);

__attribute__((unused)) static OkioRealBufferedSink_$1 *new_OkioRealBufferedSink_$1_initWithOkioRealBufferedSink_(OkioRealBufferedSink *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioRealBufferedSink_$1 *create_OkioRealBufferedSink_$1_initWithOkioRealBufferedSink_(OkioRealBufferedSink *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OkioRealBufferedSink_$1)

@implementation OkioRealBufferedSink

- (instancetype)initWithOkioSink:(id<OkioSink>)sink
                  withOkioBuffer:(OkioBuffer *)buffer {
  OkioRealBufferedSink_initWithOkioSink_withOkioBuffer_(self, sink, buffer);
  return self;
}

- (instancetype)initWithOkioSink:(id<OkioSink>)sink {
  OkioRealBufferedSink_initWithOkioSink_(self, sink);
  return self;
}

- (OkioBuffer *)buffer {
  return buffer_;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  [((OkioBuffer *) nil_chk(buffer_)) writeWithOkioBuffer:source withLong:byteCount];
  (void) [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)writeWithOkioByteString:(OkioByteString *)byteString {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeWithOkioByteString:byteString];
  return [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)writeUtf8WithNSString:(NSString *)string {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeUtf8WithNSString:string];
  return [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)writeStringWithNSString:(NSString *)string
                      withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeStringWithNSString:string withJavaNioCharsetCharset:charset];
  return [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)writeWithByteArray:(IOSByteArray *)source {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeWithByteArray:source];
  return [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)writeWithByteArray:(IOSByteArray *)source
                                   withInt:(jint)offset
                                   withInt:(jint)byteCount {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeWithByteArray:source withInt:offset withInt:byteCount];
  return [self emitCompleteSegments];
}

- (jlong)writeAllWithOkioSource:(id<OkioSource>)source {
  if (source == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"source == null");
  jlong totalBytesRead = 0;
  for (jlong readCount; (readCount = [((id<OkioSource>) nil_chk(source)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE]) != -1; ) {
    totalBytesRead += readCount;
    (void) [self emitCompleteSegments];
  }
  return totalBytesRead;
}

- (id<OkioBufferedSink>)writeWithOkioSource:(id<OkioSource>)source
                                   withLong:(jlong)byteCount {
  [((id<OkioSource>) nil_chk(source)) readWithOkioBuffer:buffer_ withLong:byteCount];
  return self;
}

- (id<OkioBufferedSink>)writeByteWithInt:(jint)b {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeByteWithInt:b];
  return [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)writeShortWithInt:(jint)s {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeShortWithInt:s];
  return [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)writeShortLeWithInt:(jint)s {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeShortLeWithInt:s];
  return [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)writeIntWithInt:(jint)i {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeIntWithInt:i];
  return [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)writeIntLeWithInt:(jint)i {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeIntLeWithInt:i];
  return [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)writeLongWithLong:(jlong)v {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeLongWithLong:v];
  return [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)writeLongLeWithLong:(jlong)v {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(buffer_)) writeLongLeWithLong:v];
  return [self emitCompleteSegments];
}

- (id<OkioBufferedSink>)emitCompleteSegments {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  jlong byteCount = [((OkioBuffer *) nil_chk(buffer_)) completeSegmentByteCount];
  if (byteCount > 0) [((id<OkioSink>) nil_chk(sink_)) writeWithOkioBuffer:buffer_ withLong:byteCount];
  return self;
}

- (id<OkioBufferedSink>)emit {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  jlong byteCount = [((OkioBuffer *) nil_chk(buffer_)) size];
  if (byteCount > 0) [((id<OkioSink>) nil_chk(sink_)) writeWithOkioBuffer:buffer_ withLong:byteCount];
  return self;
}

- (JavaIoOutputStream *)outputStream {
  return new_OkioRealBufferedSink_$1_initWithOkioRealBufferedSink_(self);
}

- (void)flush {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  if (((OkioBuffer *) nil_chk(buffer_))->size_ > 0) {
    [((id<OkioSink>) nil_chk(sink_)) writeWithOkioBuffer:buffer_ withLong:buffer_->size_];
  }
  [((id<OkioSink>) nil_chk(sink_)) flush];
}

- (void)close {
  if (closed_) return;
  NSException *thrown = nil;
  @try {
    if (((OkioBuffer *) nil_chk(buffer_))->size_ > 0) {
      [((id<OkioSink>) nil_chk(sink_)) writeWithOkioBuffer:buffer_ withLong:buffer_->size_];
    }
  }
  @catch (NSException *e) {
    thrown = e;
  }
  @try {
    [((id<OkioSink>) nil_chk(sink_)) close];
  }
  @catch (NSException *e) {
    if (thrown == nil) thrown = e;
  }
  closed_ = true;
  if (thrown != nil) OkioOkioUtil_sneakyRethrowWithNSException_(thrown);
}

- (OkioTimeout *)timeout {
  return [((id<OkioSink>) nil_chk(sink_)) timeout];
}

- (NSString *)description {
  return JreStrcat("$@C", @"buffer(", sink_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOkioSink:withOkioBuffer:", "RealBufferedSink", NULL, 0x1, NULL, NULL },
    { "initWithOkioSink:", "RealBufferedSink", NULL, 0x1, NULL, NULL },
    { "buffer", NULL, "Lokio.Buffer;", 0x1, NULL, NULL },
    { "writeWithOkioBuffer:withLong:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeWithOkioByteString:", "write", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeUtf8WithNSString:", "writeUtf8", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeStringWithNSString:withJavaNioCharsetCharset:", "writeString", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeWithByteArray:", "write", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeWithByteArray:withInt:withInt:", "write", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeAllWithOkioSource:", "writeAll", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "writeWithOkioSource:withLong:", "write", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeByteWithInt:", "writeByte", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeShortWithInt:", "writeShort", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeShortLeWithInt:", "writeShortLe", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeIntWithInt:", "writeInt", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeIntLeWithInt:", "writeIntLe", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeLongWithLong:", "writeLong", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeLongLeWithLong:", "writeLongLe", "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "emitCompleteSegments", NULL, "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "emit", NULL, "Lokio.BufferedSink;", 0x1, "Ljava.io.IOException;", NULL },
    { "outputStream", NULL, "Ljava.io.OutputStream;", 0x1, NULL, NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "timeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "buffer_", NULL, 0x11, "Lokio.Buffer;", NULL, NULL, .constantValue.asLong = 0 },
    { "sink_", NULL, 0x11, "Lokio.Sink;", NULL, NULL, .constantValue.asLong = 0 },
    { "closed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OkioRealBufferedSink = { 2, "RealBufferedSink", "okio", NULL, 0x10, 25, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OkioRealBufferedSink;
}

@end

void OkioRealBufferedSink_initWithOkioSink_withOkioBuffer_(OkioRealBufferedSink *self, id<OkioSink> sink, OkioBuffer *buffer) {
  NSObject_init(self);
  if (sink == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sink == null");
  self->buffer_ = buffer;
  self->sink_ = sink;
}

OkioRealBufferedSink *new_OkioRealBufferedSink_initWithOkioSink_withOkioBuffer_(id<OkioSink> sink, OkioBuffer *buffer) {
  OkioRealBufferedSink *self = [OkioRealBufferedSink alloc];
  OkioRealBufferedSink_initWithOkioSink_withOkioBuffer_(self, sink, buffer);
  return self;
}

OkioRealBufferedSink *create_OkioRealBufferedSink_initWithOkioSink_withOkioBuffer_(id<OkioSink> sink, OkioBuffer *buffer) {
  return new_OkioRealBufferedSink_initWithOkioSink_withOkioBuffer_(sink, buffer);
}

void OkioRealBufferedSink_initWithOkioSink_(OkioRealBufferedSink *self, id<OkioSink> sink) {
  OkioRealBufferedSink_initWithOkioSink_withOkioBuffer_(self, sink, new_OkioBuffer_init());
}

OkioRealBufferedSink *new_OkioRealBufferedSink_initWithOkioSink_(id<OkioSink> sink) {
  OkioRealBufferedSink *self = [OkioRealBufferedSink alloc];
  OkioRealBufferedSink_initWithOkioSink_(self, sink);
  return self;
}

OkioRealBufferedSink *create_OkioRealBufferedSink_initWithOkioSink_(id<OkioSink> sink) {
  return new_OkioRealBufferedSink_initWithOkioSink_(sink);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioRealBufferedSink)

@implementation OkioRealBufferedSink_$1

- (void)writeWithInt:(jint)b {
  if (this$0_->closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(this$0_->buffer_)) writeByteWithInt:(jbyte) b];
  (void) [this$0_ emitCompleteSegments];
}

- (void)writeWithByteArray:(IOSByteArray *)data
                   withInt:(jint)offset
                   withInt:(jint)byteCount {
  if (this$0_->closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
  (void) [((OkioBuffer *) nil_chk(this$0_->buffer_)) writeWithByteArray:data withInt:offset withInt:byteCount];
  (void) [this$0_ emitCompleteSegments];
}

- (void)flush {
  if (!this$0_->closed_) {
    [this$0_ flush];
  }
}

- (void)close {
  [this$0_ close];
}

- (NSString *)description {
  return JreStrcat("@$", this$0_, @".outputStream()");
}

- (instancetype)initWithOkioRealBufferedSink:(OkioRealBufferedSink *)outer$ {
  OkioRealBufferedSink_$1_initWithOkioRealBufferedSink_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeWithInt:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeWithByteArray:withInt:withInt:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithOkioRealBufferedSink:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lokio.RealBufferedSink;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OkioRealBufferedSink", "outputStream" };
  static const J2ObjcClassInfo _OkioRealBufferedSink_$1 = { 2, "", "okio", "RealBufferedSink", 0x8008, 6, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OkioRealBufferedSink_$1;
}

@end

void OkioRealBufferedSink_$1_initWithOkioRealBufferedSink_(OkioRealBufferedSink_$1 *self, OkioRealBufferedSink *outer$) {
  self->this$0_ = outer$;
  JavaIoOutputStream_init(self);
}

OkioRealBufferedSink_$1 *new_OkioRealBufferedSink_$1_initWithOkioRealBufferedSink_(OkioRealBufferedSink *outer$) {
  OkioRealBufferedSink_$1 *self = [OkioRealBufferedSink_$1 alloc];
  OkioRealBufferedSink_$1_initWithOkioRealBufferedSink_(self, outer$);
  return self;
}

OkioRealBufferedSink_$1 *create_OkioRealBufferedSink_$1_initWithOkioRealBufferedSink_(OkioRealBufferedSink *outer$) {
  return new_OkioRealBufferedSink_$1_initWithOkioRealBufferedSink_(outer$);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioRealBufferedSink_$1)
