//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/okio/AsyncTimeout.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InterruptedIOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "okio/AsyncTimeout.h"
#include "okio/Buffer.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface OkioAsyncTimeout () {
 @public
  jboolean inQueue_;
  OkioAsyncTimeout *next_;
  jlong timeoutAt_;
}

+ (void)scheduleTimeoutWithOkioAsyncTimeout:(OkioAsyncTimeout *)node
                                   withLong:(jlong)timeoutNanos
                                withBoolean:(jboolean)hasDeadline;

+ (jboolean)cancelScheduledTimeoutWithOkioAsyncTimeout:(OkioAsyncTimeout *)node;

- (jlong)remainingNanosWithLong:(jlong)now;

+ (OkioAsyncTimeout *)awaitTimeout;

@end

J2OBJC_FIELD_SETTER(OkioAsyncTimeout, next_, OkioAsyncTimeout *)

inline OkioAsyncTimeout *OkioAsyncTimeout_get_head();
inline OkioAsyncTimeout *OkioAsyncTimeout_set_head(OkioAsyncTimeout *value);
static OkioAsyncTimeout *OkioAsyncTimeout_head;
J2OBJC_STATIC_FIELD_OBJ(OkioAsyncTimeout, head, OkioAsyncTimeout *)

__attribute__((unused)) static void OkioAsyncTimeout_enter(OkioAsyncTimeout *self);

__attribute__((unused)) static void OkioAsyncTimeout_scheduleTimeoutWithOkioAsyncTimeout_withLong_withBoolean_(OkioAsyncTimeout *node, jlong timeoutNanos, jboolean hasDeadline);

__attribute__((unused)) static jboolean OkioAsyncTimeout_exit(OkioAsyncTimeout *self);

__attribute__((unused)) static jboolean OkioAsyncTimeout_cancelScheduledTimeoutWithOkioAsyncTimeout_(OkioAsyncTimeout *node);

__attribute__((unused)) static jlong OkioAsyncTimeout_remainingNanosWithLong_(OkioAsyncTimeout *self, jlong now);

__attribute__((unused)) static void OkioAsyncTimeout_exitWithBoolean_(OkioAsyncTimeout *self, jboolean throwOnTimeout);

__attribute__((unused)) static JavaIoIOException *OkioAsyncTimeout_exitWithJavaIoIOException_(OkioAsyncTimeout *self, JavaIoIOException *cause);

__attribute__((unused)) static OkioAsyncTimeout *OkioAsyncTimeout_awaitTimeout();

@interface OkioAsyncTimeout_Watchdog : JavaLangThread

- (instancetype)init;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioAsyncTimeout_Watchdog)

__attribute__((unused)) static void OkioAsyncTimeout_Watchdog_init(OkioAsyncTimeout_Watchdog *self);

__attribute__((unused)) static OkioAsyncTimeout_Watchdog *new_OkioAsyncTimeout_Watchdog_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioAsyncTimeout_Watchdog *create_OkioAsyncTimeout_Watchdog_init();

J2OBJC_TYPE_LITERAL_HEADER(OkioAsyncTimeout_Watchdog)

@interface OkioAsyncTimeout_$1 : NSObject < OkioSink > {
 @public
  OkioAsyncTimeout *this$0_;
  id<OkioSink> val$sink_;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (void)flush;

- (void)close;

- (OkioTimeout *)timeout;

- (NSString *)description;

- (instancetype)initWithOkioAsyncTimeout:(OkioAsyncTimeout *)outer$
                            withOkioSink:(id<OkioSink>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioAsyncTimeout_$1)

J2OBJC_FIELD_SETTER(OkioAsyncTimeout_$1, this$0_, OkioAsyncTimeout *)
J2OBJC_FIELD_SETTER(OkioAsyncTimeout_$1, val$sink_, id<OkioSink>)

__attribute__((unused)) static void OkioAsyncTimeout_$1_initWithOkioAsyncTimeout_withOkioSink_(OkioAsyncTimeout_$1 *self, OkioAsyncTimeout *outer$, id<OkioSink> capture$0);

__attribute__((unused)) static OkioAsyncTimeout_$1 *new_OkioAsyncTimeout_$1_initWithOkioAsyncTimeout_withOkioSink_(OkioAsyncTimeout *outer$, id<OkioSink> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioAsyncTimeout_$1 *create_OkioAsyncTimeout_$1_initWithOkioAsyncTimeout_withOkioSink_(OkioAsyncTimeout *outer$, id<OkioSink> capture$0);

J2OBJC_TYPE_LITERAL_HEADER(OkioAsyncTimeout_$1)

@interface OkioAsyncTimeout_$2 : NSObject < OkioSource > {
 @public
  OkioAsyncTimeout *this$0_;
  id<OkioSource> val$source_;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (void)close;

- (OkioTimeout *)timeout;

- (NSString *)description;

- (instancetype)initWithOkioAsyncTimeout:(OkioAsyncTimeout *)outer$
                          withOkioSource:(id<OkioSource>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioAsyncTimeout_$2)

J2OBJC_FIELD_SETTER(OkioAsyncTimeout_$2, this$0_, OkioAsyncTimeout *)
J2OBJC_FIELD_SETTER(OkioAsyncTimeout_$2, val$source_, id<OkioSource>)

__attribute__((unused)) static void OkioAsyncTimeout_$2_initWithOkioAsyncTimeout_withOkioSource_(OkioAsyncTimeout_$2 *self, OkioAsyncTimeout *outer$, id<OkioSource> capture$0);

__attribute__((unused)) static OkioAsyncTimeout_$2 *new_OkioAsyncTimeout_$2_initWithOkioAsyncTimeout_withOkioSource_(OkioAsyncTimeout *outer$, id<OkioSource> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioAsyncTimeout_$2 *create_OkioAsyncTimeout_$2_initWithOkioAsyncTimeout_withOkioSource_(OkioAsyncTimeout *outer$, id<OkioSource> capture$0);

J2OBJC_TYPE_LITERAL_HEADER(OkioAsyncTimeout_$2)

@implementation OkioAsyncTimeout

- (void)enter {
  OkioAsyncTimeout_enter(self);
}

+ (void)scheduleTimeoutWithOkioAsyncTimeout:(OkioAsyncTimeout *)node
                                   withLong:(jlong)timeoutNanos
                                withBoolean:(jboolean)hasDeadline {
  OkioAsyncTimeout_scheduleTimeoutWithOkioAsyncTimeout_withLong_withBoolean_(node, timeoutNanos, hasDeadline);
}

- (jboolean)exit {
  return OkioAsyncTimeout_exit(self);
}

+ (jboolean)cancelScheduledTimeoutWithOkioAsyncTimeout:(OkioAsyncTimeout *)node {
  return OkioAsyncTimeout_cancelScheduledTimeoutWithOkioAsyncTimeout_(node);
}

- (jlong)remainingNanosWithLong:(jlong)now {
  return OkioAsyncTimeout_remainingNanosWithLong_(self, now);
}

- (void)timedOut {
}

- (id<OkioSink>)sinkWithOkioSink:(id<OkioSink>)sink {
  return new_OkioAsyncTimeout_$1_initWithOkioAsyncTimeout_withOkioSink_(self, sink);
}

- (id<OkioSource>)sourceWithOkioSource:(id<OkioSource>)source {
  return new_OkioAsyncTimeout_$2_initWithOkioAsyncTimeout_withOkioSource_(self, source);
}

- (void)exitWithBoolean:(jboolean)throwOnTimeout {
  OkioAsyncTimeout_exitWithBoolean_(self, throwOnTimeout);
}

- (JavaIoIOException *)exitWithJavaIoIOException:(JavaIoIOException *)cause {
  return OkioAsyncTimeout_exitWithJavaIoIOException_(self, cause);
}

+ (OkioAsyncTimeout *)awaitTimeout {
  return OkioAsyncTimeout_awaitTimeout();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioAsyncTimeout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "enter", NULL, "V", 0x11, NULL, NULL },
    { "scheduleTimeoutWithOkioAsyncTimeout:withLong:withBoolean:", "scheduleTimeout", "V", 0x2a, NULL, NULL },
    { "exit", NULL, "Z", 0x11, NULL, NULL },
    { "cancelScheduledTimeoutWithOkioAsyncTimeout:", "cancelScheduledTimeout", "Z", 0x2a, NULL, NULL },
    { "remainingNanosWithLong:", "remainingNanos", "J", 0x2, NULL, NULL },
    { "timedOut", NULL, "V", 0x4, NULL, NULL },
    { "sinkWithOkioSink:", "sink", "Lokio.Sink;", 0x11, NULL, NULL },
    { "sourceWithOkioSource:", "source", "Lokio.Source;", 0x11, NULL, NULL },
    { "exitWithBoolean:", "exit", "V", 0x10, "Ljava.io.IOException;", NULL },
    { "exitWithJavaIoIOException:", "exit", "Ljava.io.IOException;", 0x10, "Ljava.io.IOException;", NULL },
    { "awaitTimeout", NULL, "Lokio.AsyncTimeout;", 0x2a, "Ljava.lang.InterruptedException;", NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "head", "head", 0xa, "Lokio.AsyncTimeout;", &OkioAsyncTimeout_head, NULL, .constantValue.asLong = 0 },
    { "inQueue_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "next_", NULL, 0x2, "Lokio.AsyncTimeout;", NULL, NULL, .constantValue.asLong = 0 },
    { "timeoutAt_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lokio.AsyncTimeout$Watchdog;"};
  static const J2ObjcClassInfo _OkioAsyncTimeout = { 2, "AsyncTimeout", "okio", NULL, 0x1, 12, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OkioAsyncTimeout;
}

@end

void OkioAsyncTimeout_enter(OkioAsyncTimeout *self) {
  if (self->inQueue_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"Unbalanced enter/exit");
  jlong timeoutNanos = [self timeoutNanos];
  jboolean hasDeadline = [self hasDeadline];
  if (timeoutNanos == 0 && !hasDeadline) {
    return;
  }
  self->inQueue_ = true;
  OkioAsyncTimeout_scheduleTimeoutWithOkioAsyncTimeout_withLong_withBoolean_(self, timeoutNanos, hasDeadline);
}

void OkioAsyncTimeout_scheduleTimeoutWithOkioAsyncTimeout_withLong_withBoolean_(OkioAsyncTimeout *node, jlong timeoutNanos, jboolean hasDeadline) {
  OkioAsyncTimeout_initialize();
  @synchronized(OkioAsyncTimeout_class_()) {
    if (OkioAsyncTimeout_head == nil) {
      OkioAsyncTimeout_head = new_OkioAsyncTimeout_init();
      [new_OkioAsyncTimeout_Watchdog_init() start];
    }
    jlong now = JavaLangSystem_nanoTime();
    if (timeoutNanos != 0 && hasDeadline) {
      ((OkioAsyncTimeout *) nil_chk(node))->timeoutAt_ = now + JavaLangMath_minWithLong_withLong_(timeoutNanos, [node deadlineNanoTime] - now);
    }
    else if (timeoutNanos != 0) {
      ((OkioAsyncTimeout *) nil_chk(node))->timeoutAt_ = now + timeoutNanos;
    }
    else if (hasDeadline) {
      ((OkioAsyncTimeout *) nil_chk(node))->timeoutAt_ = [node deadlineNanoTime];
    }
    else {
      @throw new_JavaLangAssertionError_init();
    }
    jlong remainingNanos = OkioAsyncTimeout_remainingNanosWithLong_(nil_chk(node), now);
    for (OkioAsyncTimeout *prev = OkioAsyncTimeout_head; true; prev = prev->next_) {
      if (((OkioAsyncTimeout *) nil_chk(prev))->next_ == nil || remainingNanos < OkioAsyncTimeout_remainingNanosWithLong_(prev->next_, now)) {
        node->next_ = prev->next_;
        prev->next_ = node;
        if (prev == OkioAsyncTimeout_head) {
          [OkioAsyncTimeout_class_() notify];
        }
        break;
      }
    }
  }
}

jboolean OkioAsyncTimeout_exit(OkioAsyncTimeout *self) {
  if (!self->inQueue_) return false;
  self->inQueue_ = false;
  return OkioAsyncTimeout_cancelScheduledTimeoutWithOkioAsyncTimeout_(self);
}

jboolean OkioAsyncTimeout_cancelScheduledTimeoutWithOkioAsyncTimeout_(OkioAsyncTimeout *node) {
  OkioAsyncTimeout_initialize();
  @synchronized(OkioAsyncTimeout_class_()) {
    for (OkioAsyncTimeout *prev = OkioAsyncTimeout_head; prev != nil; prev = prev->next_) {
      if (((OkioAsyncTimeout *) nil_chk(prev))->next_ == node) {
        prev->next_ = ((OkioAsyncTimeout *) nil_chk(node))->next_;
        node->next_ = nil;
        return false;
      }
    }
    return true;
  }
}

jlong OkioAsyncTimeout_remainingNanosWithLong_(OkioAsyncTimeout *self, jlong now) {
  return self->timeoutAt_ - now;
}

void OkioAsyncTimeout_exitWithBoolean_(OkioAsyncTimeout *self, jboolean throwOnTimeout) {
  jboolean timedOut = OkioAsyncTimeout_exit(self);
  if (timedOut && throwOnTimeout) @throw new_JavaIoInterruptedIOException_initWithNSString_(@"timeout");
}

JavaIoIOException *OkioAsyncTimeout_exitWithJavaIoIOException_(OkioAsyncTimeout *self, JavaIoIOException *cause) {
  if (!OkioAsyncTimeout_exit(self)) return cause;
  JavaIoInterruptedIOException *e = new_JavaIoInterruptedIOException_initWithNSString_(@"timeout");
  (void) [e initCauseWithNSException:cause];
  return e;
}

OkioAsyncTimeout *OkioAsyncTimeout_awaitTimeout() {
  OkioAsyncTimeout_initialize();
  @synchronized(OkioAsyncTimeout_class_()) {
    OkioAsyncTimeout *node = ((OkioAsyncTimeout *) nil_chk(OkioAsyncTimeout_head))->next_;
    if (node == nil) {
      [OkioAsyncTimeout_class_() wait];
      return nil;
    }
    jlong waitNanos = OkioAsyncTimeout_remainingNanosWithLong_(nil_chk(node), JavaLangSystem_nanoTime());
    if (waitNanos > 0) {
      jlong waitMillis = waitNanos / 1000000LL;
      waitNanos -= (waitMillis * 1000000LL);
      [OkioAsyncTimeout_class_() waitWithLong:waitMillis withInt:(jint) waitNanos];
      return nil;
    }
    OkioAsyncTimeout_head->next_ = node->next_;
    node->next_ = nil;
    return node;
  }
}

void OkioAsyncTimeout_init(OkioAsyncTimeout *self) {
  OkioTimeout_init(self);
}

OkioAsyncTimeout *new_OkioAsyncTimeout_init() {
  OkioAsyncTimeout *self = [OkioAsyncTimeout alloc];
  OkioAsyncTimeout_init(self);
  return self;
}

OkioAsyncTimeout *create_OkioAsyncTimeout_init() {
  return new_OkioAsyncTimeout_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioAsyncTimeout)

@implementation OkioAsyncTimeout_Watchdog

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioAsyncTimeout_Watchdog_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)run {
  while (true) {
    @try {
      OkioAsyncTimeout *timedOut = OkioAsyncTimeout_awaitTimeout();
      if (timedOut == nil) continue;
      [((OkioAsyncTimeout *) nil_chk(timedOut)) timedOut];
    }
    @catch (JavaLangInterruptedException *ignored) {
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Watchdog", NULL, 0x1, NULL, NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OkioAsyncTimeout_Watchdog = { 2, "Watchdog", "okio", "AsyncTimeout", 0x1a, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OkioAsyncTimeout_Watchdog;
}

@end

void OkioAsyncTimeout_Watchdog_init(OkioAsyncTimeout_Watchdog *self) {
  JavaLangThread_initWithNSString_(self, @"Okio Watchdog");
  [self setDaemonWithBoolean:true];
}

OkioAsyncTimeout_Watchdog *new_OkioAsyncTimeout_Watchdog_init() {
  OkioAsyncTimeout_Watchdog *self = [OkioAsyncTimeout_Watchdog alloc];
  OkioAsyncTimeout_Watchdog_init(self);
  return self;
}

OkioAsyncTimeout_Watchdog *create_OkioAsyncTimeout_Watchdog_init() {
  return new_OkioAsyncTimeout_Watchdog_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioAsyncTimeout_Watchdog)

@implementation OkioAsyncTimeout_$1

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  jboolean throwOnTimeout = false;
  OkioAsyncTimeout_enter(this$0_);
  @try {
    [((id<OkioSink>) nil_chk(val$sink_)) writeWithOkioBuffer:source withLong:byteCount];
    throwOnTimeout = true;
  }
  @catch (JavaIoIOException *e) {
    @throw OkioAsyncTimeout_exitWithJavaIoIOException_(this$0_, e);
  }
  @finally {
    OkioAsyncTimeout_exitWithBoolean_(this$0_, throwOnTimeout);
  }
}

- (void)flush {
  jboolean throwOnTimeout = false;
  OkioAsyncTimeout_enter(this$0_);
  @try {
    [((id<OkioSink>) nil_chk(val$sink_)) flush];
    throwOnTimeout = true;
  }
  @catch (JavaIoIOException *e) {
    @throw OkioAsyncTimeout_exitWithJavaIoIOException_(this$0_, e);
  }
  @finally {
    OkioAsyncTimeout_exitWithBoolean_(this$0_, throwOnTimeout);
  }
}

- (void)close {
  jboolean throwOnTimeout = false;
  OkioAsyncTimeout_enter(this$0_);
  @try {
    [((id<OkioSink>) nil_chk(val$sink_)) close];
    throwOnTimeout = true;
  }
  @catch (JavaIoIOException *e) {
    @throw OkioAsyncTimeout_exitWithJavaIoIOException_(this$0_, e);
  }
  @finally {
    OkioAsyncTimeout_exitWithBoolean_(this$0_, throwOnTimeout);
  }
}

- (OkioTimeout *)timeout {
  return this$0_;
}

- (NSString *)description {
  return JreStrcat("$@C", @"AsyncTimeout.sink(", val$sink_, ')');
}

- (instancetype)initWithOkioAsyncTimeout:(OkioAsyncTimeout *)outer$
                            withOkioSink:(id<OkioSink>)capture$0 {
  OkioAsyncTimeout_$1_initWithOkioAsyncTimeout_withOkioSink_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeWithOkioBuffer:withLong:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "timeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithOkioAsyncTimeout:withOkioSink:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lokio.AsyncTimeout;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$sink_", NULL, 0x1012, "Lokio.Sink;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OkioAsyncTimeout", "sinkWithOkioSink:" };
  static const J2ObjcClassInfo _OkioAsyncTimeout_$1 = { 2, "", "okio", "AsyncTimeout", 0x8008, 6, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OkioAsyncTimeout_$1;
}

@end

void OkioAsyncTimeout_$1_initWithOkioAsyncTimeout_withOkioSink_(OkioAsyncTimeout_$1 *self, OkioAsyncTimeout *outer$, id<OkioSink> capture$0) {
  self->this$0_ = outer$;
  self->val$sink_ = capture$0;
  NSObject_init(self);
}

OkioAsyncTimeout_$1 *new_OkioAsyncTimeout_$1_initWithOkioAsyncTimeout_withOkioSink_(OkioAsyncTimeout *outer$, id<OkioSink> capture$0) {
  OkioAsyncTimeout_$1 *self = [OkioAsyncTimeout_$1 alloc];
  OkioAsyncTimeout_$1_initWithOkioAsyncTimeout_withOkioSink_(self, outer$, capture$0);
  return self;
}

OkioAsyncTimeout_$1 *create_OkioAsyncTimeout_$1_initWithOkioAsyncTimeout_withOkioSink_(OkioAsyncTimeout *outer$, id<OkioSink> capture$0) {
  return new_OkioAsyncTimeout_$1_initWithOkioAsyncTimeout_withOkioSink_(outer$, capture$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioAsyncTimeout_$1)

@implementation OkioAsyncTimeout_$2

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  jboolean throwOnTimeout = false;
  OkioAsyncTimeout_enter(this$0_);
  @try {
    jlong result = [((id<OkioSource>) nil_chk(val$source_)) readWithOkioBuffer:sink withLong:byteCount];
    throwOnTimeout = true;
    return result;
  }
  @catch (JavaIoIOException *e) {
    @throw OkioAsyncTimeout_exitWithJavaIoIOException_(this$0_, e);
  }
  @finally {
    OkioAsyncTimeout_exitWithBoolean_(this$0_, throwOnTimeout);
  }
}

- (void)close {
  jboolean throwOnTimeout = false;
  @try {
    [((id<OkioSource>) nil_chk(val$source_)) close];
    throwOnTimeout = true;
  }
  @catch (JavaIoIOException *e) {
    @throw OkioAsyncTimeout_exitWithJavaIoIOException_(this$0_, e);
  }
  @finally {
    OkioAsyncTimeout_exitWithBoolean_(this$0_, throwOnTimeout);
  }
}

- (OkioTimeout *)timeout {
  return this$0_;
}

- (NSString *)description {
  return JreStrcat("$@C", @"AsyncTimeout.source(", val$source_, ')');
}

- (instancetype)initWithOkioAsyncTimeout:(OkioAsyncTimeout *)outer$
                          withOkioSource:(id<OkioSource>)capture$0 {
  OkioAsyncTimeout_$2_initWithOkioAsyncTimeout_withOkioSource_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readWithOkioBuffer:withLong:", "read", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "timeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithOkioAsyncTimeout:withOkioSource:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lokio.AsyncTimeout;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$source_", NULL, 0x1012, "Lokio.Source;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OkioAsyncTimeout", "sourceWithOkioSource:" };
  static const J2ObjcClassInfo _OkioAsyncTimeout_$2 = { 2, "", "okio", "AsyncTimeout", 0x8008, 5, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OkioAsyncTimeout_$2;
}

@end

void OkioAsyncTimeout_$2_initWithOkioAsyncTimeout_withOkioSource_(OkioAsyncTimeout_$2 *self, OkioAsyncTimeout *outer$, id<OkioSource> capture$0) {
  self->this$0_ = outer$;
  self->val$source_ = capture$0;
  NSObject_init(self);
}

OkioAsyncTimeout_$2 *new_OkioAsyncTimeout_$2_initWithOkioAsyncTimeout_withOkioSource_(OkioAsyncTimeout *outer$, id<OkioSource> capture$0) {
  OkioAsyncTimeout_$2 *self = [OkioAsyncTimeout_$2 alloc];
  OkioAsyncTimeout_$2_initWithOkioAsyncTimeout_withOkioSource_(self, outer$, capture$0);
  return self;
}

OkioAsyncTimeout_$2 *create_OkioAsyncTimeout_$2_initWithOkioAsyncTimeout_withOkioSource_(OkioAsyncTimeout *outer$, id<OkioSource> capture$0) {
  return new_OkioAsyncTimeout_$2_initWithOkioAsyncTimeout_withOkioSource_(outer$, capture$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioAsyncTimeout_$2)
