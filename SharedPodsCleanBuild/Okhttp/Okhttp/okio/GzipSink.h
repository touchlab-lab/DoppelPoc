//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/okio/GzipSink.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OkioGzipSink_INCLUDE_ALL")
#ifdef OkioGzipSink_RESTRICT
#define OkioGzipSink_INCLUDE_ALL 0
#else
#define OkioGzipSink_INCLUDE_ALL 1
#endif
#undef OkioGzipSink_RESTRICT

#if !defined (OkioGzipSink_) && (OkioGzipSink_INCLUDE_ALL || defined(OkioGzipSink_INCLUDE))
#define OkioGzipSink_

#define OkioSink_RESTRICT 1
#define OkioSink_INCLUDE 1
#include "okio/Sink.h"

@class OkioBuffer;
@class OkioTimeout;

@interface OkioGzipSink : NSObject < OkioSink >

#pragma mark Public

- (instancetype)initWithOkioSink:(id<OkioSink>)sink;

- (void)close;

- (void)flush;

- (OkioTimeout *)timeout;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioGzipSink)

FOUNDATION_EXPORT void OkioGzipSink_initWithOkioSink_(OkioGzipSink *self, id<OkioSink> sink);

FOUNDATION_EXPORT OkioGzipSink *new_OkioGzipSink_initWithOkioSink_(id<OkioSink> sink) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioGzipSink *create_OkioGzipSink_initWithOkioSink_(id<OkioSink> sink);

J2OBJC_TYPE_LITERAL_HEADER(OkioGzipSink)

#endif

#pragma pop_macro("OkioGzipSink_INCLUDE_ALL")
