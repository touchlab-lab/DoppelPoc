//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/okio/Segment.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "okio/Segment.h"
#include "okio/SegmentPool.h"

@implementation OkioSegment

- (OkioSegment *)pop {
  OkioSegment *result = next_ != self ? next_ : nil;
  ((OkioSegment *) nil_chk(prev_))->next_ = next_;
  ((OkioSegment *) nil_chk(next_))->prev_ = prev_;
  next_ = nil;
  prev_ = nil;
  return result;
}

- (OkioSegment *)pushWithOkioSegment:(OkioSegment *)segment {
  ((OkioSegment *) nil_chk(segment))->prev_ = self;
  segment->next_ = next_;
  ((OkioSegment *) nil_chk(next_))->prev_ = segment;
  next_ = segment;
  return segment;
}

- (OkioSegment *)splitWithInt:(jint)byteCount {
  jint aSize = byteCount;
  jint bSize = (limit_ - pos_) - byteCount;
  if (aSize <= 0 || bSize <= 0) @throw new_JavaLangIllegalArgumentException_init();
  if (aSize < bSize) {
    OkioSegment *before = [((OkioSegmentPool *) nil_chk(JreLoadStatic(OkioSegmentPool, INSTANCE))) take];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, pos_, ((OkioSegment *) nil_chk(before))->data_, before->pos_, aSize);
    pos_ += aSize;
    before->limit_ += aSize;
    (void) [((OkioSegment *) nil_chk(prev_)) pushWithOkioSegment:before];
    return before;
  }
  else {
    OkioSegment *after = [((OkioSegmentPool *) nil_chk(JreLoadStatic(OkioSegmentPool, INSTANCE))) take];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, pos_ + aSize, ((OkioSegment *) nil_chk(after))->data_, after->pos_, bSize);
    limit_ -= bSize;
    after->limit_ += bSize;
    (void) [self pushWithOkioSegment:after];
    return self;
  }
}

- (void)compact {
  if (prev_ == self) @throw new_JavaLangIllegalStateException_init();
  if ((((OkioSegment *) nil_chk(prev_))->limit_ - prev_->pos_) + (limit_ - pos_) > OkioSegment_SIZE) return;
  [self writeToWithOkioSegment:prev_ withInt:limit_ - pos_];
  (void) [self pop];
  [((OkioSegmentPool *) nil_chk(JreLoadStatic(OkioSegmentPool, INSTANCE))) recycleWithOkioSegment:self];
}

- (void)writeToWithOkioSegment:(OkioSegment *)sink
                       withInt:(jint)byteCount {
  if (byteCount + (((OkioSegment *) nil_chk(sink))->limit_ - sink->pos_) > OkioSegment_SIZE) @throw new_JavaLangIllegalArgumentException_init();
  if (sink->limit_ + byteCount > OkioSegment_SIZE) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sink->data_, sink->pos_, sink->data_, 0, sink->limit_ - sink->pos_);
    sink->limit_ -= sink->pos_;
    sink->pos_ = 0;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, pos_, sink->data_, sink->limit_, byteCount);
  sink->limit_ += byteCount;
  pos_ += byteCount;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioSegment_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "pop", NULL, "Lokio.Segment;", 0x1, NULL, NULL },
    { "pushWithOkioSegment:", "push", "Lokio.Segment;", 0x1, NULL, NULL },
    { "splitWithInt:", "split", "Lokio.Segment;", 0x1, NULL, NULL },
    { "compact", NULL, "V", 0x1, NULL, NULL },
    { "writeToWithOkioSegment:withInt:", "writeTo", "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SIZE", "SIZE", 0x18, "I", NULL, NULL, .constantValue.asInt = OkioSegment_SIZE },
    { "data_", NULL, 0x10, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "pos_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "limit_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "next_", NULL, 0x0, "Lokio.Segment;", NULL, NULL, .constantValue.asLong = 0 },
    { "prev_", NULL, 0x0, "Lokio.Segment;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OkioSegment = { 2, "Segment", "okio", NULL, 0x10, 6, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OkioSegment;
}

@end

void OkioSegment_init(OkioSegment *self) {
  NSObject_init(self);
  self->data_ = [IOSByteArray newArrayWithLength:OkioSegment_SIZE];
}

OkioSegment *new_OkioSegment_init() {
  OkioSegment *self = [OkioSegment alloc];
  OkioSegment_init(self);
  return self;
}

OkioSegment *create_OkioSegment_init() {
  return new_OkioSegment_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioSegment)
