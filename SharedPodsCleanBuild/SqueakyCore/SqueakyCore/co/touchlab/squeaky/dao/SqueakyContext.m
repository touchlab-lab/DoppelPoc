//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/squeaky/core/src/main/java/co/touchlab/squeaky/dao/SqueakyContext.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "co/touchlab/squeaky/dao/Dao.h"
#include "co/touchlab/squeaky/dao/ModelDao.h"
#include "co/touchlab/squeaky/dao/SqueakyContext.h"
#include "co/touchlab/squeaky/db/SQLiteDatabase.h"
#include "co/touchlab/squeaky/db/SQLiteOpenHelper.h"
#include "co/touchlab/squeaky/field/FieldType.h"
#include "co/touchlab/squeaky/table/GeneratedTableMapper.h"
#include "co/touchlab/squeaky/table/TableInfo.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/sql/SQLException.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface CoTouchlabSqueakyDaoSqueakyContext () {
 @public
  id<CoTouchlabSqueakyDbSQLiteOpenHelper> helper_;
  id<JavaUtilMap> daoMap_;
  id<JavaUtilMap> generatedTableMapperMap_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyDaoSqueakyContext, helper_, id<CoTouchlabSqueakyDbSQLiteOpenHelper>)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyDaoSqueakyContext, daoMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyDaoSqueakyContext, generatedTableMapperMap_, id<JavaUtilMap>)

@implementation CoTouchlabSqueakyDaoSqueakyContext

- (instancetype)initWithCoTouchlabSqueakyDbSQLiteOpenHelper:(id<CoTouchlabSqueakyDbSQLiteOpenHelper>)helper {
  CoTouchlabSqueakyDaoSqueakyContext_initWithCoTouchlabSqueakyDbSQLiteOpenHelper_(self, helper);
  return self;
}

- (id<CoTouchlabSqueakyDaoDao>)getDaoWithIOSClass:(IOSClass *)clazz {
  @synchronized(self) {
    CoTouchlabSqueakyDaoModelDao *dao = [((id<JavaUtilMap>) nil_chk(daoMap_)) getWithId:clazz];
    if (dao == nil) {
      dao = new_CoTouchlabSqueakyDaoModelDao_initWithCoTouchlabSqueakyDaoSqueakyContext_withIOSClass_withCoTouchlabSqueakyTableGeneratedTableMapper_(self, clazz, [self getGeneratedTableMapperWithIOSClass:clazz]);
      (void) [daoMap_ putWithId:clazz withId:dao];
    }
    return dao;
  }
}

- (void)close {
  @synchronized(self) {
    for (id<CoTouchlabSqueakyDaoDao> __strong dao in nil_chk([((id<JavaUtilMap>) nil_chk(daoMap_)) values])) {
      [((CoTouchlabSqueakyDaoModelDao *) nil_chk(((CoTouchlabSqueakyDaoModelDao *) cast_chk(dao, [CoTouchlabSqueakyDaoModelDao class])))) cleanUp];
    }
    [daoMap_ clear];
  }
}

- (id<CoTouchlabSqueakyTableGeneratedTableMapper>)getGeneratedTableMapperWithIOSClass:(IOSClass *)clazz {
  @synchronized(self) {
    id<CoTouchlabSqueakyTableGeneratedTableMapper> generatedTableMapper = [((id<JavaUtilMap>) nil_chk(generatedTableMapperMap_)) getWithId:clazz];
    if (generatedTableMapper == nil) {
      generatedTableMapper = CoTouchlabSqueakyDaoSqueakyContext_loadGeneratedTableMapperWithIOSClass_(clazz);
      (void) [generatedTableMapperMap_ putWithId:clazz withId:generatedTableMapper];
    }
    return generatedTableMapper;
  }
}

- (id<CoTouchlabSqueakyDbSQLiteDatabase>)getDatabase {
  return [((id<CoTouchlabSqueakyDbSQLiteOpenHelper>) nil_chk(helper_)) getWrappedDatabase];
}

- (CoTouchlabSqueakyFieldFieldType *)findFieldTypeWithIOSClass:(IOSClass *)c
                                                  withNSString:(NSString *)columnFieldName {
  id<CoTouchlabSqueakyTableGeneratedTableMapper> generatedTableMapper = [self getGeneratedTableMapperWithIOSClass:c];
  IOSObjectArray *fieldTypes = [((CoTouchlabSqueakyTableTableInfo *) nil_chk([((id<CoTouchlabSqueakyTableGeneratedTableMapper>) nil_chk(generatedTableMapper)) getTableConfig])) getFieldTypes];
  {
    IOSObjectArray *a__ = fieldTypes;
    CoTouchlabSqueakyFieldFieldType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    CoTouchlabSqueakyFieldFieldType * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      CoTouchlabSqueakyFieldFieldType *fieldType = *b__++;
      if ([((NSString *) nil_chk([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getFieldName])) equalsIgnoreCase:columnFieldName] || [((NSString *) nil_chk([fieldType getColumnName])) equalsIgnoreCase:columnFieldName]) {
        return fieldType;
      }
    }
  }
  @throw new_JavaSqlSQLException_initWithNSString_(JreStrcat("$$", @"No field type found for ", columnFieldName));
}

+ (id<CoTouchlabSqueakyTableGeneratedTableMapper>)loadGeneratedTableMapperWithIOSClass:(IOSClass *)clazz {
  return CoTouchlabSqueakyDaoSqueakyContext_loadGeneratedTableMapperWithIOSClass_(clazz);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithCoTouchlabSqueakyDbSQLiteOpenHelper:", "SqueakyContext", NULL, 0x1, NULL, NULL },
    { "getDaoWithIOSClass:", "getDao", "Lco.touchlab.squeaky.dao.Dao;", 0x21, NULL, NULL },
    { "close", NULL, "V", 0x21, NULL, NULL },
    { "getGeneratedTableMapperWithIOSClass:", "getGeneratedTableMapper", "Lco.touchlab.squeaky.table.GeneratedTableMapper;", 0x21, NULL, NULL },
    { "getDatabase", NULL, "Lco.touchlab.squeaky.db.SQLiteDatabase;", 0x1, NULL, NULL },
    { "findFieldTypeWithIOSClass:withNSString:", "findFieldType", "Lco.touchlab.squeaky.field.FieldType;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "loadGeneratedTableMapperWithIOSClass:", "loadGeneratedTableMapper", "Lco.touchlab.squeaky.table.GeneratedTableMapper;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", NULL, 0x12, "Lco.touchlab.squeaky.db.SQLiteOpenHelper;", NULL, NULL, .constantValue.asLong = 0 },
    { "daoMap_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Class;Lco/touchlab/squeaky/dao/ModelDao;>;", .constantValue.asLong = 0 },
    { "generatedTableMapperMap_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Class;Lco/touchlab/squeaky/table/GeneratedTableMapper;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _CoTouchlabSqueakyDaoSqueakyContext = { 2, "SqueakyContext", "co.touchlab.squeaky.dao", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_CoTouchlabSqueakyDaoSqueakyContext;
}

@end

void CoTouchlabSqueakyDaoSqueakyContext_initWithCoTouchlabSqueakyDbSQLiteOpenHelper_(CoTouchlabSqueakyDaoSqueakyContext *self, id<CoTouchlabSqueakyDbSQLiteOpenHelper> helper) {
  NSObject_init(self);
  self->daoMap_ = new_JavaUtilHashMap_init();
  self->generatedTableMapperMap_ = new_JavaUtilHashMap_init();
  self->helper_ = helper;
}

CoTouchlabSqueakyDaoSqueakyContext *new_CoTouchlabSqueakyDaoSqueakyContext_initWithCoTouchlabSqueakyDbSQLiteOpenHelper_(id<CoTouchlabSqueakyDbSQLiteOpenHelper> helper) {
  CoTouchlabSqueakyDaoSqueakyContext *self = [CoTouchlabSqueakyDaoSqueakyContext alloc];
  CoTouchlabSqueakyDaoSqueakyContext_initWithCoTouchlabSqueakyDbSQLiteOpenHelper_(self, helper);
  return self;
}

CoTouchlabSqueakyDaoSqueakyContext *create_CoTouchlabSqueakyDaoSqueakyContext_initWithCoTouchlabSqueakyDbSQLiteOpenHelper_(id<CoTouchlabSqueakyDbSQLiteOpenHelper> helper) {
  return new_CoTouchlabSqueakyDaoSqueakyContext_initWithCoTouchlabSqueakyDbSQLiteOpenHelper_(helper);
}

id<CoTouchlabSqueakyTableGeneratedTableMapper> CoTouchlabSqueakyDaoSqueakyContext_loadGeneratedTableMapperWithIOSClass_(IOSClass *clazz) {
  CoTouchlabSqueakyDaoSqueakyContext_initialize();
  @try {
    return (id<CoTouchlabSqueakyTableGeneratedTableMapper>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(JreStrcat("$$", [((IOSClass *) nil_chk(clazz)) getName], @"$Configuration")))) newInstance], CoTouchlabSqueakyTableGeneratedTableMapper_class_());
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyDaoSqueakyContext)
