//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/squeaky/core/src/main/java/co/touchlab/squeaky/field/DatabaseField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("CoTouchlabSqueakyFieldDatabaseField_INCLUDE_ALL")
#ifdef CoTouchlabSqueakyFieldDatabaseField_RESTRICT
#define CoTouchlabSqueakyFieldDatabaseField_INCLUDE_ALL 0
#else
#define CoTouchlabSqueakyFieldDatabaseField_INCLUDE_ALL 1
#endif
#undef CoTouchlabSqueakyFieldDatabaseField_RESTRICT

#if !defined (CoTouchlabSqueakyFieldDatabaseField_) && (CoTouchlabSqueakyFieldDatabaseField_INCLUDE_ALL || defined(CoTouchlabSqueakyFieldDatabaseField_INCLUDE))
#define CoTouchlabSqueakyFieldDatabaseField_

#define JavaLangAnnotationAnnotation_RESTRICT 1
#define JavaLangAnnotationAnnotation_INCLUDE 1
#include "java/lang/annotation/Annotation.h"

@class CoTouchlabSqueakyFieldDataType;
@class IOSClass;

@protocol CoTouchlabSqueakyFieldDatabaseField < JavaLangAnnotationAnnotation >

@property (readonly) NSString *columnName;
@property (readonly) CoTouchlabSqueakyFieldDataType *dataType;
@property (readonly) NSString *defaultValue;
@property (readonly) jboolean canBeNull;
@property (readonly) jboolean id__;
@property (readonly) jboolean generatedId;
@property (readonly) jboolean foreign;
@property (readonly) jboolean useGetSet;
@property (readonly) NSString *format;
@property (readonly) jboolean unique;
@property (readonly) jboolean uniqueCombo;
@property (readonly) jboolean index;
@property (readonly) jboolean uniqueIndex;
@property (readonly) NSString *indexName;
@property (readonly) NSString *uniqueIndexName;
@property (readonly) jboolean foreignAutoRefresh;
@property (readonly) IOSClass *persisterClass;

@end

@interface CoTouchlabSqueakyFieldDatabaseField : NSObject < CoTouchlabSqueakyFieldDatabaseField > {
 @private
  NSString *columnName_;
  CoTouchlabSqueakyFieldDataType *dataType_;
  NSString *defaultValue_;
  jboolean canBeNull_;
  jboolean id___;
  jboolean generatedId_;
  jboolean foreign_;
  jboolean useGetSet_;
  NSString *format_;
  jboolean unique_;
  jboolean uniqueCombo_;
  jboolean index_;
  jboolean uniqueIndex_;
  NSString *indexName_;
  NSString *uniqueIndexName_;
  jboolean foreignAutoRefresh_;
  IOSClass *persisterClass_;
}

- (instancetype)initWithCanBeNull:(jboolean)canBeNull__ withColumnName:(NSString *)columnName__ withDataType:(CoTouchlabSqueakyFieldDataType *)dataType__ withDefaultValue:(NSString *)defaultValue__ withForeign:(jboolean)foreign__ withForeignAutoRefresh:(jboolean)foreignAutoRefresh__ withFormat:(NSString *)format__ withGeneratedId:(jboolean)generatedId__ withId__:(jboolean)id____ withIndex:(jboolean)index__ withIndexName:(NSString *)indexName__ withPersisterClass:(IOSClass *)persisterClass__ withUnique:(jboolean)unique__ withUniqueCombo:(jboolean)uniqueCombo__ withUniqueIndex:(jboolean)uniqueIndex__ withUniqueIndexName:(NSString *)uniqueIndexName__ withUseGetSet:(jboolean)useGetSet__;

+ (NSString *)columnNameDefault;
+ (CoTouchlabSqueakyFieldDataType *)dataTypeDefault;
+ (NSString *)defaultValueDefault;
+ (jboolean)canBeNullDefault;
+ (jboolean)id__Default;
+ (jboolean)generatedIdDefault;
+ (jboolean)foreignDefault;
+ (jboolean)useGetSetDefault;
+ (NSString *)formatDefault;
+ (jboolean)uniqueDefault;
+ (jboolean)uniqueComboDefault;
+ (jboolean)indexDefault;
+ (jboolean)uniqueIndexDefault;
+ (NSString *)indexNameDefault;
+ (NSString *)uniqueIndexNameDefault;
+ (jboolean)foreignAutoRefreshDefault;
+ (IOSClass *)persisterClassDefault;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldDatabaseField)

inline NSString *CoTouchlabSqueakyFieldDatabaseField_get_DEFAULT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *CoTouchlabSqueakyFieldDatabaseField_DEFAULT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldDatabaseField, DEFAULT_STRING, NSString *)

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldDatabaseField)

#endif

#pragma pop_macro("CoTouchlabSqueakyFieldDatabaseField_INCLUDE_ALL")
