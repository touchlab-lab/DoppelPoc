//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/squeaky/core/src/main/java/co/touchlab/squeaky/field/types/BaseDataType.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/database/Cursor.h"
#include "co/touchlab/squeaky/field/BaseFieldConverter.h"
#include "co/touchlab/squeaky/field/FieldType.h"
#include "co/touchlab/squeaky/field/SqlType.h"
#include "co/touchlab/squeaky/field/types/BaseDataType.h"
#include "java/sql/SQLException.h"

@interface CoTouchlabSqueakyFieldTypesBaseDataType () {
 @public
  CoTouchlabSqueakyFieldSqlType *sqlType_;
  IOSObjectArray *classes_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldTypesBaseDataType, sqlType_, CoTouchlabSqueakyFieldSqlType *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldTypesBaseDataType, classes_, IOSObjectArray *)

inline IOSObjectArray *CoTouchlabSqueakyFieldTypesBaseDataType_get_NO_CLASSES();
static IOSObjectArray *CoTouchlabSqueakyFieldTypesBaseDataType_NO_CLASSES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBaseDataType, NO_CLASSES, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesBaseDataType)

@implementation CoTouchlabSqueakyFieldTypesBaseDataType

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_(self, sqlType);
  return self;
}

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)resultToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                            withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                              withInt:(jint)columnPos {
  return [self sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:fieldType withId:[self resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:fieldType withAndroidDatabaseCursor:results withInt:columnPos] withInt:columnPos];
}

- (id)makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType {
  return nil;
}

- (CoTouchlabSqueakyFieldSqlType *)getSqlType {
  return sqlType_;
}

- (IOSObjectArray *)getAssociatedClasses {
  return classes_;
}

- (IOSObjectArray *)getAssociatedClassNames {
  return nil;
}

- (jboolean)isEscapedDefaultValue {
  return [self isEscapedValue];
}

- (jboolean)isEscapedValue {
  return true;
}

- (jboolean)isPrimitive {
  return false;
}

- (jboolean)isComparable {
  return true;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesBaseDataType class]) {
    CoTouchlabSqueakyFieldTypesBaseDataType_NO_CLASSES = [IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()];
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesBaseDataType)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithCoTouchlabSqueakyFieldSqlType:withIOSClassArray:", "BaseDataType", NULL, 0x1, NULL, NULL },
    { "initWithCoTouchlabSqueakyFieldSqlType:", "BaseDataType", NULL, 0x1, NULL, NULL },
    { "parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:", "parseDefaultString", "Ljava.lang.Object;", 0x401, "Ljava.sql.SQLException;", NULL },
    { "resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:", "resultToSqlArg", "Ljava.lang.Object;", 0x401, "Ljava.sql.SQLException;", NULL },
    { "resultToJavaWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:", "resultToJava", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:", "makeConfigObject", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "getSqlType", NULL, "Lco.touchlab.squeaky.field.SqlType;", 0x1, NULL, NULL },
    { "getAssociatedClasses", NULL, "[Ljava.lang.Class;", 0x1, NULL, NULL },
    { "getAssociatedClassNames", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEscapedDefaultValue", NULL, "Z", 0x1, NULL, NULL },
    { "isEscapedValue", NULL, "Z", 0x1, NULL, NULL },
    { "isPrimitive", NULL, "Z", 0x1, NULL, NULL },
    { "isComparable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NO_CLASSES", "NO_CLASSES", 0x1a, "[Ljava.lang.Class;", &CoTouchlabSqueakyFieldTypesBaseDataType_NO_CLASSES, "[Ljava/lang/Class<*>;", .constantValue.asLong = 0 },
    { "sqlType_", NULL, 0x12, "Lco.touchlab.squeaky.field.SqlType;", NULL, NULL, .constantValue.asLong = 0 },
    { "classes_", NULL, 0x12, "[Ljava.lang.Class;", NULL, "[Ljava/lang/Class<*>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesBaseDataType = { 2, "BaseDataType", "co.touchlab.squeaky.field.types", NULL, 0x401, 13, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_CoTouchlabSqueakyFieldTypesBaseDataType;
}

@end

void CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesBaseDataType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldBaseFieldConverter_init(self);
  self->sqlType_ = sqlType;
  self->classes_ = classes;
}

void CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_(CoTouchlabSqueakyFieldTypesBaseDataType *self, CoTouchlabSqueakyFieldSqlType *sqlType) {
  CoTouchlabSqueakyFieldBaseFieldConverter_init(self);
  self->sqlType_ = sqlType;
  self->classes_ = CoTouchlabSqueakyFieldTypesBaseDataType_NO_CLASSES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesBaseDataType)
