//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/squeaky/core/src/main/java/co/touchlab/squeaky/field/types/BaseDataType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("CoTouchlabSqueakyFieldTypesBaseDataType_INCLUDE_ALL")
#ifdef CoTouchlabSqueakyFieldTypesBaseDataType_RESTRICT
#define CoTouchlabSqueakyFieldTypesBaseDataType_INCLUDE_ALL 0
#else
#define CoTouchlabSqueakyFieldTypesBaseDataType_INCLUDE_ALL 1
#endif
#undef CoTouchlabSqueakyFieldTypesBaseDataType_RESTRICT

#if !defined (CoTouchlabSqueakyFieldTypesBaseDataType_) && (CoTouchlabSqueakyFieldTypesBaseDataType_INCLUDE_ALL || defined(CoTouchlabSqueakyFieldTypesBaseDataType_INCLUDE))
#define CoTouchlabSqueakyFieldTypesBaseDataType_

#define CoTouchlabSqueakyFieldBaseFieldConverter_RESTRICT 1
#define CoTouchlabSqueakyFieldBaseFieldConverter_INCLUDE 1
#include "co/touchlab/squeaky/field/BaseFieldConverter.h"

#define CoTouchlabSqueakyFieldDataPersister_RESTRICT 1
#define CoTouchlabSqueakyFieldDataPersister_INCLUDE 1
#include "co/touchlab/squeaky/field/DataPersister.h"

@class CoTouchlabSqueakyFieldFieldType;
@class CoTouchlabSqueakyFieldSqlType;
@class IOSObjectArray;
@protocol AndroidDatabaseCursor;

@interface CoTouchlabSqueakyFieldTypesBaseDataType : CoTouchlabSqueakyFieldBaseFieldConverter < CoTouchlabSqueakyFieldDataPersister >

#pragma mark Public

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType;

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes;

- (IOSObjectArray *)getAssociatedClasses;

- (IOSObjectArray *)getAssociatedClassNames;

- (CoTouchlabSqueakyFieldSqlType *)getSqlType;

- (jboolean)isComparable;

- (jboolean)isEscapedDefaultValue;

- (jboolean)isEscapedValue;

- (jboolean)isPrimitive;

- (id)makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType;

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr;

- (id)resultToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                            withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                              withInt:(jint)columnPos;

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos;

@end

J2OBJC_STATIC_INIT(CoTouchlabSqueakyFieldTypesBaseDataType)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesBaseDataType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes);

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_(CoTouchlabSqueakyFieldTypesBaseDataType *self, CoTouchlabSqueakyFieldSqlType *sqlType);

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldTypesBaseDataType)

#endif

#pragma pop_macro("CoTouchlabSqueakyFieldTypesBaseDataType_INCLUDE_ALL")
