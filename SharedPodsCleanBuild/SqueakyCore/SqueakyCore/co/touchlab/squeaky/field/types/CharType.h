//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/squeaky/core/src/main/java/co/touchlab/squeaky/field/types/CharType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("CoTouchlabSqueakyFieldTypesCharType_INCLUDE_ALL")
#ifdef CoTouchlabSqueakyFieldTypesCharType_RESTRICT
#define CoTouchlabSqueakyFieldTypesCharType_INCLUDE_ALL 0
#else
#define CoTouchlabSqueakyFieldTypesCharType_INCLUDE_ALL 1
#endif
#undef CoTouchlabSqueakyFieldTypesCharType_RESTRICT

#if !defined (CoTouchlabSqueakyFieldTypesCharType_) && (CoTouchlabSqueakyFieldTypesCharType_INCLUDE_ALL || defined(CoTouchlabSqueakyFieldTypesCharType_INCLUDE))
#define CoTouchlabSqueakyFieldTypesCharType_

#define CoTouchlabSqueakyFieldTypesCharacterObjectType_RESTRICT 1
#define CoTouchlabSqueakyFieldTypesCharacterObjectType_INCLUDE 1
#include "co/touchlab/squeaky/field/types/CharacterObjectType.h"

@class CoTouchlabSqueakyFieldFieldType;
@class CoTouchlabSqueakyFieldSqlType;
@class IOSObjectArray;

@interface CoTouchlabSqueakyFieldTypesCharType : CoTouchlabSqueakyFieldTypesCharacterObjectType

#pragma mark Public

+ (CoTouchlabSqueakyFieldTypesCharType *)getSingleton;

- (jboolean)isPrimitive;

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)javaObject;

#pragma mark Protected

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes;

@end

J2OBJC_STATIC_INIT(CoTouchlabSqueakyFieldTypesCharType)

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesCharType *CoTouchlabSqueakyFieldTypesCharType_getSingleton();

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldTypesCharType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesCharType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesCharType *new_CoTouchlabSqueakyFieldTypesCharType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesCharType *create_CoTouchlabSqueakyFieldTypesCharType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes);

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldTypesCharType)

#endif

#pragma pop_macro("CoTouchlabSqueakyFieldTypesCharType_INCLUDE_ALL")
