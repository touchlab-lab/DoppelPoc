//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/squeaky/core/src/main/java/co/touchlab/squeaky/field/types/StringBytesType.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/database/Cursor.h"
#include "co/touchlab/squeaky/field/FieldType.h"
#include "co/touchlab/squeaky/field/SqlType.h"
#include "co/touchlab/squeaky/field/types/BaseDataType.h"
#include "co/touchlab/squeaky/field/types/StringBytesType.h"
#include "co/touchlab/squeaky/misc/SqlExceptionUtil.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/sql/SQLException.h"

@interface CoTouchlabSqueakyFieldTypesStringBytesType ()

- (instancetype)init;

- (NSString *)getCharsetNameWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType;

@end

inline NSString *CoTouchlabSqueakyFieldTypesStringBytesType_get_DEFAULT_STRING_BYTES_CHARSET_NAME();
static NSString *CoTouchlabSqueakyFieldTypesStringBytesType_DEFAULT_STRING_BYTES_CHARSET_NAME = @"Unicode";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesStringBytesType, DEFAULT_STRING_BYTES_CHARSET_NAME, NSString *)

inline CoTouchlabSqueakyFieldTypesStringBytesType *CoTouchlabSqueakyFieldTypesStringBytesType_get_singleTon();
static CoTouchlabSqueakyFieldTypesStringBytesType *CoTouchlabSqueakyFieldTypesStringBytesType_singleTon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesStringBytesType, singleTon, CoTouchlabSqueakyFieldTypesStringBytesType *)

__attribute__((unused)) static void CoTouchlabSqueakyFieldTypesStringBytesType_init(CoTouchlabSqueakyFieldTypesStringBytesType *self);

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesStringBytesType *new_CoTouchlabSqueakyFieldTypesStringBytesType_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesStringBytesType *create_CoTouchlabSqueakyFieldTypesStringBytesType_init();

__attribute__((unused)) static NSString *CoTouchlabSqueakyFieldTypesStringBytesType_getCharsetNameWithCoTouchlabSqueakyFieldFieldType_(CoTouchlabSqueakyFieldTypesStringBytesType *self, CoTouchlabSqueakyFieldFieldType *fieldType);

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesStringBytesType)

@implementation CoTouchlabSqueakyFieldTypesStringBytesType

+ (CoTouchlabSqueakyFieldTypesStringBytesType *)getSingleton {
  return CoTouchlabSqueakyFieldTypesStringBytesType_getSingleton();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesStringBytesType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes {
  CoTouchlabSqueakyFieldTypesStringBytesType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  @throw new_JavaSqlSQLException_initWithNSString_(@"String-bytes type cannot have default values");
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  return [((id<AndroidDatabaseCursor>) nil_chk(results)) getBlobWithInt:columnPos];
}

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos {
  IOSByteArray *bytes = (IOSByteArray *) cast_chk(sqlArg, [IOSByteArray class]);
  NSString *charsetName = CoTouchlabSqueakyFieldTypesStringBytesType_getCharsetNameWithCoTouchlabSqueakyFieldFieldType_(self, fieldType);
  @try {
    return [NSString stringWithBytes:bytes charsetName:charsetName];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(JreStrcat("$$", @"Could not convert string with charset name: ", charsetName), e);
  }
}

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)javaObject {
  NSString *string = (NSString *) cast_chk(javaObject, [NSString class]);
  NSString *charsetName = CoTouchlabSqueakyFieldTypesStringBytesType_getCharsetNameWithCoTouchlabSqueakyFieldFieldType_(self, fieldType);
  @try {
    return [((NSString *) nil_chk(string)) getBytesWithCharsetName:charsetName];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(JreStrcat("$$", @"Could not convert string with charset name: ", charsetName), e);
  }
}

- (NSString *)getCharsetNameWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType {
  return CoTouchlabSqueakyFieldTypesStringBytesType_getCharsetNameWithCoTouchlabSqueakyFieldFieldType_(self, fieldType);
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesStringBytesType class]) {
    CoTouchlabSqueakyFieldTypesStringBytesType_singleTon = new_CoTouchlabSqueakyFieldTypesStringBytesType_init();
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesStringBytesType)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getSingleton", NULL, "Lco.touchlab.squeaky.field.types.StringBytesType;", 0x9, NULL, NULL },
    { "init", "StringBytesType", NULL, 0x2, NULL, NULL },
    { "initWithCoTouchlabSqueakyFieldSqlType:withIOSClassArray:", "StringBytesType", NULL, 0x4, NULL, NULL },
    { "parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:", "parseDefaultString", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:", "resultToSqlArg", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:withId:withInt:", "sqlArgToJava", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:withId:", "javaToSqlArg", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "getCharsetNameWithCoTouchlabSqueakyFieldFieldType:", "getCharsetName", "Ljava.lang.String;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_STRING_BYTES_CHARSET_NAME", "DEFAULT_STRING_BYTES_CHARSET_NAME", 0x1a, "Ljava.lang.String;", &CoTouchlabSqueakyFieldTypesStringBytesType_DEFAULT_STRING_BYTES_CHARSET_NAME, NULL, .constantValue.asLong = 0 },
    { "singleTon", "singleTon", 0x1a, "Lco.touchlab.squeaky.field.types.StringBytesType;", &CoTouchlabSqueakyFieldTypesStringBytesType_singleTon, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesStringBytesType = { 2, "StringBytesType", "co.touchlab.squeaky.field.types", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_CoTouchlabSqueakyFieldTypesStringBytesType;
}

@end

CoTouchlabSqueakyFieldTypesStringBytesType *CoTouchlabSqueakyFieldTypesStringBytesType_getSingleton() {
  CoTouchlabSqueakyFieldTypesStringBytesType_initialize();
  return CoTouchlabSqueakyFieldTypesStringBytesType_singleTon;
}

void CoTouchlabSqueakyFieldTypesStringBytesType_init(CoTouchlabSqueakyFieldTypesStringBytesType *self) {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_(self, JreLoadEnum(CoTouchlabSqueakyFieldSqlType, BYTE_ARRAY));
}

CoTouchlabSqueakyFieldTypesStringBytesType *new_CoTouchlabSqueakyFieldTypesStringBytesType_init() {
  CoTouchlabSqueakyFieldTypesStringBytesType *self = [CoTouchlabSqueakyFieldTypesStringBytesType alloc];
  CoTouchlabSqueakyFieldTypesStringBytesType_init(self);
  return self;
}

CoTouchlabSqueakyFieldTypesStringBytesType *create_CoTouchlabSqueakyFieldTypesStringBytesType_init() {
  return new_CoTouchlabSqueakyFieldTypesStringBytesType_init();
}

void CoTouchlabSqueakyFieldTypesStringBytesType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesStringBytesType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
}

CoTouchlabSqueakyFieldTypesStringBytesType *new_CoTouchlabSqueakyFieldTypesStringBytesType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldTypesStringBytesType *self = [CoTouchlabSqueakyFieldTypesStringBytesType alloc];
  CoTouchlabSqueakyFieldTypesStringBytesType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

CoTouchlabSqueakyFieldTypesStringBytesType *create_CoTouchlabSqueakyFieldTypesStringBytesType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  return new_CoTouchlabSqueakyFieldTypesStringBytesType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(sqlType, classes);
}

NSString *CoTouchlabSqueakyFieldTypesStringBytesType_getCharsetNameWithCoTouchlabSqueakyFieldFieldType_(CoTouchlabSqueakyFieldTypesStringBytesType *self, CoTouchlabSqueakyFieldFieldType *fieldType) {
  if (fieldType == nil || [fieldType getFormat] == nil) {
    return CoTouchlabSqueakyFieldTypesStringBytesType_DEFAULT_STRING_BYTES_CHARSET_NAME;
  }
  else {
    return [fieldType getFormat];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesStringBytesType)
