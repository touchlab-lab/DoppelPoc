//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/squeaky/core/src/main/java/co/touchlab/squeaky/field/FieldType.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/database/Cursor.h"
#include "android/text/TextUtils.h"
#include "co/touchlab/squeaky/field/BaseFieldConverter.h"
#include "co/touchlab/squeaky/field/DataPersister.h"
#include "co/touchlab/squeaky/field/DataType.h"
#include "co/touchlab/squeaky/field/FieldConverter.h"
#include "co/touchlab/squeaky/field/FieldType.h"
#include "co/touchlab/squeaky/field/SqlType.h"
#include "co/touchlab/squeaky/field/types/BigDecimalStringType.h"
#include "co/touchlab/squeaky/field/types/DateStringType.h"
#include "co/touchlab/squeaky/field/types/TimeStampStringType.h"
#include "co/touchlab/squeaky/field/types/TimeStampType.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/sql/SQLException.h"

@interface CoTouchlabSqueakyFieldFieldType () {
 @public
  NSString *columnName_;
  jboolean isId_;
  jboolean isGeneratedId_;
  jboolean isForeign_;
  NSString *fieldName_;
  CoTouchlabSqueakyFieldDataType *dataType_;
  IOSClass *fieldType_;
  jboolean canBeNull_;
  NSString *format_;
  jboolean unique_;
  jboolean uniqueCombo_;
  jboolean index_;
  jboolean uniqueIndex_;
  jboolean foreignAutoRefresh_;
  NSString *indexNameBase_;
  NSString *indexName_;
  NSString *uniqueIndexName_;
  id<CoTouchlabSqueakyFieldDataPersister> dataPersister_;
  id defaultValue_;
  id dataTypeConfigObj_;
  id<CoTouchlabSqueakyFieldFieldConverter> fieldConverter_;
}

- (NSString *)findIndexNameWithNSString:(NSString *)indexNameBase;

- (void)assignDataTypeWithCoTouchlabSqueakyFieldDataPersister:(id<CoTouchlabSqueakyFieldDataPersister>)dataPersister
                                                 withNSString:(NSString *)defaultStr;

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, columnName_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, fieldName_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, dataType_, CoTouchlabSqueakyFieldDataType *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, fieldType_, IOSClass *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, format_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, indexNameBase_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, indexName_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, uniqueIndexName_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, dataPersister_, id<CoTouchlabSqueakyFieldDataPersister>)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, defaultValue_, id)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, dataTypeConfigObj_, id)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldFieldType, fieldConverter_, id<CoTouchlabSqueakyFieldFieldConverter>)

inline jboolean CoTouchlabSqueakyFieldFieldType_get_DEFAULT_VALUE_BOOLEAN();
inline jboolean CoTouchlabSqueakyFieldFieldType_set_DEFAULT_VALUE_BOOLEAN(jboolean value);
inline jboolean *CoTouchlabSqueakyFieldFieldType_getRef_DEFAULT_VALUE_BOOLEAN();
static jboolean CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_BOOLEAN;
J2OBJC_STATIC_FIELD_PRIMITIVE(CoTouchlabSqueakyFieldFieldType, DEFAULT_VALUE_BOOLEAN, jboolean)

inline jbyte CoTouchlabSqueakyFieldFieldType_get_DEFAULT_VALUE_BYTE();
inline jbyte CoTouchlabSqueakyFieldFieldType_set_DEFAULT_VALUE_BYTE(jbyte value);
inline jbyte *CoTouchlabSqueakyFieldFieldType_getRef_DEFAULT_VALUE_BYTE();
static jbyte CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_BYTE;
J2OBJC_STATIC_FIELD_PRIMITIVE(CoTouchlabSqueakyFieldFieldType, DEFAULT_VALUE_BYTE, jbyte)

inline jchar CoTouchlabSqueakyFieldFieldType_get_DEFAULT_VALUE_CHAR();
inline jchar CoTouchlabSqueakyFieldFieldType_set_DEFAULT_VALUE_CHAR(jchar value);
inline jchar *CoTouchlabSqueakyFieldFieldType_getRef_DEFAULT_VALUE_CHAR();
static jchar CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_CHAR;
J2OBJC_STATIC_FIELD_PRIMITIVE(CoTouchlabSqueakyFieldFieldType, DEFAULT_VALUE_CHAR, jchar)

inline jshort CoTouchlabSqueakyFieldFieldType_get_DEFAULT_VALUE_SHORT();
inline jshort CoTouchlabSqueakyFieldFieldType_set_DEFAULT_VALUE_SHORT(jshort value);
inline jshort *CoTouchlabSqueakyFieldFieldType_getRef_DEFAULT_VALUE_SHORT();
static jshort CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_SHORT;
J2OBJC_STATIC_FIELD_PRIMITIVE(CoTouchlabSqueakyFieldFieldType, DEFAULT_VALUE_SHORT, jshort)

inline jint CoTouchlabSqueakyFieldFieldType_get_DEFAULT_VALUE_INT();
inline jint CoTouchlabSqueakyFieldFieldType_set_DEFAULT_VALUE_INT(jint value);
inline jint *CoTouchlabSqueakyFieldFieldType_getRef_DEFAULT_VALUE_INT();
static jint CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_INT;
J2OBJC_STATIC_FIELD_PRIMITIVE(CoTouchlabSqueakyFieldFieldType, DEFAULT_VALUE_INT, jint)

inline jlong CoTouchlabSqueakyFieldFieldType_get_DEFAULT_VALUE_LONG();
inline jlong CoTouchlabSqueakyFieldFieldType_set_DEFAULT_VALUE_LONG(jlong value);
inline jlong *CoTouchlabSqueakyFieldFieldType_getRef_DEFAULT_VALUE_LONG();
static jlong CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_LONG;
J2OBJC_STATIC_FIELD_PRIMITIVE(CoTouchlabSqueakyFieldFieldType, DEFAULT_VALUE_LONG, jlong)

inline jfloat CoTouchlabSqueakyFieldFieldType_get_DEFAULT_VALUE_FLOAT();
inline jfloat CoTouchlabSqueakyFieldFieldType_set_DEFAULT_VALUE_FLOAT(jfloat value);
inline jfloat *CoTouchlabSqueakyFieldFieldType_getRef_DEFAULT_VALUE_FLOAT();
static jfloat CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_FLOAT;
J2OBJC_STATIC_FIELD_PRIMITIVE(CoTouchlabSqueakyFieldFieldType, DEFAULT_VALUE_FLOAT, jfloat)

inline jdouble CoTouchlabSqueakyFieldFieldType_get_DEFAULT_VALUE_DOUBLE();
inline jdouble CoTouchlabSqueakyFieldFieldType_set_DEFAULT_VALUE_DOUBLE(jdouble value);
inline jdouble *CoTouchlabSqueakyFieldFieldType_getRef_DEFAULT_VALUE_DOUBLE();
static jdouble CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_DOUBLE;
J2OBJC_STATIC_FIELD_PRIMITIVE(CoTouchlabSqueakyFieldFieldType, DEFAULT_VALUE_DOUBLE, jdouble)

inline id<CoTouchlabSqueakyFieldFieldConverter> CoTouchlabSqueakyFieldFieldType_get_booleanConverter();
static id<CoTouchlabSqueakyFieldFieldConverter> CoTouchlabSqueakyFieldFieldType_booleanConverter;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldFieldType, booleanConverter, id<CoTouchlabSqueakyFieldFieldConverter>)

__attribute__((unused)) static NSString *CoTouchlabSqueakyFieldFieldType_findIndexNameWithNSString_(CoTouchlabSqueakyFieldFieldType *self, NSString *indexNameBase);

__attribute__((unused)) static void CoTouchlabSqueakyFieldFieldType_assignDataTypeWithCoTouchlabSqueakyFieldDataPersister_withNSString_(CoTouchlabSqueakyFieldFieldType *self, id<CoTouchlabSqueakyFieldDataPersister> dataPersister, NSString *defaultStr);

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldFieldType)

NSString *CoTouchlabSqueakyFieldFieldType_FOREIGN_ID_FIELD_SUFFIX = @"_id";

@implementation CoTouchlabSqueakyFieldFieldType

- (instancetype)initWithNSString:(NSString *)indexNameBase
                    withNSString:(NSString *)fieldName
                    withNSString:(NSString *)columnName
                     withBoolean:(jboolean)isId
                     withBoolean:(jboolean)isGeneratedId
                     withBoolean:(jboolean)isForeign
withCoTouchlabSqueakyFieldDataType:(CoTouchlabSqueakyFieldDataType *)dataType
                    withIOSClass:(IOSClass *)fieldType
                     withBoolean:(jboolean)canBeNull
                    withNSString:(NSString *)format
                     withBoolean:(jboolean)unique
                     withBoolean:(jboolean)uniqueCombo
                     withBoolean:(jboolean)index
                     withBoolean:(jboolean)uniqueIndex
                    withNSString:(NSString *)indexName
                    withNSString:(NSString *)uniqueIndexName
                    withNSString:(NSString *)configDefaultValue
                     withBoolean:(jboolean)foreignAutoRefresh {
  CoTouchlabSqueakyFieldFieldType_initWithNSString_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withCoTouchlabSqueakyFieldDataType_withIOSClass_withBoolean_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_withNSString_withNSString_withNSString_withBoolean_(self, indexNameBase, fieldName, columnName, isId, isGeneratedId, isForeign, dataType, fieldType, canBeNull, format, unique, uniqueCombo, index, uniqueIndex, indexName, uniqueIndexName, configDefaultValue, foreignAutoRefresh);
  return self;
}

- (NSString *)getFieldName {
  return fieldName_;
}

- (NSString *)getColumnName {
  return columnName_;
}

- (id<CoTouchlabSqueakyFieldDataPersister>)getDataPersister {
  return dataPersister_;
}

- (id)getDataTypeConfigObj {
  return dataTypeConfigObj_;
}

- (CoTouchlabSqueakyFieldSqlType *)getSqlType {
  return [((id<CoTouchlabSqueakyFieldFieldConverter>) nil_chk(fieldConverter_)) getSqlType];
}

- (id)getDefaultValue {
  return defaultValue_;
}

- (jboolean)isCanBeNull {
  return canBeNull_;
}

- (IOSClass *)getFieldType {
  return fieldType_;
}

- (jboolean)isId {
  return isId_;
}

- (jboolean)isGeneratedId {
  return isGeneratedId_;
}

- (jboolean)isForeign {
  return isForeign_;
}

- (id)convertJavaFieldToSqlArgValueWithId:(id)fieldVal {
  if (fieldVal == nil) {
    return nil;
  }
  else {
    return [((id<CoTouchlabSqueakyFieldFieldConverter>) nil_chk(fieldConverter_)) javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:self withId:fieldVal];
  }
}

- (jboolean)isEscapedValue {
  return [((id<CoTouchlabSqueakyFieldDataPersister>) nil_chk(dataPersister_)) isEscapedValue];
}

- (jboolean)isForeignAutoRefresh {
  return foreignAutoRefresh_;
}

- (NSString *)getFormat {
  return format_;
}

- (jboolean)isUnique {
  return unique_;
}

- (jboolean)isUniqueCombo {
  return uniqueCombo_;
}

- (NSString *)getIndexName {
  return [self getIndexNameWithNSString:indexNameBase_];
}

- (NSString *)getIndexNameWithNSString:(NSString *)indexNameBase {
  if (index_ && AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(indexName_)) {
    indexName_ = CoTouchlabSqueakyFieldFieldType_findIndexNameWithNSString_(self, indexNameBase);
  }
  return indexName_;
}

- (NSString *)getUniqueIndexNameWithNSString:(NSString *)indexNameBase {
  if (uniqueIndex_ && (uniqueIndexName_ == nil || [uniqueIndexName_ isEqual:@""])) {
    uniqueIndexName_ = CoTouchlabSqueakyFieldFieldType_findIndexNameWithNSString_(self, indexNameBase);
  }
  return uniqueIndexName_;
}

- (NSString *)findIndexNameWithNSString:(NSString *)indexNameBase {
  return CoTouchlabSqueakyFieldFieldType_findIndexNameWithNSString_(self, indexNameBase);
}

- (NSString *)getUniqueIndexName {
  return [self getUniqueIndexNameWithNSString:indexNameBase_];
}

- (CoTouchlabSqueakyFieldDataType *)getDataType {
  return dataType_;
}

- (jboolean)isEscapedDefaultValue {
  return [((id<CoTouchlabSqueakyFieldDataPersister>) nil_chk(dataPersister_)) isEscapedDefaultValue];
}

- (jboolean)isComparable {
  if (dataPersister_ == nil) {
    @throw new_JavaSqlSQLException_initWithNSString_(JreStrcat("$@", @"Internal error.  Data-persister is not configured for field.  Please post _full_ exception with associated data objects to mailing list: ", self));
  }
  else {
    return [dataPersister_ isComparable];
  }
}

- (id)getJavaDefaultValueDefault {
  if (dataType_ == nil) return nil;
  else if (dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, BOOLEAN)) {
    return JavaLangBoolean_valueOfWithBoolean_(CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_BOOLEAN);
  }
  else if (dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, BYTE) || dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, CHAR_OBJ)) {
    return JavaLangByte_valueOfWithByte_(CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_BYTE);
  }
  else if (dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, CHAR) || dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, CHAR_OBJ)) {
    return JavaLangCharacter_valueOfWithChar_(CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_CHAR);
  }
  else if (dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, SHORT) || dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, SHORT_OBJ)) {
    return JavaLangShort_valueOfWithShort_(CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_SHORT);
  }
  else if (dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, INTEGER) || dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, INTEGER_OBJ)) {
    return JavaLangInteger_valueOfWithInt_(CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_INT);
  }
  else if (dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, LONG) || dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, LONG_OBJ)) {
    return JavaLangLong_valueOfWithLong_(CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_LONG);
  }
  else if (dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, FLOAT) || dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, FLOAT_OBJ)) {
    return JavaLangFloat_valueOfWithFloat_(CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_FLOAT);
  }
  else if (dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, DOUBLE) || dataType_ == JreLoadEnum(CoTouchlabSqueakyFieldDataType, DOUBLE_OBJ)) {
    return JavaLangDouble_valueOfWithDouble_(CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_DOUBLE);
  }
  else {
    return nil;
  }
}

- (NSString *)description {
  return JreStrcat("$$$$@", [[self getClass] getSimpleName], @":name=", fieldName_, @",type=", dataType_);
}

- (void)assignDataTypeWithCoTouchlabSqueakyFieldDataPersister:(id<CoTouchlabSqueakyFieldDataPersister>)dataPersister
                                                 withNSString:(NSString *)defaultStr {
  CoTouchlabSqueakyFieldFieldType_assignDataTypeWithCoTouchlabSqueakyFieldDataPersister_withNSString_(self, dataPersister, defaultStr);
}

- (id<CoTouchlabSqueakyFieldDataPersister>)getDataPersisterWithCoTouchlabSqueakyFieldDataPersister:(id<CoTouchlabSqueakyFieldDataPersister>)defaultPersister {
  if (defaultPersister == nil) {
    return nil;
  }
  switch ([[((id<CoTouchlabSqueakyFieldDataPersister>) nil_chk(defaultPersister)) getSqlType] ordinal]) {
    case CoTouchlabSqueakyFieldSqlType_Enum_DATE:
    if ([defaultPersister isKindOfClass:[CoTouchlabSqueakyFieldTypesTimeStampType class]]) {
      return CoTouchlabSqueakyFieldTypesTimeStampStringType_getSingleton();
    }
    else {
      return CoTouchlabSqueakyFieldTypesDateStringType_getSingleton();
    }
    default:
    return defaultPersister;
  }
}

- (id<CoTouchlabSqueakyFieldFieldConverter>)getFieldConverterWithCoTouchlabSqueakyFieldDataPersister:(id<CoTouchlabSqueakyFieldDataPersister>)dataPersister {
  switch ([[((id<CoTouchlabSqueakyFieldDataPersister>) nil_chk(dataPersister)) getSqlType] ordinal]) {
    case CoTouchlabSqueakyFieldSqlType_Enum_BOOLEAN:
    return CoTouchlabSqueakyFieldFieldType_booleanConverter;
    case CoTouchlabSqueakyFieldSqlType_Enum_BIG_DECIMAL:
    return CoTouchlabSqueakyFieldTypesBigDecimalStringType_getSingleton();
    default:
    return dataPersister;
  }
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldFieldType class]) {
    CoTouchlabSqueakyFieldFieldType_booleanConverter = new_CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_init();
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldFieldType)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withNSString:withBoolean:withBoolean:withBoolean:withCoTouchlabSqueakyFieldDataType:withIOSClass:withBoolean:withNSString:withBoolean:withBoolean:withBoolean:withBoolean:withNSString:withNSString:withNSString:withBoolean:", "FieldType", NULL, 0x1, NULL, NULL },
    { "getFieldName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getColumnName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDataPersister", NULL, "Lco.touchlab.squeaky.field.DataPersister;", 0x1, NULL, NULL },
    { "getDataTypeConfigObj", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getSqlType", NULL, "Lco.touchlab.squeaky.field.SqlType;", 0x1, NULL, NULL },
    { "getDefaultValue", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "isCanBeNull", NULL, "Z", 0x1, NULL, NULL },
    { "getFieldType", NULL, "Ljava.lang.Class;", 0x1, NULL, NULL },
    { "isId", NULL, "Z", 0x1, NULL, NULL },
    { "isGeneratedId", NULL, "Z", 0x1, NULL, NULL },
    { "isForeign", NULL, "Z", 0x1, NULL, NULL },
    { "convertJavaFieldToSqlArgValueWithId:", "convertJavaFieldToSqlArgValue", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "isEscapedValue", NULL, "Z", 0x1, NULL, NULL },
    { "isForeignAutoRefresh", NULL, "Z", 0x1, NULL, NULL },
    { "getFormat", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isUnique", NULL, "Z", 0x1, NULL, NULL },
    { "isUniqueCombo", NULL, "Z", 0x1, NULL, NULL },
    { "getIndexName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getIndexNameWithNSString:", "getIndexName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getUniqueIndexNameWithNSString:", "getUniqueIndexName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "findIndexNameWithNSString:", "findIndexName", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getUniqueIndexName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDataType", NULL, "Lco.touchlab.squeaky.field.DataType;", 0x1, NULL, NULL },
    { "isEscapedDefaultValue", NULL, "Z", 0x1, NULL, NULL },
    { "isComparable", NULL, "Z", 0x1, "Ljava.sql.SQLException;", NULL },
    { "getJavaDefaultValueDefault", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "assignDataTypeWithCoTouchlabSqueakyFieldDataPersister:withNSString:", "assignDataType", "V", 0x2, "Ljava.sql.SQLException;", NULL },
    { "getDataPersisterWithCoTouchlabSqueakyFieldDataPersister:", "getDataPersister", "Lco.touchlab.squeaky.field.DataPersister;", 0x1, NULL, NULL },
    { "getFieldConverterWithCoTouchlabSqueakyFieldDataPersister:", "getFieldConverter", "Lco.touchlab.squeaky.field.FieldConverter;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FOREIGN_ID_FIELD_SUFFIX", "FOREIGN_ID_FIELD_SUFFIX", 0x19, "Ljava.lang.String;", &CoTouchlabSqueakyFieldFieldType_FOREIGN_ID_FIELD_SUFFIX, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_VALUE_BOOLEAN", "DEFAULT_VALUE_BOOLEAN", 0xa, "Z", &CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_BOOLEAN, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_VALUE_BYTE", "DEFAULT_VALUE_BYTE", 0xa, "B", &CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_BYTE, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_VALUE_CHAR", "DEFAULT_VALUE_CHAR", 0xa, "C", &CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_CHAR, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_VALUE_SHORT", "DEFAULT_VALUE_SHORT", 0xa, "S", &CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_SHORT, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_VALUE_INT", "DEFAULT_VALUE_INT", 0xa, "I", &CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_INT, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_VALUE_LONG", "DEFAULT_VALUE_LONG", 0xa, "J", &CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_LONG, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_VALUE_FLOAT", "DEFAULT_VALUE_FLOAT", 0xa, "F", &CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_FLOAT, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_VALUE_DOUBLE", "DEFAULT_VALUE_DOUBLE", 0xa, "D", &CoTouchlabSqueakyFieldFieldType_DEFAULT_VALUE_DOUBLE, NULL, .constantValue.asLong = 0 },
    { "columnName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "isId_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isGeneratedId_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isForeign_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "dataType_", NULL, 0x12, "Lco.touchlab.squeaky.field.DataType;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldType_", NULL, 0x12, "Ljava.lang.Class;", NULL, NULL, .constantValue.asLong = 0 },
    { "canBeNull_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "format_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "unique_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "uniqueCombo_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "index_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "uniqueIndex_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "foreignAutoRefresh_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "indexNameBase_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "indexName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "uniqueIndexName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "dataPersister_", NULL, 0x2, "Lco.touchlab.squeaky.field.DataPersister;", NULL, NULL, .constantValue.asLong = 0 },
    { "defaultValue_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "dataTypeConfigObj_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldConverter_", NULL, 0x2, "Lco.touchlab.squeaky.field.FieldConverter;", NULL, NULL, .constantValue.asLong = 0 },
    { "booleanConverter", "booleanConverter", 0x1a, "Lco.touchlab.squeaky.field.FieldConverter;", &CoTouchlabSqueakyFieldFieldType_booleanConverter, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lco.touchlab.squeaky.field.FieldType$BooleanNumberFieldConverter;"};
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldFieldType = { 2, "FieldType", "co.touchlab.squeaky.field", NULL, 0x1, 31, methods, 31, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_CoTouchlabSqueakyFieldFieldType;
}

@end

void CoTouchlabSqueakyFieldFieldType_initWithNSString_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withCoTouchlabSqueakyFieldDataType_withIOSClass_withBoolean_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_withNSString_withNSString_withNSString_withBoolean_(CoTouchlabSqueakyFieldFieldType *self, NSString *indexNameBase, NSString *fieldName, NSString *columnName, jboolean isId, jboolean isGeneratedId, jboolean isForeign, CoTouchlabSqueakyFieldDataType *dataType, IOSClass *fieldType, jboolean canBeNull, NSString *format, jboolean unique, jboolean uniqueCombo, jboolean index, jboolean uniqueIndex, NSString *indexName, NSString *uniqueIndexName, NSString *configDefaultValue, jboolean foreignAutoRefresh) {
  NSObject_init(self);
  self->fieldName_ = fieldName;
  self->indexNameBase_ = indexNameBase;
  self->canBeNull_ = canBeNull;
  self->format_ = format;
  self->unique_ = unique;
  self->uniqueCombo_ = uniqueCombo;
  self->index_ = index;
  self->uniqueIndex_ = uniqueIndex;
  self->indexName_ = indexName;
  self->uniqueIndexName_ = uniqueIndexName;
  self->foreignAutoRefresh_ = foreignAutoRefresh;
  self->dataPersister_ = [((CoTouchlabSqueakyFieldDataType *) nil_chk(dataType)) getDataPersister];
  self->isForeign_ = isForeign;
  self->dataType_ = dataType;
  self->fieldType_ = fieldType;
  self->columnName_ = columnName;
  self->isId_ = isId;
  self->isGeneratedId_ = isGeneratedId;
  if ((self->isId_ || self->isGeneratedId_) && self->isForeign_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Id field ", fieldName, @" cannot also be a foreign object"));
  }
  @try {
    CoTouchlabSqueakyFieldFieldType_assignDataTypeWithCoTouchlabSqueakyFieldDataPersister_withNSString_(self, self->dataPersister_, configDefaultValue);
  }
  @catch (JavaSqlSQLException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
}

CoTouchlabSqueakyFieldFieldType *new_CoTouchlabSqueakyFieldFieldType_initWithNSString_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withCoTouchlabSqueakyFieldDataType_withIOSClass_withBoolean_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_withNSString_withNSString_withNSString_withBoolean_(NSString *indexNameBase, NSString *fieldName, NSString *columnName, jboolean isId, jboolean isGeneratedId, jboolean isForeign, CoTouchlabSqueakyFieldDataType *dataType, IOSClass *fieldType, jboolean canBeNull, NSString *format, jboolean unique, jboolean uniqueCombo, jboolean index, jboolean uniqueIndex, NSString *indexName, NSString *uniqueIndexName, NSString *configDefaultValue, jboolean foreignAutoRefresh) {
  CoTouchlabSqueakyFieldFieldType *self = [CoTouchlabSqueakyFieldFieldType alloc];
  CoTouchlabSqueakyFieldFieldType_initWithNSString_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withCoTouchlabSqueakyFieldDataType_withIOSClass_withBoolean_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_withNSString_withNSString_withNSString_withBoolean_(self, indexNameBase, fieldName, columnName, isId, isGeneratedId, isForeign, dataType, fieldType, canBeNull, format, unique, uniqueCombo, index, uniqueIndex, indexName, uniqueIndexName, configDefaultValue, foreignAutoRefresh);
  return self;
}

CoTouchlabSqueakyFieldFieldType *create_CoTouchlabSqueakyFieldFieldType_initWithNSString_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withCoTouchlabSqueakyFieldDataType_withIOSClass_withBoolean_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_withNSString_withNSString_withNSString_withBoolean_(NSString *indexNameBase, NSString *fieldName, NSString *columnName, jboolean isId, jboolean isGeneratedId, jboolean isForeign, CoTouchlabSqueakyFieldDataType *dataType, IOSClass *fieldType, jboolean canBeNull, NSString *format, jboolean unique, jboolean uniqueCombo, jboolean index, jboolean uniqueIndex, NSString *indexName, NSString *uniqueIndexName, NSString *configDefaultValue, jboolean foreignAutoRefresh) {
  return new_CoTouchlabSqueakyFieldFieldType_initWithNSString_withNSString_withNSString_withBoolean_withBoolean_withBoolean_withCoTouchlabSqueakyFieldDataType_withIOSClass_withBoolean_withNSString_withBoolean_withBoolean_withBoolean_withBoolean_withNSString_withNSString_withNSString_withBoolean_(indexNameBase, fieldName, columnName, isId, isGeneratedId, isForeign, dataType, fieldType, canBeNull, format, unique, uniqueCombo, index, uniqueIndex, indexName, uniqueIndexName, configDefaultValue, foreignAutoRefresh);
}

NSString *CoTouchlabSqueakyFieldFieldType_findIndexNameWithNSString_(CoTouchlabSqueakyFieldFieldType *self, NSString *indexNameBase) {
  if (self->columnName_ == nil) {
    return JreStrcat("$C$$", indexNameBase, '_', self->fieldName_, @"_idx");
  }
  else {
    return JreStrcat("$C$$", indexNameBase, '_', self->columnName_, @"_idx");
  }
}

void CoTouchlabSqueakyFieldFieldType_assignDataTypeWithCoTouchlabSqueakyFieldDataPersister_withNSString_(CoTouchlabSqueakyFieldFieldType *self, id<CoTouchlabSqueakyFieldDataPersister> dataPersister, NSString *defaultStr) {
  dataPersister = [self getDataPersisterWithCoTouchlabSqueakyFieldDataPersister:dataPersister];
  self->dataPersister_ = dataPersister;
  self->fieldConverter_ = [self getFieldConverterWithCoTouchlabSqueakyFieldDataPersister:dataPersister];
  self->dataTypeConfigObj_ = [((id<CoTouchlabSqueakyFieldDataPersister>) nil_chk(dataPersister)) makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:self];
  if (defaultStr == nil) {
    self->defaultValue_ = nil;
  }
  else if (self->isGeneratedId_) {
    @throw new_JavaSqlSQLException_initWithNSString_(JreStrcat("$$$$C", @"Field '", self->fieldName_, @"' cannot be a generatedId and have a default value '", defaultStr, '\''));
  }
  else {
    self->defaultValue_ = [((id<CoTouchlabSqueakyFieldFieldConverter>) nil_chk(self->fieldConverter_)) parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:self withNSString:defaultStr];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldFieldType)

@implementation CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter

- (CoTouchlabSqueakyFieldSqlType *)getSqlType {
  return JreLoadEnum(CoTouchlabSqueakyFieldSqlType, BOOLEAN);
}

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  jboolean bool_ = JavaLangBoolean_parseBooleanWithNSString_(defaultStr);
  return (bool_ ? JavaLangByte_valueOfWithByte_((jbyte) 1) : JavaLangByte_valueOfWithByte_((jbyte) 0));
}

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)obj {
  JavaLangBoolean *bool_ = (JavaLangBoolean *) cast_chk(obj, [JavaLangBoolean class]);
  return ([((JavaLangBoolean *) nil_chk(bool_)) booleanValue] ? JavaLangByte_valueOfWithByte_((jbyte) 1) : JavaLangByte_valueOfWithByte_((jbyte) 0));
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  return JavaLangByte_valueOfWithByte_((jbyte) [((id<AndroidDatabaseCursor>) nil_chk(results)) getShortWithInt:columnPos]);
}

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos {
  jbyte arg = [((JavaLangByte *) nil_chk((JavaLangByte *) cast_chk(sqlArg, [JavaLangByte class]))) charValue];
  return JavaLangBoolean_valueOfWithBoolean_(arg == 1);
}

- (id)resultToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                            withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                              withInt:(jint)columnPos {
  return [self sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:fieldType withId:[self resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:fieldType withAndroidDatabaseCursor:results withInt:columnPos] withInt:columnPos];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getSqlType", NULL, "Lco.touchlab.squeaky.field.SqlType;", 0x1, NULL, NULL },
    { "parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:", "parseDefaultString", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:withId:", "javaToSqlArg", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:", "resultToSqlArg", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:withId:withInt:", "sqlArgToJava", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "resultToJavaWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:", "resultToJava", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "init", NULL, NULL, 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter = { 2, "BooleanNumberFieldConverter", "co.touchlab.squeaky.field", "FieldType", 0xc, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter;
}

@end

void CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_init(CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter *self) {
  CoTouchlabSqueakyFieldBaseFieldConverter_init(self);
}

CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter *new_CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_init() {
  CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter *self = [CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter alloc];
  CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_init(self);
  return self;
}

CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter *create_CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_init() {
  return new_CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldFieldType_BooleanNumberFieldConverter)
