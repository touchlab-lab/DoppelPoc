//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/androidbase/AndroidBase/lib/src/main/java/android/database/AbstractCursor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/database/AbstractCursor.h"
#include "android/database/CharArrayBuffer.h"
#include "android/database/Cursor.h"
#include "android/database/CursorIndexOutOfBoundsException.h"
#include "android/database/CursorWindow.h"
#include "android/database/DataSetObservable.h"
#include "android/database/DataSetObserver.h"
#include "android/database/DatabaseUtils.h"
#include "android/os/Bundle.h"
#include "android/util/Log.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"

@interface AndroidDatabaseAbstractCursor () {
 @public
  id mSelfObserverLock_;
  AndroidDatabaseDataSetObservable *mDataSetObservable_;
  AndroidOsBundle *mExtras_;
}

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor, mSelfObserverLock_, id)
J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor, mDataSetObservable_, AndroidDatabaseDataSetObservable *)
J2OBJC_FIELD_SETTER(AndroidDatabaseAbstractCursor, mExtras_, AndroidOsBundle *)

inline NSString *AndroidDatabaseAbstractCursor_get_TAG();
static NSString *AndroidDatabaseAbstractCursor_TAG = @"Cursor";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseAbstractCursor, TAG, NSString *)

__attribute__((unused)) static jboolean AndroidDatabaseAbstractCursor_moveToPositionWithInt_(AndroidDatabaseAbstractCursor *self, jint position);

@implementation AndroidDatabaseAbstractCursor

- (jint)getCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getColumnNames {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getStringWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jshort)getShortWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getIntWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getLongWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jfloat)getFloatWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getDoubleWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isNullWithInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getTypeWithInt:(jint)column {
  return AndroidDatabaseCursor_FIELD_TYPE_STRING;
}

- (IOSByteArray *)getBlobWithInt:(jint)column {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"getBlob is not supported");
}

- (AndroidDatabaseCursorWindow *)getWindow {
  return nil;
}

- (jint)getColumnCount {
  return ((IOSObjectArray *) nil_chk([self getColumnNames]))->size_;
}

- (void)deactivate {
  [self onDeactivateOrClose];
}

- (void)onDeactivateOrClose {
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) notifyInvalidated];
}

- (jboolean)requery {
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) notifyChanged];
  return true;
}

- (jboolean)isClosed {
  return mClosed_;
}

- (void)close {
  mClosed_ = true;
  [self onDeactivateOrClose];
}

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition {
  return true;
}

- (void)copyStringToBufferWithInt:(jint)columnIndex
withAndroidDatabaseCharArrayBuffer:(AndroidDatabaseCharArrayBuffer *)buffer {
  NSString *result = [self getStringWithInt:columnIndex];
  if (result != nil) {
    IOSCharArray *data = ((AndroidDatabaseCharArrayBuffer *) nil_chk(buffer))->data_;
    if (data == nil || data->size_ < ((jint) [result length])) {
      buffer->data_ = [result toCharArray];
    }
    else {
      [result getChars:0 sourceEnd:((jint) [result length]) destination:data destinationBegin:0];
    }
    buffer->sizeCopied_ = ((jint) [result length]);
  }
  else {
    ((AndroidDatabaseCharArrayBuffer *) nil_chk(buffer))->sizeCopied_ = 0;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseAbstractCursor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getPosition {
  return mPos_;
}

- (jboolean)moveToPositionWithInt:(jint)position {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, position);
}

- (void)fillWindowWithInt:(jint)position
withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window {
  AndroidDatabaseDatabaseUtils_cursorFillWindowWithAndroidDatabaseCursor_withInt_withAndroidDatabaseCursorWindow_(self, position, window);
}

- (jboolean)moveWithInt:(jint)offset {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, mPos_ + offset);
}

- (jboolean)moveToFirst {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, 0);
}

- (jboolean)moveToLast {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, [self getCount] - 1);
}

- (jboolean)moveToNext {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, mPos_ + 1);
}

- (jboolean)moveToPrevious {
  return AndroidDatabaseAbstractCursor_moveToPositionWithInt_(self, mPos_ - 1);
}

- (jboolean)isFirst {
  return mPos_ == 0 && [self getCount] != 0;
}

- (jboolean)isLast {
  jint cnt = [self getCount];
  return mPos_ == (cnt - 1) && cnt != 0;
}

- (jboolean)isBeforeFirst {
  if ([self getCount] == 0) {
    return true;
  }
  return mPos_ == -1;
}

- (jboolean)isAfterLast {
  if ([self getCount] == 0) {
    return true;
  }
  return mPos_ == [self getCount];
}

- (jint)getColumnIndexWithNSString:(NSString *)columnName {
  jint periodIndex = [((NSString *) nil_chk(columnName)) lastIndexOf:'.'];
  if (periodIndex != -1) {
    JavaLangException *e = new_JavaLangException_init();
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(AndroidDatabaseAbstractCursor_TAG, JreStrcat("$$", @"requesting column name with table name -- ", columnName), e);
    columnName = [columnName substring:periodIndex + 1];
  }
  IOSObjectArray *columnNames = [self getColumnNames];
  jint length = ((IOSObjectArray *) nil_chk(columnNames))->size_;
  for (jint i = 0; i < length; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(columnNames, i))) equalsIgnoreCase:columnName]) {
      return i;
    }
  }
  return -1;
}

- (jint)getColumnIndexOrThrowWithNSString:(NSString *)columnName {
  jint index = [self getColumnIndexWithNSString:columnName];
  if (index < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"column '", columnName, @"' does not exist"));
  }
  return index;
}

- (NSString *)getColumnNameWithInt:(jint)columnIndex {
  return IOSObjectArray_Get(nil_chk([self getColumnNames]), columnIndex);
}

- (void)registerDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) registerObserverWithId:observer];
}

- (void)unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:(AndroidDatabaseDataSetObserver *)observer {
  [((AndroidDatabaseDataSetObservable *) nil_chk(mDataSetObservable_)) unregisterObserverWithId:observer];
}

- (jboolean)getWantsAllOnMoveCalls {
  return false;
}

- (void)setExtrasWithAndroidOsBundle:(AndroidOsBundle *)extras {
  mExtras_ = (extras == nil) ? JreLoadStatic(AndroidOsBundle, EMPTY) : extras;
}

- (AndroidOsBundle *)getExtras {
  return mExtras_;
}

- (AndroidOsBundle *)respondWithAndroidOsBundle:(AndroidOsBundle *)extras {
  return JreLoadStatic(AndroidOsBundle, EMPTY);
}

- (jboolean)isFieldUpdatedWithInt:(jint)columnIndex {
  return false;
}

- (id)getUpdatedFieldWithInt:(jint)columnIndex {
  return nil;
}

- (void)checkPosition {
  if (-1 == mPos_ || [self getCount] == mPos_) {
    @throw new_AndroidDatabaseCursorIndexOutOfBoundsException_initWithInt_withInt_(mPos_, [self getCount]);
  }
}

- (void)javaFinalize {
  @try {
    if (!mClosed_) [self close];
  }
  @catch (JavaLangException *e) {
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseAbstractCursor class]);
}

+ (IOSObjectArray *)__annotations_isFieldUpdatedWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getUpdatedFieldWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mPos_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mClosed_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getCount", NULL, "I", 0x401, NULL, NULL },
    { "getColumnNames", NULL, "[Ljava.lang.String;", 0x401, NULL, NULL },
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "getShortWithInt:", "getShort", "S", 0x401, NULL, NULL },
    { "getIntWithInt:", "getInt", "I", 0x401, NULL, NULL },
    { "getLongWithInt:", "getLong", "J", 0x401, NULL, NULL },
    { "getFloatWithInt:", "getFloat", "F", 0x401, NULL, NULL },
    { "getDoubleWithInt:", "getDouble", "D", 0x401, NULL, NULL },
    { "isNullWithInt:", "isNull", "Z", 0x401, NULL, NULL },
    { "getTypeWithInt:", "getType", "I", 0x1, NULL, NULL },
    { "getBlobWithInt:", "getBlob", "[B", 0x1, NULL, NULL },
    { "getWindow", NULL, "Landroid.database.CursorWindow;", 0x1, NULL, NULL },
    { "getColumnCount", NULL, "I", 0x1, NULL, NULL },
    { "deactivate", NULL, "V", 0x1, NULL, NULL },
    { "onDeactivateOrClose", NULL, "V", 0x4, NULL, NULL },
    { "requery", NULL, "Z", 0x1, NULL, NULL },
    { "isClosed", NULL, "Z", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "onMoveWithInt:withInt:", "onMove", "Z", 0x1, NULL, NULL },
    { "copyStringToBufferWithInt:withAndroidDatabaseCharArrayBuffer:", "copyStringToBuffer", "V", 0x1, NULL, NULL },
    { "init", "AbstractCursor", NULL, 0x1, NULL, NULL },
    { "getPosition", NULL, "I", 0x11, NULL, NULL },
    { "moveToPositionWithInt:", "moveToPosition", "Z", 0x11, NULL, NULL },
    { "fillWindowWithInt:withAndroidDatabaseCursorWindow:", "fillWindow", "V", 0x1, NULL, NULL },
    { "moveWithInt:", "move", "Z", 0x11, NULL, NULL },
    { "moveToFirst", NULL, "Z", 0x11, NULL, NULL },
    { "moveToLast", NULL, "Z", 0x11, NULL, NULL },
    { "moveToNext", NULL, "Z", 0x11, NULL, NULL },
    { "moveToPrevious", NULL, "Z", 0x11, NULL, NULL },
    { "isFirst", NULL, "Z", 0x11, NULL, NULL },
    { "isLast", NULL, "Z", 0x11, NULL, NULL },
    { "isBeforeFirst", NULL, "Z", 0x11, NULL, NULL },
    { "isAfterLast", NULL, "Z", 0x11, NULL, NULL },
    { "getColumnIndexWithNSString:", "getColumnIndex", "I", 0x1, NULL, NULL },
    { "getColumnIndexOrThrowWithNSString:", "getColumnIndexOrThrow", "I", 0x1, NULL, NULL },
    { "getColumnNameWithInt:", "getColumnName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "registerDataSetObserverWithAndroidDatabaseDataSetObserver:", "registerDataSetObserver", "V", 0x1, NULL, NULL },
    { "unregisterDataSetObserverWithAndroidDatabaseDataSetObserver:", "unregisterDataSetObserver", "V", 0x1, NULL, NULL },
    { "getWantsAllOnMoveCalls", NULL, "Z", 0x1, NULL, NULL },
    { "setExtrasWithAndroidOsBundle:", "setExtras", "V", 0x1, NULL, NULL },
    { "getExtras", NULL, "Landroid.os.Bundle;", 0x1, NULL, NULL },
    { "respondWithAndroidOsBundle:", "respond", "Landroid.os.Bundle;", 0x1, NULL, NULL },
    { "isFieldUpdatedWithInt:", "isFieldUpdated", "Z", 0x4, NULL, NULL },
    { "getUpdatedFieldWithInt:", "getUpdatedField", "Ljava.lang.Object;", 0x4, NULL, NULL },
    { "checkPosition", NULL, "V", 0x4, NULL, NULL },
    { "javaFinalize", "finalize", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "TAG", 0x1a, "Ljava.lang.String;", &AndroidDatabaseAbstractCursor_TAG, NULL, .constantValue.asLong = 0 },
    { "mPos_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mClosed_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mSelfObserverLock_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "mDataSetObservable_", NULL, 0x12, "Landroid.database.DataSetObservable;", NULL, NULL, .constantValue.asLong = 0 },
    { "mExtras_", NULL, 0x2, "Landroid.os.Bundle;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidDatabaseAbstractCursor = { 2, "AbstractCursor", "android.database", NULL, 0x401, 46, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidDatabaseAbstractCursor;
}

@end

void AndroidDatabaseAbstractCursor_init(AndroidDatabaseAbstractCursor *self) {
  NSObject_init(self);
  self->mSelfObserverLock_ = new_NSObject_init();
  self->mDataSetObservable_ = new_AndroidDatabaseDataSetObservable_init();
  self->mExtras_ = JreLoadStatic(AndroidOsBundle, EMPTY);
  self->mPos_ = -1;
}

jboolean AndroidDatabaseAbstractCursor_moveToPositionWithInt_(AndroidDatabaseAbstractCursor *self, jint position) {
  jint count = [self getCount];
  if (position >= count) {
    self->mPos_ = count;
    return false;
  }
  if (position < 0) {
    self->mPos_ = -1;
    return false;
  }
  if (position == self->mPos_) {
    return true;
  }
  jboolean result = [self onMoveWithInt:self->mPos_ withInt:position];
  if (result == false) {
    self->mPos_ = -1;
  }
  else {
    self->mPos_ = position;
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseAbstractCursor)
