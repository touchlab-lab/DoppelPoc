//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/androidbase/AndroidBase/lib/src/main/java/android/database/sqlite/SQLiteProgram.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/database/DatabaseUtils.h"
#include "android/database/sqlite/SQLiteClosable.h"
#include "android/database/sqlite/SQLiteDatabase.h"
#include "android/database/sqlite/SQLiteProgram.h"
#include "android/database/sqlite/SQLiteSession.h"
#include "android/database/sqlite/SQLiteStatementInfo.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

@interface AndroidDatabaseSqliteSQLiteProgram () {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *mDatabase_;
  NSString *mSql_;
  jboolean mReadOnly_;
  IOSObjectArray *mColumnNames_;
  jint mNumParameters_;
  IOSObjectArray *mBindArgs_;
}

- (void)bindWithInt:(jint)index
             withId:(id)value;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mDatabase_, AndroidDatabaseSqliteSQLiteDatabase *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mSql_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mColumnNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteProgram, mBindArgs_, IOSObjectArray *)

inline IOSObjectArray *AndroidDatabaseSqliteSQLiteProgram_get_EMPTY_STRING_ARRAY();
static IOSObjectArray *AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteProgram, EMPTY_STRING_ARRAY, IOSObjectArray *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(AndroidDatabaseSqliteSQLiteProgram *self, jint index, id value);

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteProgram)

@implementation AndroidDatabaseSqliteSQLiteProgram

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                               withNSString:(NSString *)sql
                                          withNSObjectArray:(IOSObjectArray *)bindArgs {
  AndroidDatabaseSqliteSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, db, sql, bindArgs);
  return self;
}

- (AndroidDatabaseSqliteSQLiteDatabase *)getDatabase {
  return mDatabase_;
}

- (NSString *)getSql {
  return mSql_;
}

- (IOSObjectArray *)getBindArgs {
  return mBindArgs_;
}

- (IOSObjectArray *)getColumnNames {
  return mColumnNames_;
}

- (AndroidDatabaseSqliteSQLiteSession *)getSession {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDatabase_)) getThreadSession];
}

- (jint)getConnectionFlags {
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDatabase_)) getThreadDefaultConnectionFlagsWithBoolean:mReadOnly_];
}

- (void)onCorruption {
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(mDatabase_)) onCorruption];
}

- (jint)getUniqueId {
  return -1;
}

- (void)bindNullWithInt:(jint)index {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, nil);
}

- (void)bindLongWithInt:(jint)index
               withLong:(jlong)value {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, JavaLangLong_valueOfWithLong_(value));
}

- (void)bindDoubleWithInt:(jint)index
               withDouble:(jdouble)value {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, JavaLangDouble_valueOfWithDouble_(value));
}

- (void)bindStringWithInt:(jint)index
             withNSString:(NSString *)value {
  if (value == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"the bind value at index ", index, @" is null"));
  }
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, value);
}

- (void)bindBlobWithInt:(jint)index
          withByteArray:(IOSByteArray *)value {
  if (value == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"the bind value at index ", index, @" is null"));
  }
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, value);
}

- (void)clearBindings {
  if (mBindArgs_ != nil) {
    JavaUtilArrays_fillWithNSObjectArray_withId_(mBindArgs_, nil);
  }
}

- (void)bindAllArgsAsStringsWithNSStringArray:(IOSObjectArray *)bindArgs {
  if (bindArgs != nil) {
    for (jint i = bindArgs->size_; i != 0; i--) {
      [self bindStringWithInt:i withNSString:IOSObjectArray_Get(bindArgs, i - 1)];
    }
  }
}

- (void)onAllReferencesReleased {
  [self clearBindings];
}

- (void)bindWithInt:(jint)index
             withId:(id)value {
  AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(self, index, value);
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteProgram class]) {
    AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY = [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteProgram)
  }
}

+ (IOSObjectArray *)__annotations_getUniqueId {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:withNSObjectArray:", "SQLiteProgram", NULL, 0x0, NULL, NULL },
    { "getDatabase", NULL, "Landroid.database.sqlite.SQLiteDatabase;", 0x10, NULL, NULL },
    { "getSql", NULL, "Ljava.lang.String;", 0x10, NULL, NULL },
    { "getBindArgs", NULL, "[Ljava.lang.Object;", 0x10, NULL, NULL },
    { "getColumnNames", NULL, "[Ljava.lang.String;", 0x10, NULL, NULL },
    { "getSession", NULL, "Landroid.database.sqlite.SQLiteSession;", 0x14, NULL, NULL },
    { "getConnectionFlags", NULL, "I", 0x14, NULL, NULL },
    { "onCorruption", NULL, "V", 0x14, NULL, NULL },
    { "getUniqueId", NULL, "I", 0x11, NULL, NULL },
    { "bindNullWithInt:", "bindNull", "V", 0x1, NULL, NULL },
    { "bindLongWithInt:withLong:", "bindLong", "V", 0x1, NULL, NULL },
    { "bindDoubleWithInt:withDouble:", "bindDouble", "V", 0x1, NULL, NULL },
    { "bindStringWithInt:withNSString:", "bindString", "V", 0x1, NULL, NULL },
    { "bindBlobWithInt:withByteArray:", "bindBlob", "V", 0x1, NULL, NULL },
    { "clearBindings", NULL, "V", 0x1, NULL, NULL },
    { "bindAllArgsAsStringsWithNSStringArray:", "bindAllArgsAsStrings", "V", 0x1, NULL, NULL },
    { "onAllReferencesReleased", NULL, "V", 0x4, NULL, NULL },
    { "bindWithInt:withId:", "bind", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_STRING_ARRAY", "EMPTY_STRING_ARRAY", 0x1a, "[Ljava.lang.String;", &AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY, NULL, .constantValue.asLong = 0 },
    { "mDatabase_", NULL, 0x12, "Landroid.database.sqlite.SQLiteDatabase;", NULL, NULL, .constantValue.asLong = 0 },
    { "mSql_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mReadOnly_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mColumnNames_", NULL, 0x12, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mNumParameters_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mBindArgs_", NULL, 0x12, "[Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteProgram = { 2, "SQLiteProgram", "android.database.sqlite", NULL, 0x401, 18, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteProgram;
}

@end

void AndroidDatabaseSqliteSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteProgram *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql, IOSObjectArray *bindArgs) {
  AndroidDatabaseSqliteSQLiteClosable_init(self);
  self->mDatabase_ = db;
  self->mSql_ = [((NSString *) nil_chk(sql)) trim];
  jint n = AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(self->mSql_);
  {
    jboolean assumeReadOnly;
    AndroidDatabaseSqliteSQLiteStatementInfo *info;
    switch (n) {
      case AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN:
      case AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT:
      case AndroidDatabaseDatabaseUtils_STATEMENT_ABORT:
      self->mReadOnly_ = false;
      self->mColumnNames_ = AndroidDatabaseSqliteSQLiteProgram_EMPTY_STRING_ARRAY;
      self->mNumParameters_ = 0;
      break;
      default:
      assumeReadOnly = (n == AndroidDatabaseDatabaseUtils_STATEMENT_SELECT);
      info = new_AndroidDatabaseSqliteSQLiteStatementInfo_init();
      [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) getThreadSession])) prepareWithNSString:self->mSql_ withInt:[db getThreadDefaultConnectionFlagsWithBoolean:assumeReadOnly] withAndroidDatabaseSqliteSQLiteStatementInfo:info];
      self->mReadOnly_ = info->readOnly_;
      self->mColumnNames_ = info->columnNames_;
      self->mNumParameters_ = info->numParameters_;
      break;
    }
  }
  if (bindArgs != nil && bindArgs->size_ > self->mNumParameters_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$", @"Too many bind arguments.  ", bindArgs->size_, @" arguments were provided but the statement needs ", self->mNumParameters_, @" arguments."));
  }
  if (self->mNumParameters_ != 0) {
    self->mBindArgs_ = [IOSObjectArray newArrayWithLength:self->mNumParameters_ type:NSObject_class_()];
    if (bindArgs != nil) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bindArgs, 0, self->mBindArgs_, 0, bindArgs->size_);
    }
  }
  else {
    self->mBindArgs_ = nil;
  }
}

void AndroidDatabaseSqliteSQLiteProgram_bindWithInt_withId_(AndroidDatabaseSqliteSQLiteProgram *self, jint index, id value) {
  if (index < 1 || index > self->mNumParameters_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$", @"Cannot bind argument at index ", index, @" because the index is out of range.  The statement has ", self->mNumParameters_, @" parameters."));
  }
  (void) IOSObjectArray_Set(nil_chk(self->mBindArgs_), index - 1, value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteProgram)
