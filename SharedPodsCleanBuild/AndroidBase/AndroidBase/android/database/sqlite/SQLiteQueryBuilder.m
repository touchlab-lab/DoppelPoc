//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/androidbase/AndroidBase/lib/src/main/java/android/database/sqlite/SQLiteQueryBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/database/Cursor.h"
#include "android/database/DatabaseUtils.h"
#include "android/database/sqlite/SQLiteDatabase.h"
#include "android/database/sqlite/SQLiteQueryBuilder.h"
#include "android/database/sqlite/SQLiteSession.h"
#include "android/provider/BaseColumns.h"
#include "android/text/TextUtils.h"
#include "android/util/Log.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface AndroidDatabaseSqliteSQLiteQueryBuilder () {
 @public
  id<JavaUtilMap> mProjectionMap_;
  NSString *mTables_;
  JavaLangStringBuilder *mWhereClause_;
  jboolean mDistinct_;
  id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> mFactory_;
  jboolean mStrict_;
}

+ (void)appendClauseWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)clause;

- (void)validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)sql;

- (IOSObjectArray *)computeProjectionWithNSStringArray:(IOSObjectArray *)projectionIn;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteQueryBuilder, mProjectionMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteQueryBuilder, mTables_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteQueryBuilder, mWhereClause_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteQueryBuilder, mFactory_, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)

inline NSString *AndroidDatabaseSqliteSQLiteQueryBuilder_get_TAG();
static NSString *AndroidDatabaseSqliteSQLiteQueryBuilder_TAG = @"SQLiteQueryBuilder";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteQueryBuilder, TAG, NSString *)

inline JavaUtilRegexPattern *AndroidDatabaseSqliteSQLiteQueryBuilder_get_sLimitPattern();
static JavaUtilRegexPattern *AndroidDatabaseSqliteSQLiteQueryBuilder_sLimitPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteQueryBuilder, sLimitPattern, JavaUtilRegexPattern *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *s, NSString *name, NSString *clause);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteQueryBuilder_validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteQueryBuilder *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql);

__attribute__((unused)) static IOSObjectArray *AndroidDatabaseSqliteSQLiteQueryBuilder_computeProjectionWithNSStringArray_(AndroidDatabaseSqliteSQLiteQueryBuilder *self, IOSObjectArray *projectionIn);

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteQueryBuilder)

@implementation AndroidDatabaseSqliteSQLiteQueryBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseSqliteSQLiteQueryBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setDistinctWithBoolean:(jboolean)distinct {
  mDistinct_ = distinct;
}

- (NSString *)getTables {
  return mTables_;
}

- (void)setTablesWithNSString:(NSString *)inTables {
  mTables_ = inTables;
}

- (void)appendWhereWithJavaLangCharSequence:(id<JavaLangCharSequence>)inWhere {
  if (mWhereClause_ == nil) {
    mWhereClause_ = new_JavaLangStringBuilder_initWithInt_([((id<JavaLangCharSequence>) nil_chk(inWhere)) length] + 16);
  }
  if ([((JavaLangStringBuilder *) nil_chk(mWhereClause_)) length] == 0) {
    (void) [mWhereClause_ appendWithChar:'('];
  }
  (void) [mWhereClause_ appendWithJavaLangCharSequence:inWhere];
}

- (void)appendWhereEscapeStringWithNSString:(NSString *)inWhere {
  if (mWhereClause_ == nil) {
    mWhereClause_ = new_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(inWhere)) length]) + 16);
  }
  if ([((JavaLangStringBuilder *) nil_chk(mWhereClause_)) length] == 0) {
    (void) [mWhereClause_ appendWithChar:'('];
  }
  AndroidDatabaseDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(mWhereClause_, inWhere);
}

- (void)setProjectionMapWithJavaUtilMap:(id<JavaUtilMap>)columnMap {
  mProjectionMap_ = columnMap;
}

- (void)setCursorFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  mFactory_ = factory;
}

- (void)setStrictWithBoolean:(jboolean)flag {
  mStrict_ = flag;
}

+ (NSString *)buildQueryStringWithBoolean:(jboolean)distinct
                             withNSString:(NSString *)tables
                        withNSStringArray:(IOSObjectArray *)columns
                             withNSString:(NSString *)where
                             withNSString:(NSString *)groupBy
                             withNSString:(NSString *)having
                             withNSString:(NSString *)orderBy
                             withNSString:(NSString *)limit {
  return AndroidDatabaseSqliteSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(distinct, tables, columns, where, groupBy, having, orderBy, limit);
}

+ (void)appendClauseWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)clause {
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(s, name, clause);
}

+ (void)appendColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                             withNSStringArray:(IOSObjectArray *)columns {
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(s, columns);
}

- (id<AndroidDatabaseCursor>)queryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                        withNSStringArray:(IOSObjectArray *)projectionIn
                                                             withNSString:(NSString *)selection
                                                        withNSStringArray:(IOSObjectArray *)selectionArgs
                                                             withNSString:(NSString *)groupBy
                                                             withNSString:(NSString *)having
                                                             withNSString:(NSString *)sortOrder {
  return [self queryWithAndroidDatabaseSqliteSQLiteDatabase:db withNSStringArray:projectionIn withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:sortOrder withNSString:nil];
}

- (id<AndroidDatabaseCursor>)queryWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                        withNSStringArray:(IOSObjectArray *)projectionIn
                                                             withNSString:(NSString *)selection
                                                        withNSStringArray:(IOSObjectArray *)selectionArgs
                                                             withNSString:(NSString *)groupBy
                                                             withNSString:(NSString *)having
                                                             withNSString:(NSString *)sortOrder
                                                             withNSString:(NSString *)limit {
  if (mTables_ == nil) {
    return nil;
  }
  if (mStrict_ && selection != nil && ((jint) [selection length]) > 0) {
    NSString *sqlForValidation = [self buildQueryWithNSStringArray:projectionIn withNSString:JreStrcat("C$C", '(', selection, ')') withNSString:groupBy withNSString:having withNSString:sortOrder withNSString:limit];
    AndroidDatabaseSqliteSQLiteQueryBuilder_validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(self, db, sqlForValidation);
  }
  NSString *sql = [self buildQueryWithNSStringArray:projectionIn withNSString:selection withNSString:groupBy withNSString:having withNSString:sortOrder withNSString:limit];
  if (AndroidUtilLog_isLoggableWithNSString_withInt_(AndroidDatabaseSqliteSQLiteQueryBuilder_TAG, AndroidUtilLog_DEBUG)) {
    AndroidUtilLog_dWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteQueryBuilder_TAG, JreStrcat("$$", @"Performing query: ", sql));
  }
  return [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:mFactory_ withNSString:sql withNSStringArray:selectionArgs withNSString:AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(mTables_)];
}

- (void)validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                                   withNSString:(NSString *)sql {
  AndroidDatabaseSqliteSQLiteQueryBuilder_validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(self, db, sql);
}

- (NSString *)buildQueryWithNSStringArray:(IOSObjectArray *)projectionIn
                             withNSString:(NSString *)selection
                             withNSString:(NSString *)groupBy
                             withNSString:(NSString *)having
                             withNSString:(NSString *)sortOrder
                             withNSString:(NSString *)limit {
  IOSObjectArray *projection = AndroidDatabaseSqliteSQLiteQueryBuilder_computeProjectionWithNSStringArray_(self, projectionIn);
  JavaLangStringBuilder *where = new_JavaLangStringBuilder_init();
  jboolean hasBaseWhereClause = mWhereClause_ != nil && [mWhereClause_ length] > 0;
  if (hasBaseWhereClause) {
    (void) [where appendWithNSString:[((JavaLangStringBuilder *) nil_chk(mWhereClause_)) description]];
    (void) [where appendWithChar:')'];
  }
  if (selection != nil && ((jint) [selection length]) > 0) {
    if (hasBaseWhereClause) {
      (void) [where appendWithNSString:@" AND "];
    }
    (void) [where appendWithChar:'('];
    (void) [where appendWithNSString:selection];
    (void) [where appendWithChar:')'];
  }
  return AndroidDatabaseSqliteSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(mDistinct_, mTables_, projection, [where description], groupBy, having, sortOrder, limit);
}

- (NSString *)buildQueryWithNSStringArray:(IOSObjectArray *)projectionIn
                             withNSString:(NSString *)selection
                        withNSStringArray:(IOSObjectArray *)selectionArgs
                             withNSString:(NSString *)groupBy
                             withNSString:(NSString *)having
                             withNSString:(NSString *)sortOrder
                             withNSString:(NSString *)limit {
  return [self buildQueryWithNSStringArray:projectionIn withNSString:selection withNSString:groupBy withNSString:having withNSString:sortOrder withNSString:limit];
}

- (NSString *)buildUnionSubQueryWithNSString:(NSString *)typeDiscriminatorColumn
                           withNSStringArray:(IOSObjectArray *)unionColumns
                             withJavaUtilSet:(id<JavaUtilSet>)columnsPresentInTable
                                     withInt:(jint)computedColumnsOffset
                                withNSString:(NSString *)typeDiscriminatorValue
                                withNSString:(NSString *)selection
                                withNSString:(NSString *)groupBy
                                withNSString:(NSString *)having {
  jint unionColumnsCount = ((IOSObjectArray *) nil_chk(unionColumns))->size_;
  IOSObjectArray *projectionIn = [IOSObjectArray newArrayWithLength:unionColumnsCount type:NSString_class_()];
  for (jint i = 0; i < unionColumnsCount; i++) {
    NSString *unionColumn = IOSObjectArray_Get(unionColumns, i);
    if ([((NSString *) nil_chk(unionColumn)) isEqual:typeDiscriminatorColumn]) {
      (void) IOSObjectArray_Set(projectionIn, i, JreStrcat("C$$$", '\'', typeDiscriminatorValue, @"' AS ", typeDiscriminatorColumn));
    }
    else if (i <= computedColumnsOffset || [((id<JavaUtilSet>) nil_chk(columnsPresentInTable)) containsWithId:unionColumn]) {
      (void) IOSObjectArray_Set(projectionIn, i, unionColumn);
    }
    else {
      (void) IOSObjectArray_Set(projectionIn, i, JreStrcat("$$", @"NULL AS ", unionColumn));
    }
  }
  return [self buildQueryWithNSStringArray:projectionIn withNSString:selection withNSString:groupBy withNSString:having withNSString:nil withNSString:nil];
}

- (NSString *)buildUnionSubQueryWithNSString:(NSString *)typeDiscriminatorColumn
                           withNSStringArray:(IOSObjectArray *)unionColumns
                             withJavaUtilSet:(id<JavaUtilSet>)columnsPresentInTable
                                     withInt:(jint)computedColumnsOffset
                                withNSString:(NSString *)typeDiscriminatorValue
                                withNSString:(NSString *)selection
                           withNSStringArray:(IOSObjectArray *)selectionArgs
                                withNSString:(NSString *)groupBy
                                withNSString:(NSString *)having {
  return [self buildUnionSubQueryWithNSString:typeDiscriminatorColumn withNSStringArray:unionColumns withJavaUtilSet:columnsPresentInTable withInt:computedColumnsOffset withNSString:typeDiscriminatorValue withNSString:selection withNSString:groupBy withNSString:having];
}

- (NSString *)buildUnionQueryWithNSStringArray:(IOSObjectArray *)subQueries
                                  withNSString:(NSString *)sortOrder
                                  withNSString:(NSString *)limit {
  JavaLangStringBuilder *query = new_JavaLangStringBuilder_initWithInt_(128);
  jint subQueryCount = ((IOSObjectArray *) nil_chk(subQueries))->size_;
  NSString *unionOperator = mDistinct_ ? @" UNION " : @" UNION ALL ";
  for (jint i = 0; i < subQueryCount; i++) {
    if (i > 0) {
      (void) [query appendWithNSString:unionOperator];
    }
    (void) [query appendWithNSString:IOSObjectArray_Get(subQueries, i)];
  }
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" ORDER BY ", sortOrder);
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" LIMIT ", limit);
  return [query description];
}

- (IOSObjectArray *)computeProjectionWithNSStringArray:(IOSObjectArray *)projectionIn {
  return AndroidDatabaseSqliteSQLiteQueryBuilder_computeProjectionWithNSStringArray_(self, projectionIn);
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteQueryBuilder class]) {
    AndroidDatabaseSqliteSQLiteQueryBuilder_sLimitPattern = JavaUtilRegexPattern_compileWithNSString_(@"\\s*\\d+\\s*(,\\s*\\d+\\s*)?");
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteQueryBuilder)
  }
}

+ (IOSObjectArray *)__annotations_buildQueryWithNSStringArray_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_buildUnionSubQueryWithNSString_withNSStringArray_withJavaUtilSet_withInt_withNSString_withNSString_withNSStringArray_withNSString_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SQLiteQueryBuilder", NULL, 0x1, NULL, NULL },
    { "setDistinctWithBoolean:", "setDistinct", "V", 0x1, NULL, NULL },
    { "getTables", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setTablesWithNSString:", "setTables", "V", 0x1, NULL, NULL },
    { "appendWhereWithJavaLangCharSequence:", "appendWhere", "V", 0x1, NULL, NULL },
    { "appendWhereEscapeStringWithNSString:", "appendWhereEscapeString", "V", 0x1, NULL, NULL },
    { "setProjectionMapWithJavaUtilMap:", "setProjectionMap", "V", 0x1, NULL, "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V" },
    { "setCursorFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:", "setCursorFactory", "V", 0x1, NULL, NULL },
    { "setStrictWithBoolean:", "setStrict", "V", 0x1, NULL, NULL },
    { "buildQueryStringWithBoolean:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:withNSString:", "buildQueryString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "appendClauseWithJavaLangStringBuilder:withNSString:withNSString:", "appendClause", "V", 0xa, NULL, NULL },
    { "appendColumnsWithJavaLangStringBuilder:withNSStringArray:", "appendColumns", "V", 0x9, NULL, NULL },
    { "queryWithAndroidDatabaseSqliteSQLiteDatabase:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:", "query", "Landroid.database.Cursor;", 0x1, NULL, NULL },
    { "queryWithAndroidDatabaseSqliteSQLiteDatabase:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:", "query", "Landroid.database.Cursor;", 0x1, NULL, NULL },
    { "validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:", "validateQuerySql", "V", 0x2, NULL, NULL },
    { "buildQueryWithNSStringArray:withNSString:withNSString:withNSString:withNSString:withNSString:", "buildQuery", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "buildQueryWithNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:", "buildQuery", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "buildUnionSubQueryWithNSString:withNSStringArray:withJavaUtilSet:withInt:withNSString:withNSString:withNSString:withNSString:", "buildUnionSubQuery", "Ljava.lang.String;", 0x1, NULL, "(Ljava/lang/String;[Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;" },
    { "buildUnionSubQueryWithNSString:withNSStringArray:withJavaUtilSet:withInt:withNSString:withNSString:withNSStringArray:withNSString:withNSString:", "buildUnionSubQuery", "Ljava.lang.String;", 0x1, NULL, "(Ljava/lang/String;[Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;ILjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;" },
    { "buildUnionQueryWithNSStringArray:withNSString:withNSString:", "buildUnionQuery", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "computeProjectionWithNSStringArray:", "computeProjection", "[Ljava.lang.String;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "TAG", 0x1a, "Ljava.lang.String;", &AndroidDatabaseSqliteSQLiteQueryBuilder_TAG, NULL, .constantValue.asLong = 0 },
    { "sLimitPattern", "sLimitPattern", 0x1a, "Ljava.util.regex.Pattern;", &AndroidDatabaseSqliteSQLiteQueryBuilder_sLimitPattern, NULL, .constantValue.asLong = 0 },
    { "mProjectionMap_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "mTables_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mWhereClause_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "mDistinct_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mFactory_", NULL, 0x2, "Landroid.database.sqlite.SQLiteDatabase$CursorFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "mStrict_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteQueryBuilder = { 2, "SQLiteQueryBuilder", "android.database.sqlite", NULL, 0x1, 21, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteQueryBuilder;
}

@end

void AndroidDatabaseSqliteSQLiteQueryBuilder_init(AndroidDatabaseSqliteSQLiteQueryBuilder *self) {
  NSObject_init(self);
  self->mProjectionMap_ = nil;
  self->mTables_ = @"";
  self->mWhereClause_ = nil;
  self->mDistinct_ = false;
  self->mFactory_ = nil;
}

AndroidDatabaseSqliteSQLiteQueryBuilder *new_AndroidDatabaseSqliteSQLiteQueryBuilder_init() {
  AndroidDatabaseSqliteSQLiteQueryBuilder *self = [AndroidDatabaseSqliteSQLiteQueryBuilder alloc];
  AndroidDatabaseSqliteSQLiteQueryBuilder_init(self);
  return self;
}

AndroidDatabaseSqliteSQLiteQueryBuilder *create_AndroidDatabaseSqliteSQLiteQueryBuilder_init() {
  return new_AndroidDatabaseSqliteSQLiteQueryBuilder_init();
}

NSString *AndroidDatabaseSqliteSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(jboolean distinct, NSString *tables, IOSObjectArray *columns, NSString *where, NSString *groupBy, NSString *having, NSString *orderBy, NSString *limit) {
  AndroidDatabaseSqliteSQLiteQueryBuilder_initialize();
  if (AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(groupBy) && !AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(having)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"HAVING clauses are only permitted when using a groupBy clause");
  }
  if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(limit) && ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(AndroidDatabaseSqliteSQLiteQueryBuilder_sLimitPattern)) matcherWithJavaLangCharSequence:limit])) matches]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid LIMIT clauses:", limit));
  }
  JavaLangStringBuilder *query = new_JavaLangStringBuilder_initWithInt_(120);
  (void) [query appendWithNSString:@"SELECT "];
  if (distinct) {
    (void) [query appendWithNSString:@"DISTINCT "];
  }
  if (columns != nil && columns->size_ != 0) {
    AndroidDatabaseSqliteSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(query, columns);
  }
  else {
    (void) [query appendWithNSString:@"* "];
  }
  (void) [query appendWithNSString:@"FROM "];
  (void) [query appendWithNSString:tables];
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" WHERE ", where);
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" GROUP BY ", groupBy);
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" HAVING ", having);
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" ORDER BY ", orderBy);
  AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(query, @" LIMIT ", limit);
  return [query description];
}

void AndroidDatabaseSqliteSQLiteQueryBuilder_appendClauseWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *s, NSString *name, NSString *clause) {
  AndroidDatabaseSqliteSQLiteQueryBuilder_initialize();
  if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(clause)) {
    (void) [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:name];
    (void) [s appendWithNSString:clause];
  }
}

void AndroidDatabaseSqliteSQLiteQueryBuilder_appendColumnsWithJavaLangStringBuilder_withNSStringArray_(JavaLangStringBuilder *s, IOSObjectArray *columns) {
  AndroidDatabaseSqliteSQLiteQueryBuilder_initialize();
  jint n = ((IOSObjectArray *) nil_chk(columns))->size_;
  for (jint i = 0; i < n; i++) {
    NSString *column = IOSObjectArray_Get(columns, i);
    if (column != nil) {
      if (i > 0) {
        (void) [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:@", "];
      }
      (void) [((JavaLangStringBuilder *) nil_chk(s)) appendWithNSString:column];
    }
  }
  (void) [((JavaLangStringBuilder *) nil_chk(s)) appendWithChar:' '];
}

void AndroidDatabaseSqliteSQLiteQueryBuilder_validateQuerySqlWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteQueryBuilder *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *sql) {
  [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk(db)) getThreadSession])) prepareWithNSString:sql withInt:[db getThreadDefaultConnectionFlagsWithBoolean:true] withAndroidDatabaseSqliteSQLiteStatementInfo:nil];
}

IOSObjectArray *AndroidDatabaseSqliteSQLiteQueryBuilder_computeProjectionWithNSStringArray_(AndroidDatabaseSqliteSQLiteQueryBuilder *self, IOSObjectArray *projectionIn) {
  if (projectionIn != nil && projectionIn->size_ > 0) {
    if (self->mProjectionMap_ != nil) {
      IOSObjectArray *projection = [IOSObjectArray newArrayWithLength:projectionIn->size_ type:NSString_class_()];
      jint length = projectionIn->size_;
      for (jint i = 0; i < length; i++) {
        NSString *userColumn = IOSObjectArray_Get(projectionIn, i);
        NSString *column = [self->mProjectionMap_ getWithId:userColumn];
        if (column != nil) {
          (void) IOSObjectArray_Set(projection, i, column);
          continue;
        }
        if (!self->mStrict_ && ([((NSString *) nil_chk(userColumn)) contains:@" AS "] || [userColumn contains:@" as "])) {
          (void) IOSObjectArray_Set(projection, i, userColumn);
          continue;
        }
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid column ", IOSObjectArray_Get(projectionIn, i)));
      }
      return projection;
    }
    else {
      return projectionIn;
    }
  }
  else if (self->mProjectionMap_ != nil) {
    id<JavaUtilSet> entrySet = [self->mProjectionMap_ entrySet];
    IOSObjectArray *projection = [IOSObjectArray newArrayWithLength:[((id<JavaUtilSet>) nil_chk(entrySet)) size] type:NSString_class_()];
    id<JavaUtilIterator> entryIter = [entrySet iterator];
    jint i = 0;
    while ([((id<JavaUtilIterator>) nil_chk(entryIter)) hasNext]) {
      id<JavaUtilMap_Entry> entry_ = [entryIter next];
      if ([((NSString *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])) isEqual:AndroidProviderBaseColumns__COUNT]) {
        continue;
      }
      (void) IOSObjectArray_Set(projection, i++, [entry_ getValue]);
    }
    return projection;
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteQueryBuilder)
