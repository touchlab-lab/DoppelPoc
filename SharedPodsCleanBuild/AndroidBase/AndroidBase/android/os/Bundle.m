//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/androidbase/AndroidBase/lib/src/main/java/android/os/Bundle.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/os/Bundle.h"
#include "android/util/Log.h"
#include "java/io/Serializable.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface AndroidOsBundle () {
 @public
  jboolean mHasFds_;
  jboolean mFdsKnown_;
  jboolean mAllowFds_;
  JavaLangClassLoader *mClassLoader_;
}

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
                         withId:(id)defaultValue
 withJavaLangClassCastException:(JavaLangClassCastException *)e;

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
 withJavaLangClassCastException:(JavaLangClassCastException *)e;

@end

J2OBJC_FIELD_SETTER(AndroidOsBundle, mClassLoader_, JavaLangClassLoader *)

inline NSString *AndroidOsBundle_get_LOG_TAG();
static NSString *AndroidOsBundle_LOG_TAG = @"Bundle";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidOsBundle, LOG_TAG, NSString *)

__attribute__((unused)) static void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, id defaultValue, JavaLangClassCastException *e);

__attribute__((unused)) static void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, JavaLangClassCastException *e);

J2OBJC_INITIALIZED_DEFN(AndroidOsBundle)

AndroidOsBundle *AndroidOsBundle_EMPTY;

@implementation AndroidOsBundle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidOsBundle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  AndroidOsBundle_initWithJavaLangClassLoader_(self, loader);
  return self;
}

- (instancetype)initWithInt:(jint)capacity {
  AndroidOsBundle_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithAndroidOsBundle:(AndroidOsBundle *)b {
  AndroidOsBundle_initWithAndroidOsBundle_(self, b);
  return self;
}

+ (AndroidOsBundle *)forPairWithNSString:(NSString *)key
                            withNSString:(NSString *)value {
  return AndroidOsBundle_forPairWithNSString_withNSString_(key, value);
}

- (NSString *)getPairValue {
  jint size = [((id<JavaUtilMap>) nil_chk(mMap_)) size];
  if (size > 1) {
    AndroidUtilLog_wWithNSString_withNSString_(AndroidOsBundle_LOG_TAG, @"getPairValue() used on Bundle with multiple pairs.");
  }
  if (size == 0) {
    return nil;
  }
  id o = [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk([mMap_ values])) iterator])) next];
  @try {
    return (NSString *) cast_chk(o, [NSString class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, @"getPairValue()", o, @"String", e);
    return nil;
  }
}

- (void)setClassLoaderWithJavaLangClassLoader:(JavaLangClassLoader *)loader {
  mClassLoader_ = loader;
}

- (JavaLangClassLoader *)getClassLoader {
  return mClassLoader_;
}

- (jboolean)setAllowFdsWithBoolean:(jboolean)allowFds {
  jboolean orig = mAllowFds_;
  mAllowFds_ = allowFds;
  return orig;
}

- (id)clone {
  return new_AndroidOsBundle_initWithAndroidOsBundle_(self);
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) size];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) isEmpty];
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(mMap_)) clear];
  mHasFds_ = false;
  mFdsKnown_ = true;
}

- (jboolean)containsKeyWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) containsKeyWithId:key];
}

- (id)getWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
}

- (void)removeWithNSString:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) removeWithId:key];
}

- (void)putAllWithAndroidOsBundle:(AndroidOsBundle *)map {
  [((id<JavaUtilMap>) nil_chk(((AndroidOsBundle *) nil_chk(map))->mMap_)) putAllWithJavaUtilMap:map->mMap_];
  mHasFds_ |= map->mHasFds_;
  mFdsKnown_ = (mFdsKnown_ && map->mFdsKnown_);
}

- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(mMap_)) keySet];
}

- (void)putBooleanWithNSString:(NSString *)key
                   withBoolean:(jboolean)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangBoolean_valueOfWithBoolean_(value)];
}

- (void)putByteWithNSString:(NSString *)key
                   withByte:(jbyte)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangByte_valueOfWithByte_(value)];
}

- (void)putCharWithNSString:(NSString *)key
                   withChar:(jchar)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangCharacter_valueOfWithChar_(value)];
}

- (void)putShortWithNSString:(NSString *)key
                   withShort:(jshort)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangShort_valueOfWithShort_(value)];
}

- (void)putIntWithNSString:(NSString *)key
                   withInt:(jint)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangInteger_valueOfWithInt_(value)];
}

- (void)putLongWithNSString:(NSString *)key
                   withLong:(jlong)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangLong_valueOfWithLong_(value)];
}

- (void)putFloatWithNSString:(NSString *)key
                   withFloat:(jfloat)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangFloat_valueOfWithFloat_(value)];
}

- (void)putDoubleWithNSString:(NSString *)key
                   withDouble:(jdouble)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:JavaLangDouble_valueOfWithDouble_(value)];
}

- (void)putStringWithNSString:(NSString *)key
                 withNSString:(NSString *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharSequenceWithNSString:(NSString *)key
           withJavaLangCharSequence:(id<JavaLangCharSequence>)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putIntegerArrayListWithNSString:(NSString *)key
                  withJavaUtilArrayList:(JavaUtilArrayList *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putStringArrayListWithNSString:(NSString *)key
                 withJavaUtilArrayList:(JavaUtilArrayList *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharSequenceArrayListWithNSString:(NSString *)key
                       withJavaUtilArrayList:(JavaUtilArrayList *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putSerializableWithNSString:(NSString *)key
             withJavaIoSerializable:(id<JavaIoSerializable>)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putBooleanArrayWithNSString:(NSString *)key
                   withBooleanArray:(IOSBooleanArray *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putByteArrayWithNSString:(NSString *)key
                   withByteArray:(IOSByteArray *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putShortArrayWithNSString:(NSString *)key
                   withShortArray:(IOSShortArray *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharArrayWithNSString:(NSString *)key
                   withCharArray:(IOSCharArray *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putIntArrayWithNSString:(NSString *)key
                   withIntArray:(IOSIntArray *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putLongArrayWithNSString:(NSString *)key
                   withLongArray:(IOSLongArray *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putFloatArrayWithNSString:(NSString *)key
                   withFloatArray:(IOSFloatArray *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putDoubleArrayWithNSString:(NSString *)key
                   withDoubleArray:(IOSDoubleArray *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putStringArrayWithNSString:(NSString *)key
                 withNSStringArray:(IOSObjectArray *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putCharSequenceArrayWithNSString:(NSString *)key
           withJavaLangCharSequenceArray:(IOSObjectArray *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (void)putBundleWithNSString:(NSString *)key
          withAndroidOsBundle:(AndroidOsBundle *)value {
  (void) [((id<JavaUtilMap>) nil_chk(mMap_)) putWithId:key withId:value];
}

- (jboolean)getBooleanWithNSString:(NSString *)key {
  return [self getBooleanWithNSString:key withBoolean:false];
}

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
                         withId:(id)defaultValue
 withJavaLangClassCastException:(JavaLangClassCastException *)e {
  AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, value, className_, defaultValue, e);
}

- (void)typeWarningWithNSString:(NSString *)key
                         withId:(id)value
                   withNSString:(NSString *)className_
 withJavaLangClassCastException:(JavaLangClassCastException *)e {
  AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, value, className_, e);
}

- (jboolean)getBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(o, [JavaLangBoolean class]))) booleanValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Boolean", JavaLangBoolean_valueOfWithBoolean_(defaultValue), e);
    return defaultValue;
  }
}

- (jbyte)getByteWithNSString:(NSString *)key {
  return [((JavaLangByte *) nil_chk([self getByteWithNSString:key withByte:(jbyte) 0])) charValue];
}

- (JavaLangByte *)getByteWithNSString:(NSString *)key
                             withByte:(jbyte)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return JavaLangByte_valueOfWithByte_(defaultValue);
  }
  @try {
    return (JavaLangByte *) cast_chk(o, [JavaLangByte class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Byte", JavaLangByte_valueOfWithByte_(defaultValue), e);
    return JavaLangByte_valueOfWithByte_(defaultValue);
  }
}

- (jchar)getCharWithNSString:(NSString *)key {
  return [self getCharWithNSString:key withChar:(jchar) 0];
}

- (jchar)getCharWithNSString:(NSString *)key
                    withChar:(jchar)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [((JavaLangCharacter *) nil_chk((JavaLangCharacter *) cast_chk(o, [JavaLangCharacter class]))) charValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Character", JavaLangCharacter_valueOfWithChar_(defaultValue), e);
    return defaultValue;
  }
}

- (jshort)getShortWithNSString:(NSString *)key {
  return [self getShortWithNSString:key withShort:(jshort) 0];
}

- (jshort)getShortWithNSString:(NSString *)key
                     withShort:(jshort)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [((JavaLangShort *) nil_chk((JavaLangShort *) cast_chk(o, [JavaLangShort class]))) shortValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Short", JavaLangShort_valueOfWithShort_(defaultValue), e);
    return defaultValue;
  }
}

- (jint)getIntWithNSString:(NSString *)key {
  return [self getIntWithNSString:key withInt:0];
}

- (jint)getIntWithNSString:(NSString *)key
                   withInt:(jint)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(o, [JavaLangInteger class]))) intValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Integer", JavaLangInteger_valueOfWithInt_(defaultValue), e);
    return defaultValue;
  }
}

- (jlong)getLongWithNSString:(NSString *)key {
  return [self getLongWithNSString:key withLong:0LL];
}

- (jlong)getLongWithNSString:(NSString *)key
                    withLong:(jlong)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk(o, [JavaLangLong class]))) longLongValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Long", JavaLangLong_valueOfWithLong_(defaultValue), e);
    return defaultValue;
  }
}

- (jfloat)getFloatWithNSString:(NSString *)key {
  return [self getFloatWithNSString:key withFloat:0.0f];
}

- (jfloat)getFloatWithNSString:(NSString *)key
                     withFloat:(jfloat)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(o, [JavaLangFloat class]))) floatValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Float", JavaLangFloat_valueOfWithFloat_(defaultValue), e);
    return defaultValue;
  }
}

- (jdouble)getDoubleWithNSString:(NSString *)key {
  return [self getDoubleWithNSString:key withDouble:0.0];
}

- (jdouble)getDoubleWithNSString:(NSString *)key
                      withDouble:(jdouble)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return [((JavaLangDouble *) nil_chk((JavaLangDouble *) cast_chk(o, [JavaLangDouble class]))) doubleValue];
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, o, @"Double", JavaLangDouble_valueOfWithDouble_(defaultValue), e);
    return defaultValue;
  }
}

- (NSString *)getStringWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (NSString *) cast_chk(o, [NSString class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"String", e);
    return nil;
  }
}

- (NSString *)getStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return (NSString *) cast_chk(o, [NSString class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"String", e);
    return defaultValue;
  }
}

- (id<JavaLangCharSequence>)getCharSequenceWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (id<JavaLangCharSequence>) cast_check(o, JavaLangCharSequence_class_());
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"CharSequence", e);
    return nil;
  }
}

- (id<JavaLangCharSequence>)getCharSequenceWithNSString:(NSString *)key
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)defaultValue {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return defaultValue;
  }
  @try {
    return (id<JavaLangCharSequence>) cast_check(o, JavaLangCharSequence_class_());
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"CharSequence", e);
    return defaultValue;
  }
}

- (AndroidOsBundle *)getBundleWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (AndroidOsBundle *) cast_chk(o, [AndroidOsBundle class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"Bundle", e);
    return nil;
  }
}

- (id<JavaIoSerializable>)getSerializableWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (id<JavaIoSerializable>) cast_check(o, JavaIoSerializable_class_());
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"Serializable", e);
    return nil;
  }
}

- (JavaUtilArrayList *)getIntegerArrayListWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (JavaUtilArrayList *) cast_chk(o, [JavaUtilArrayList class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"ArrayList<Integer>", e);
    return nil;
  }
}

- (JavaUtilArrayList *)getStringArrayListWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (JavaUtilArrayList *) cast_chk(o, [JavaUtilArrayList class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"ArrayList<String>", e);
    return nil;
  }
}

- (JavaUtilArrayList *)getCharSequenceArrayListWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (JavaUtilArrayList *) cast_chk(o, [JavaUtilArrayList class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"ArrayList<CharSequence>", e);
    return nil;
  }
}

- (IOSBooleanArray *)getBooleanArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSBooleanArray *) cast_chk(o, [IOSBooleanArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"byte[]", e);
    return nil;
  }
}

- (IOSByteArray *)getByteArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSByteArray *) cast_chk(o, [IOSByteArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"byte[]", e);
    return nil;
  }
}

- (IOSShortArray *)getShortArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSShortArray *) cast_chk(o, [IOSShortArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"short[]", e);
    return nil;
  }
}

- (IOSCharArray *)getCharArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSCharArray *) cast_chk(o, [IOSCharArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"char[]", e);
    return nil;
  }
}

- (IOSIntArray *)getIntArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSIntArray *) cast_chk(o, [IOSIntArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"int[]", e);
    return nil;
  }
}

- (IOSLongArray *)getLongArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSLongArray *) cast_chk(o, [IOSLongArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"long[]", e);
    return nil;
  }
}

- (IOSFloatArray *)getFloatArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSFloatArray *) cast_chk(o, [IOSFloatArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"float[]", e);
    return nil;
  }
}

- (IOSDoubleArray *)getDoubleArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSDoubleArray *) cast_chk(o, [IOSDoubleArray class]);
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"double[]", e);
    return nil;
  }
}

- (IOSObjectArray *)getStringArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSObjectArray *) cast_check(o, IOSClass_arrayType(NSString_class_(), 1));
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"String[]", e);
    return nil;
  }
}

- (IOSObjectArray *)getCharSequenceArrayWithNSString:(NSString *)key {
  id o = [((id<JavaUtilMap>) nil_chk(mMap_)) getWithId:key];
  if (o == nil) {
    return nil;
  }
  @try {
    return (IOSObjectArray *) cast_check(o, IOSClass_arrayType(JavaLangCharSequence_class_(), 1));
  }
  @catch (JavaLangClassCastException *e) {
    AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(self, key, o, @"CharSequence[]", e);
    return nil;
  }
}

- (NSString *)description {
  @synchronized(self) {
    return JreStrcat("$$C", @"Bundle[", [((id<JavaUtilMap>) nil_chk(mMap_)) description], ']');
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (void)initialize {
  if (self == [AndroidOsBundle class]) {
    {
      AndroidOsBundle_EMPTY = new_AndroidOsBundle_init();
      AndroidOsBundle_EMPTY->mMap_ = JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(new_JavaUtilHashMap_init());
    }
    J2OBJC_SET_INITIALIZED(AndroidOsBundle)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Bundle", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangClassLoader:", "Bundle", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "Bundle", NULL, 0x1, NULL, NULL },
    { "initWithAndroidOsBundle:", "Bundle", NULL, 0x1, NULL, NULL },
    { "forPairWithNSString:withNSString:", "forPair", "Landroid.os.Bundle;", 0x9, NULL, NULL },
    { "getPairValue", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setClassLoaderWithJavaLangClassLoader:", "setClassLoader", "V", 0x1, NULL, NULL },
    { "getClassLoader", NULL, "Ljava.lang.ClassLoader;", 0x1, NULL, NULL },
    { "setAllowFdsWithBoolean:", "setAllowFds", "Z", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "containsKeyWithNSString:", "containsKey", "Z", 0x1, NULL, NULL },
    { "getWithNSString:", "get", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "removeWithNSString:", "remove", "V", 0x1, NULL, NULL },
    { "putAllWithAndroidOsBundle:", "putAll", "V", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, "()Ljava/util/Set<Ljava/lang/String;>;" },
    { "putBooleanWithNSString:withBoolean:", "putBoolean", "V", 0x1, NULL, NULL },
    { "putByteWithNSString:withByte:", "putByte", "V", 0x1, NULL, NULL },
    { "putCharWithNSString:withChar:", "putChar", "V", 0x1, NULL, NULL },
    { "putShortWithNSString:withShort:", "putShort", "V", 0x1, NULL, NULL },
    { "putIntWithNSString:withInt:", "putInt", "V", 0x1, NULL, NULL },
    { "putLongWithNSString:withLong:", "putLong", "V", 0x1, NULL, NULL },
    { "putFloatWithNSString:withFloat:", "putFloat", "V", 0x1, NULL, NULL },
    { "putDoubleWithNSString:withDouble:", "putDouble", "V", 0x1, NULL, NULL },
    { "putStringWithNSString:withNSString:", "putString", "V", 0x1, NULL, NULL },
    { "putCharSequenceWithNSString:withJavaLangCharSequence:", "putCharSequence", "V", 0x1, NULL, NULL },
    { "putIntegerArrayListWithNSString:withJavaUtilArrayList:", "putIntegerArrayList", "V", 0x1, NULL, "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/Integer;>;)V" },
    { "putStringArrayListWithNSString:withJavaUtilArrayList:", "putStringArrayList", "V", 0x1, NULL, "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/String;>;)V" },
    { "putCharSequenceArrayListWithNSString:withJavaUtilArrayList:", "putCharSequenceArrayList", "V", 0x1, NULL, "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/CharSequence;>;)V" },
    { "putSerializableWithNSString:withJavaIoSerializable:", "putSerializable", "V", 0x1, NULL, NULL },
    { "putBooleanArrayWithNSString:withBooleanArray:", "putBooleanArray", "V", 0x1, NULL, NULL },
    { "putByteArrayWithNSString:withByteArray:", "putByteArray", "V", 0x1, NULL, NULL },
    { "putShortArrayWithNSString:withShortArray:", "putShortArray", "V", 0x1, NULL, NULL },
    { "putCharArrayWithNSString:withCharArray:", "putCharArray", "V", 0x1, NULL, NULL },
    { "putIntArrayWithNSString:withIntArray:", "putIntArray", "V", 0x1, NULL, NULL },
    { "putLongArrayWithNSString:withLongArray:", "putLongArray", "V", 0x1, NULL, NULL },
    { "putFloatArrayWithNSString:withFloatArray:", "putFloatArray", "V", 0x1, NULL, NULL },
    { "putDoubleArrayWithNSString:withDoubleArray:", "putDoubleArray", "V", 0x1, NULL, NULL },
    { "putStringArrayWithNSString:withNSStringArray:", "putStringArray", "V", 0x1, NULL, NULL },
    { "putCharSequenceArrayWithNSString:withJavaLangCharSequenceArray:", "putCharSequenceArray", "V", 0x1, NULL, NULL },
    { "putBundleWithNSString:withAndroidOsBundle:", "putBundle", "V", 0x1, NULL, NULL },
    { "getBooleanWithNSString:", "getBoolean", "Z", 0x1, NULL, NULL },
    { "typeWarningWithNSString:withId:withNSString:withId:withJavaLangClassCastException:", "typeWarning", "V", 0x2, NULL, NULL },
    { "typeWarningWithNSString:withId:withNSString:withJavaLangClassCastException:", "typeWarning", "V", 0x2, NULL, NULL },
    { "getBooleanWithNSString:withBoolean:", "getBoolean", "Z", 0x1, NULL, NULL },
    { "getByteWithNSString:", "getByte", "B", 0x1, NULL, NULL },
    { "getByteWithNSString:withByte:", "getByte", "Ljava.lang.Byte;", 0x1, NULL, NULL },
    { "getCharWithNSString:", "getChar", "C", 0x1, NULL, NULL },
    { "getCharWithNSString:withChar:", "getChar", "C", 0x1, NULL, NULL },
    { "getShortWithNSString:", "getShort", "S", 0x1, NULL, NULL },
    { "getShortWithNSString:withShort:", "getShort", "S", 0x1, NULL, NULL },
    { "getIntWithNSString:", "getInt", "I", 0x1, NULL, NULL },
    { "getIntWithNSString:withInt:", "getInt", "I", 0x1, NULL, NULL },
    { "getLongWithNSString:", "getLong", "J", 0x1, NULL, NULL },
    { "getLongWithNSString:withLong:", "getLong", "J", 0x1, NULL, NULL },
    { "getFloatWithNSString:", "getFloat", "F", 0x1, NULL, NULL },
    { "getFloatWithNSString:withFloat:", "getFloat", "F", 0x1, NULL, NULL },
    { "getDoubleWithNSString:", "getDouble", "D", 0x1, NULL, NULL },
    { "getDoubleWithNSString:withDouble:", "getDouble", "D", 0x1, NULL, NULL },
    { "getStringWithNSString:", "getString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getStringWithNSString:withNSString:", "getString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCharSequenceWithNSString:", "getCharSequence", "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "getCharSequenceWithNSString:withJavaLangCharSequence:", "getCharSequence", "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "getBundleWithNSString:", "getBundle", "Landroid.os.Bundle;", 0x1, NULL, NULL },
    { "getSerializableWithNSString:", "getSerializable", "Ljava.io.Serializable;", 0x1, NULL, NULL },
    { "getIntegerArrayListWithNSString:", "getIntegerArrayList", "Ljava.util.ArrayList;", 0x1, NULL, "(Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/Integer;>;" },
    { "getStringArrayListWithNSString:", "getStringArrayList", "Ljava.util.ArrayList;", 0x1, NULL, "(Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/String;>;" },
    { "getCharSequenceArrayListWithNSString:", "getCharSequenceArrayList", "Ljava.util.ArrayList;", 0x1, NULL, "(Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/CharSequence;>;" },
    { "getBooleanArrayWithNSString:", "getBooleanArray", "[Z", 0x1, NULL, NULL },
    { "getByteArrayWithNSString:", "getByteArray", "[B", 0x1, NULL, NULL },
    { "getShortArrayWithNSString:", "getShortArray", "[S", 0x1, NULL, NULL },
    { "getCharArrayWithNSString:", "getCharArray", "[C", 0x1, NULL, NULL },
    { "getIntArrayWithNSString:", "getIntArray", "[I", 0x1, NULL, NULL },
    { "getLongArrayWithNSString:", "getLongArray", "[J", 0x1, NULL, NULL },
    { "getFloatArrayWithNSString:", "getFloatArray", "[F", 0x1, NULL, NULL },
    { "getDoubleArrayWithNSString:", "getDoubleArray", "[D", 0x1, NULL, NULL },
    { "getStringArrayWithNSString:", "getStringArray", "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCharSequenceArrayWithNSString:", "getCharSequenceArray", "[Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x21, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_TAG", "LOG_TAG", 0x1a, "Ljava.lang.String;", &AndroidOsBundle_LOG_TAG, NULL, .constantValue.asLong = 0 },
    { "EMPTY", "EMPTY", 0x19, "Landroid.os.Bundle;", &AndroidOsBundle_EMPTY, NULL, .constantValue.asLong = 0 },
    { "mMap_", NULL, 0x0, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "mHasFds_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mFdsKnown_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mAllowFds_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mClassLoader_", NULL, 0x2, "Ljava.lang.ClassLoader;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidOsBundle = { 2, "Bundle", "android.os", NULL, 0x11, 81, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidOsBundle;
}

@end

void AndroidOsBundle_init(AndroidOsBundle *self) {
  NSObject_init(self);
  self->mMap_ = nil;
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  self->mMap_ = new_JavaUtilHashMap_init();
  self->mClassLoader_ = [[self getClass] getClassLoader];
}

AndroidOsBundle *new_AndroidOsBundle_init() {
  AndroidOsBundle *self = [AndroidOsBundle alloc];
  AndroidOsBundle_init(self);
  return self;
}

AndroidOsBundle *create_AndroidOsBundle_init() {
  return new_AndroidOsBundle_init();
}

void AndroidOsBundle_initWithJavaLangClassLoader_(AndroidOsBundle *self, JavaLangClassLoader *loader) {
  NSObject_init(self);
  self->mMap_ = nil;
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  self->mMap_ = new_JavaUtilHashMap_init();
  self->mClassLoader_ = loader;
}

AndroidOsBundle *new_AndroidOsBundle_initWithJavaLangClassLoader_(JavaLangClassLoader *loader) {
  AndroidOsBundle *self = [AndroidOsBundle alloc];
  AndroidOsBundle_initWithJavaLangClassLoader_(self, loader);
  return self;
}

AndroidOsBundle *create_AndroidOsBundle_initWithJavaLangClassLoader_(JavaLangClassLoader *loader) {
  return new_AndroidOsBundle_initWithJavaLangClassLoader_(loader);
}

void AndroidOsBundle_initWithInt_(AndroidOsBundle *self, jint capacity) {
  NSObject_init(self);
  self->mMap_ = nil;
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  self->mMap_ = new_JavaUtilHashMap_initWithInt_(capacity);
  self->mClassLoader_ = [[self getClass] getClassLoader];
}

AndroidOsBundle *new_AndroidOsBundle_initWithInt_(jint capacity) {
  AndroidOsBundle *self = [AndroidOsBundle alloc];
  AndroidOsBundle_initWithInt_(self, capacity);
  return self;
}

AndroidOsBundle *create_AndroidOsBundle_initWithInt_(jint capacity) {
  return new_AndroidOsBundle_initWithInt_(capacity);
}

void AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *self, AndroidOsBundle *b) {
  NSObject_init(self);
  self->mMap_ = nil;
  self->mHasFds_ = false;
  self->mFdsKnown_ = true;
  self->mAllowFds_ = true;
  if (((AndroidOsBundle *) nil_chk(b))->mMap_ != nil) {
    self->mMap_ = new_JavaUtilHashMap_initWithJavaUtilMap_(b->mMap_);
  }
  else {
    self->mMap_ = nil;
  }
  self->mHasFds_ = b->mHasFds_;
  self->mFdsKnown_ = b->mFdsKnown_;
  self->mClassLoader_ = b->mClassLoader_;
}

AndroidOsBundle *new_AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *b) {
  AndroidOsBundle *self = [AndroidOsBundle alloc];
  AndroidOsBundle_initWithAndroidOsBundle_(self, b);
  return self;
}

AndroidOsBundle *create_AndroidOsBundle_initWithAndroidOsBundle_(AndroidOsBundle *b) {
  return new_AndroidOsBundle_initWithAndroidOsBundle_(b);
}

AndroidOsBundle *AndroidOsBundle_forPairWithNSString_withNSString_(NSString *key, NSString *value) {
  AndroidOsBundle_initialize();
  AndroidOsBundle *b = new_AndroidOsBundle_initWithInt_(1);
  [b putStringWithNSString:key withNSString:value];
  return b;
}

void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, id defaultValue, JavaLangClassCastException *e) {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:@"Key "];
  (void) [sb appendWithNSString:key];
  (void) [sb appendWithNSString:@" expected "];
  (void) [sb appendWithNSString:className_];
  (void) [sb appendWithNSString:@" but value was a "];
  (void) [sb appendWithNSString:[[nil_chk(value) getClass] getName]];
  (void) [sb appendWithNSString:@".  The default value "];
  (void) [sb appendWithId:defaultValue];
  (void) [sb appendWithNSString:@" was returned."];
  AndroidUtilLog_wWithNSString_withNSString_(AndroidOsBundle_LOG_TAG, [sb description]);
  AndroidUtilLog_wWithNSString_withNSString_withNSException_(AndroidOsBundle_LOG_TAG, @"Attempt to cast generated internal exception:", e);
}

void AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withJavaLangClassCastException_(AndroidOsBundle *self, NSString *key, id value, NSString *className_, JavaLangClassCastException *e) {
  AndroidOsBundle_typeWarningWithNSString_withId_withNSString_withId_withJavaLangClassCastException_(self, key, value, className_, @"<null>", e);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidOsBundle)
