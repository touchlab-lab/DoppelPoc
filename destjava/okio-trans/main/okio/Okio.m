//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okio/okio/src/main/java/okio/Okio.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/net/Socket.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "okio/AsyncTimeout.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/Okio.h"
#include "okio/RealBufferedSink.h"
#include "okio/RealBufferedSource.h"
#include "okio/Segment.h"
#include "okio/SegmentPool.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"
#include "okio/Util.h"

@interface OkioOkio ()

- (instancetype)init;

+ (id<OkioSink>)sinkWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                           withOkioTimeout:(OkioTimeout *)timeout;

+ (id<OkioSource>)sourceWithJavaIoInputStream:(JavaIoInputStream *)inArg
                              withOkioTimeout:(OkioTimeout *)timeout;

+ (OkioAsyncTimeout *)timeoutWithJavaNetSocket:(JavaNetSocket *)socket;

@end

inline JavaUtilLoggingLogger *OkioOkio_get_logger();
static JavaUtilLoggingLogger *OkioOkio_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OkioOkio, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static void OkioOkio_init(OkioOkio *self);

__attribute__((unused)) static OkioOkio *new_OkioOkio_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioOkio *create_OkioOkio_init();

__attribute__((unused)) static id<OkioSink> OkioOkio_sinkWithJavaIoOutputStream_withOkioTimeout_(JavaIoOutputStream *outArg, OkioTimeout *timeout);

__attribute__((unused)) static id<OkioSource> OkioOkio_sourceWithJavaIoInputStream_withOkioTimeout_(JavaIoInputStream *inArg, OkioTimeout *timeout);

__attribute__((unused)) static OkioAsyncTimeout *OkioOkio_timeoutWithJavaNetSocket_(JavaNetSocket *socket);

@interface OkioOkio_$1 : NSObject < OkioSink > {
 @public
  OkioTimeout *val$timeout_;
  JavaIoOutputStream *val$out_;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (void)flush;

- (void)close;

- (OkioTimeout *)timeout;

- (NSString *)description;

- (instancetype)initWithOkioTimeout:(OkioTimeout *)capture$0
             withJavaIoOutputStream:(JavaIoOutputStream *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioOkio_$1)

J2OBJC_FIELD_SETTER(OkioOkio_$1, val$timeout_, OkioTimeout *)
J2OBJC_FIELD_SETTER(OkioOkio_$1, val$out_, JavaIoOutputStream *)

__attribute__((unused)) static void OkioOkio_$1_initWithOkioTimeout_withJavaIoOutputStream_(OkioOkio_$1 *self, OkioTimeout *capture$0, JavaIoOutputStream *capture$1);

__attribute__((unused)) static OkioOkio_$1 *new_OkioOkio_$1_initWithOkioTimeout_withJavaIoOutputStream_(OkioTimeout *capture$0, JavaIoOutputStream *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioOkio_$1 *create_OkioOkio_$1_initWithOkioTimeout_withJavaIoOutputStream_(OkioTimeout *capture$0, JavaIoOutputStream *capture$1);

J2OBJC_TYPE_LITERAL_HEADER(OkioOkio_$1)

@interface OkioOkio_$2 : NSObject < OkioSource > {
 @public
  OkioTimeout *val$timeout_;
  JavaIoInputStream *val$in_;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (void)close;

- (OkioTimeout *)timeout;

- (NSString *)description;

- (instancetype)initWithOkioTimeout:(OkioTimeout *)capture$0
              withJavaIoInputStream:(JavaIoInputStream *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioOkio_$2)

J2OBJC_FIELD_SETTER(OkioOkio_$2, val$timeout_, OkioTimeout *)
J2OBJC_FIELD_SETTER(OkioOkio_$2, val$in_, JavaIoInputStream *)

__attribute__((unused)) static void OkioOkio_$2_initWithOkioTimeout_withJavaIoInputStream_(OkioOkio_$2 *self, OkioTimeout *capture$0, JavaIoInputStream *capture$1);

__attribute__((unused)) static OkioOkio_$2 *new_OkioOkio_$2_initWithOkioTimeout_withJavaIoInputStream_(OkioTimeout *capture$0, JavaIoInputStream *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioOkio_$2 *create_OkioOkio_$2_initWithOkioTimeout_withJavaIoInputStream_(OkioTimeout *capture$0, JavaIoInputStream *capture$1);

J2OBJC_TYPE_LITERAL_HEADER(OkioOkio_$2)

@interface OkioOkio_$3 : OkioAsyncTimeout {
 @public
  JavaNetSocket *val$socket_;
}

- (void)timedOut;

- (instancetype)initWithJavaNetSocket:(JavaNetSocket *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioOkio_$3)

J2OBJC_FIELD_SETTER(OkioOkio_$3, val$socket_, JavaNetSocket *)

__attribute__((unused)) static void OkioOkio_$3_initWithJavaNetSocket_(OkioOkio_$3 *self, JavaNetSocket *capture$0);

__attribute__((unused)) static OkioOkio_$3 *new_OkioOkio_$3_initWithJavaNetSocket_(JavaNetSocket *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioOkio_$3 *create_OkioOkio_$3_initWithJavaNetSocket_(JavaNetSocket *capture$0);

J2OBJC_TYPE_LITERAL_HEADER(OkioOkio_$3)

J2OBJC_INITIALIZED_DEFN(OkioOkio)

@implementation OkioOkio

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioOkio_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<OkioBufferedSource>)bufferWithOkioSource:(id<OkioSource>)source {
  return OkioOkio_bufferWithOkioSource_(source);
}

+ (id<OkioBufferedSink>)bufferWithOkioSink:(id<OkioSink>)sink {
  return OkioOkio_bufferWithOkioSink_(sink);
}

+ (id<OkioSink>)sinkWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return OkioOkio_sinkWithJavaIoOutputStream_(outArg);
}

+ (id<OkioSink>)sinkWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                           withOkioTimeout:(OkioTimeout *)timeout {
  return OkioOkio_sinkWithJavaIoOutputStream_withOkioTimeout_(outArg, timeout);
}

+ (id<OkioSink>)sinkWithJavaNetSocket:(JavaNetSocket *)socket {
  return OkioOkio_sinkWithJavaNetSocket_(socket);
}

+ (id<OkioSource>)sourceWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return OkioOkio_sourceWithJavaIoInputStream_(inArg);
}

+ (id<OkioSource>)sourceWithJavaIoInputStream:(JavaIoInputStream *)inArg
                              withOkioTimeout:(OkioTimeout *)timeout {
  return OkioOkio_sourceWithJavaIoInputStream_withOkioTimeout_(inArg, timeout);
}

+ (id<OkioSource>)sourceWithJavaIoFile:(JavaIoFile *)file {
  return OkioOkio_sourceWithJavaIoFile_(file);
}

+ (id<OkioSink>)sinkWithJavaIoFile:(JavaIoFile *)file {
  return OkioOkio_sinkWithJavaIoFile_(file);
}

+ (id<OkioSink>)appendingSinkWithJavaIoFile:(JavaIoFile *)file {
  return OkioOkio_appendingSinkWithJavaIoFile_(file);
}

+ (id<OkioSource>)sourceWithJavaNetSocket:(JavaNetSocket *)socket {
  return OkioOkio_sourceWithJavaNetSocket_(socket);
}

+ (OkioAsyncTimeout *)timeoutWithJavaNetSocket:(JavaNetSocket *)socket {
  return OkioOkio_timeoutWithJavaNetSocket_(socket);
}

+ (void)initialize {
  if (self == [OkioOkio class]) {
    OkioOkio_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OkioOkio_class_() getName]);
    J2OBJC_SET_INITIALIZED(OkioOkio)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Okio", NULL, 0x2, NULL, NULL },
    { "bufferWithOkioSource:", "buffer", "Lokio.BufferedSource;", 0x9, NULL, NULL },
    { "bufferWithOkioSink:", "buffer", "Lokio.BufferedSink;", 0x9, NULL, NULL },
    { "sinkWithJavaIoOutputStream:", "sink", "Lokio.Sink;", 0x9, NULL, NULL },
    { "sinkWithJavaIoOutputStream:withOkioTimeout:", "sink", "Lokio.Sink;", 0xa, NULL, NULL },
    { "sinkWithJavaNetSocket:", "sink", "Lokio.Sink;", 0x9, "Ljava.io.IOException;", NULL },
    { "sourceWithJavaIoInputStream:", "source", "Lokio.Source;", 0x9, NULL, NULL },
    { "sourceWithJavaIoInputStream:withOkioTimeout:", "source", "Lokio.Source;", 0xa, NULL, NULL },
    { "sourceWithJavaIoFile:", "source", "Lokio.Source;", 0x9, "Ljava.io.FileNotFoundException;", NULL },
    { "sinkWithJavaIoFile:", "sink", "Lokio.Sink;", 0x9, "Ljava.io.FileNotFoundException;", NULL },
    { "appendingSinkWithJavaIoFile:", "appendingSink", "Lokio.Sink;", 0x9, "Ljava.io.FileNotFoundException;", NULL },
    { "sourceWithJavaNetSocket:", "source", "Lokio.Source;", 0x9, "Ljava.io.IOException;", NULL },
    { "timeoutWithJavaNetSocket:", "timeout", "Lokio.AsyncTimeout;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OkioOkio_logger, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OkioOkio = { 2, "Okio", "okio", NULL, 0x11, 13, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OkioOkio;
}

@end

void OkioOkio_init(OkioOkio *self) {
  NSObject_init(self);
}

OkioOkio *new_OkioOkio_init() {
  OkioOkio *self = [OkioOkio alloc];
  OkioOkio_init(self);
  return self;
}

OkioOkio *create_OkioOkio_init() {
  return new_OkioOkio_init();
}

id<OkioBufferedSource> OkioOkio_bufferWithOkioSource_(id<OkioSource> source) {
  OkioOkio_initialize();
  if (source == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"source == null");
  return [OkioBufferedSource_class_() isInstance:source] ? ((id) (id<OkioBufferedSource>) cast_check(source, OkioBufferedSource_class_())) : new_OkioRealBufferedSource_initWithOkioSource_(source);
}

id<OkioBufferedSink> OkioOkio_bufferWithOkioSink_(id<OkioSink> sink) {
  OkioOkio_initialize();
  if (sink == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sink == null");
  return [OkioBufferedSink_class_() isInstance:sink] ? ((id) (id<OkioBufferedSink>) cast_check(sink, OkioBufferedSink_class_())) : new_OkioRealBufferedSink_initWithOkioSink_(sink);
}

id<OkioSink> OkioOkio_sinkWithJavaIoOutputStream_(JavaIoOutputStream *outArg) {
  OkioOkio_initialize();
  return OkioOkio_sinkWithJavaIoOutputStream_withOkioTimeout_(outArg, new_OkioTimeout_init());
}

id<OkioSink> OkioOkio_sinkWithJavaIoOutputStream_withOkioTimeout_(JavaIoOutputStream *outArg, OkioTimeout *timeout) {
  OkioOkio_initialize();
  if (outArg == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"out == null");
  if (timeout == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"timeout == null");
  return new_OkioOkio_$1_initWithOkioTimeout_withJavaIoOutputStream_(timeout, outArg);
}

id<OkioSink> OkioOkio_sinkWithJavaNetSocket_(JavaNetSocket *socket) {
  OkioOkio_initialize();
  if (socket == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"socket == null");
  OkioAsyncTimeout *timeout = OkioOkio_timeoutWithJavaNetSocket_(socket);
  id<OkioSink> sink = OkioOkio_sinkWithJavaIoOutputStream_withOkioTimeout_([((JavaNetSocket *) nil_chk(socket)) getOutputStream], timeout);
  return [((OkioAsyncTimeout *) nil_chk(timeout)) sinkWithOkioSink:sink];
}

id<OkioSource> OkioOkio_sourceWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  OkioOkio_initialize();
  return OkioOkio_sourceWithJavaIoInputStream_withOkioTimeout_(inArg, new_OkioTimeout_init());
}

id<OkioSource> OkioOkio_sourceWithJavaIoInputStream_withOkioTimeout_(JavaIoInputStream *inArg, OkioTimeout *timeout) {
  OkioOkio_initialize();
  if (inArg == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"in == null");
  if (timeout == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"timeout == null");
  return new_OkioOkio_$2_initWithOkioTimeout_withJavaIoInputStream_(timeout, inArg);
}

id<OkioSource> OkioOkio_sourceWithJavaIoFile_(JavaIoFile *file) {
  OkioOkio_initialize();
  if (file == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"file == null");
  return OkioOkio_sourceWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithJavaIoFile_(file));
}

id<OkioSink> OkioOkio_sinkWithJavaIoFile_(JavaIoFile *file) {
  OkioOkio_initialize();
  if (file == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"file == null");
  return OkioOkio_sinkWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithJavaIoFile_(file));
}

id<OkioSink> OkioOkio_appendingSinkWithJavaIoFile_(JavaIoFile *file) {
  OkioOkio_initialize();
  if (file == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"file == null");
  return OkioOkio_sinkWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithJavaIoFile_withBoolean_(file, true));
}

id<OkioSource> OkioOkio_sourceWithJavaNetSocket_(JavaNetSocket *socket) {
  OkioOkio_initialize();
  if (socket == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"socket == null");
  OkioAsyncTimeout *timeout = OkioOkio_timeoutWithJavaNetSocket_(socket);
  id<OkioSource> source = OkioOkio_sourceWithJavaIoInputStream_withOkioTimeout_([((JavaNetSocket *) nil_chk(socket)) getInputStream], timeout);
  return [((OkioAsyncTimeout *) nil_chk(timeout)) sourceWithOkioSource:source];
}

OkioAsyncTimeout *OkioOkio_timeoutWithJavaNetSocket_(JavaNetSocket *socket) {
  OkioOkio_initialize();
  return new_OkioOkio_$3_initWithJavaNetSocket_(socket);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioOkio)

@implementation OkioOkio_$1

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  OkioUtil_checkOffsetAndCountWithLong_withLong_withLong_(((OkioBuffer *) nil_chk(source))->size_, 0, byteCount);
  while (byteCount > 0) {
    [((OkioTimeout *) nil_chk(val$timeout_)) throwIfReached];
    OkioSegment *head = source->head_;
    jint toCopy = (jint) JavaLangMath_minWithLong_withLong_(byteCount, ((OkioSegment *) nil_chk(head))->limit_ - head->pos_);
    [((JavaIoOutputStream *) nil_chk(val$out_)) writeWithByteArray:head->data_ withInt:head->pos_ withInt:toCopy];
    head->pos_ += toCopy;
    byteCount -= toCopy;
    source->size_ -= toCopy;
    if (head->pos_ == head->limit_) {
      source->head_ = [head pop];
      [((OkioSegmentPool *) nil_chk(JreLoadStatic(OkioSegmentPool, INSTANCE))) recycleWithOkioSegment:head];
    }
  }
}

- (void)flush {
  [((JavaIoOutputStream *) nil_chk(val$out_)) flush];
}

- (void)close {
  [((JavaIoOutputStream *) nil_chk(val$out_)) close];
}

- (OkioTimeout *)timeout {
  return val$timeout_;
}

- (NSString *)description {
  return JreStrcat("$@C", @"sink(", val$out_, ')');
}

- (instancetype)initWithOkioTimeout:(OkioTimeout *)capture$0
             withJavaIoOutputStream:(JavaIoOutputStream *)capture$1 {
  OkioOkio_$1_initWithOkioTimeout_withJavaIoOutputStream_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeWithOkioBuffer:withLong:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "timeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithOkioTimeout:withJavaIoOutputStream:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", NULL, 0x1012, "Lokio.Timeout;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$out_", NULL, 0x1012, "Ljava.io.OutputStream;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OkioOkio", "sinkWithJavaIoOutputStream:withOkioTimeout:" };
  static const J2ObjcClassInfo _OkioOkio_$1 = { 2, "", "okio", "Okio", 0x8008, 6, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OkioOkio_$1;
}

@end

void OkioOkio_$1_initWithOkioTimeout_withJavaIoOutputStream_(OkioOkio_$1 *self, OkioTimeout *capture$0, JavaIoOutputStream *capture$1) {
  self->val$timeout_ = capture$0;
  self->val$out_ = capture$1;
  NSObject_init(self);
}

OkioOkio_$1 *new_OkioOkio_$1_initWithOkioTimeout_withJavaIoOutputStream_(OkioTimeout *capture$0, JavaIoOutputStream *capture$1) {
  OkioOkio_$1 *self = [OkioOkio_$1 alloc];
  OkioOkio_$1_initWithOkioTimeout_withJavaIoOutputStream_(self, capture$0, capture$1);
  return self;
}

OkioOkio_$1 *create_OkioOkio_$1_initWithOkioTimeout_withJavaIoOutputStream_(OkioTimeout *capture$0, JavaIoOutputStream *capture$1) {
  return new_OkioOkio_$1_initWithOkioTimeout_withJavaIoOutputStream_(capture$0, capture$1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioOkio_$1)

@implementation OkioOkio_$2

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (byteCount < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"byteCount < 0: ", byteCount));
  [((OkioTimeout *) nil_chk(val$timeout_)) throwIfReached];
  OkioSegment *tail = [((OkioBuffer *) nil_chk(sink)) writableSegmentWithInt:1];
  jint maxToCopy = (jint) JavaLangMath_minWithLong_withLong_(byteCount, OkioSegment_SIZE - ((OkioSegment *) nil_chk(tail))->limit_);
  jint bytesRead = [((JavaIoInputStream *) nil_chk(val$in_)) readWithByteArray:tail->data_ withInt:tail->limit_ withInt:maxToCopy];
  if (bytesRead == -1) return -1;
  tail->limit_ += bytesRead;
  sink->size_ += bytesRead;
  return bytesRead;
}

- (void)close {
  [((JavaIoInputStream *) nil_chk(val$in_)) close];
}

- (OkioTimeout *)timeout {
  return val$timeout_;
}

- (NSString *)description {
  return JreStrcat("$@C", @"source(", val$in_, ')');
}

- (instancetype)initWithOkioTimeout:(OkioTimeout *)capture$0
              withJavaIoInputStream:(JavaIoInputStream *)capture$1 {
  OkioOkio_$2_initWithOkioTimeout_withJavaIoInputStream_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readWithOkioBuffer:withLong:", "read", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "timeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithOkioTimeout:withJavaIoInputStream:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", NULL, 0x1012, "Lokio.Timeout;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$in_", NULL, 0x1012, "Ljava.io.InputStream;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OkioOkio", "sourceWithJavaIoInputStream:withOkioTimeout:" };
  static const J2ObjcClassInfo _OkioOkio_$2 = { 2, "", "okio", "Okio", 0x8008, 5, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OkioOkio_$2;
}

@end

void OkioOkio_$2_initWithOkioTimeout_withJavaIoInputStream_(OkioOkio_$2 *self, OkioTimeout *capture$0, JavaIoInputStream *capture$1) {
  self->val$timeout_ = capture$0;
  self->val$in_ = capture$1;
  NSObject_init(self);
}

OkioOkio_$2 *new_OkioOkio_$2_initWithOkioTimeout_withJavaIoInputStream_(OkioTimeout *capture$0, JavaIoInputStream *capture$1) {
  OkioOkio_$2 *self = [OkioOkio_$2 alloc];
  OkioOkio_$2_initWithOkioTimeout_withJavaIoInputStream_(self, capture$0, capture$1);
  return self;
}

OkioOkio_$2 *create_OkioOkio_$2_initWithOkioTimeout_withJavaIoInputStream_(OkioTimeout *capture$0, JavaIoInputStream *capture$1) {
  return new_OkioOkio_$2_initWithOkioTimeout_withJavaIoInputStream_(capture$0, capture$1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioOkio_$2)

@implementation OkioOkio_$3

- (void)timedOut {
  @try {
    [((JavaNetSocket *) nil_chk(val$socket_)) close];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(OkioOkio, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@", @"Failed to close timed out socket ", val$socket_) withNSException:e];
  }
}

- (instancetype)initWithJavaNetSocket:(JavaNetSocket *)capture$0 {
  OkioOkio_$3_initWithJavaNetSocket_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "timedOut", NULL, "V", 0x4, NULL, NULL },
    { "initWithJavaNetSocket:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$socket_", NULL, 0x1012, "Ljava.net.Socket;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OkioOkio", "timeoutWithJavaNetSocket:" };
  static const J2ObjcClassInfo _OkioOkio_$3 = { 2, "", "okio", "Okio", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OkioOkio_$3;
}

@end

void OkioOkio_$3_initWithJavaNetSocket_(OkioOkio_$3 *self, JavaNetSocket *capture$0) {
  self->val$socket_ = capture$0;
  OkioAsyncTimeout_init(self);
}

OkioOkio_$3 *new_OkioOkio_$3_initWithJavaNetSocket_(JavaNetSocket *capture$0) {
  OkioOkio_$3 *self = [OkioOkio_$3 alloc];
  OkioOkio_$3_initWithJavaNetSocket_(self, capture$0);
  return self;
}

OkioOkio_$3 *create_OkioOkio_$3_initWithJavaNetSocket_(JavaNetSocket *capture$0) {
  return new_OkioOkio_$3_initWithJavaNetSocket_(capture$0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioOkio_$3)
