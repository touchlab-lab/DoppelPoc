//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okio/okio/src/main/java/okio/SegmentPool.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "okio/Segment.h"
#include "okio/SegmentPool.h"

@interface OkioSegmentPool () {
 @public
  OkioSegment *next_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(OkioSegmentPool, next_, OkioSegment *)

__attribute__((unused)) static void OkioSegmentPool_init(OkioSegmentPool *self);

__attribute__((unused)) static OkioSegmentPool *new_OkioSegmentPool_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioSegmentPool *create_OkioSegmentPool_init();

J2OBJC_INITIALIZED_DEFN(OkioSegmentPool)

OkioSegmentPool *OkioSegmentPool_INSTANCE;

@implementation OkioSegmentPool

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioSegmentPool_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OkioSegment *)take {
  @synchronized(self) {
    if (next_ != nil) {
      OkioSegment *result = next_;
      next_ = result->next_;
      result->next_ = nil;
      byteCount_ -= OkioSegment_SIZE;
      return result;
    }
  }
  return new_OkioSegment_init();
}

- (void)recycleWithOkioSegment:(OkioSegment *)segment {
  if (((OkioSegment *) nil_chk(segment))->next_ != nil || segment->prev_ != nil) @throw new_JavaLangIllegalArgumentException_init();
  @synchronized(self) {
    if (byteCount_ + OkioSegment_SIZE > OkioSegmentPool_MAX_SIZE) return;
    byteCount_ += OkioSegment_SIZE;
    segment->next_ = next_;
    segment->pos_ = segment->limit_ = 0;
    next_ = segment;
  }
}

+ (void)initialize {
  if (self == [OkioSegmentPool class]) {
    OkioSegmentPool_INSTANCE = new_OkioSegmentPool_init();
    J2OBJC_SET_INITIALIZED(OkioSegmentPool)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SegmentPool", NULL, 0x2, NULL, NULL },
    { "take", NULL, "Lokio.Segment;", 0x0, NULL, NULL },
    { "recycleWithOkioSegment:", "recycle", "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x18, "Lokio.SegmentPool;", &OkioSegmentPool_INSTANCE, NULL, .constantValue.asLong = 0 },
    { "MAX_SIZE", "MAX_SIZE", 0x18, "J", NULL, NULL, .constantValue.asLong = OkioSegmentPool_MAX_SIZE },
    { "next_", NULL, 0x2, "Lokio.Segment;", NULL, NULL, .constantValue.asLong = 0 },
    { "byteCount_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OkioSegmentPool = { 2, "SegmentPool", "okio", NULL, 0x10, 3, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OkioSegmentPool;
}

@end

void OkioSegmentPool_init(OkioSegmentPool *self) {
  NSObject_init(self);
}

OkioSegmentPool *new_OkioSegmentPool_init() {
  OkioSegmentPool *self = [OkioSegmentPool alloc];
  OkioSegmentPool_init(self);
  return self;
}

OkioSegmentPool *create_OkioSegmentPool_init() {
  return new_OkioSegmentPool_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioSegmentPool)
