//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okio/okio/src/main/java/okio/Timeout.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InterruptedIOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okio/Timeout.h"

@interface OkioTimeout () {
 @public
  jboolean hasDeadline_;
  jlong deadlineNanoTime_;
  jlong timeoutNanos_;
}

@end

@interface OkioTimeout_$1 : OkioTimeout

- (OkioTimeout *)timeoutWithLong:(jlong)timeout
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (OkioTimeout *)deadlineNanoTimeWithLong:(jlong)deadlineNanoTime;

- (void)throwIfReached;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioTimeout_$1)

__attribute__((unused)) static void OkioTimeout_$1_init(OkioTimeout_$1 *self);

__attribute__((unused)) static OkioTimeout_$1 *new_OkioTimeout_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioTimeout_$1 *create_OkioTimeout_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(OkioTimeout_$1)

J2OBJC_INITIALIZED_DEFN(OkioTimeout)

OkioTimeout *OkioTimeout_NONE;

@implementation OkioTimeout

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioTimeout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OkioTimeout *)timeoutWithLong:(jlong)timeout
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (timeout < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"timeout < 0: ", timeout));
  if (unit == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unit == null");
  self->timeoutNanos_ = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:timeout];
  return self;
}

- (jlong)timeoutNanos {
  return timeoutNanos_;
}

- (jboolean)hasDeadline {
  return hasDeadline_;
}

- (jlong)deadlineNanoTime {
  if (!hasDeadline_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"No deadline");
  return deadlineNanoTime_;
}

- (OkioTimeout *)deadlineNanoTimeWithLong:(jlong)deadlineNanoTime {
  self->hasDeadline_ = true;
  self->deadlineNanoTime_ = deadlineNanoTime;
  return self;
}

- (OkioTimeout *)deadlineWithLong:(jlong)duration
   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (duration <= 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"duration <= 0: ", duration));
  if (unit == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unit == null");
  return [self deadlineNanoTimeWithLong:JavaLangSystem_nanoTime() + [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:duration]];
}

- (OkioTimeout *)clearTimeout {
  self->timeoutNanos_ = 0;
  return self;
}

- (OkioTimeout *)clearDeadline {
  self->hasDeadline_ = false;
  return self;
}

- (void)throwIfReached {
  if (JavaLangThread_interrupted()) {
    @throw new_JavaIoInterruptedIOException_init();
  }
  if (hasDeadline_ && JavaLangSystem_nanoTime() > deadlineNanoTime_) {
    @throw new_JavaIoIOException_initWithNSString_(@"deadline reached");
  }
}

+ (void)initialize {
  if (self == [OkioTimeout class]) {
    OkioTimeout_NONE = new_OkioTimeout_$1_init();
    J2OBJC_SET_INITIALIZED(OkioTimeout)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Timeout", NULL, 0x1, NULL, NULL },
    { "timeoutWithLong:withJavaUtilConcurrentTimeUnit:", "timeout", "Lokio.Timeout;", 0x1, NULL, NULL },
    { "timeoutNanos", NULL, "J", 0x1, NULL, NULL },
    { "hasDeadline", NULL, "Z", 0x1, NULL, NULL },
    { "deadlineNanoTime", NULL, "J", 0x1, NULL, NULL },
    { "deadlineNanoTimeWithLong:", "deadlineNanoTime", "Lokio.Timeout;", 0x1, NULL, NULL },
    { "deadlineWithLong:withJavaUtilConcurrentTimeUnit:", "deadline", "Lokio.Timeout;", 0x11, NULL, NULL },
    { "clearTimeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "clearDeadline", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "throwIfReached", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "NONE", 0x19, "Lokio.Timeout;", &OkioTimeout_NONE, NULL, .constantValue.asLong = 0 },
    { "hasDeadline_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "deadlineNanoTime_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "timeoutNanos_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OkioTimeout = { 2, "Timeout", "okio", NULL, 0x1, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OkioTimeout;
}

@end

void OkioTimeout_init(OkioTimeout *self) {
  NSObject_init(self);
}

OkioTimeout *new_OkioTimeout_init() {
  OkioTimeout *self = [OkioTimeout alloc];
  OkioTimeout_init(self);
  return self;
}

OkioTimeout *create_OkioTimeout_init() {
  return new_OkioTimeout_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioTimeout)

@implementation OkioTimeout_$1

- (OkioTimeout *)timeoutWithLong:(jlong)timeout
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return self;
}

- (OkioTimeout *)deadlineNanoTimeWithLong:(jlong)deadlineNanoTime {
  return self;
}

- (void)throwIfReached {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioTimeout_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "timeoutWithLong:withJavaUtilConcurrentTimeUnit:", "timeout", "Lokio.Timeout;", 0x1, NULL, NULL },
    { "deadlineNanoTimeWithLong:", "deadlineNanoTime", "Lokio.Timeout;", 0x1, NULL, NULL },
    { "throwIfReached", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OkioTimeout_$1 = { 2, "", "okio", "Timeout", 0x8008, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OkioTimeout_$1;
}

@end

void OkioTimeout_$1_init(OkioTimeout_$1 *self) {
  OkioTimeout_init(self);
}

OkioTimeout_$1 *new_OkioTimeout_$1_init() {
  OkioTimeout_$1 *self = [OkioTimeout_$1 alloc];
  OkioTimeout_$1_init(self);
  return self;
}

OkioTimeout_$1 *create_OkioTimeout_$1_init() {
  return new_OkioTimeout_$1_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioTimeout_$1)
