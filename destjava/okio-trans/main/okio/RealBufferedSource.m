//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okio/okio/src/main/java/okio/RealBufferedSource.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/nio/charset/Charset.h"
#include "okio/Buffer.h"
#include "okio/ByteString.h"
#include "okio/RealBufferedSource.h"
#include "okio/Segment.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"
#include "okio/Util.h"

@interface OkioRealBufferedSource () {
 @public
  jboolean closed_;
}

@end

@interface OkioRealBufferedSource_$1 : JavaIoInputStream {
 @public
  OkioRealBufferedSource *this$0_;
}

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray *)data
                  withInt:(jint)offset
                  withInt:(jint)byteCount;

- (jint)available;

- (void)close;

- (NSString *)description;

- (instancetype)initWithOkioRealBufferedSource:(OkioRealBufferedSource *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioRealBufferedSource_$1)

J2OBJC_FIELD_SETTER(OkioRealBufferedSource_$1, this$0_, OkioRealBufferedSource *)

__attribute__((unused)) static void OkioRealBufferedSource_$1_initWithOkioRealBufferedSource_(OkioRealBufferedSource_$1 *self, OkioRealBufferedSource *outer$);

__attribute__((unused)) static OkioRealBufferedSource_$1 *new_OkioRealBufferedSource_$1_initWithOkioRealBufferedSource_(OkioRealBufferedSource *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioRealBufferedSource_$1 *create_OkioRealBufferedSource_$1_initWithOkioRealBufferedSource_(OkioRealBufferedSource *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OkioRealBufferedSource_$1)

@implementation OkioRealBufferedSource

- (instancetype)initWithOkioSource:(id<OkioSource>)source
                    withOkioBuffer:(OkioBuffer *)buffer {
  OkioRealBufferedSource_initWithOkioSource_withOkioBuffer_(self, source, buffer);
  return self;
}

- (instancetype)initWithOkioSource:(id<OkioSource>)source {
  OkioRealBufferedSource_initWithOkioSource_(self, source);
  return self;
}

- (OkioBuffer *)buffer {
  return buffer_;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (sink == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sink == null");
  if (byteCount < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"byteCount < 0: ", byteCount));
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  if (((OkioBuffer *) nil_chk(buffer_))->size_ == 0) {
    jlong read = [((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE];
    if (read == -1) return -1;
  }
  jlong toRead = JavaLangMath_minWithLong_withLong_(byteCount, buffer_->size_);
  return [buffer_ readWithOkioBuffer:sink withLong:toRead];
}

- (jboolean)exhausted {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  return [((OkioBuffer *) nil_chk(buffer_)) exhausted] && [((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1;
}

- (void)requireWithLong:(jlong)byteCount {
  if (![self requestWithLong:byteCount]) @throw new_JavaIoEOFException_init();
}

- (jboolean)requestWithLong:(jlong)byteCount {
  if (byteCount < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"byteCount < 0: ", byteCount));
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  while (((OkioBuffer *) nil_chk(buffer_))->size_ < byteCount) {
    if ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) return false;
  }
  return true;
}

- (jbyte)readByte {
  [self requireWithLong:1];
  return [((OkioBuffer *) nil_chk(buffer_)) readByte];
}

- (OkioByteString *)readByteString {
  [((OkioBuffer *) nil_chk(buffer_)) writeAllWithOkioSource:source_];
  return [buffer_ readByteString];
}

- (OkioByteString *)readByteStringWithLong:(jlong)byteCount {
  [self requireWithLong:byteCount];
  return [((OkioBuffer *) nil_chk(buffer_)) readByteStringWithLong:byteCount];
}

- (IOSByteArray *)readByteArray {
  [((OkioBuffer *) nil_chk(buffer_)) writeAllWithOkioSource:source_];
  return [buffer_ readByteArray];
}

- (IOSByteArray *)readByteArrayWithLong:(jlong)byteCount {
  [self requireWithLong:byteCount];
  return [((OkioBuffer *) nil_chk(buffer_)) readByteArrayWithLong:byteCount];
}

- (jint)readWithByteArray:(IOSByteArray *)sink {
  return [self readWithByteArray:sink withInt:0 withInt:((IOSByteArray *) nil_chk(sink))->size_];
}

- (void)readFullyWithByteArray:(IOSByteArray *)sink {
  @try {
    [self requireWithLong:((IOSByteArray *) nil_chk(sink))->size_];
  }
  @catch (JavaIoEOFException *e) {
    jint offset = 0;
    while (((OkioBuffer *) nil_chk(buffer_))->size_ > 0) {
      jint read = [buffer_ readWithByteArray:sink withInt:offset withInt:(jint) buffer_->size_ - offset];
      if (read == -1) @throw new_JavaLangAssertionError_init();
      offset += read;
    }
    @throw e;
  }
  [((OkioBuffer *) nil_chk(buffer_)) readFullyWithByteArray:sink];
}

- (jint)readWithByteArray:(IOSByteArray *)sink
                  withInt:(jint)offset
                  withInt:(jint)byteCount {
  OkioUtil_checkOffsetAndCountWithLong_withLong_withLong_(((IOSByteArray *) nil_chk(sink))->size_, offset, byteCount);
  if (((OkioBuffer *) nil_chk(buffer_))->size_ == 0) {
    jlong read = [((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE];
    if (read == -1) return -1;
  }
  jint toRead = (jint) JavaLangMath_minWithLong_withLong_(byteCount, buffer_->size_);
  return [buffer_ readWithByteArray:sink withInt:offset withInt:toRead];
}

- (void)readFullyWithOkioBuffer:(OkioBuffer *)sink
                       withLong:(jlong)byteCount {
  @try {
    [self requireWithLong:byteCount];
  }
  @catch (JavaIoEOFException *e) {
    [((OkioBuffer *) nil_chk(sink)) writeAllWithOkioSource:buffer_];
    @throw e;
  }
  [((OkioBuffer *) nil_chk(buffer_)) readFullyWithOkioBuffer:sink withLong:byteCount];
}

- (jlong)readAllWithOkioSink:(id<OkioSink>)sink {
  if (sink == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sink == null");
  jlong totalBytesWritten = 0;
  while ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] != -1) {
    jlong emitByteCount = [((OkioBuffer *) nil_chk(buffer_)) completeSegmentByteCount];
    if (emitByteCount > 0) {
      totalBytesWritten += emitByteCount;
      [((id<OkioSink>) nil_chk(sink)) writeWithOkioBuffer:buffer_ withLong:emitByteCount];
    }
  }
  if ([((OkioBuffer *) nil_chk(buffer_)) size] > 0) {
    totalBytesWritten += [buffer_ size];
    [((id<OkioSink>) nil_chk(sink)) writeWithOkioBuffer:buffer_ withLong:[buffer_ size]];
  }
  return totalBytesWritten;
}

- (NSString *)readUtf8 {
  [((OkioBuffer *) nil_chk(buffer_)) writeAllWithOkioSource:source_];
  return [buffer_ readUtf8];
}

- (NSString *)readUtf8WithLong:(jlong)byteCount {
  [self requireWithLong:byteCount];
  return [((OkioBuffer *) nil_chk(buffer_)) readUtf8WithLong:byteCount];
}

- (NSString *)readStringWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  if (charset == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"charset == null");
  [((OkioBuffer *) nil_chk(buffer_)) writeAllWithOkioSource:source_];
  return [buffer_ readStringWithJavaNioCharsetCharset:charset];
}

- (NSString *)readStringWithLong:(jlong)byteCount
       withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  [self requireWithLong:byteCount];
  if (charset == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"charset == null");
  return [((OkioBuffer *) nil_chk(buffer_)) readStringWithLong:byteCount withJavaNioCharsetCharset:charset];
}

- (NSString *)readUtf8Line {
  jlong newline = [self indexOfWithByte:(jbyte) 0x000a];
  if (newline == -1) {
    return ((OkioBuffer *) nil_chk(buffer_))->size_ != 0 ? [self readUtf8WithLong:buffer_->size_] : nil;
  }
  return [((OkioBuffer *) nil_chk(buffer_)) readUtf8LineWithLong:newline];
}

- (NSString *)readUtf8LineStrict {
  jlong newline = [self indexOfWithByte:(jbyte) 0x000a];
  if (newline == -1LL) @throw new_JavaIoEOFException_init();
  return [((OkioBuffer *) nil_chk(buffer_)) readUtf8LineWithLong:newline];
}

- (jshort)readShort {
  [self requireWithLong:2];
  return [((OkioBuffer *) nil_chk(buffer_)) readShort];
}

- (jshort)readShortLe {
  [self requireWithLong:2];
  return [((OkioBuffer *) nil_chk(buffer_)) readShortLe];
}

- (jint)readInt {
  [self requireWithLong:4];
  return [((OkioBuffer *) nil_chk(buffer_)) readInt];
}

- (jint)readIntLe {
  [self requireWithLong:4];
  return [((OkioBuffer *) nil_chk(buffer_)) readIntLe];
}

- (jlong)readLong {
  [self requireWithLong:8];
  return [((OkioBuffer *) nil_chk(buffer_)) readLong];
}

- (jlong)readLongLe {
  [self requireWithLong:8];
  return [((OkioBuffer *) nil_chk(buffer_)) readLongLe];
}

- (void)skipWithLong:(jlong)byteCount {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  while (byteCount > 0) {
    if (((OkioBuffer *) nil_chk(buffer_))->size_ == 0 && [((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) {
      @throw new_JavaIoEOFException_init();
    }
    jlong toSkip = JavaLangMath_minWithLong_withLong_(byteCount, [buffer_ size]);
    [buffer_ skipWithLong:toSkip];
    byteCount -= toSkip;
  }
}

- (jlong)indexOfWithByte:(jbyte)b {
  return [self indexOfWithByte:b withLong:0];
}

- (jlong)indexOfWithByte:(jbyte)b
                withLong:(jlong)fromIndex {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  while (fromIndex >= ((OkioBuffer *) nil_chk(buffer_))->size_) {
    if ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) return -1LL;
  }
  jlong index;
  while ((index = [buffer_ indexOfWithByte:b withLong:fromIndex]) == -1) {
    fromIndex = buffer_->size_;
    if ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) return -1LL;
  }
  return index;
}

- (jlong)indexOfElementWithOkioByteString:(OkioByteString *)targetBytes {
  return [self indexOfElementWithOkioByteString:targetBytes withLong:0];
}

- (jlong)indexOfElementWithOkioByteString:(OkioByteString *)targetBytes
                                 withLong:(jlong)fromIndex {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"closed");
  while (fromIndex >= ((OkioBuffer *) nil_chk(buffer_))->size_) {
    if ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) return -1LL;
  }
  jlong index;
  while ((index = [buffer_ indexOfElementWithOkioByteString:targetBytes withLong:fromIndex]) == -1) {
    fromIndex = buffer_->size_;
    if ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) return -1LL;
  }
  return index;
}

- (JavaIoInputStream *)inputStream {
  return new_OkioRealBufferedSource_$1_initWithOkioRealBufferedSource_(self);
}

- (void)close {
  if (closed_) return;
  closed_ = true;
  [((id<OkioSource>) nil_chk(source_)) close];
  [((OkioBuffer *) nil_chk(buffer_)) clear];
}

- (OkioTimeout *)timeout {
  return [((id<OkioSource>) nil_chk(source_)) timeout];
}

- (NSString *)description {
  return JreStrcat("$@C", @"buffer(", source_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOkioSource:withOkioBuffer:", "RealBufferedSource", NULL, 0x1, NULL, NULL },
    { "initWithOkioSource:", "RealBufferedSource", NULL, 0x1, NULL, NULL },
    { "buffer", NULL, "Lokio.Buffer;", 0x1, NULL, NULL },
    { "readWithOkioBuffer:withLong:", "read", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "exhausted", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "requireWithLong:", "require", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "requestWithLong:", "request", "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "readByte", NULL, "B", 0x1, "Ljava.io.IOException;", NULL },
    { "readByteString", NULL, "Lokio.ByteString;", 0x1, "Ljava.io.IOException;", NULL },
    { "readByteStringWithLong:", "readByteString", "Lokio.ByteString;", 0x1, "Ljava.io.IOException;", NULL },
    { "readByteArray", NULL, "[B", 0x1, "Ljava.io.IOException;", NULL },
    { "readByteArrayWithLong:", "readByteArray", "[B", 0x1, "Ljava.io.IOException;", NULL },
    { "readWithByteArray:", "read", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "readFullyWithByteArray:", "readFully", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readWithByteArray:withInt:withInt:", "read", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "readFullyWithOkioBuffer:withLong:", "readFully", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readAllWithOkioSink:", "readAll", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "readUtf8", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "readUtf8WithLong:", "readUtf8", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "readStringWithJavaNioCharsetCharset:", "readString", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "readStringWithLong:withJavaNioCharsetCharset:", "readString", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "readUtf8Line", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "readUtf8LineStrict", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "readShort", NULL, "S", 0x1, "Ljava.io.IOException;", NULL },
    { "readShortLe", NULL, "S", 0x1, "Ljava.io.IOException;", NULL },
    { "readInt", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "readIntLe", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "readLong", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "readLongLe", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "skipWithLong:", "skip", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "indexOfWithByte:", "indexOf", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "indexOfWithByte:withLong:", "indexOf", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "indexOfElementWithOkioByteString:", "indexOfElement", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "indexOfElementWithOkioByteString:withLong:", "indexOfElement", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "inputStream", NULL, "Ljava.io.InputStream;", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "timeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "buffer_", NULL, 0x11, "Lokio.Buffer;", NULL, NULL, .constantValue.asLong = 0 },
    { "source_", NULL, 0x11, "Lokio.Source;", NULL, NULL, .constantValue.asLong = 0 },
    { "closed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OkioRealBufferedSource = { 2, "RealBufferedSource", "okio", NULL, 0x10, 38, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OkioRealBufferedSource;
}

@end

void OkioRealBufferedSource_initWithOkioSource_withOkioBuffer_(OkioRealBufferedSource *self, id<OkioSource> source, OkioBuffer *buffer) {
  NSObject_init(self);
  if (source == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"source == null");
  self->buffer_ = buffer;
  self->source_ = source;
}

OkioRealBufferedSource *new_OkioRealBufferedSource_initWithOkioSource_withOkioBuffer_(id<OkioSource> source, OkioBuffer *buffer) {
  OkioRealBufferedSource *self = [OkioRealBufferedSource alloc];
  OkioRealBufferedSource_initWithOkioSource_withOkioBuffer_(self, source, buffer);
  return self;
}

OkioRealBufferedSource *create_OkioRealBufferedSource_initWithOkioSource_withOkioBuffer_(id<OkioSource> source, OkioBuffer *buffer) {
  return new_OkioRealBufferedSource_initWithOkioSource_withOkioBuffer_(source, buffer);
}

void OkioRealBufferedSource_initWithOkioSource_(OkioRealBufferedSource *self, id<OkioSource> source) {
  OkioRealBufferedSource_initWithOkioSource_withOkioBuffer_(self, source, new_OkioBuffer_init());
}

OkioRealBufferedSource *new_OkioRealBufferedSource_initWithOkioSource_(id<OkioSource> source) {
  OkioRealBufferedSource *self = [OkioRealBufferedSource alloc];
  OkioRealBufferedSource_initWithOkioSource_(self, source);
  return self;
}

OkioRealBufferedSource *create_OkioRealBufferedSource_initWithOkioSource_(id<OkioSource> source) {
  return new_OkioRealBufferedSource_initWithOkioSource_(source);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioRealBufferedSource)

@implementation OkioRealBufferedSource_$1

- (jint)read {
  if (this$0_->closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
  if (((OkioBuffer *) nil_chk(this$0_->buffer_))->size_ == 0) {
    jlong count = [((id<OkioSource>) nil_chk(this$0_->source_)) readWithOkioBuffer:this$0_->buffer_ withLong:OkioSegment_SIZE];
    if (count == -1) return -1;
  }
  return [this$0_->buffer_ readByte] & (jint) 0xff;
}

- (jint)readWithByteArray:(IOSByteArray *)data
                  withInt:(jint)offset
                  withInt:(jint)byteCount {
  if (this$0_->closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
  OkioUtil_checkOffsetAndCountWithLong_withLong_withLong_(((IOSByteArray *) nil_chk(data))->size_, offset, byteCount);
  if (((OkioBuffer *) nil_chk(this$0_->buffer_))->size_ == 0) {
    jlong count = [((id<OkioSource>) nil_chk(this$0_->source_)) readWithOkioBuffer:this$0_->buffer_ withLong:OkioSegment_SIZE];
    if (count == -1) return -1;
  }
  return [this$0_->buffer_ readWithByteArray:data withInt:offset withInt:byteCount];
}

- (jint)available {
  if (this$0_->closed_) @throw new_JavaIoIOException_initWithNSString_(@"closed");
  return (jint) JavaLangMath_minWithLong_withLong_(((OkioBuffer *) nil_chk(this$0_->buffer_))->size_, JavaLangInteger_MAX_VALUE);
}

- (void)close {
  [this$0_ close];
}

- (NSString *)description {
  return JreStrcat("@$", this$0_, @".inputStream()");
}

- (instancetype)initWithOkioRealBufferedSource:(OkioRealBufferedSource *)outer$ {
  OkioRealBufferedSource_$1_initWithOkioRealBufferedSource_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "read", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "readWithByteArray:withInt:withInt:", "read", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "available", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithOkioRealBufferedSource:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lokio.RealBufferedSource;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OkioRealBufferedSource", "inputStream" };
  static const J2ObjcClassInfo _OkioRealBufferedSource_$1 = { 2, "", "okio", "RealBufferedSource", 0x8008, 6, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OkioRealBufferedSource_$1;
}

@end

void OkioRealBufferedSource_$1_initWithOkioRealBufferedSource_(OkioRealBufferedSource_$1 *self, OkioRealBufferedSource *outer$) {
  self->this$0_ = outer$;
  JavaIoInputStream_init(self);
}

OkioRealBufferedSource_$1 *new_OkioRealBufferedSource_$1_initWithOkioRealBufferedSource_(OkioRealBufferedSource *outer$) {
  OkioRealBufferedSource_$1 *self = [OkioRealBufferedSource_$1 alloc];
  OkioRealBufferedSource_$1_initWithOkioRealBufferedSource_(self, outer$);
  return self;
}

OkioRealBufferedSource_$1 *create_OkioRealBufferedSource_$1_initWithOkioRealBufferedSource_(OkioRealBufferedSource *outer$) {
  return new_OkioRealBufferedSource_$1_initWithOkioRealBufferedSource_(outer$);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioRealBufferedSource_$1)
