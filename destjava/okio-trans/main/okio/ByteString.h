//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okio/okio/src/main/java/okio/ByteString.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OkioByteString_INCLUDE_ALL")
#ifdef OkioByteString_RESTRICT
#define OkioByteString_INCLUDE_ALL 0
#else
#define OkioByteString_INCLUDE_ALL 1
#endif
#undef OkioByteString_RESTRICT

#if !defined (OkioByteString_) && (OkioByteString_INCLUDE_ALL || defined(OkioByteString_INCLUDE))
#define OkioByteString_

#define JavaIoSerializable_RESTRICT 1
#define JavaIoSerializable_INCLUDE 1
#include "java/io/Serializable.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;

@interface OkioByteString : NSObject < JavaIoSerializable > {
 @public
  IOSByteArray *data_;
}

#pragma mark Public

- (NSString *)base64;

+ (OkioByteString *)decodeBase64WithNSString:(NSString *)base64;

+ (OkioByteString *)decodeHexWithNSString:(NSString *)hex;

+ (OkioByteString *)encodeUtf8WithNSString:(NSString *)s;

- (jboolean)isEqual:(id)o;

- (jbyte)getByteWithInt:(jint)pos;

- (NSUInteger)hash;

- (NSString *)hex;

+ (OkioByteString *)ofWithByteArray:(IOSByteArray *)data;

+ (OkioByteString *)ofWithByteArray:(IOSByteArray *)data
                            withInt:(jint)offset
                            withInt:(jint)byteCount;

+ (OkioByteString *)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                      withInt:(jint)byteCount;

- (jint)size;

- (OkioByteString *)toAsciiLowercase;

- (OkioByteString *)toAsciiUppercase;

- (IOSByteArray *)toByteArray;

- (NSString *)description;

- (NSString *)utf8;

- (void)writeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

#pragma mark Package-Private

- (instancetype)initWithByteArray:(IOSByteArray *)data;

@end

J2OBJC_STATIC_INIT(OkioByteString)

J2OBJC_FIELD_SETTER(OkioByteString, data_, IOSByteArray *)

inline OkioByteString *OkioByteString_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioByteString *OkioByteString_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OkioByteString, EMPTY, OkioByteString *)

FOUNDATION_EXPORT void OkioByteString_initWithByteArray_(OkioByteString *self, IOSByteArray *data);

FOUNDATION_EXPORT OkioByteString *new_OkioByteString_initWithByteArray_(IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioByteString *create_OkioByteString_initWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT OkioByteString *OkioByteString_ofWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT OkioByteString *OkioByteString_ofWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint byteCount);

FOUNDATION_EXPORT OkioByteString *OkioByteString_encodeUtf8WithNSString_(NSString *s);

FOUNDATION_EXPORT OkioByteString *OkioByteString_decodeBase64WithNSString_(NSString *base64);

FOUNDATION_EXPORT OkioByteString *OkioByteString_decodeHexWithNSString_(NSString *hex);

FOUNDATION_EXPORT OkioByteString *OkioByteString_readWithJavaIoInputStream_withInt_(JavaIoInputStream *inArg, jint byteCount);

J2OBJC_TYPE_LITERAL_HEADER(OkioByteString)

#endif

#pragma pop_macro("OkioByteString_INCLUDE_ALL")
