//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okio/okio/src/main/java/okio/Util.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Long.h"
#include "java/nio/charset/Charset.h"
#include "okio/Util.h"

@interface OkioUtil ()

- (instancetype)init;

+ (void)sneakyThrow2WithNSException:(NSException *)t;
#ifdef J2OBJC_RENAME_ALIASES
#define sneakyThrow2WithJavaLangThrowable sneakyThrow2WithNSException
#endif // J2OBJC_RENAME_ALIASES

@end

__attribute__((unused)) static void OkioUtil_init(OkioUtil *self);

__attribute__((unused)) static OkioUtil *new_OkioUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioUtil *create_OkioUtil_init();

__attribute__((unused)) static void OkioUtil_sneakyThrow2WithNSException_(NSException *t);

J2OBJC_INITIALIZED_DEFN(OkioUtil)

JavaNioCharsetCharset *OkioUtil_UTF_8;

@implementation OkioUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)checkOffsetAndCountWithLong:(jlong)size
                           withLong:(jlong)offset
                           withLong:(jlong)byteCount {
  OkioUtil_checkOffsetAndCountWithLong_withLong_withLong_(size, offset, byteCount);
}

+ (jshort)reverseBytesShortWithShort:(jshort)s {
  return OkioUtil_reverseBytesShortWithShort_(s);
}

+ (jint)reverseBytesIntWithInt:(jint)i {
  return OkioUtil_reverseBytesIntWithInt_(i);
}

+ (jlong)reverseBytesLongWithLong:(jlong)v {
  return OkioUtil_reverseBytesLongWithLong_(v);
}

+ (void)sneakyRethrowWithNSException:(NSException *)t {
  OkioUtil_sneakyRethrowWithNSException_(t);
}

+ (void)sneakyThrow2WithNSException:(NSException *)t {
  OkioUtil_sneakyThrow2WithNSException_(t);
}

+ (void)initialize {
  if (self == [OkioUtil class]) {
    OkioUtil_UTF_8 = JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8");
    J2OBJC_SET_INITIALIZED(OkioUtil)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Util", NULL, 0x2, NULL, NULL },
    { "checkOffsetAndCountWithLong:withLong:withLong:", "checkOffsetAndCount", "V", 0x9, NULL, NULL },
    { "reverseBytesShortWithShort:", "reverseBytesShort", "S", 0x9, NULL, NULL },
    { "reverseBytesIntWithInt:", "reverseBytesInt", "I", 0x9, NULL, NULL },
    { "reverseBytesLongWithLong:", "reverseBytesLong", "J", 0x9, NULL, NULL },
    { "sneakyRethrowWithNSException:", "sneakyRethrow", "V", 0x9, NULL, NULL },
    { "sneakyThrow2WithNSException:", "sneakyThrow2", "V", 0xa, "TT;", "<T:Ljava/lang/Throwable;>(Ljava/lang/Throwable;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "UTF_8", "UTF_8", 0x19, "Ljava.nio.charset.Charset;", &OkioUtil_UTF_8, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OkioUtil = { 2, "Util", "okio", NULL, 0x10, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OkioUtil;
}

@end

void OkioUtil_init(OkioUtil *self) {
  NSObject_init(self);
}

OkioUtil *new_OkioUtil_init() {
  OkioUtil *self = [OkioUtil alloc];
  OkioUtil_init(self);
  return self;
}

OkioUtil *create_OkioUtil_init() {
  return new_OkioUtil_init();
}

void OkioUtil_checkOffsetAndCountWithLong_withLong_withLong_(jlong size, jlong offset, jlong byteCount) {
  OkioUtil_initialize();
  if ((offset | byteCount) < 0 || offset > size || size - offset < byteCount) {
    @throw new_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(@"size=%s offset=%s byteCount=%s", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(size), JavaLangLong_valueOfWithLong_(offset), JavaLangLong_valueOfWithLong_(byteCount) } count:3 type:NSObject_class_()]));
  }
}

jshort OkioUtil_reverseBytesShortWithShort_(jshort s) {
  OkioUtil_initialize();
  jint i = s & (jint) 0xffff;
  jint reversed = (JreURShift32((i & (jint) 0xff00), 8)) | (JreLShift32((i & (jint) 0x00ff), 8));
  return (jshort) reversed;
}

jint OkioUtil_reverseBytesIntWithInt_(jint i) {
  OkioUtil_initialize();
  return (JreURShift32((i & (jint) 0xff000000), 24)) | (JreURShift32((i & (jint) 0x00ff0000), 8)) | (JreLShift32((i & (jint) 0x0000ff00), 8)) | (JreLShift32((i & (jint) 0x000000ff), 24));
}

jlong OkioUtil_reverseBytesLongWithLong_(jlong v) {
  OkioUtil_initialize();
  return (JreURShift64((v & (jlong) 0xff00000000000000LL), 56)) | (JreURShift64((v & (jlong) 0x00ff000000000000LL), 40)) | (JreURShift64((v & (jlong) 0x0000ff0000000000LL), 24)) | (JreURShift64((v & (jlong) 0x000000ff00000000LL), 8)) | (JreLShift64((v & (jlong) 0x00000000ff000000LL), 8)) | (JreLShift64((v & (jlong) 0x0000000000ff0000LL), 24)) | (JreLShift64((v & (jlong) 0x000000000000ff00LL), 40)) | (JreLShift64((v & (jlong) 0x00000000000000ffLL), 56));
}

void OkioUtil_sneakyRethrowWithNSException_(NSException *t) {
  OkioUtil_initialize();
  OkioUtil_sneakyThrow2WithNSException_(t);
}

void OkioUtil_sneakyThrow2WithNSException_(NSException *t) {
  OkioUtil_initialize();
  @throw t;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioUtil)
