//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/EventBus/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/util/Log.h"
#include "de/greenrobot/event/EventBus.h"
#include "de/greenrobot/event/EventBusException.h"
#include "de/greenrobot/event/SubscriberMethod.h"
#include "de/greenrobot/event/SubscriberMethodFinder.h"
#include "de/greenrobot/event/ThreadMode.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@interface DeGreenrobotEventSubscriberMethodFinder () {
 @public
  id<JavaUtilMap> skipMethodVerificationForClasses_;
}

@end

J2OBJC_FIELD_SETTER(DeGreenrobotEventSubscriberMethodFinder, skipMethodVerificationForClasses_, id<JavaUtilMap>)

inline jint DeGreenrobotEventSubscriberMethodFinder_get_BRIDGE();
#define DeGreenrobotEventSubscriberMethodFinder_BRIDGE 64
J2OBJC_STATIC_FIELD_CONSTANT(DeGreenrobotEventSubscriberMethodFinder, BRIDGE, jint)

inline jint DeGreenrobotEventSubscriberMethodFinder_get_SYNTHETIC();
#define DeGreenrobotEventSubscriberMethodFinder_SYNTHETIC 4096
J2OBJC_STATIC_FIELD_CONSTANT(DeGreenrobotEventSubscriberMethodFinder, SYNTHETIC, jint)

inline jint DeGreenrobotEventSubscriberMethodFinder_get_MODIFIERS_IGNORE();
#define DeGreenrobotEventSubscriberMethodFinder_MODIFIERS_IGNORE 5192
J2OBJC_STATIC_FIELD_CONSTANT(DeGreenrobotEventSubscriberMethodFinder, MODIFIERS_IGNORE, jint)

inline id<JavaUtilMap> DeGreenrobotEventSubscriberMethodFinder_get_methodCache();
static id<JavaUtilMap> DeGreenrobotEventSubscriberMethodFinder_methodCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DeGreenrobotEventSubscriberMethodFinder, methodCache, id<JavaUtilMap>)

J2OBJC_INITIALIZED_DEFN(DeGreenrobotEventSubscriberMethodFinder)

@implementation DeGreenrobotEventSubscriberMethodFinder

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)skipMethodVerificationForClassesList {
  DeGreenrobotEventSubscriberMethodFinder_initWithJavaUtilList_(self, skipMethodVerificationForClassesList);
  return self;
}

- (id<JavaUtilList>)findSubscriberMethodsWithIOSClass:(IOSClass *)subscriberClass
                                         withNSString:(NSString *)eventMethodName {
  NSString *key = JreStrcat("$C$", [((IOSClass *) nil_chk(subscriberClass)) getName], '.', eventMethodName);
  id<JavaUtilList> subscriberMethods;
  @synchronized(DeGreenrobotEventSubscriberMethodFinder_methodCache) {
    subscriberMethods = [((id<JavaUtilMap>) nil_chk(DeGreenrobotEventSubscriberMethodFinder_methodCache)) getWithId:key];
  }
  if (subscriberMethods != nil) {
    return subscriberMethods;
  }
  subscriberMethods = new_JavaUtilArrayList_init();
  IOSClass *clazz = subscriberClass;
  JavaUtilHashSet *eventTypesFound = new_JavaUtilHashSet_init();
  JavaLangStringBuilder *methodKeyBuilder = new_JavaLangStringBuilder_init();
  while (clazz != nil) {
    NSString *name = [clazz getName];
    if ([((NSString *) nil_chk(name)) hasPrefix:@"java."] || [name hasPrefix:@"javax."] || [name hasPrefix:@"android."]) {
      break;
    }
    IOSObjectArray *methods = [clazz getDeclaredMethods];
    {
      IOSObjectArray *a__ = methods;
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *method = *b__++;
        NSString *methodName = [((JavaLangReflectMethod *) nil_chk(method)) getName];
        if ([((NSString *) nil_chk(methodName)) hasPrefix:eventMethodName]) {
          jint modifiers = [method getModifiers];
          if ((modifiers & JavaLangReflectModifier_PUBLIC) != 0 && (modifiers & DeGreenrobotEventSubscriberMethodFinder_MODIFIERS_IGNORE) == 0) {
            IOSObjectArray *parameterTypes = [method getParameterTypes];
            if (((IOSObjectArray *) nil_chk(parameterTypes))->size_ == 1) {
              NSString *modifierString = [methodName substring:((jint) [((NSString *) nil_chk(eventMethodName)) length])];
              DeGreenrobotEventThreadMode *threadMode;
              if (((jint) [((NSString *) nil_chk(modifierString)) length]) == 0) {
                threadMode = JreLoadEnum(DeGreenrobotEventThreadMode, PostThread);
              }
              else if ([modifierString isEqual:@"MainThread"]) {
                threadMode = JreLoadEnum(DeGreenrobotEventThreadMode, MainThread);
              }
              else if ([modifierString isEqual:@"BackgroundThread"]) {
                threadMode = JreLoadEnum(DeGreenrobotEventThreadMode, BackgroundThread);
              }
              else if ([modifierString isEqual:@"Async"]) {
                threadMode = JreLoadEnum(DeGreenrobotEventThreadMode, Async);
              }
              else {
                if ([((id<JavaUtilMap>) nil_chk(skipMethodVerificationForClasses_)) containsKeyWithId:clazz]) {
                  continue;
                }
                else {
                  @throw new_DeGreenrobotEventEventBusException_initWithNSString_(JreStrcat("$@", @"Illegal onEvent method, check for typos: ", method));
                }
              }
              IOSClass *eventType = IOSObjectArray_Get(parameterTypes, 0);
              [methodKeyBuilder setLengthWithInt:0];
              (void) [methodKeyBuilder appendWithNSString:methodName];
              (void) [((JavaLangStringBuilder *) nil_chk([methodKeyBuilder appendWithChar:'>'])) appendWithNSString:[((IOSClass *) nil_chk(eventType)) getName]];
              NSString *methodKey = [methodKeyBuilder description];
              if ([eventTypesFound addWithId:methodKey]) {
                [subscriberMethods addWithId:new_DeGreenrobotEventSubscriberMethod_initWithJavaLangReflectMethod_withDeGreenrobotEventThreadMode_withIOSClass_(method, threadMode, eventType)];
              }
            }
          }
          else if (![((id<JavaUtilMap>) nil_chk(skipMethodVerificationForClasses_)) containsKeyWithId:clazz]) {
            AndroidUtilLog_dWithNSString_withNSString_(JreLoadStatic(DeGreenrobotEventEventBus, TAG), JreStrcat("$@C$", @"Skipping method (not public, static or abstract): ", clazz, '.', methodName));
          }
        }
      }
    }
    clazz = [clazz getSuperclass];
  }
  if ([subscriberMethods isEmpty]) {
    @throw new_DeGreenrobotEventEventBusException_initWithNSString_(JreStrcat("$@$$", @"Subscriber ", subscriberClass, @" has no public methods called ", eventMethodName));
  }
  else {
    @synchronized(DeGreenrobotEventSubscriberMethodFinder_methodCache) {
      (void) [DeGreenrobotEventSubscriberMethodFinder_methodCache putWithId:key withId:subscriberMethods];
    }
    return subscriberMethods;
  }
}

+ (void)clearCaches {
  DeGreenrobotEventSubscriberMethodFinder_clearCaches();
}

+ (void)initialize {
  if (self == [DeGreenrobotEventSubscriberMethodFinder class]) {
    DeGreenrobotEventSubscriberMethodFinder_methodCache = new_JavaUtilHashMap_init();
    J2OBJC_SET_INITIALIZED(DeGreenrobotEventSubscriberMethodFinder)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:", "SubscriberMethodFinder", NULL, 0x0, NULL, "(Ljava/util/List<Ljava/lang/Class<*>;>;)V" },
    { "findSubscriberMethodsWithIOSClass:withNSString:", "findSubscriberMethods", "Ljava.util.List;", 0x0, NULL, "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/util/List<Lde/greenrobot/event/SubscriberMethod;>;" },
    { "clearCaches", NULL, "V", 0x8, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BRIDGE", "BRIDGE", 0x1a, "I", NULL, NULL, .constantValue.asInt = DeGreenrobotEventSubscriberMethodFinder_BRIDGE },
    { "SYNTHETIC", "SYNTHETIC", 0x1a, "I", NULL, NULL, .constantValue.asInt = DeGreenrobotEventSubscriberMethodFinder_SYNTHETIC },
    { "MODIFIERS_IGNORE", "MODIFIERS_IGNORE", 0x1a, "I", NULL, NULL, .constantValue.asInt = DeGreenrobotEventSubscriberMethodFinder_MODIFIERS_IGNORE },
    { "methodCache", "methodCache", 0x1a, "Ljava.util.Map;", &DeGreenrobotEventSubscriberMethodFinder_methodCache, "Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Lde/greenrobot/event/SubscriberMethod;>;>;", .constantValue.asLong = 0 },
    { "skipMethodVerificationForClasses_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/lang/Class<*>;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _DeGreenrobotEventSubscriberMethodFinder = { 2, "SubscriberMethodFinder", "de.greenrobot.event", NULL, 0x0, 3, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_DeGreenrobotEventSubscriberMethodFinder;
}

@end

void DeGreenrobotEventSubscriberMethodFinder_initWithJavaUtilList_(DeGreenrobotEventSubscriberMethodFinder *self, id<JavaUtilList> skipMethodVerificationForClassesList) {
  NSObject_init(self);
  self->skipMethodVerificationForClasses_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  if (skipMethodVerificationForClassesList != nil) {
    for (IOSClass * __strong clazz in skipMethodVerificationForClassesList) {
      (void) [self->skipMethodVerificationForClasses_ putWithId:clazz withId:clazz];
    }
  }
}

DeGreenrobotEventSubscriberMethodFinder *new_DeGreenrobotEventSubscriberMethodFinder_initWithJavaUtilList_(id<JavaUtilList> skipMethodVerificationForClassesList) {
  DeGreenrobotEventSubscriberMethodFinder *self = [DeGreenrobotEventSubscriberMethodFinder alloc];
  DeGreenrobotEventSubscriberMethodFinder_initWithJavaUtilList_(self, skipMethodVerificationForClassesList);
  return self;
}

DeGreenrobotEventSubscriberMethodFinder *create_DeGreenrobotEventSubscriberMethodFinder_initWithJavaUtilList_(id<JavaUtilList> skipMethodVerificationForClassesList) {
  return new_DeGreenrobotEventSubscriberMethodFinder_initWithJavaUtilList_(skipMethodVerificationForClassesList);
}

void DeGreenrobotEventSubscriberMethodFinder_clearCaches() {
  DeGreenrobotEventSubscriberMethodFinder_initialize();
  @synchronized(DeGreenrobotEventSubscriberMethodFinder_methodCache) {
    [((id<JavaUtilMap>) nil_chk(DeGreenrobotEventSubscriberMethodFinder_methodCache)) clear];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventSubscriberMethodFinder)
