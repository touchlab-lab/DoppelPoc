//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/EventBus/EventBus/src/de/greenrobot/event/EventBus.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/os/Looper.h"
#include "android/util/Log.h"
#include "de/greenrobot/event/AsyncPoster.h"
#include "de/greenrobot/event/BackgroundPoster.h"
#include "de/greenrobot/event/EventBus.h"
#include "de/greenrobot/event/EventBusBuilder.h"
#include "de/greenrobot/event/EventBusException.h"
#include "de/greenrobot/event/HandlerPoster.h"
#include "de/greenrobot/event/NoSubscriberEvent.h"
#include "de/greenrobot/event/PendingPost.h"
#include "de/greenrobot/event/SubscriberExceptionEvent.h"
#include "de/greenrobot/event/SubscriberMethod.h"
#include "de/greenrobot/event/SubscriberMethodFinder.h"
#include "de/greenrobot/event/Subscription.h"
#include "de/greenrobot/event/ThreadMode.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/concurrent/ExecutorService.h"

@interface DeGreenrobotEventEventBus () {
 @public
  id<JavaUtilMap> subscriptionsByEventType_;
  id<JavaUtilMap> typesBySubscriber_;
  id<JavaUtilMap> stickyEvents_;
  JavaLangThreadLocal *currentPostingThreadState_;
  DeGreenrobotEventHandlerPoster *mainThreadPoster_;
  DeGreenrobotEventBackgroundPoster *backgroundPoster_;
  DeGreenrobotEventAsyncPoster *asyncPoster_;
  DeGreenrobotEventSubscriberMethodFinder *subscriberMethodFinder_;
  id<JavaUtilConcurrentExecutorService> executorService_;
  jboolean throwSubscriberException_;
  jboolean logSubscriberExceptions_;
  jboolean logNoSubscriberMessages_;
  jboolean sendSubscriberExceptionEvent_;
  jboolean sendNoSubscriberEvent_;
  jboolean eventInheritance_;
}

- (void)register__WithId:(id)subscriber
            withNSString:(NSString *)methodName
             withBoolean:(jboolean)sticky
                 withInt:(jint)priority;

- (void)register__WithId:(id)subscriber
            withNSString:(NSString *)methodName
             withBoolean:(jboolean)sticky
            withIOSClass:(IOSClass *)eventType
       withIOSClassArray:(IOSObjectArray *)moreEventTypes;

- (void)subscribeWithId:(id)subscriber
withDeGreenrobotEventSubscriberMethod:(DeGreenrobotEventSubscriberMethod *)subscriberMethod
            withBoolean:(jboolean)sticky
                withInt:(jint)priority;

- (void)unubscribeByEventTypeWithId:(id)subscriber
                       withIOSClass:(IOSClass *)eventType;

- (void)postSingleEventWithId:(id)event
withDeGreenrobotEventEventBus_PostingThreadState:(DeGreenrobotEventEventBus_PostingThreadState *)postingState;

- (jboolean)postSingleEventForEventTypeWithId:(id)event
withDeGreenrobotEventEventBus_PostingThreadState:(DeGreenrobotEventEventBus_PostingThreadState *)postingState
                                 withIOSClass:(IOSClass *)eventClass;

- (void)postToSubscriptionWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                     withId:(id)event
                                                withBoolean:(jboolean)isMainThread;

- (id<JavaUtilList>)lookupAllEventTypesWithIOSClass:(IOSClass *)eventClass;

- (void)handleSubscriberExceptionWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                            withId:(id)event
                                                   withNSException:(NSException *)cause;
#ifdef J2OBJC_RENAME_ALIASES
#define withJavaLangThrowable withNSException
#endif // J2OBJC_RENAME_ALIASES

@end

J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, subscriptionsByEventType_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, typesBySubscriber_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, stickyEvents_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, currentPostingThreadState_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, mainThreadPoster_, DeGreenrobotEventHandlerPoster *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, backgroundPoster_, DeGreenrobotEventBackgroundPoster *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, asyncPoster_, DeGreenrobotEventAsyncPoster *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, subscriberMethodFinder_, DeGreenrobotEventSubscriberMethodFinder *)
J2OBJC_FIELD_SETTER(DeGreenrobotEventEventBus, executorService_, id<JavaUtilConcurrentExecutorService>)

inline DeGreenrobotEventEventBusBuilder *DeGreenrobotEventEventBus_get_DEFAULT_BUILDER();
static DeGreenrobotEventEventBusBuilder *DeGreenrobotEventEventBus_DEFAULT_BUILDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DeGreenrobotEventEventBus, DEFAULT_BUILDER, DeGreenrobotEventEventBusBuilder *)

inline NSString *DeGreenrobotEventEventBus_get_DEFAULT_METHOD_NAME();
static NSString *DeGreenrobotEventEventBus_DEFAULT_METHOD_NAME = @"onEvent";
J2OBJC_STATIC_FIELD_OBJ_FINAL(DeGreenrobotEventEventBus, DEFAULT_METHOD_NAME, NSString *)

inline id<JavaUtilMap> DeGreenrobotEventEventBus_get_eventTypesCache();
static id<JavaUtilMap> DeGreenrobotEventEventBus_eventTypesCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DeGreenrobotEventEventBus, eventTypesCache, id<JavaUtilMap>)

__attribute__((unused)) static void DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withInt_(DeGreenrobotEventEventBus *self, id subscriber, NSString *methodName, jboolean sticky, jint priority);

__attribute__((unused)) static void DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withIOSClass_withIOSClassArray_(DeGreenrobotEventEventBus *self, id subscriber, NSString *methodName, jboolean sticky, IOSClass *eventType, IOSObjectArray *moreEventTypes);

__attribute__((unused)) static void DeGreenrobotEventEventBus_subscribeWithId_withDeGreenrobotEventSubscriberMethod_withBoolean_withInt_(DeGreenrobotEventEventBus *self, id subscriber, DeGreenrobotEventSubscriberMethod *subscriberMethod, jboolean sticky, jint priority);

__attribute__((unused)) static void DeGreenrobotEventEventBus_unubscribeByEventTypeWithId_withIOSClass_(DeGreenrobotEventEventBus *self, id subscriber, IOSClass *eventType);

__attribute__((unused)) static void DeGreenrobotEventEventBus_postSingleEventWithId_withDeGreenrobotEventEventBus_PostingThreadState_(DeGreenrobotEventEventBus *self, id event, DeGreenrobotEventEventBus_PostingThreadState *postingState);

__attribute__((unused)) static jboolean DeGreenrobotEventEventBus_postSingleEventForEventTypeWithId_withDeGreenrobotEventEventBus_PostingThreadState_withIOSClass_(DeGreenrobotEventEventBus *self, id event, DeGreenrobotEventEventBus_PostingThreadState *postingState, IOSClass *eventClass);

__attribute__((unused)) static void DeGreenrobotEventEventBus_postToSubscriptionWithDeGreenrobotEventSubscription_withId_withBoolean_(DeGreenrobotEventEventBus *self, DeGreenrobotEventSubscription *subscription, id event, jboolean isMainThread);

__attribute__((unused)) static id<JavaUtilList> DeGreenrobotEventEventBus_lookupAllEventTypesWithIOSClass_(DeGreenrobotEventEventBus *self, IOSClass *eventClass);

__attribute__((unused)) static void DeGreenrobotEventEventBus_handleSubscriberExceptionWithDeGreenrobotEventSubscription_withId_withNSException_(DeGreenrobotEventEventBus *self, DeGreenrobotEventSubscription *subscription, id event, NSException *cause);

@interface DeGreenrobotEventEventBus_PostCallback : NSObject

@end

@interface DeGreenrobotEventEventBus_$1 : JavaLangThreadLocal

- (DeGreenrobotEventEventBus_PostingThreadState *)initialValue OBJC_METHOD_FAMILY_NONE;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(DeGreenrobotEventEventBus_$1)

__attribute__((unused)) static void DeGreenrobotEventEventBus_$1_init(DeGreenrobotEventEventBus_$1 *self);

__attribute__((unused)) static DeGreenrobotEventEventBus_$1 *new_DeGreenrobotEventEventBus_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DeGreenrobotEventEventBus_$1 *create_DeGreenrobotEventEventBus_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(DeGreenrobotEventEventBus_$1)

J2OBJC_INITIALIZED_DEFN(DeGreenrobotEventEventBus)

NSString *DeGreenrobotEventEventBus_TAG = @"Event";
volatile_id DeGreenrobotEventEventBus_defaultInstance;

@implementation DeGreenrobotEventEventBus

+ (DeGreenrobotEventEventBus *)getDefault {
  return DeGreenrobotEventEventBus_getDefault();
}

+ (DeGreenrobotEventEventBusBuilder *)builder {
  return DeGreenrobotEventEventBus_builder();
}

+ (void)clearCaches {
  DeGreenrobotEventEventBus_clearCaches();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DeGreenrobotEventEventBus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithDeGreenrobotEventEventBusBuilder:(DeGreenrobotEventEventBusBuilder *)builder {
  DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(self, builder);
  return self;
}

- (void)register__WithId:(id)subscriber {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withInt_(self, subscriber, DeGreenrobotEventEventBus_DEFAULT_METHOD_NAME, false, 0);
}

- (void)register__WithId:(id)subscriber
                 withInt:(jint)priority {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withInt_(self, subscriber, DeGreenrobotEventEventBus_DEFAULT_METHOD_NAME, false, priority);
}

- (void)register__WithId:(id)subscriber
            withNSString:(NSString *)methodName {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withInt_(self, subscriber, methodName, false, 0);
}

- (void)registerStickyWithId:(id)subscriber {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withInt_(self, subscriber, DeGreenrobotEventEventBus_DEFAULT_METHOD_NAME, true, 0);
}

- (void)registerStickyWithId:(id)subscriber
                     withInt:(jint)priority {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withInt_(self, subscriber, DeGreenrobotEventEventBus_DEFAULT_METHOD_NAME, true, priority);
}

- (void)registerStickyWithId:(id)subscriber
                withNSString:(NSString *)methodName {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withInt_(self, subscriber, methodName, true, 0);
}

- (void)register__WithId:(id)subscriber
            withNSString:(NSString *)methodName
             withBoolean:(jboolean)sticky
                 withInt:(jint)priority {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withInt_(self, subscriber, methodName, sticky, priority);
}

- (void)register__WithId:(id)subscriber
            withIOSClass:(IOSClass *)eventType
       withIOSClassArray:(IOSObjectArray *)moreEventTypes {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withIOSClass_withIOSClassArray_(self, subscriber, DeGreenrobotEventEventBus_DEFAULT_METHOD_NAME, false, eventType, moreEventTypes);
}

- (void)register__WithId:(id)subscriber
            withNSString:(NSString *)methodName
            withIOSClass:(IOSClass *)eventType
       withIOSClassArray:(IOSObjectArray *)moreEventTypes {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withIOSClass_withIOSClassArray_(self, subscriber, methodName, false, eventType, moreEventTypes);
}

- (void)registerStickyWithId:(id)subscriber
                withIOSClass:(IOSClass *)eventType
           withIOSClassArray:(IOSObjectArray *)moreEventTypes {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withIOSClass_withIOSClassArray_(self, subscriber, DeGreenrobotEventEventBus_DEFAULT_METHOD_NAME, true, eventType, moreEventTypes);
}

- (void)registerStickyWithId:(id)subscriber
                withNSString:(NSString *)methodName
                withIOSClass:(IOSClass *)eventType
           withIOSClassArray:(IOSObjectArray *)moreEventTypes {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withIOSClass_withIOSClassArray_(self, subscriber, methodName, true, eventType, moreEventTypes);
}

- (void)register__WithId:(id)subscriber
            withNSString:(NSString *)methodName
             withBoolean:(jboolean)sticky
            withIOSClass:(IOSClass *)eventType
       withIOSClassArray:(IOSObjectArray *)moreEventTypes {
  DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withIOSClass_withIOSClassArray_(self, subscriber, methodName, sticky, eventType, moreEventTypes);
}

- (void)subscribeWithId:(id)subscriber
withDeGreenrobotEventSubscriberMethod:(DeGreenrobotEventSubscriberMethod *)subscriberMethod
            withBoolean:(jboolean)sticky
                withInt:(jint)priority {
  DeGreenrobotEventEventBus_subscribeWithId_withDeGreenrobotEventSubscriberMethod_withBoolean_withInt_(self, subscriber, subscriberMethod, sticky, priority);
}

- (jboolean)isRegisteredWithId:(id)subscriber {
  @synchronized(self) {
    return [((id<JavaUtilMap>) nil_chk(typesBySubscriber_)) containsKeyWithId:subscriber];
  }
}

- (void)unregisterWithId:(id)subscriber
       withIOSClassArray:(IOSObjectArray *)eventTypes {
  @synchronized(self) {
    if (((IOSObjectArray *) nil_chk(eventTypes))->size_ == 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Provide at least one event class");
    }
    id<JavaUtilList> subscribedClasses = [((id<JavaUtilMap>) nil_chk(typesBySubscriber_)) getWithId:subscriber];
    if (subscribedClasses != nil) {
      {
        IOSObjectArray *a__ = eventTypes;
        IOSClass * const *b__ = a__->buffer_;
        IOSClass * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IOSClass *eventType = *b__++;
          DeGreenrobotEventEventBus_unubscribeByEventTypeWithId_withIOSClass_(self, subscriber, eventType);
          [subscribedClasses removeWithId:eventType];
        }
      }
      if ([subscribedClasses isEmpty]) {
        (void) [typesBySubscriber_ removeWithId:subscriber];
      }
    }
    else {
      AndroidUtilLog_wWithNSString_withNSString_(DeGreenrobotEventEventBus_TAG, JreStrcat("$@", @"Subscriber to unregister was not registered before: ", [nil_chk(subscriber) getClass]));
    }
  }
}

- (void)unubscribeByEventTypeWithId:(id)subscriber
                       withIOSClass:(IOSClass *)eventType {
  DeGreenrobotEventEventBus_unubscribeByEventTypeWithId_withIOSClass_(self, subscriber, eventType);
}

- (void)unregisterWithId:(id)subscriber {
  @synchronized(self) {
    id<JavaUtilList> subscribedTypes = [((id<JavaUtilMap>) nil_chk(typesBySubscriber_)) getWithId:subscriber];
    if (subscribedTypes != nil) {
      for (IOSClass * __strong eventType in subscribedTypes) {
        DeGreenrobotEventEventBus_unubscribeByEventTypeWithId_withIOSClass_(self, subscriber, eventType);
      }
      (void) [typesBySubscriber_ removeWithId:subscriber];
    }
    else {
      AndroidUtilLog_wWithNSString_withNSString_(DeGreenrobotEventEventBus_TAG, JreStrcat("$@", @"Subscriber to unregister was not registered before: ", [nil_chk(subscriber) getClass]));
    }
  }
}

- (void)postWithId:(id)event {
  DeGreenrobotEventEventBus_PostingThreadState *postingState = [((JavaLangThreadLocal *) nil_chk(currentPostingThreadState_)) get];
  id<JavaUtilList> eventQueue = ((DeGreenrobotEventEventBus_PostingThreadState *) nil_chk(postingState))->eventQueue_;
  [((id<JavaUtilList>) nil_chk(eventQueue)) addWithId:event];
  if (!postingState->isPosting_) {
    postingState->isMainThread_ = (AndroidOsLooper_getMainLooper() == AndroidOsLooper_myLooper());
    postingState->isPosting_ = true;
    if (postingState->canceled_) {
      @throw new_DeGreenrobotEventEventBusException_initWithNSString_(@"Internal error. Abort state was not reset");
    }
    @try {
      while (![eventQueue isEmpty]) {
        DeGreenrobotEventEventBus_postSingleEventWithId_withDeGreenrobotEventEventBus_PostingThreadState_(self, [eventQueue removeWithInt:0], postingState);
      }
    }
    @finally {
      postingState->isPosting_ = false;
      postingState->isMainThread_ = false;
    }
  }
}

- (void)cancelEventDeliveryWithId:(id)event {
  DeGreenrobotEventEventBus_PostingThreadState *postingState = [((JavaLangThreadLocal *) nil_chk(currentPostingThreadState_)) get];
  if (!((DeGreenrobotEventEventBus_PostingThreadState *) nil_chk(postingState))->isPosting_) {
    @throw new_DeGreenrobotEventEventBusException_initWithNSString_(@"This method may only be called from inside event handling methods on the posting thread");
  }
  else if (event == nil) {
    @throw new_DeGreenrobotEventEventBusException_initWithNSString_(@"Event may not be null");
  }
  else if (postingState->event_ != event) {
    @throw new_DeGreenrobotEventEventBusException_initWithNSString_(@"Only the currently handled event may be aborted");
  }
  else if (((DeGreenrobotEventSubscriberMethod *) nil_chk(((DeGreenrobotEventSubscription *) nil_chk(postingState->subscription_))->subscriberMethod_))->threadMode_ != JreLoadEnum(DeGreenrobotEventThreadMode, PostThread)) {
    @throw new_DeGreenrobotEventEventBusException_initWithNSString_(@" event handlers may only abort the incoming event");
  }
  postingState->canceled_ = true;
}

- (void)postStickyWithId:(id)event {
  @synchronized(stickyEvents_) {
    (void) [((id<JavaUtilMap>) nil_chk(stickyEvents_)) putWithId:[nil_chk(event) getClass] withId:event];
  }
  [self postWithId:event];
}

- (id)getStickyEventWithIOSClass:(IOSClass *)eventType {
  @synchronized(stickyEvents_) {
    return [((IOSClass *) nil_chk(eventType)) cast:[((id<JavaUtilMap>) nil_chk(stickyEvents_)) getWithId:eventType]];
  }
}

- (id)removeStickyEventWithIOSClass:(IOSClass *)eventType {
  @synchronized(stickyEvents_) {
    return [((IOSClass *) nil_chk(eventType)) cast:[((id<JavaUtilMap>) nil_chk(stickyEvents_)) removeWithId:eventType]];
  }
}

- (jboolean)removeStickyEventWithId:(id)event {
  @synchronized(stickyEvents_) {
    IOSClass *eventType = [nil_chk(event) getClass];
    id existingEvent = [((id<JavaUtilMap>) nil_chk(stickyEvents_)) getWithId:eventType];
    if ([event isEqual:existingEvent]) {
      (void) [stickyEvents_ removeWithId:eventType];
      return true;
    }
    else {
      return false;
    }
  }
}

- (void)removeAllStickyEvents {
  @synchronized(stickyEvents_) {
    [((id<JavaUtilMap>) nil_chk(stickyEvents_)) clear];
  }
}

- (jboolean)hasSubscriberForEventWithIOSClass:(IOSClass *)eventClass {
  id<JavaUtilList> eventTypes = DeGreenrobotEventEventBus_lookupAllEventTypesWithIOSClass_(self, eventClass);
  if (eventTypes != nil) {
    jint countTypes = [eventTypes size];
    for (jint h = 0; h < countTypes; h++) {
      IOSClass *clazz = [eventTypes getWithInt:h];
      JavaUtilConcurrentCopyOnWriteArrayList *subscriptions;
      @synchronized(self) {
        subscriptions = [((id<JavaUtilMap>) nil_chk(subscriptionsByEventType_)) getWithId:clazz];
      }
      if (subscriptions != nil && ![subscriptions isEmpty]) {
        return true;
      }
    }
  }
  return false;
}

- (void)postSingleEventWithId:(id)event
withDeGreenrobotEventEventBus_PostingThreadState:(DeGreenrobotEventEventBus_PostingThreadState *)postingState {
  DeGreenrobotEventEventBus_postSingleEventWithId_withDeGreenrobotEventEventBus_PostingThreadState_(self, event, postingState);
}

- (jboolean)postSingleEventForEventTypeWithId:(id)event
withDeGreenrobotEventEventBus_PostingThreadState:(DeGreenrobotEventEventBus_PostingThreadState *)postingState
                                 withIOSClass:(IOSClass *)eventClass {
  return DeGreenrobotEventEventBus_postSingleEventForEventTypeWithId_withDeGreenrobotEventEventBus_PostingThreadState_withIOSClass_(self, event, postingState, eventClass);
}

- (void)postToSubscriptionWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                     withId:(id)event
                                                withBoolean:(jboolean)isMainThread {
  DeGreenrobotEventEventBus_postToSubscriptionWithDeGreenrobotEventSubscription_withId_withBoolean_(self, subscription, event, isMainThread);
}

- (id<JavaUtilList>)lookupAllEventTypesWithIOSClass:(IOSClass *)eventClass {
  return DeGreenrobotEventEventBus_lookupAllEventTypesWithIOSClass_(self, eventClass);
}

+ (void)addInterfacesWithJavaUtilList:(id<JavaUtilList>)eventTypes
                    withIOSClassArray:(IOSObjectArray *)interfaces {
  DeGreenrobotEventEventBus_addInterfacesWithJavaUtilList_withIOSClassArray_(eventTypes, interfaces);
}

- (void)invokeSubscriberWithDeGreenrobotEventPendingPost:(DeGreenrobotEventPendingPost *)pendingPost {
  id event = ((DeGreenrobotEventPendingPost *) nil_chk(pendingPost))->event_;
  DeGreenrobotEventSubscription *subscription = pendingPost->subscription_;
  DeGreenrobotEventPendingPost_releasePendingPostWithDeGreenrobotEventPendingPost_(pendingPost);
  if (JreLoadVolatileBoolean(&((DeGreenrobotEventSubscription *) nil_chk(subscription))->active_)) {
    [self invokeSubscriberWithDeGreenrobotEventSubscription:subscription withId:event];
  }
}

- (void)invokeSubscriberWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                   withId:(id)event {
  @try {
    (void) [((JavaLangReflectMethod *) nil_chk(((DeGreenrobotEventSubscriberMethod *) nil_chk(((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriberMethod_))->method_)) invokeWithId:subscription->subscriber_ withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ event } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    DeGreenrobotEventEventBus_handleSubscriberExceptionWithDeGreenrobotEventSubscription_withId_withNSException_(self, subscription, event, [((JavaLangReflectInvocationTargetException *) nil_chk(e)) getCause]);
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_withNSException_(@"Unexpected exception", e);
  }
}

- (void)handleSubscriberExceptionWithDeGreenrobotEventSubscription:(DeGreenrobotEventSubscription *)subscription
                                                            withId:(id)event
                                                   withNSException:(NSException *)cause {
  DeGreenrobotEventEventBus_handleSubscriberExceptionWithDeGreenrobotEventSubscription_withId_withNSException_(self, subscription, event, cause);
}

- (id<JavaUtilConcurrentExecutorService>)getExecutorService {
  return executorService_;
}

+ (void)initialize {
  if (self == [DeGreenrobotEventEventBus class]) {
    DeGreenrobotEventEventBus_DEFAULT_BUILDER = new_DeGreenrobotEventEventBusBuilder_init();
    DeGreenrobotEventEventBus_eventTypesCache = new_JavaUtilHashMap_init();
    J2OBJC_SET_INITIALIZED(DeGreenrobotEventEventBus)
  }
}

+ (IOSObjectArray *)__annotations_register__WithId_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_registerStickyWithId_withNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_register__WithId_withIOSClass_withIOSClassArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_register__WithId_withNSString_withIOSClass_withIOSClassArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_registerStickyWithId_withIOSClass_withIOSClassArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_registerStickyWithId_withNSString_withIOSClass_withIOSClassArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_unregisterWithId_withIOSClassArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDefault", NULL, "Lde.greenrobot.event.EventBus;", 0x9, NULL, NULL },
    { "builder", NULL, "Lde.greenrobot.event.EventBusBuilder;", 0x9, NULL, NULL },
    { "clearCaches", NULL, "V", 0x9, NULL, NULL },
    { "init", "EventBus", NULL, 0x1, NULL, NULL },
    { "initWithDeGreenrobotEventEventBusBuilder:", "EventBus", NULL, 0x0, NULL, NULL },
    { "register__WithId:", "register", "V", 0x1, NULL, NULL },
    { "register__WithId:withInt:", "register", "V", 0x1, NULL, NULL },
    { "register__WithId:withNSString:", "register", "V", 0x1, NULL, NULL },
    { "registerStickyWithId:", "registerSticky", "V", 0x1, NULL, NULL },
    { "registerStickyWithId:withInt:", "registerSticky", "V", 0x1, NULL, NULL },
    { "registerStickyWithId:withNSString:", "registerSticky", "V", 0x1, NULL, NULL },
    { "register__WithId:withNSString:withBoolean:withInt:", "register", "V", 0x22, NULL, NULL },
    { "register__WithId:withIOSClass:withIOSClassArray:", "register", "V", 0x81, NULL, "(Ljava/lang/Object;Ljava/lang/Class<*>;[Ljava/lang/Class<*>;)V" },
    { "register__WithId:withNSString:withIOSClass:withIOSClassArray:", "register", "V", 0x81, NULL, "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Class<*>;[Ljava/lang/Class<*>;)V" },
    { "registerStickyWithId:withIOSClass:withIOSClassArray:", "registerSticky", "V", 0x81, NULL, "(Ljava/lang/Object;Ljava/lang/Class<*>;[Ljava/lang/Class<*>;)V" },
    { "registerStickyWithId:withNSString:withIOSClass:withIOSClassArray:", "registerSticky", "V", 0x81, NULL, "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Class<*>;[Ljava/lang/Class<*>;)V" },
    { "register__WithId:withNSString:withBoolean:withIOSClass:withIOSClassArray:", "register", "V", 0xa2, NULL, "(Ljava/lang/Object;Ljava/lang/String;ZLjava/lang/Class<*>;[Ljava/lang/Class<*>;)V" },
    { "subscribeWithId:withDeGreenrobotEventSubscriberMethod:withBoolean:withInt:", "subscribe", "V", 0x2, NULL, NULL },
    { "isRegisteredWithId:", "isRegistered", "Z", 0x21, NULL, NULL },
    { "unregisterWithId:withIOSClassArray:", "unregister", "V", 0xa1, NULL, NULL },
    { "unubscribeByEventTypeWithId:withIOSClass:", "unubscribeByEventType", "V", 0x2, NULL, "(Ljava/lang/Object;Ljava/lang/Class<*>;)V" },
    { "unregisterWithId:", "unregister", "V", 0x21, NULL, NULL },
    { "postWithId:", "post", "V", 0x1, NULL, NULL },
    { "cancelEventDeliveryWithId:", "cancelEventDelivery", "V", 0x1, NULL, NULL },
    { "postStickyWithId:", "postSticky", "V", 0x1, NULL, NULL },
    { "getStickyEventWithIOSClass:", "getStickyEvent", "TT;", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)TT;" },
    { "removeStickyEventWithIOSClass:", "removeStickyEvent", "TT;", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)TT;" },
    { "removeStickyEventWithId:", "removeStickyEvent", "Z", 0x1, NULL, NULL },
    { "removeAllStickyEvents", NULL, "V", 0x1, NULL, NULL },
    { "hasSubscriberForEventWithIOSClass:", "hasSubscriberForEvent", "Z", 0x1, NULL, "(Ljava/lang/Class<*>;)Z" },
    { "postSingleEventWithId:withDeGreenrobotEventEventBus_PostingThreadState:", "postSingleEvent", "V", 0x2, "Ljava.lang.Error;", NULL },
    { "postSingleEventForEventTypeWithId:withDeGreenrobotEventEventBus_PostingThreadState:withIOSClass:", "postSingleEventForEventType", "Z", 0x2, NULL, "(Ljava/lang/Object;Lde/greenrobot/event/EventBus$PostingThreadState;Ljava/lang/Class<*>;)Z" },
    { "postToSubscriptionWithDeGreenrobotEventSubscription:withId:withBoolean:", "postToSubscription", "V", 0x2, NULL, NULL },
    { "lookupAllEventTypesWithIOSClass:", "lookupAllEventTypes", "Ljava.util.List;", 0x2, NULL, "(Ljava/lang/Class<*>;)Ljava/util/List<Ljava/lang/Class<*>;>;" },
    { "addInterfacesWithJavaUtilList:withIOSClassArray:", "addInterfaces", "V", 0x8, NULL, "(Ljava/util/List<Ljava/lang/Class<*>;>;[Ljava/lang/Class<*>;)V" },
    { "invokeSubscriberWithDeGreenrobotEventPendingPost:", "invokeSubscriber", "V", 0x0, NULL, NULL },
    { "invokeSubscriberWithDeGreenrobotEventSubscription:withId:", "invokeSubscriber", "V", 0x0, NULL, NULL },
    { "handleSubscriberExceptionWithDeGreenrobotEventSubscription:withId:withNSException:", "handleSubscriberException", "V", 0x2, NULL, NULL },
    { "getExecutorService", NULL, "Ljava.util.concurrent.ExecutorService;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "TAG", 0x9, "Ljava.lang.String;", &DeGreenrobotEventEventBus_TAG, NULL, .constantValue.asLong = 0 },
    { "defaultInstance", "defaultInstance", 0x48, "Lde.greenrobot.event.EventBus;", &DeGreenrobotEventEventBus_defaultInstance, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_BUILDER", "DEFAULT_BUILDER", 0x1a, "Lde.greenrobot.event.EventBusBuilder;", &DeGreenrobotEventEventBus_DEFAULT_BUILDER, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_METHOD_NAME", "DEFAULT_METHOD_NAME", 0x1a, "Ljava.lang.String;", &DeGreenrobotEventEventBus_DEFAULT_METHOD_NAME, NULL, .constantValue.asLong = 0 },
    { "eventTypesCache", "eventTypesCache", 0x1a, "Ljava.util.Map;", &DeGreenrobotEventEventBus_eventTypesCache, "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/util/List<Ljava/lang/Class<*>;>;>;", .constantValue.asLong = 0 },
    { "subscriptionsByEventType_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/util/concurrent/CopyOnWriteArrayList<Lde/greenrobot/event/Subscription;>;>;", .constantValue.asLong = 0 },
    { "typesBySubscriber_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Object;Ljava/util/List<Ljava/lang/Class<*>;>;>;", .constantValue.asLong = 0 },
    { "stickyEvents_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "currentPostingThreadState_", NULL, 0x12, "Ljava.lang.ThreadLocal;", NULL, "Ljava/lang/ThreadLocal<Lde/greenrobot/event/EventBus$PostingThreadState;>;", .constantValue.asLong = 0 },
    { "mainThreadPoster_", NULL, 0x12, "Lde.greenrobot.event.HandlerPoster;", NULL, NULL, .constantValue.asLong = 0 },
    { "backgroundPoster_", NULL, 0x12, "Lde.greenrobot.event.BackgroundPoster;", NULL, NULL, .constantValue.asLong = 0 },
    { "asyncPoster_", NULL, 0x12, "Lde.greenrobot.event.AsyncPoster;", NULL, NULL, .constantValue.asLong = 0 },
    { "subscriberMethodFinder_", NULL, 0x12, "Lde.greenrobot.event.SubscriberMethodFinder;", NULL, NULL, .constantValue.asLong = 0 },
    { "executorService_", NULL, 0x12, "Ljava.util.concurrent.ExecutorService;", NULL, NULL, .constantValue.asLong = 0 },
    { "throwSubscriberException_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "logSubscriberExceptions_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "logNoSubscriberMessages_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "sendSubscriberExceptionEvent_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "sendNoSubscriberEvent_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "eventInheritance_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lde.greenrobot.event.EventBus$PostingThreadState;", "Lde.greenrobot.event.EventBus$PostCallback;"};
  static const J2ObjcClassInfo _DeGreenrobotEventEventBus = { 2, "EventBus", "de.greenrobot.event", NULL, 0x1, 39, methods, 20, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_DeGreenrobotEventEventBus;
}

@end

DeGreenrobotEventEventBus *DeGreenrobotEventEventBus_getDefault() {
  DeGreenrobotEventEventBus_initialize();
  if (JreLoadVolatileId(&DeGreenrobotEventEventBus_defaultInstance) == nil) {
    @synchronized(DeGreenrobotEventEventBus_class_()) {
      if (JreLoadVolatileId(&DeGreenrobotEventEventBus_defaultInstance) == nil) {
        (void) JreVolatileStrongAssign(&DeGreenrobotEventEventBus_defaultInstance, new_DeGreenrobotEventEventBus_init());
      }
    }
  }
  return JreLoadVolatileId(&DeGreenrobotEventEventBus_defaultInstance);
}

DeGreenrobotEventEventBusBuilder *DeGreenrobotEventEventBus_builder() {
  DeGreenrobotEventEventBus_initialize();
  return new_DeGreenrobotEventEventBusBuilder_init();
}

void DeGreenrobotEventEventBus_clearCaches() {
  DeGreenrobotEventEventBus_initialize();
  DeGreenrobotEventSubscriberMethodFinder_clearCaches();
  [((id<JavaUtilMap>) nil_chk(DeGreenrobotEventEventBus_eventTypesCache)) clear];
}

void DeGreenrobotEventEventBus_init(DeGreenrobotEventEventBus *self) {
  DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(self, DeGreenrobotEventEventBus_DEFAULT_BUILDER);
}

DeGreenrobotEventEventBus *new_DeGreenrobotEventEventBus_init() {
  DeGreenrobotEventEventBus *self = [DeGreenrobotEventEventBus alloc];
  DeGreenrobotEventEventBus_init(self);
  return self;
}

DeGreenrobotEventEventBus *create_DeGreenrobotEventEventBus_init() {
  return new_DeGreenrobotEventEventBus_init();
}

void DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(DeGreenrobotEventEventBus *self, DeGreenrobotEventEventBusBuilder *builder) {
  NSObject_init(self);
  self->currentPostingThreadState_ = new_DeGreenrobotEventEventBus_$1_init();
  self->subscriptionsByEventType_ = new_JavaUtilHashMap_init();
  self->typesBySubscriber_ = new_JavaUtilHashMap_init();
  self->stickyEvents_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  self->mainThreadPoster_ = new_DeGreenrobotEventHandlerPoster_initWithDeGreenrobotEventEventBus_withAndroidOsLooper_withInt_(self, AndroidOsLooper_getMainLooper(), 10);
  self->backgroundPoster_ = new_DeGreenrobotEventBackgroundPoster_initWithDeGreenrobotEventEventBus_(self);
  self->asyncPoster_ = new_DeGreenrobotEventAsyncPoster_initWithDeGreenrobotEventEventBus_(self);
  self->subscriberMethodFinder_ = new_DeGreenrobotEventSubscriberMethodFinder_initWithJavaUtilList_(((DeGreenrobotEventEventBusBuilder *) nil_chk(builder))->skipMethodVerificationForClasses_);
  self->logSubscriberExceptions_ = builder->logSubscriberExceptions_;
  self->logNoSubscriberMessages_ = builder->logNoSubscriberMessages_;
  self->sendSubscriberExceptionEvent_ = builder->sendSubscriberExceptionEvent_;
  self->sendNoSubscriberEvent_ = builder->sendNoSubscriberEvent_;
  self->throwSubscriberException_ = builder->throwSubscriberException_;
  self->eventInheritance_ = builder->eventInheritance_;
  self->executorService_ = builder->executorService_;
}

DeGreenrobotEventEventBus *new_DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(DeGreenrobotEventEventBusBuilder *builder) {
  DeGreenrobotEventEventBus *self = [DeGreenrobotEventEventBus alloc];
  DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(self, builder);
  return self;
}

DeGreenrobotEventEventBus *create_DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(DeGreenrobotEventEventBusBuilder *builder) {
  return new_DeGreenrobotEventEventBus_initWithDeGreenrobotEventEventBusBuilder_(builder);
}

void DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withInt_(DeGreenrobotEventEventBus *self, id subscriber, NSString *methodName, jboolean sticky, jint priority) {
  @synchronized(self) {
    id<JavaUtilList> subscriberMethods = [((DeGreenrobotEventSubscriberMethodFinder *) nil_chk(self->subscriberMethodFinder_)) findSubscriberMethodsWithIOSClass:[nil_chk(subscriber) getClass] withNSString:methodName];
    for (DeGreenrobotEventSubscriberMethod * __strong subscriberMethod in nil_chk(subscriberMethods)) {
      DeGreenrobotEventEventBus_subscribeWithId_withDeGreenrobotEventSubscriberMethod_withBoolean_withInt_(self, subscriber, subscriberMethod, sticky, priority);
    }
  }
}

void DeGreenrobotEventEventBus_register__WithId_withNSString_withBoolean_withIOSClass_withIOSClassArray_(DeGreenrobotEventEventBus *self, id subscriber, NSString *methodName, jboolean sticky, IOSClass *eventType, IOSObjectArray *moreEventTypes) {
  @synchronized(self) {
    IOSClass *subscriberClass = [nil_chk(subscriber) getClass];
    id<JavaUtilList> subscriberMethods = [((DeGreenrobotEventSubscriberMethodFinder *) nil_chk(self->subscriberMethodFinder_)) findSubscriberMethodsWithIOSClass:subscriberClass withNSString:methodName];
    for (DeGreenrobotEventSubscriberMethod * __strong subscriberMethod in nil_chk(subscriberMethods)) {
      if (eventType == ((DeGreenrobotEventSubscriberMethod *) nil_chk(subscriberMethod))->eventType_) {
        DeGreenrobotEventEventBus_subscribeWithId_withDeGreenrobotEventSubscriberMethod_withBoolean_withInt_(self, subscriber, subscriberMethod, sticky, 0);
      }
      else if (moreEventTypes != nil) {
        {
          IOSObjectArray *a__ = moreEventTypes;
          IOSClass * const *b__ = a__->buffer_;
          IOSClass * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IOSClass *eventType2 = *b__++;
            if (eventType2 == subscriberMethod->eventType_) {
              DeGreenrobotEventEventBus_subscribeWithId_withDeGreenrobotEventSubscriberMethod_withBoolean_withInt_(self, subscriber, subscriberMethod, sticky, 0);
              break;
            }
          }
        }
      }
    }
  }
}

void DeGreenrobotEventEventBus_subscribeWithId_withDeGreenrobotEventSubscriberMethod_withBoolean_withInt_(DeGreenrobotEventEventBus *self, id subscriber, DeGreenrobotEventSubscriberMethod *subscriberMethod, jboolean sticky, jint priority) {
  IOSClass *eventType = ((DeGreenrobotEventSubscriberMethod *) nil_chk(subscriberMethod))->eventType_;
  JavaUtilConcurrentCopyOnWriteArrayList *subscriptions = [((id<JavaUtilMap>) nil_chk(self->subscriptionsByEventType_)) getWithId:eventType];
  DeGreenrobotEventSubscription *newSubscription = new_DeGreenrobotEventSubscription_initWithId_withDeGreenrobotEventSubscriberMethod_withInt_(subscriber, subscriberMethod, priority);
  if (subscriptions == nil) {
    subscriptions = new_JavaUtilConcurrentCopyOnWriteArrayList_init();
    (void) [self->subscriptionsByEventType_ putWithId:eventType withId:subscriptions];
  }
  else {
    if ([subscriptions containsWithId:newSubscription]) {
      @throw new_DeGreenrobotEventEventBusException_initWithNSString_(JreStrcat("$@$@", @"Subscriber ", [nil_chk(subscriber) getClass], @" already registered to event ", eventType));
    }
  }
  jint size = [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(subscriptions)) size];
  for (jint i = 0; i <= size; i++) {
    if (i == size || newSubscription->priority_ > ((DeGreenrobotEventSubscription *) nil_chk([subscriptions getWithInt:i]))->priority_) {
      [subscriptions addWithInt:i withId:newSubscription];
      break;
    }
  }
  id<JavaUtilList> subscribedEvents = [((id<JavaUtilMap>) nil_chk(self->typesBySubscriber_)) getWithId:subscriber];
  if (subscribedEvents == nil) {
    subscribedEvents = new_JavaUtilArrayList_init();
    (void) [self->typesBySubscriber_ putWithId:subscriber withId:subscribedEvents];
  }
  [((id<JavaUtilList>) nil_chk(subscribedEvents)) addWithId:eventType];
  if (sticky) {
    id stickyEvent;
    @synchronized(self->stickyEvents_) {
      stickyEvent = [((id<JavaUtilMap>) nil_chk(self->stickyEvents_)) getWithId:eventType];
    }
    if (stickyEvent != nil) {
      DeGreenrobotEventEventBus_postToSubscriptionWithDeGreenrobotEventSubscription_withId_withBoolean_(self, newSubscription, stickyEvent, AndroidOsLooper_getMainLooper() == AndroidOsLooper_myLooper());
    }
  }
}

void DeGreenrobotEventEventBus_unubscribeByEventTypeWithId_withIOSClass_(DeGreenrobotEventEventBus *self, id subscriber, IOSClass *eventType) {
  id<JavaUtilList> subscriptions = [((id<JavaUtilMap>) nil_chk(self->subscriptionsByEventType_)) getWithId:eventType];
  if (subscriptions != nil) {
    jint size = [subscriptions size];
    for (jint i = 0; i < size; i++) {
      DeGreenrobotEventSubscription *subscription = [subscriptions getWithInt:i];
      if (((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriber_ == subscriber) {
        JreAssignVolatileBoolean(&subscription->active_, false);
        (void) [subscriptions removeWithInt:i];
        i--;
        size--;
      }
    }
  }
}

void DeGreenrobotEventEventBus_postSingleEventWithId_withDeGreenrobotEventEventBus_PostingThreadState_(DeGreenrobotEventEventBus *self, id event, DeGreenrobotEventEventBus_PostingThreadState *postingState) {
  IOSClass *eventClass = [nil_chk(event) getClass];
  jboolean subscriptionFound = false;
  if (self->eventInheritance_) {
    id<JavaUtilList> eventTypes = DeGreenrobotEventEventBus_lookupAllEventTypesWithIOSClass_(self, eventClass);
    jint countTypes = [((id<JavaUtilList>) nil_chk(eventTypes)) size];
    for (jint h = 0; h < countTypes; h++) {
      IOSClass *clazz = [eventTypes getWithInt:h];
      subscriptionFound |= DeGreenrobotEventEventBus_postSingleEventForEventTypeWithId_withDeGreenrobotEventEventBus_PostingThreadState_withIOSClass_(self, event, postingState, clazz);
    }
  }
  else {
    subscriptionFound = DeGreenrobotEventEventBus_postSingleEventForEventTypeWithId_withDeGreenrobotEventEventBus_PostingThreadState_withIOSClass_(self, event, postingState, eventClass);
  }
  if (!subscriptionFound) {
    if (self->logNoSubscriberMessages_) {
      AndroidUtilLog_dWithNSString_withNSString_(DeGreenrobotEventEventBus_TAG, JreStrcat("$@", @"No subscribers registered for event ", eventClass));
    }
    if (self->sendNoSubscriberEvent_ && eventClass != DeGreenrobotEventNoSubscriberEvent_class_() && eventClass != DeGreenrobotEventSubscriberExceptionEvent_class_()) {
      [self postWithId:new_DeGreenrobotEventNoSubscriberEvent_initWithDeGreenrobotEventEventBus_withId_(self, event)];
    }
  }
}

jboolean DeGreenrobotEventEventBus_postSingleEventForEventTypeWithId_withDeGreenrobotEventEventBus_PostingThreadState_withIOSClass_(DeGreenrobotEventEventBus *self, id event, DeGreenrobotEventEventBus_PostingThreadState *postingState, IOSClass *eventClass) {
  JavaUtilConcurrentCopyOnWriteArrayList *subscriptions;
  @synchronized(self) {
    subscriptions = [((id<JavaUtilMap>) nil_chk(self->subscriptionsByEventType_)) getWithId:eventClass];
  }
  if (subscriptions != nil && ![subscriptions isEmpty]) {
    for (DeGreenrobotEventSubscription * __strong subscription in subscriptions) {
      ((DeGreenrobotEventEventBus_PostingThreadState *) nil_chk(postingState))->event_ = event;
      postingState->subscription_ = subscription;
      jboolean aborted = false;
      @try {
        DeGreenrobotEventEventBus_postToSubscriptionWithDeGreenrobotEventSubscription_withId_withBoolean_(self, subscription, event, postingState->isMainThread_);
        aborted = postingState->canceled_;
      }
      @finally {
        postingState->event_ = nil;
        postingState->subscription_ = nil;
        postingState->canceled_ = false;
      }
      if (aborted) {
        break;
      }
    }
    return true;
  }
  return false;
}

void DeGreenrobotEventEventBus_postToSubscriptionWithDeGreenrobotEventSubscription_withId_withBoolean_(DeGreenrobotEventEventBus *self, DeGreenrobotEventSubscription *subscription, id event, jboolean isMainThread) {
  switch ([((DeGreenrobotEventSubscriberMethod *) nil_chk(((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriberMethod_))->threadMode_ ordinal]) {
    case DeGreenrobotEventThreadMode_Enum_PostThread:
    [self invokeSubscriberWithDeGreenrobotEventSubscription:subscription withId:event];
    break;
    case DeGreenrobotEventThreadMode_Enum_MainThread:
    if (isMainThread) {
      [self invokeSubscriberWithDeGreenrobotEventSubscription:subscription withId:event];
    }
    else {
      [((DeGreenrobotEventHandlerPoster *) nil_chk(self->mainThreadPoster_)) enqueueWithDeGreenrobotEventSubscription:subscription withId:event];
    }
    break;
    case DeGreenrobotEventThreadMode_Enum_BackgroundThread:
    if (isMainThread) {
      [((DeGreenrobotEventBackgroundPoster *) nil_chk(self->backgroundPoster_)) enqueueWithDeGreenrobotEventSubscription:subscription withId:event];
    }
    else {
      [self invokeSubscriberWithDeGreenrobotEventSubscription:subscription withId:event];
    }
    break;
    case DeGreenrobotEventThreadMode_Enum_Async:
    [((DeGreenrobotEventAsyncPoster *) nil_chk(self->asyncPoster_)) enqueueWithDeGreenrobotEventSubscription:subscription withId:event];
    break;
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Unknown thread mode: ", subscription->subscriberMethod_->threadMode_));
  }
}

id<JavaUtilList> DeGreenrobotEventEventBus_lookupAllEventTypesWithIOSClass_(DeGreenrobotEventEventBus *self, IOSClass *eventClass) {
  @synchronized(DeGreenrobotEventEventBus_eventTypesCache) {
    id<JavaUtilList> eventTypes = [((id<JavaUtilMap>) nil_chk(DeGreenrobotEventEventBus_eventTypesCache)) getWithId:eventClass];
    if (eventTypes == nil) {
      eventTypes = new_JavaUtilArrayList_init();
      IOSClass *clazz = eventClass;
      while (clazz != nil) {
        [eventTypes addWithId:clazz];
        DeGreenrobotEventEventBus_addInterfacesWithJavaUtilList_withIOSClassArray_(eventTypes, [((IOSClass *) nil_chk(clazz)) getInterfaces]);
        clazz = [clazz getSuperclass];
      }
      (void) [DeGreenrobotEventEventBus_eventTypesCache putWithId:eventClass withId:eventTypes];
    }
    return eventTypes;
  }
}

void DeGreenrobotEventEventBus_addInterfacesWithJavaUtilList_withIOSClassArray_(id<JavaUtilList> eventTypes, IOSObjectArray *interfaces) {
  DeGreenrobotEventEventBus_initialize();
  {
    IOSObjectArray *a__ = interfaces;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *interfaceClass = *b__++;
      if (![((id<JavaUtilList>) nil_chk(eventTypes)) containsWithId:interfaceClass]) {
        [eventTypes addWithId:interfaceClass];
        DeGreenrobotEventEventBus_addInterfacesWithJavaUtilList_withIOSClassArray_(eventTypes, [((IOSClass *) nil_chk(interfaceClass)) getInterfaces]);
      }
    }
  }
}

void DeGreenrobotEventEventBus_handleSubscriberExceptionWithDeGreenrobotEventSubscription_withId_withNSException_(DeGreenrobotEventEventBus *self, DeGreenrobotEventSubscription *subscription, id event, NSException *cause) {
  if ([event isKindOfClass:[DeGreenrobotEventSubscriberExceptionEvent class]]) {
    if (self->logSubscriberExceptions_) {
      AndroidUtilLog_eWithNSString_withNSString_withNSException_(DeGreenrobotEventEventBus_TAG, JreStrcat("$@$", @"SubscriberExceptionEvent subscriber ", [nil_chk(((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriber_) getClass], @" threw an exception"), cause);
      DeGreenrobotEventSubscriberExceptionEvent *exEvent = (DeGreenrobotEventSubscriberExceptionEvent *) cast_chk(event, [DeGreenrobotEventSubscriberExceptionEvent class]);
      AndroidUtilLog_eWithNSString_withNSString_withNSException_(DeGreenrobotEventEventBus_TAG, JreStrcat("$@$@", @"Initial event ", ((DeGreenrobotEventSubscriberExceptionEvent *) nil_chk(exEvent))->causingEvent_, @" caused exception in ", exEvent->causingSubscriber_), exEvent->throwable_);
    }
  }
  else {
    if (self->throwSubscriberException_) {
      @throw new_DeGreenrobotEventEventBusException_initWithNSString_withNSException_(@"Invoking subscriber failed", cause);
    }
    if (self->logSubscriberExceptions_) {
      AndroidUtilLog_eWithNSString_withNSString_withNSException_(DeGreenrobotEventEventBus_TAG, JreStrcat("$@$@", @"Could not dispatch event: ", [nil_chk(event) getClass], @" to subscribing class ", [nil_chk(((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriber_) getClass]), cause);
    }
    if (self->sendSubscriberExceptionEvent_) {
      DeGreenrobotEventSubscriberExceptionEvent *exEvent = new_DeGreenrobotEventSubscriberExceptionEvent_initWithDeGreenrobotEventEventBus_withNSException_withId_withId_(self, cause, event, ((DeGreenrobotEventSubscription *) nil_chk(subscription))->subscriber_);
      [self postWithId:exEvent];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventEventBus)

@implementation DeGreenrobotEventEventBus_PostingThreadState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DeGreenrobotEventEventBus_PostingThreadState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "eventQueue_", NULL, 0x10, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "isPosting_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isMainThread_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "subscription_", NULL, 0x0, "Lde.greenrobot.event.Subscription;", NULL, NULL, .constantValue.asLong = 0 },
    { "event_", NULL, 0x0, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "canceled_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _DeGreenrobotEventEventBus_PostingThreadState = { 2, "PostingThreadState", "de.greenrobot.event", "EventBus", 0x18, 1, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_DeGreenrobotEventEventBus_PostingThreadState;
}

@end

void DeGreenrobotEventEventBus_PostingThreadState_init(DeGreenrobotEventEventBus_PostingThreadState *self) {
  NSObject_init(self);
  self->eventQueue_ = new_JavaUtilArrayList_init();
}

DeGreenrobotEventEventBus_PostingThreadState *new_DeGreenrobotEventEventBus_PostingThreadState_init() {
  DeGreenrobotEventEventBus_PostingThreadState *self = [DeGreenrobotEventEventBus_PostingThreadState alloc];
  DeGreenrobotEventEventBus_PostingThreadState_init(self);
  return self;
}

DeGreenrobotEventEventBus_PostingThreadState *create_DeGreenrobotEventEventBus_PostingThreadState_init() {
  return new_DeGreenrobotEventEventBus_PostingThreadState_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventEventBus_PostingThreadState)

@implementation DeGreenrobotEventEventBus_PostCallback

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onPostCompletedWithJavaUtilList:", "onPostCompleted", "V", 0x401, NULL, "(Ljava/util/List<Lde/greenrobot/event/SubscriberExceptionEvent;>;)V" },
  };
  static const J2ObjcClassInfo _DeGreenrobotEventEventBus_PostCallback = { 2, "PostCallback", "de.greenrobot.event", "EventBus", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_DeGreenrobotEventEventBus_PostCallback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(DeGreenrobotEventEventBus_PostCallback)

@implementation DeGreenrobotEventEventBus_$1

- (DeGreenrobotEventEventBus_PostingThreadState *)initialValue {
  return new_DeGreenrobotEventEventBus_PostingThreadState_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DeGreenrobotEventEventBus_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "Lde.greenrobot.event.EventBus$PostingThreadState;", 0x4, NULL, "()Lde/greenrobot/event/EventBus$PostingThreadState;" },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lde.greenrobot.event.EventBus$PostingThreadState;"};
  static const J2ObjcClassInfo _DeGreenrobotEventEventBus_$1 = { 2, "", "de.greenrobot.event", "EventBus", 0x8008, 2, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/ThreadLocal<Lde/greenrobot/event/EventBus$PostingThreadState;>;" };
  return &_DeGreenrobotEventEventBus_$1;
}

@end

void DeGreenrobotEventEventBus_$1_init(DeGreenrobotEventEventBus_$1 *self) {
  JavaLangThreadLocal_init(self);
}

DeGreenrobotEventEventBus_$1 *new_DeGreenrobotEventEventBus_$1_init() {
  DeGreenrobotEventEventBus_$1 *self = [DeGreenrobotEventEventBus_$1 alloc];
  DeGreenrobotEventEventBus_$1_init(self);
  return self;
}

DeGreenrobotEventEventBus_$1 *create_DeGreenrobotEventEventBus_$1_init() {
  return new_DeGreenrobotEventEventBus_$1_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DeGreenrobotEventEventBus_$1)
