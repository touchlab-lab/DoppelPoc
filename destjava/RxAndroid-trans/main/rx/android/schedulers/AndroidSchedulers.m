//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxAndroid/rxandroid/src/main/java/rx/android/schedulers/AndroidSchedulers.java
//

#include "J2ObjC_source.h"
#include "android/os/Handler.h"
#include "android/os/Looper.h"
#include "java/lang/AssertionError.h"
#include "rx/Scheduler.h"
#include "rx/android/plugins/RxAndroidPlugins.h"
#include "rx/android/plugins/RxAndroidSchedulersHook.h"
#include "rx/android/schedulers/AndroidSchedulers.h"
#include "rx/android/schedulers/HandlerScheduler.h"

@interface RxAndroidSchedulersAndroidSchedulers ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxAndroidSchedulersAndroidSchedulers_init(RxAndroidSchedulersAndroidSchedulers *self);

__attribute__((unused)) static RxAndroidSchedulersAndroidSchedulers *new_RxAndroidSchedulersAndroidSchedulers_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidSchedulersAndroidSchedulers *create_RxAndroidSchedulersAndroidSchedulers_init();

@interface RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder : NSObject

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder)

inline RxScheduler *RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_get_MAIN_THREAD_SCHEDULER();
static RxScheduler *RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_MAIN_THREAD_SCHEDULER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder, MAIN_THREAD_SCHEDULER, RxScheduler *)

__attribute__((unused)) static void RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_init(RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder *self);

__attribute__((unused)) static RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder *new_RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder *create_RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_init();

J2OBJC_TYPE_LITERAL_HEADER(RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder)

@implementation RxAndroidSchedulersAndroidSchedulers

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxAndroidSchedulersAndroidSchedulers_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (RxScheduler *)mainThread {
  return RxAndroidSchedulersAndroidSchedulers_mainThread();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AndroidSchedulers", NULL, 0x2, NULL, NULL },
    { "mainThread", NULL, "Lrx.Scheduler;", 0x9, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lrx.android.schedulers.AndroidSchedulers$MainThreadSchedulerHolder;"};
  static const J2ObjcClassInfo _RxAndroidSchedulersAndroidSchedulers = { 2, "AndroidSchedulers", "rx.android.schedulers", NULL, 0x11, 2, methods, 0, NULL, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_RxAndroidSchedulersAndroidSchedulers;
}

@end

void RxAndroidSchedulersAndroidSchedulers_init(RxAndroidSchedulersAndroidSchedulers *self) {
  NSObject_init(self);
  @throw new_JavaLangAssertionError_initWithId_(@"No instances");
}

RxAndroidSchedulersAndroidSchedulers *new_RxAndroidSchedulersAndroidSchedulers_init() {
  RxAndroidSchedulersAndroidSchedulers *self = [RxAndroidSchedulersAndroidSchedulers alloc];
  RxAndroidSchedulersAndroidSchedulers_init(self);
  return self;
}

RxAndroidSchedulersAndroidSchedulers *create_RxAndroidSchedulersAndroidSchedulers_init() {
  return new_RxAndroidSchedulersAndroidSchedulers_init();
}

RxScheduler *RxAndroidSchedulersAndroidSchedulers_mainThread() {
  RxAndroidSchedulersAndroidSchedulers_initialize();
  RxScheduler *scheduler = [((RxAndroidPluginsRxAndroidSchedulersHook *) nil_chk([((RxAndroidPluginsRxAndroidPlugins *) nil_chk(RxAndroidPluginsRxAndroidPlugins_getInstance())) getSchedulersHook])) getMainThreadScheduler];
  return scheduler != nil ? scheduler : JreLoadStatic(RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder, MAIN_THREAD_SCHEDULER);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxAndroidSchedulersAndroidSchedulers)

J2OBJC_INITIALIZED_DEFN(RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder)

@implementation RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder class]) {
    RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_MAIN_THREAD_SCHEDULER = new_RxAndroidSchedulersHandlerScheduler_initWithAndroidOsHandler_(new_AndroidOsHandler_initWithAndroidOsLooper_(AndroidOsLooper_getMainLooper()));
    J2OBJC_SET_INITIALIZED(RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAIN_THREAD_SCHEDULER", "MAIN_THREAD_SCHEDULER", 0x18, "Lrx.Scheduler;", &RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_MAIN_THREAD_SCHEDULER, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder = { 2, "MainThreadSchedulerHolder", "rx.android.schedulers", "AndroidSchedulers", 0xa, 1, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder;
}

@end

void RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_init(RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder *self) {
  NSObject_init(self);
}

RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder *new_RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_init() {
  RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder *self = [RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder alloc];
  RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_init(self);
  return self;
}

RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder *create_RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_init() {
  return new_RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxAndroidSchedulersAndroidSchedulers_MainThreadSchedulerHolder)
