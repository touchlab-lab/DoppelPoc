//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxAndroid/rxandroid/src/main/java/rx/android/MainThreadSubscription.java
//

#include "J2ObjC_source.h"
#include "android/os/Looper.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "rx/Scheduler.h"
#include "rx/Subscription.h"
#include "rx/android/MainThreadSubscription.h"
#include "rx/android/schedulers/AndroidSchedulers.h"
#include "rx/functions/Action0.h"

@interface RxAndroidMainThreadSubscription () {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribed_;
}

@end

J2OBJC_FIELD_SETTER(RxAndroidMainThreadSubscription, unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

@interface RxAndroidMainThreadSubscription_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxAndroidMainThreadSubscription *this$0_;
}

- (void)call;

- (instancetype)initWithRxAndroidMainThreadSubscription:(RxAndroidMainThreadSubscription *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxAndroidMainThreadSubscription_$1)

J2OBJC_FIELD_SETTER(RxAndroidMainThreadSubscription_$1, this$0_, RxAndroidMainThreadSubscription *)

__attribute__((unused)) static void RxAndroidMainThreadSubscription_$1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription_$1 *self, RxAndroidMainThreadSubscription *outer$);

__attribute__((unused)) static RxAndroidMainThreadSubscription_$1 *new_RxAndroidMainThreadSubscription_$1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxAndroidMainThreadSubscription_$1 *create_RxAndroidMainThreadSubscription_$1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxAndroidMainThreadSubscription_$1)

@implementation RxAndroidMainThreadSubscription

+ (void)verifyMainThread {
  RxAndroidMainThreadSubscription_verifyMainThread();
}

- (jboolean)isUnsubscribed {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(unsubscribed_)) get];
}

- (void)unsubscribe {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(unsubscribed_)) compareAndSetWithBoolean:false withBoolean:true]) {
    if (AndroidOsLooper_myLooper() == AndroidOsLooper_getMainLooper()) {
      [self onUnsubscribe];
    }
    else {
      (void) [((RxScheduler_Worker *) nil_chk([((RxScheduler *) nil_chk(RxAndroidSchedulersAndroidSchedulers_mainThread())) createWorker])) scheduleWithRxFunctionsAction0:new_RxAndroidMainThreadSubscription_$1_initWithRxAndroidMainThreadSubscription_(self)];
    }
  }
}

- (void)onUnsubscribe {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxAndroidMainThreadSubscription_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "verifyMainThread", NULL, "V", 0x9, NULL, NULL },
    { "isUnsubscribed", NULL, "Z", 0x11, NULL, NULL },
    { "unsubscribe", NULL, "V", 0x11, NULL, NULL },
    { "onUnsubscribe", NULL, "V", 0x404, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "unsubscribed_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicBoolean;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxAndroidMainThreadSubscription = { 2, "MainThreadSubscription", "rx.android", NULL, 0x401, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxAndroidMainThreadSubscription;
}

@end

void RxAndroidMainThreadSubscription_verifyMainThread() {
  RxAndroidMainThreadSubscription_initialize();
  if (AndroidOsLooper_myLooper() != AndroidOsLooper_getMainLooper()) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Expected to be called on the main thread but was ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]));
  }
}

void RxAndroidMainThreadSubscription_init(RxAndroidMainThreadSubscription *self) {
  NSObject_init(self);
  self->unsubscribed_ = new_JavaUtilConcurrentAtomicAtomicBoolean_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxAndroidMainThreadSubscription)

@implementation RxAndroidMainThreadSubscription_$1

- (void)call {
  [this$0_ onUnsubscribe];
}

- (instancetype)initWithRxAndroidMainThreadSubscription:(RxAndroidMainThreadSubscription *)outer$ {
  RxAndroidMainThreadSubscription_$1_initWithRxAndroidMainThreadSubscription_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", NULL, "V", 0x1, NULL, NULL },
    { "initWithRxAndroidMainThreadSubscription:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrx.android.MainThreadSubscription;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxAndroidMainThreadSubscription", "unsubscribe" };
  static const J2ObjcClassInfo _RxAndroidMainThreadSubscription_$1 = { 2, "", "rx.android", "MainThreadSubscription", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_RxAndroidMainThreadSubscription_$1;
}

@end

void RxAndroidMainThreadSubscription_$1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription_$1 *self, RxAndroidMainThreadSubscription *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

RxAndroidMainThreadSubscription_$1 *new_RxAndroidMainThreadSubscription_$1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription *outer$) {
  RxAndroidMainThreadSubscription_$1 *self = [RxAndroidMainThreadSubscription_$1 alloc];
  RxAndroidMainThreadSubscription_$1_initWithRxAndroidMainThreadSubscription_(self, outer$);
  return self;
}

RxAndroidMainThreadSubscription_$1 *create_RxAndroidMainThreadSubscription_$1_initWithRxAndroidMainThreadSubscription_(RxAndroidMainThreadSubscription *outer$) {
  return new_RxAndroidMainThreadSubscription_$1_initWithRxAndroidMainThreadSubscription_(outer$);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxAndroidMainThreadSubscription_$1)
