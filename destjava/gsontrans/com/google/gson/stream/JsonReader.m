//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/gson/gson/src/main/java/com/google/gson/stream/JsonReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/internal/JsonReaderInternalAccess.h"
#include "com/google/gson/internal/bind/JsonTreeReader.h"
#include "com/google/gson/stream/JsonReader.h"
#include "com/google/gson/stream/JsonScope.h"
#include "com/google/gson/stream/JsonToken.h"
#include "com/google/gson/stream/MalformedJsonException.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"

@interface DPGSStreamJsonReader () {
 @public
  JavaIoReader *in_;
  jboolean lenient_;
  IOSCharArray *buffer_;
  jint pos_;
  jint limit_;
  jint lineNumber_;
  jint lineStart_;
  jlong peekedLong_;
  jint peekedNumberLength_;
  NSString *peekedString_;
  IOSIntArray *stack_;
  jint stackSize_;
  IOSObjectArray *pathNames_;
  IOSIntArray *pathIndices_;
}

- (jint)peekKeyword;

- (jint)peekNumber;

- (jboolean)isLiteralWithChar:(jchar)c;

- (NSString *)nextQuotedValueWithChar:(jchar)quote;

- (NSString *)nextUnquotedValue;

- (void)skipQuotedValueWithChar:(jchar)quote;

- (void)skipUnquotedValue;

- (void)pushWithInt:(jint)newTop;

- (jboolean)fillBufferWithInt:(jint)minimum;

- (jint)nextNonWhitespaceWithBoolean:(jboolean)throwOnEof;

- (void)checkLenient;

- (void)skipToEndOfLine;

- (jboolean)skipToWithNSString:(NSString *)toFind;

- (jchar)readEscapeCharacter;

- (JavaIoIOException *)syntaxErrorWithNSString:(NSString *)message;

- (void)consumeNonExecutePrefix;

@end

J2OBJC_FIELD_SETTER(DPGSStreamJsonReader, in_, JavaIoReader *)
J2OBJC_FIELD_SETTER(DPGSStreamJsonReader, buffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(DPGSStreamJsonReader, peekedString_, NSString *)
J2OBJC_FIELD_SETTER(DPGSStreamJsonReader, stack_, IOSIntArray *)
J2OBJC_FIELD_SETTER(DPGSStreamJsonReader, pathNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(DPGSStreamJsonReader, pathIndices_, IOSIntArray *)

inline IOSCharArray *DPGSStreamJsonReader_get_NON_EXECUTE_PREFIX();
static IOSCharArray *DPGSStreamJsonReader_NON_EXECUTE_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(DPGSStreamJsonReader, NON_EXECUTE_PREFIX, IOSCharArray *)

inline jlong DPGSStreamJsonReader_get_MIN_INCOMPLETE_INTEGER();
#define DPGSStreamJsonReader_MIN_INCOMPLETE_INTEGER -922337203685477580LL
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, MIN_INCOMPLETE_INTEGER, jlong)

inline jint DPGSStreamJsonReader_get_PEEKED_NONE();
#define DPGSStreamJsonReader_PEEKED_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_NONE, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_BEGIN_OBJECT();
#define DPGSStreamJsonReader_PEEKED_BEGIN_OBJECT 1
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_BEGIN_OBJECT, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_END_OBJECT();
#define DPGSStreamJsonReader_PEEKED_END_OBJECT 2
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_END_OBJECT, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_BEGIN_ARRAY();
#define DPGSStreamJsonReader_PEEKED_BEGIN_ARRAY 3
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_BEGIN_ARRAY, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_END_ARRAY();
#define DPGSStreamJsonReader_PEEKED_END_ARRAY 4
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_END_ARRAY, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_TRUE();
#define DPGSStreamJsonReader_PEEKED_TRUE 5
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_TRUE, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_FALSE();
#define DPGSStreamJsonReader_PEEKED_FALSE 6
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_FALSE, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_NULL();
#define DPGSStreamJsonReader_PEEKED_NULL 7
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_NULL, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_SINGLE_QUOTED();
#define DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED 8
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_SINGLE_QUOTED, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_DOUBLE_QUOTED();
#define DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED 9
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_DOUBLE_QUOTED, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_UNQUOTED();
#define DPGSStreamJsonReader_PEEKED_UNQUOTED 10
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_UNQUOTED, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_BUFFERED();
#define DPGSStreamJsonReader_PEEKED_BUFFERED 11
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_BUFFERED, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_SINGLE_QUOTED_NAME();
#define DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME 12
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_SINGLE_QUOTED_NAME, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_DOUBLE_QUOTED_NAME();
#define DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME 13
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_DOUBLE_QUOTED_NAME, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_UNQUOTED_NAME();
#define DPGSStreamJsonReader_PEEKED_UNQUOTED_NAME 14
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_UNQUOTED_NAME, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_LONG();
#define DPGSStreamJsonReader_PEEKED_LONG 15
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_LONG, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_NUMBER();
#define DPGSStreamJsonReader_PEEKED_NUMBER 16
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_NUMBER, jint)

inline jint DPGSStreamJsonReader_get_PEEKED_EOF();
#define DPGSStreamJsonReader_PEEKED_EOF 17
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, PEEKED_EOF, jint)

inline jint DPGSStreamJsonReader_get_NUMBER_CHAR_NONE();
#define DPGSStreamJsonReader_NUMBER_CHAR_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, NUMBER_CHAR_NONE, jint)

inline jint DPGSStreamJsonReader_get_NUMBER_CHAR_SIGN();
#define DPGSStreamJsonReader_NUMBER_CHAR_SIGN 1
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, NUMBER_CHAR_SIGN, jint)

inline jint DPGSStreamJsonReader_get_NUMBER_CHAR_DIGIT();
#define DPGSStreamJsonReader_NUMBER_CHAR_DIGIT 2
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, NUMBER_CHAR_DIGIT, jint)

inline jint DPGSStreamJsonReader_get_NUMBER_CHAR_DECIMAL();
#define DPGSStreamJsonReader_NUMBER_CHAR_DECIMAL 3
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, NUMBER_CHAR_DECIMAL, jint)

inline jint DPGSStreamJsonReader_get_NUMBER_CHAR_FRACTION_DIGIT();
#define DPGSStreamJsonReader_NUMBER_CHAR_FRACTION_DIGIT 4
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, NUMBER_CHAR_FRACTION_DIGIT, jint)

inline jint DPGSStreamJsonReader_get_NUMBER_CHAR_EXP_E();
#define DPGSStreamJsonReader_NUMBER_CHAR_EXP_E 5
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, NUMBER_CHAR_EXP_E, jint)

inline jint DPGSStreamJsonReader_get_NUMBER_CHAR_EXP_SIGN();
#define DPGSStreamJsonReader_NUMBER_CHAR_EXP_SIGN 6
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, NUMBER_CHAR_EXP_SIGN, jint)

inline jint DPGSStreamJsonReader_get_NUMBER_CHAR_EXP_DIGIT();
#define DPGSStreamJsonReader_NUMBER_CHAR_EXP_DIGIT 7
J2OBJC_STATIC_FIELD_CONSTANT(DPGSStreamJsonReader, NUMBER_CHAR_EXP_DIGIT, jint)

__attribute__((unused)) static jint DPGSStreamJsonReader_peekKeyword(DPGSStreamJsonReader *self);

__attribute__((unused)) static jint DPGSStreamJsonReader_peekNumber(DPGSStreamJsonReader *self);

__attribute__((unused)) static jboolean DPGSStreamJsonReader_isLiteralWithChar_(DPGSStreamJsonReader *self, jchar c);

__attribute__((unused)) static NSString *DPGSStreamJsonReader_nextQuotedValueWithChar_(DPGSStreamJsonReader *self, jchar quote);

__attribute__((unused)) static NSString *DPGSStreamJsonReader_nextUnquotedValue(DPGSStreamJsonReader *self);

__attribute__((unused)) static void DPGSStreamJsonReader_skipQuotedValueWithChar_(DPGSStreamJsonReader *self, jchar quote);

__attribute__((unused)) static void DPGSStreamJsonReader_skipUnquotedValue(DPGSStreamJsonReader *self);

__attribute__((unused)) static void DPGSStreamJsonReader_pushWithInt_(DPGSStreamJsonReader *self, jint newTop);

__attribute__((unused)) static jboolean DPGSStreamJsonReader_fillBufferWithInt_(DPGSStreamJsonReader *self, jint minimum);

__attribute__((unused)) static jint DPGSStreamJsonReader_nextNonWhitespaceWithBoolean_(DPGSStreamJsonReader *self, jboolean throwOnEof);

__attribute__((unused)) static void DPGSStreamJsonReader_checkLenient(DPGSStreamJsonReader *self);

__attribute__((unused)) static void DPGSStreamJsonReader_skipToEndOfLine(DPGSStreamJsonReader *self);

__attribute__((unused)) static jboolean DPGSStreamJsonReader_skipToWithNSString_(DPGSStreamJsonReader *self, NSString *toFind);

__attribute__((unused)) static jchar DPGSStreamJsonReader_readEscapeCharacter(DPGSStreamJsonReader *self);

__attribute__((unused)) static JavaIoIOException *DPGSStreamJsonReader_syntaxErrorWithNSString_(DPGSStreamJsonReader *self, NSString *message);

__attribute__((unused)) static void DPGSStreamJsonReader_consumeNonExecutePrefix(DPGSStreamJsonReader *self);

@interface DPGSStreamJsonReader_$1 : DPGSInternalJsonReaderInternalAccess

- (void)promoteNameToValueWithDPGSStreamJsonReader:(DPGSStreamJsonReader *)reader;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(DPGSStreamJsonReader_$1)

__attribute__((unused)) static void DPGSStreamJsonReader_$1_init(DPGSStreamJsonReader_$1 *self);

__attribute__((unused)) static DPGSStreamJsonReader_$1 *new_DPGSStreamJsonReader_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static DPGSStreamJsonReader_$1 *create_DPGSStreamJsonReader_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(DPGSStreamJsonReader_$1)

J2OBJC_INITIALIZED_DEFN(DPGSStreamJsonReader)

@implementation DPGSStreamJsonReader

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  DPGSStreamJsonReader_initWithJavaIoReader_(self, inArg);
  return self;
}

- (void)setLenientWithBoolean:(jboolean)lenient {
  self->lenient_ = lenient;
}

- (jboolean)isLenient {
  return lenient_;
}

- (void)beginArray {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  if (p == DPGSStreamJsonReader_PEEKED_BEGIN_ARRAY) {
    DPGSStreamJsonReader_pushWithInt_(self, DPGSStreamJsonScope_EMPTY_ARRAY);
    *IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1) = 0;
    peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected BEGIN_ARRAY but was ", [self peek], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
}

- (void)endArray {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  if (p == DPGSStreamJsonReader_PEEKED_END_ARRAY) {
    stackSize_--;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected END_ARRAY but was ", [self peek], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
}

- (void)beginObject {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  if (p == DPGSStreamJsonReader_PEEKED_BEGIN_OBJECT) {
    DPGSStreamJsonReader_pushWithInt_(self, DPGSStreamJsonScope_EMPTY_OBJECT);
    peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected BEGIN_OBJECT but was ", [self peek], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
}

- (void)endObject {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  if (p == DPGSStreamJsonReader_PEEKED_END_OBJECT) {
    stackSize_--;
    (void) IOSObjectArray_Set(nil_chk(pathNames_), stackSize_, nil);
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected END_OBJECT but was ", [self peek], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
}

- (jboolean)hasNext {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  return p != DPGSStreamJsonReader_PEEKED_END_OBJECT && p != DPGSStreamJsonReader_PEEKED_END_ARRAY;
}

- (DPGSStreamJsonToken *)peek {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  switch (p) {
    case DPGSStreamJsonReader_PEEKED_BEGIN_OBJECT:
    return JreLoadEnum(DPGSStreamJsonToken, BEGIN_OBJECT);
    case DPGSStreamJsonReader_PEEKED_END_OBJECT:
    return JreLoadEnum(DPGSStreamJsonToken, END_OBJECT);
    case DPGSStreamJsonReader_PEEKED_BEGIN_ARRAY:
    return JreLoadEnum(DPGSStreamJsonToken, BEGIN_ARRAY);
    case DPGSStreamJsonReader_PEEKED_END_ARRAY:
    return JreLoadEnum(DPGSStreamJsonToken, END_ARRAY);
    case DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME:
    case DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME:
    case DPGSStreamJsonReader_PEEKED_UNQUOTED_NAME:
    return JreLoadEnum(DPGSStreamJsonToken, NAME);
    case DPGSStreamJsonReader_PEEKED_TRUE:
    case DPGSStreamJsonReader_PEEKED_FALSE:
    return JreLoadEnum(DPGSStreamJsonToken, BOOLEAN);
    case DPGSStreamJsonReader_PEEKED_NULL:
    return JreLoadEnum(DPGSStreamJsonToken, NULL);
    case DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED:
    case DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED:
    case DPGSStreamJsonReader_PEEKED_UNQUOTED:
    case DPGSStreamJsonReader_PEEKED_BUFFERED:
    return JreLoadEnum(DPGSStreamJsonToken, STRING);
    case DPGSStreamJsonReader_PEEKED_LONG:
    case DPGSStreamJsonReader_PEEKED_NUMBER:
    return JreLoadEnum(DPGSStreamJsonToken, NUMBER);
    case DPGSStreamJsonReader_PEEKED_EOF:
    return JreLoadEnum(DPGSStreamJsonToken, END_DOCUMENT);
    default:
    @throw new_JavaLangAssertionError_init();
  }
}

- (jint)doPeek {
  jint peekStack = IOSIntArray_Get(nil_chk(stack_), stackSize_ - 1);
  if (peekStack == DPGSStreamJsonScope_EMPTY_ARRAY) {
    *IOSIntArray_GetRef(stack_, stackSize_ - 1) = DPGSStreamJsonScope_NONEMPTY_ARRAY;
  }
  else if (peekStack == DPGSStreamJsonScope_NONEMPTY_ARRAY) {
    jint c = DPGSStreamJsonReader_nextNonWhitespaceWithBoolean_(self, true);
    switch (c) {
      case ']':
      return peeked_ = DPGSStreamJsonReader_PEEKED_END_ARRAY;
      case ';':
      DPGSStreamJsonReader_checkLenient(self);
      case ',':
      break;
      default:
      @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated array");
    }
  }
  else if (peekStack == DPGSStreamJsonScope_EMPTY_OBJECT || peekStack == DPGSStreamJsonScope_NONEMPTY_OBJECT) {
    *IOSIntArray_GetRef(stack_, stackSize_ - 1) = DPGSStreamJsonScope_DANGLING_NAME;
    if (peekStack == DPGSStreamJsonScope_NONEMPTY_OBJECT) {
      jint c = DPGSStreamJsonReader_nextNonWhitespaceWithBoolean_(self, true);
      switch (c) {
        case '}':
        return peeked_ = DPGSStreamJsonReader_PEEKED_END_OBJECT;
        case ';':
        DPGSStreamJsonReader_checkLenient(self);
        case ',':
        break;
        default:
        @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated object");
      }
    }
    jint c = DPGSStreamJsonReader_nextNonWhitespaceWithBoolean_(self, true);
    switch (c) {
      case '"':
      return peeked_ = DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME;
      case '\'':
      DPGSStreamJsonReader_checkLenient(self);
      return peeked_ = DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME;
      case '}':
      if (peekStack != DPGSStreamJsonScope_NONEMPTY_OBJECT) {
        return peeked_ = DPGSStreamJsonReader_PEEKED_END_OBJECT;
      }
      else {
        @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Expected name");
      }
      default:
      DPGSStreamJsonReader_checkLenient(self);
      pos_--;
      if (DPGSStreamJsonReader_isLiteralWithChar_(self, (jchar) c)) {
        return peeked_ = DPGSStreamJsonReader_PEEKED_UNQUOTED_NAME;
      }
      else {
        @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Expected name");
      }
    }
  }
  else if (peekStack == DPGSStreamJsonScope_DANGLING_NAME) {
    *IOSIntArray_GetRef(stack_, stackSize_ - 1) = DPGSStreamJsonScope_NONEMPTY_OBJECT;
    jint c = DPGSStreamJsonReader_nextNonWhitespaceWithBoolean_(self, true);
    switch (c) {
      case ':':
      break;
      case '=':
      DPGSStreamJsonReader_checkLenient(self);
      if ((pos_ < limit_ || DPGSStreamJsonReader_fillBufferWithInt_(self, 1)) && IOSCharArray_Get(nil_chk(buffer_), pos_) == '>') {
        pos_++;
      }
      break;
      default:
      @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Expected ':'");
    }
  }
  else if (peekStack == DPGSStreamJsonScope_EMPTY_DOCUMENT) {
    if (lenient_) {
      DPGSStreamJsonReader_consumeNonExecutePrefix(self);
    }
    *IOSIntArray_GetRef(stack_, stackSize_ - 1) = DPGSStreamJsonScope_NONEMPTY_DOCUMENT;
  }
  else if (peekStack == DPGSStreamJsonScope_NONEMPTY_DOCUMENT) {
    jint c = DPGSStreamJsonReader_nextNonWhitespaceWithBoolean_(self, false);
    if (c == -1) {
      return peeked_ = DPGSStreamJsonReader_PEEKED_EOF;
    }
    else {
      DPGSStreamJsonReader_checkLenient(self);
      pos_--;
    }
  }
  else if (peekStack == DPGSStreamJsonScope_CLOSED) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"JsonReader is closed");
  }
  jint c = DPGSStreamJsonReader_nextNonWhitespaceWithBoolean_(self, true);
  switch (c) {
    case ']':
    if (peekStack == DPGSStreamJsonScope_EMPTY_ARRAY) {
      return peeked_ = DPGSStreamJsonReader_PEEKED_END_ARRAY;
    }
    case ';':
    case ',':
    if (peekStack == DPGSStreamJsonScope_EMPTY_ARRAY || peekStack == DPGSStreamJsonScope_NONEMPTY_ARRAY) {
      DPGSStreamJsonReader_checkLenient(self);
      pos_--;
      return peeked_ = DPGSStreamJsonReader_PEEKED_NULL;
    }
    else {
      @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Unexpected value");
    }
    case '\'':
    DPGSStreamJsonReader_checkLenient(self);
    return peeked_ = DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED;
    case '"':
    return peeked_ = DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED;
    case '[':
    return peeked_ = DPGSStreamJsonReader_PEEKED_BEGIN_ARRAY;
    case '{':
    return peeked_ = DPGSStreamJsonReader_PEEKED_BEGIN_OBJECT;
    default:
    pos_--;
  }
  jint result = DPGSStreamJsonReader_peekKeyword(self);
  if (result != DPGSStreamJsonReader_PEEKED_NONE) {
    return result;
  }
  result = DPGSStreamJsonReader_peekNumber(self);
  if (result != DPGSStreamJsonReader_PEEKED_NONE) {
    return result;
  }
  if (!DPGSStreamJsonReader_isLiteralWithChar_(self, IOSCharArray_Get(nil_chk(buffer_), pos_))) {
    @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Expected value");
  }
  DPGSStreamJsonReader_checkLenient(self);
  return peeked_ = DPGSStreamJsonReader_PEEKED_UNQUOTED;
}

- (jint)peekKeyword {
  return DPGSStreamJsonReader_peekKeyword(self);
}

- (jint)peekNumber {
  return DPGSStreamJsonReader_peekNumber(self);
}

- (jboolean)isLiteralWithChar:(jchar)c {
  return DPGSStreamJsonReader_isLiteralWithChar_(self, c);
}

- (NSString *)nextName {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  NSString *result;
  if (p == DPGSStreamJsonReader_PEEKED_UNQUOTED_NAME) {
    result = DPGSStreamJsonReader_nextUnquotedValue(self);
  }
  else if (p == DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME) {
    result = DPGSStreamJsonReader_nextQuotedValueWithChar_(self, '\'');
  }
  else if (p == DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME) {
    result = DPGSStreamJsonReader_nextQuotedValueWithChar_(self, '"');
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a name but was ", [self peek], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
  peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  (void) IOSObjectArray_Set(nil_chk(pathNames_), stackSize_ - 1, result);
  return result;
}

- (NSString *)nextString {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  NSString *result;
  if (p == DPGSStreamJsonReader_PEEKED_UNQUOTED) {
    result = DPGSStreamJsonReader_nextUnquotedValue(self);
  }
  else if (p == DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED) {
    result = DPGSStreamJsonReader_nextQuotedValueWithChar_(self, '\'');
  }
  else if (p == DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED) {
    result = DPGSStreamJsonReader_nextQuotedValueWithChar_(self, '"');
  }
  else if (p == DPGSStreamJsonReader_PEEKED_BUFFERED) {
    result = peekedString_;
    peekedString_ = nil;
  }
  else if (p == DPGSStreamJsonReader_PEEKED_LONG) {
    result = JavaLangLong_toStringWithLong_(peekedLong_);
  }
  else if (p == DPGSStreamJsonReader_PEEKED_NUMBER) {
    result = [NSString stringWithCharacters:buffer_ offset:pos_ length:peekedNumberLength_];
    pos_ += peekedNumberLength_;
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a string but was ", [self peek], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
  peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  return result;
}

- (jboolean)nextBoolean {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  if (p == DPGSStreamJsonReader_PEEKED_TRUE) {
    peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    return true;
  }
  else if (p == DPGSStreamJsonReader_PEEKED_FALSE) {
    peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    return false;
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a boolean but was ", [self peek], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
}

- (void)nextNull {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  if (p == DPGSStreamJsonReader_PEEKED_NULL) {
    peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected null but was ", [self peek], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
}

- (jdouble)nextDouble {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  if (p == DPGSStreamJsonReader_PEEKED_LONG) {
    peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    return (jdouble) peekedLong_;
  }
  if (p == DPGSStreamJsonReader_PEEKED_NUMBER) {
    peekedString_ = [NSString stringWithCharacters:buffer_ offset:pos_ length:peekedNumberLength_];
    pos_ += peekedNumberLength_;
  }
  else if (p == DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED || p == DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED) {
    peekedString_ = DPGSStreamJsonReader_nextQuotedValueWithChar_(self, p == DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED ? '\'' : '"');
  }
  else if (p == DPGSStreamJsonReader_PEEKED_UNQUOTED) {
    peekedString_ = DPGSStreamJsonReader_nextUnquotedValue(self);
  }
  else if (p != DPGSStreamJsonReader_PEEKED_BUFFERED) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a double but was ", [self peek], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
  peeked_ = DPGSStreamJsonReader_PEEKED_BUFFERED;
  jdouble result = JavaLangDouble_parseDoubleWithNSString_(peekedString_);
  if (!lenient_ && (JavaLangDouble_isNaNWithDouble_(result) || JavaLangDouble_isInfiniteWithDouble_(result))) {
    @throw new_DPGSStreamMalformedJsonException_initWithNSString_(JreStrcat("$D$I$I$$", @"JSON forbids NaN and infinities: ", result, @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
  peekedString_ = nil;
  peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  return result;
}

- (jlong)nextLong {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  if (p == DPGSStreamJsonReader_PEEKED_LONG) {
    peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    return peekedLong_;
  }
  if (p == DPGSStreamJsonReader_PEEKED_NUMBER) {
    peekedString_ = [NSString stringWithCharacters:buffer_ offset:pos_ length:peekedNumberLength_];
    pos_ += peekedNumberLength_;
  }
  else if (p == DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED || p == DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED) {
    peekedString_ = DPGSStreamJsonReader_nextQuotedValueWithChar_(self, p == DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED ? '\'' : '"');
    @try {
      jlong result = JavaLangLong_parseLongWithNSString_(peekedString_);
      peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
      (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
      return result;
    }
    @catch (JavaLangNumberFormatException *ignored) {
    }
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a long but was ", [self peek], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
  peeked_ = DPGSStreamJsonReader_PEEKED_BUFFERED;
  jdouble asDouble = JavaLangDouble_parseDoubleWithNSString_(peekedString_);
  jlong result = JreFpToLong(asDouble);
  if (result != asDouble) {
    @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$$I$I$$", @"Expected a long but was ", peekedString_, @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
  peekedString_ = nil;
  peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  return result;
}

- (NSString *)nextQuotedValueWithChar:(jchar)quote {
  return DPGSStreamJsonReader_nextQuotedValueWithChar_(self, quote);
}

- (NSString *)nextUnquotedValue {
  return DPGSStreamJsonReader_nextUnquotedValue(self);
}

- (void)skipQuotedValueWithChar:(jchar)quote {
  DPGSStreamJsonReader_skipQuotedValueWithChar_(self, quote);
}

- (void)skipUnquotedValue {
  DPGSStreamJsonReader_skipUnquotedValue(self);
}

- (jint)nextInt {
  jint p = peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [self doPeek];
  }
  jint result;
  if (p == DPGSStreamJsonReader_PEEKED_LONG) {
    result = (jint) peekedLong_;
    if (peekedLong_ != result) {
      @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$J$I$I$$", @"Expected an int but was ", peekedLong_, @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
    }
    peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
    (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
    return result;
  }
  if (p == DPGSStreamJsonReader_PEEKED_NUMBER) {
    peekedString_ = [NSString stringWithCharacters:buffer_ offset:pos_ length:peekedNumberLength_];
    pos_ += peekedNumberLength_;
  }
  else if (p == DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED || p == DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED) {
    peekedString_ = DPGSStreamJsonReader_nextQuotedValueWithChar_(self, p == DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED ? '\'' : '"');
    @try {
      result = JavaLangInteger_parseIntWithNSString_(peekedString_);
      peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
      (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
      return result;
    }
    @catch (JavaLangNumberFormatException *ignored) {
    }
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected an int but was ", [self peek], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
  peeked_ = DPGSStreamJsonReader_PEEKED_BUFFERED;
  jdouble asDouble = JavaLangDouble_parseDoubleWithNSString_(peekedString_);
  result = JreFpToInt(asDouble);
  if (result != asDouble) {
    @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$$I$I$$", @"Expected an int but was ", peekedString_, @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
  }
  peekedString_ = nil;
  peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  return result;
}

- (void)close {
  peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  *IOSIntArray_GetRef(nil_chk(stack_), 0) = DPGSStreamJsonScope_CLOSED;
  stackSize_ = 1;
  [((JavaIoReader *) nil_chk(in_)) close];
}

- (void)skipValue {
  jint count = 0;
  do {
    jint p = peeked_;
    if (p == DPGSStreamJsonReader_PEEKED_NONE) {
      p = [self doPeek];
    }
    if (p == DPGSStreamJsonReader_PEEKED_BEGIN_ARRAY) {
      DPGSStreamJsonReader_pushWithInt_(self, DPGSStreamJsonScope_EMPTY_ARRAY);
      count++;
    }
    else if (p == DPGSStreamJsonReader_PEEKED_BEGIN_OBJECT) {
      DPGSStreamJsonReader_pushWithInt_(self, DPGSStreamJsonScope_EMPTY_OBJECT);
      count++;
    }
    else if (p == DPGSStreamJsonReader_PEEKED_END_ARRAY) {
      stackSize_--;
      count--;
    }
    else if (p == DPGSStreamJsonReader_PEEKED_END_OBJECT) {
      stackSize_--;
      count--;
    }
    else if (p == DPGSStreamJsonReader_PEEKED_UNQUOTED_NAME || p == DPGSStreamJsonReader_PEEKED_UNQUOTED) {
      DPGSStreamJsonReader_skipUnquotedValue(self);
    }
    else if (p == DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED || p == DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME) {
      DPGSStreamJsonReader_skipQuotedValueWithChar_(self, '\'');
    }
    else if (p == DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED || p == DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME) {
      DPGSStreamJsonReader_skipQuotedValueWithChar_(self, '"');
    }
    else if (p == DPGSStreamJsonReader_PEEKED_NUMBER) {
      pos_ += peekedNumberLength_;
    }
    peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  }
  while (count != 0);
  (*IOSIntArray_GetRef(nil_chk(pathIndices_), stackSize_ - 1))++;
  (void) IOSObjectArray_Set(nil_chk(pathNames_), stackSize_ - 1, @"null");
}

- (void)pushWithInt:(jint)newTop {
  DPGSStreamJsonReader_pushWithInt_(self, newTop);
}

- (jboolean)fillBufferWithInt:(jint)minimum {
  return DPGSStreamJsonReader_fillBufferWithInt_(self, minimum);
}

- (jint)getLineNumber {
  return lineNumber_ + 1;
}

- (jint)getColumnNumber {
  return pos_ - lineStart_ + 1;
}

- (jint)nextNonWhitespaceWithBoolean:(jboolean)throwOnEof {
  return DPGSStreamJsonReader_nextNonWhitespaceWithBoolean_(self, throwOnEof);
}

- (void)checkLenient {
  DPGSStreamJsonReader_checkLenient(self);
}

- (void)skipToEndOfLine {
  DPGSStreamJsonReader_skipToEndOfLine(self);
}

- (jboolean)skipToWithNSString:(NSString *)toFind {
  return DPGSStreamJsonReader_skipToWithNSString_(self, toFind);
}

- (NSString *)description {
  return JreStrcat("$$I$I", [[self getClass] getSimpleName], @" at line ", [self getLineNumber], @" column ", [self getColumnNumber]);
}

- (NSString *)getPath {
  JavaLangStringBuilder *result = [new_JavaLangStringBuilder_init() appendWithChar:'$'];
  for (jint i = 0, size = stackSize_; i < size; i++) {
    switch (IOSIntArray_Get(nil_chk(stack_), i)) {
      case DPGSStreamJsonScope_EMPTY_ARRAY:
      case DPGSStreamJsonScope_NONEMPTY_ARRAY:
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(result)) appendWithChar:'['])) appendWithInt:IOSIntArray_Get(nil_chk(pathIndices_), i)])) appendWithChar:']'];
      break;
      case DPGSStreamJsonScope_EMPTY_OBJECT:
      case DPGSStreamJsonScope_DANGLING_NAME:
      case DPGSStreamJsonScope_NONEMPTY_OBJECT:
      (void) [((JavaLangStringBuilder *) nil_chk(result)) appendWithChar:'.'];
      if (IOSObjectArray_Get(nil_chk(pathNames_), i) != nil) {
        (void) [result appendWithNSString:IOSObjectArray_Get(pathNames_, i)];
      }
      break;
      case DPGSStreamJsonScope_NONEMPTY_DOCUMENT:
      case DPGSStreamJsonScope_EMPTY_DOCUMENT:
      case DPGSStreamJsonScope_CLOSED:
      break;
    }
  }
  return [((JavaLangStringBuilder *) nil_chk(result)) description];
}

- (jchar)readEscapeCharacter {
  return DPGSStreamJsonReader_readEscapeCharacter(self);
}

- (JavaIoIOException *)syntaxErrorWithNSString:(NSString *)message {
  return DPGSStreamJsonReader_syntaxErrorWithNSString_(self, message);
}

- (void)consumeNonExecutePrefix {
  DPGSStreamJsonReader_consumeNonExecutePrefix(self);
}

+ (void)initialize {
  if (self == [DPGSStreamJsonReader class]) {
    DPGSStreamJsonReader_NON_EXECUTE_PREFIX = [@")]}'\n" toCharArray];
    {
      *JreLoadStaticRef(DPGSInternalJsonReaderInternalAccess, INSTANCE) = new_DPGSStreamJsonReader_$1_init();
    }
    J2OBJC_SET_INITIALIZED(DPGSStreamJsonReader)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoReader:", "JsonReader", NULL, 0x1, NULL, NULL },
    { "setLenientWithBoolean:", "setLenient", "V", 0x11, NULL, NULL },
    { "isLenient", NULL, "Z", 0x11, NULL, NULL },
    { "beginArray", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "endArray", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "beginObject", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "endObject", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "hasNext", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "peek", NULL, "Lcom.google.gson.stream.JsonToken;", 0x1, "Ljava.io.IOException;", NULL },
    { "doPeek", NULL, "I", 0x0, "Ljava.io.IOException;", NULL },
    { "peekKeyword", NULL, "I", 0x2, "Ljava.io.IOException;", NULL },
    { "peekNumber", NULL, "I", 0x2, "Ljava.io.IOException;", NULL },
    { "isLiteralWithChar:", "isLiteral", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "nextName", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "nextString", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "nextBoolean", NULL, "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "nextNull", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "nextDouble", NULL, "D", 0x1, "Ljava.io.IOException;", NULL },
    { "nextLong", NULL, "J", 0x1, "Ljava.io.IOException;", NULL },
    { "nextQuotedValueWithChar:", "nextQuotedValue", "Ljava.lang.String;", 0x2, "Ljava.io.IOException;", NULL },
    { "nextUnquotedValue", NULL, "Ljava.lang.String;", 0x2, "Ljava.io.IOException;", NULL },
    { "skipQuotedValueWithChar:", "skipQuotedValue", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "skipUnquotedValue", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "nextInt", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "skipValue", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "pushWithInt:", "push", "V", 0x2, NULL, NULL },
    { "fillBufferWithInt:", "fillBuffer", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "getLineNumber", NULL, "I", 0x0, NULL, NULL },
    { "getColumnNumber", NULL, "I", 0x0, NULL, NULL },
    { "nextNonWhitespaceWithBoolean:", "nextNonWhitespace", "I", 0x2, "Ljava.io.IOException;", NULL },
    { "checkLenient", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "skipToEndOfLine", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "skipToWithNSString:", "skipTo", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPath", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "readEscapeCharacter", NULL, "C", 0x2, "Ljava.io.IOException;", NULL },
    { "syntaxErrorWithNSString:", "syntaxError", "Ljava.io.IOException;", 0x2, "Ljava.io.IOException;", NULL },
    { "consumeNonExecutePrefix", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NON_EXECUTE_PREFIX", "NON_EXECUTE_PREFIX", 0x1a, "[C", &DPGSStreamJsonReader_NON_EXECUTE_PREFIX, NULL, .constantValue.asLong = 0 },
    { "MIN_INCOMPLETE_INTEGER", "MIN_INCOMPLETE_INTEGER", 0x1a, "J", NULL, NULL, .constantValue.asLong = DPGSStreamJsonReader_MIN_INCOMPLETE_INTEGER },
    { "PEEKED_NONE", "PEEKED_NONE", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_NONE },
    { "PEEKED_BEGIN_OBJECT", "PEEKED_BEGIN_OBJECT", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_BEGIN_OBJECT },
    { "PEEKED_END_OBJECT", "PEEKED_END_OBJECT", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_END_OBJECT },
    { "PEEKED_BEGIN_ARRAY", "PEEKED_BEGIN_ARRAY", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_BEGIN_ARRAY },
    { "PEEKED_END_ARRAY", "PEEKED_END_ARRAY", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_END_ARRAY },
    { "PEEKED_TRUE", "PEEKED_TRUE", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_TRUE },
    { "PEEKED_FALSE", "PEEKED_FALSE", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_FALSE },
    { "PEEKED_NULL", "PEEKED_NULL", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_NULL },
    { "PEEKED_SINGLE_QUOTED", "PEEKED_SINGLE_QUOTED", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED },
    { "PEEKED_DOUBLE_QUOTED", "PEEKED_DOUBLE_QUOTED", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED },
    { "PEEKED_UNQUOTED", "PEEKED_UNQUOTED", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_UNQUOTED },
    { "PEEKED_BUFFERED", "PEEKED_BUFFERED", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_BUFFERED },
    { "PEEKED_SINGLE_QUOTED_NAME", "PEEKED_SINGLE_QUOTED_NAME", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME },
    { "PEEKED_DOUBLE_QUOTED_NAME", "PEEKED_DOUBLE_QUOTED_NAME", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME },
    { "PEEKED_UNQUOTED_NAME", "PEEKED_UNQUOTED_NAME", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_UNQUOTED_NAME },
    { "PEEKED_LONG", "PEEKED_LONG", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_LONG },
    { "PEEKED_NUMBER", "PEEKED_NUMBER", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_NUMBER },
    { "PEEKED_EOF", "PEEKED_EOF", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_PEEKED_EOF },
    { "NUMBER_CHAR_NONE", "NUMBER_CHAR_NONE", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_NUMBER_CHAR_NONE },
    { "NUMBER_CHAR_SIGN", "NUMBER_CHAR_SIGN", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_NUMBER_CHAR_SIGN },
    { "NUMBER_CHAR_DIGIT", "NUMBER_CHAR_DIGIT", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_NUMBER_CHAR_DIGIT },
    { "NUMBER_CHAR_DECIMAL", "NUMBER_CHAR_DECIMAL", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_NUMBER_CHAR_DECIMAL },
    { "NUMBER_CHAR_FRACTION_DIGIT", "NUMBER_CHAR_FRACTION_DIGIT", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_NUMBER_CHAR_FRACTION_DIGIT },
    { "NUMBER_CHAR_EXP_E", "NUMBER_CHAR_EXP_E", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_NUMBER_CHAR_EXP_E },
    { "NUMBER_CHAR_EXP_SIGN", "NUMBER_CHAR_EXP_SIGN", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_NUMBER_CHAR_EXP_SIGN },
    { "NUMBER_CHAR_EXP_DIGIT", "NUMBER_CHAR_EXP_DIGIT", 0x1a, "I", NULL, NULL, .constantValue.asInt = DPGSStreamJsonReader_NUMBER_CHAR_EXP_DIGIT },
    { "in_", NULL, 0x12, "Ljava.io.Reader;", NULL, NULL, .constantValue.asLong = 0 },
    { "lenient_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "buffer_", NULL, 0x12, "[C", NULL, NULL, .constantValue.asLong = 0 },
    { "pos_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "limit_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lineNumber_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lineStart_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "peeked_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "peekedLong_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "peekedNumberLength_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "peekedString_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "stack_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "stackSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "pathNames_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "pathIndices_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _DPGSStreamJsonReader = { 2, "JsonReader", "com.google.gson.stream", NULL, 0x1, 39, methods, 43, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_DPGSStreamJsonReader;
}

@end

void DPGSStreamJsonReader_initWithJavaIoReader_(DPGSStreamJsonReader *self, JavaIoReader *inArg) {
  NSObject_init(self);
  self->lenient_ = false;
  self->buffer_ = [IOSCharArray newArrayWithLength:1024];
  self->pos_ = 0;
  self->limit_ = 0;
  self->lineNumber_ = 0;
  self->lineStart_ = 0;
  self->peeked_ = DPGSStreamJsonReader_PEEKED_NONE;
  self->stack_ = [IOSIntArray newArrayWithLength:32];
  self->stackSize_ = 0;
  {
    *IOSIntArray_GetRef(self->stack_, self->stackSize_++) = DPGSStreamJsonScope_EMPTY_DOCUMENT;
  }
  self->pathNames_ = [IOSObjectArray newArrayWithLength:32 type:NSString_class_()];
  self->pathIndices_ = [IOSIntArray newArrayWithLength:32];
  if (inArg == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"in == null");
  }
  self->in_ = inArg;
}

DPGSStreamJsonReader *new_DPGSStreamJsonReader_initWithJavaIoReader_(JavaIoReader *inArg) {
  DPGSStreamJsonReader *self = [DPGSStreamJsonReader alloc];
  DPGSStreamJsonReader_initWithJavaIoReader_(self, inArg);
  return self;
}

DPGSStreamJsonReader *create_DPGSStreamJsonReader_initWithJavaIoReader_(JavaIoReader *inArg) {
  return new_DPGSStreamJsonReader_initWithJavaIoReader_(inArg);
}

jint DPGSStreamJsonReader_peekKeyword(DPGSStreamJsonReader *self) {
  jchar c = IOSCharArray_Get(nil_chk(self->buffer_), self->pos_);
  NSString *keyword;
  NSString *keywordUpper;
  jint peeking;
  if (c == 't' || c == 'T') {
    keyword = @"true";
    keywordUpper = @"TRUE";
    peeking = DPGSStreamJsonReader_PEEKED_TRUE;
  }
  else if (c == 'f' || c == 'F') {
    keyword = @"false";
    keywordUpper = @"FALSE";
    peeking = DPGSStreamJsonReader_PEEKED_FALSE;
  }
  else if (c == 'n' || c == 'N') {
    keyword = @"null";
    keywordUpper = @"NULL";
    peeking = DPGSStreamJsonReader_PEEKED_NULL;
  }
  else {
    return DPGSStreamJsonReader_PEEKED_NONE;
  }
  jint length = ((jint) [((NSString *) nil_chk(keyword)) length]);
  for (jint i = 1; i < length; i++) {
    if (self->pos_ + i >= self->limit_ && !DPGSStreamJsonReader_fillBufferWithInt_(self, i + 1)) {
      return DPGSStreamJsonReader_PEEKED_NONE;
    }
    c = IOSCharArray_Get(self->buffer_, self->pos_ + i);
    if (c != [keyword charAtWithInt:i] && c != [((NSString *) nil_chk(keywordUpper)) charAtWithInt:i]) {
      return DPGSStreamJsonReader_PEEKED_NONE;
    }
  }
  if ((self->pos_ + length < self->limit_ || DPGSStreamJsonReader_fillBufferWithInt_(self, length + 1)) && DPGSStreamJsonReader_isLiteralWithChar_(self, IOSCharArray_Get(self->buffer_, self->pos_ + length))) {
    return DPGSStreamJsonReader_PEEKED_NONE;
  }
  self->pos_ += length;
  return self->peeked_ = peeking;
}

jint DPGSStreamJsonReader_peekNumber(DPGSStreamJsonReader *self) {
  IOSCharArray *buffer = self->buffer_;
  jint p = self->pos_;
  jint l = self->limit_;
  jlong value = 0;
  jboolean negative = false;
  jboolean fitsInLong = true;
  jint last = DPGSStreamJsonReader_NUMBER_CHAR_NONE;
  jint i = 0;
  for (; true; i++) {
    if (p + i == l) {
      if (i == ((IOSCharArray *) nil_chk(buffer))->size_) {
        return DPGSStreamJsonReader_PEEKED_NONE;
      }
      if (!DPGSStreamJsonReader_fillBufferWithInt_(self, i + 1)) {
        break;
      }
      p = self->pos_;
      l = self->limit_;
    }
    jchar c = IOSCharArray_Get(nil_chk(buffer), p + i);
    switch (c) {
      case '-':
      if (last == DPGSStreamJsonReader_NUMBER_CHAR_NONE) {
        negative = true;
        last = DPGSStreamJsonReader_NUMBER_CHAR_SIGN;
        continue;
      }
      else if (last == DPGSStreamJsonReader_NUMBER_CHAR_EXP_E) {
        last = DPGSStreamJsonReader_NUMBER_CHAR_EXP_SIGN;
        continue;
      }
      return DPGSStreamJsonReader_PEEKED_NONE;
      case '+':
      if (last == DPGSStreamJsonReader_NUMBER_CHAR_EXP_E) {
        last = DPGSStreamJsonReader_NUMBER_CHAR_EXP_SIGN;
        continue;
      }
      return DPGSStreamJsonReader_PEEKED_NONE;
      case 'e':
      case 'E':
      if (last == DPGSStreamJsonReader_NUMBER_CHAR_DIGIT || last == DPGSStreamJsonReader_NUMBER_CHAR_FRACTION_DIGIT) {
        last = DPGSStreamJsonReader_NUMBER_CHAR_EXP_E;
        continue;
      }
      return DPGSStreamJsonReader_PEEKED_NONE;
      case '.':
      if (last == DPGSStreamJsonReader_NUMBER_CHAR_DIGIT) {
        last = DPGSStreamJsonReader_NUMBER_CHAR_DECIMAL;
        continue;
      }
      return DPGSStreamJsonReader_PEEKED_NONE;
      default:
      if (c < '0' || c > '9') {
        if (!DPGSStreamJsonReader_isLiteralWithChar_(self, c)) {
          goto break_charactersOfNumber;
        }
        return DPGSStreamJsonReader_PEEKED_NONE;
      }
      if (last == DPGSStreamJsonReader_NUMBER_CHAR_SIGN || last == DPGSStreamJsonReader_NUMBER_CHAR_NONE) {
        value = -(c - '0');
        last = DPGSStreamJsonReader_NUMBER_CHAR_DIGIT;
      }
      else if (last == DPGSStreamJsonReader_NUMBER_CHAR_DIGIT) {
        if (value == 0) {
          return DPGSStreamJsonReader_PEEKED_NONE;
        }
        jlong newValue = value * 10 - (c - '0');
        fitsInLong &= (value > DPGSStreamJsonReader_MIN_INCOMPLETE_INTEGER || (value == DPGSStreamJsonReader_MIN_INCOMPLETE_INTEGER && newValue < value));
        value = newValue;
      }
      else if (last == DPGSStreamJsonReader_NUMBER_CHAR_DECIMAL) {
        last = DPGSStreamJsonReader_NUMBER_CHAR_FRACTION_DIGIT;
      }
      else if (last == DPGSStreamJsonReader_NUMBER_CHAR_EXP_E || last == DPGSStreamJsonReader_NUMBER_CHAR_EXP_SIGN) {
        last = DPGSStreamJsonReader_NUMBER_CHAR_EXP_DIGIT;
      }
    }
  }
  break_charactersOfNumber: ;
  if (last == DPGSStreamJsonReader_NUMBER_CHAR_DIGIT && fitsInLong && (value != JavaLangLong_MIN_VALUE || negative)) {
    self->peekedLong_ = negative ? value : -value;
    self->pos_ += i;
    return self->peeked_ = DPGSStreamJsonReader_PEEKED_LONG;
  }
  else if (last == DPGSStreamJsonReader_NUMBER_CHAR_DIGIT || last == DPGSStreamJsonReader_NUMBER_CHAR_FRACTION_DIGIT || last == DPGSStreamJsonReader_NUMBER_CHAR_EXP_DIGIT) {
    self->peekedNumberLength_ = i;
    return self->peeked_ = DPGSStreamJsonReader_PEEKED_NUMBER;
  }
  else {
    return DPGSStreamJsonReader_PEEKED_NONE;
  }
}

jboolean DPGSStreamJsonReader_isLiteralWithChar_(DPGSStreamJsonReader *self, jchar c) {
  switch (c) {
    case '/':
    case '\\':
    case ';':
    case '#':
    case '=':
    DPGSStreamJsonReader_checkLenient(self);
    case '{':
    case '}':
    case '[':
    case ']':
    case ':':
    case ',':
    case ' ':
    case 0x0009:
    case 0x000c:
    case 0x000d:
    case 0x000a:
    return false;
    default:
    return true;
  }
}

NSString *DPGSStreamJsonReader_nextQuotedValueWithChar_(DPGSStreamJsonReader *self, jchar quote) {
  IOSCharArray *buffer = self->buffer_;
  JavaLangStringBuilder *builder = new_JavaLangStringBuilder_init();
  while (true) {
    jint p = self->pos_;
    jint l = self->limit_;
    jint start = p;
    while (p < l) {
      jint c = IOSCharArray_Get(nil_chk(buffer), p++);
      if (c == quote) {
        self->pos_ = p;
        (void) [builder appendWithCharArray:buffer withInt:start withInt:p - start - 1];
        return [builder description];
      }
      else if (c == '\\') {
        self->pos_ = p;
        (void) [builder appendWithCharArray:buffer withInt:start withInt:p - start - 1];
        (void) [builder appendWithChar:DPGSStreamJsonReader_readEscapeCharacter(self)];
        p = self->pos_;
        l = self->limit_;
        start = p;
      }
      else if (c == 0x000a) {
        self->lineNumber_++;
        self->lineStart_ = p;
      }
    }
    (void) [builder appendWithCharArray:buffer withInt:start withInt:p - start];
    self->pos_ = p;
    if (!DPGSStreamJsonReader_fillBufferWithInt_(self, 1)) {
      @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated string");
    }
  }
}

NSString *DPGSStreamJsonReader_nextUnquotedValue(DPGSStreamJsonReader *self) {
  JavaLangStringBuilder *builder = nil;
  jint i = 0;
  while (true) {
    for (; self->pos_ + i < self->limit_; i++) {
      switch (IOSCharArray_Get(nil_chk(self->buffer_), self->pos_ + i)) {
        case '/':
        case '\\':
        case ';':
        case '#':
        case '=':
        DPGSStreamJsonReader_checkLenient(self);
        case '{':
        case '}':
        case '[':
        case ']':
        case ':':
        case ',':
        case ' ':
        case 0x0009:
        case 0x000c:
        case 0x000d:
        case 0x000a:
        goto break_findNonLiteralCharacter;
      }
    }
    if (i < ((IOSCharArray *) nil_chk(self->buffer_))->size_) {
      if (DPGSStreamJsonReader_fillBufferWithInt_(self, i + 1)) {
        continue;
      }
      else {
        break;
      }
    }
    if (builder == nil) {
      builder = new_JavaLangStringBuilder_init();
    }
    (void) [((JavaLangStringBuilder *) nil_chk(builder)) appendWithCharArray:self->buffer_ withInt:self->pos_ withInt:i];
    self->pos_ += i;
    i = 0;
    if (!DPGSStreamJsonReader_fillBufferWithInt_(self, 1)) {
      break;
    }
  }
  break_findNonLiteralCharacter: ;
  NSString *result;
  if (builder == nil) {
    result = [NSString stringWithCharacters:self->buffer_ offset:self->pos_ length:i];
  }
  else {
    (void) [builder appendWithCharArray:self->buffer_ withInt:self->pos_ withInt:i];
    result = [builder description];
  }
  self->pos_ += i;
  return result;
}

void DPGSStreamJsonReader_skipQuotedValueWithChar_(DPGSStreamJsonReader *self, jchar quote) {
  IOSCharArray *buffer = self->buffer_;
  do {
    jint p = self->pos_;
    jint l = self->limit_;
    while (p < l) {
      jint c = IOSCharArray_Get(nil_chk(buffer), p++);
      if (c == quote) {
        self->pos_ = p;
        return;
      }
      else if (c == '\\') {
        self->pos_ = p;
        DPGSStreamJsonReader_readEscapeCharacter(self);
        p = self->pos_;
        l = self->limit_;
      }
      else if (c == 0x000a) {
        self->lineNumber_++;
        self->lineStart_ = p;
      }
    }
    self->pos_ = p;
  }
  while (DPGSStreamJsonReader_fillBufferWithInt_(self, 1));
  @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated string");
}

void DPGSStreamJsonReader_skipUnquotedValue(DPGSStreamJsonReader *self) {
  do {
    jint i = 0;
    for (; self->pos_ + i < self->limit_; i++) {
      switch (IOSCharArray_Get(nil_chk(self->buffer_), self->pos_ + i)) {
        case '/':
        case '\\':
        case ';':
        case '#':
        case '=':
        DPGSStreamJsonReader_checkLenient(self);
        case '{':
        case '}':
        case '[':
        case ']':
        case ':':
        case ',':
        case ' ':
        case 0x0009:
        case 0x000c:
        case 0x000d:
        case 0x000a:
        self->pos_ += i;
        return;
      }
    }
    self->pos_ += i;
  }
  while (DPGSStreamJsonReader_fillBufferWithInt_(self, 1));
}

void DPGSStreamJsonReader_pushWithInt_(DPGSStreamJsonReader *self, jint newTop) {
  if (self->stackSize_ == ((IOSIntArray *) nil_chk(self->stack_))->size_) {
    IOSIntArray *newStack = [IOSIntArray newArrayWithLength:self->stackSize_ * 2];
    IOSIntArray *newPathIndices = [IOSIntArray newArrayWithLength:self->stackSize_ * 2];
    IOSObjectArray *newPathNames = [IOSObjectArray newArrayWithLength:self->stackSize_ * 2 type:NSString_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->stack_, 0, newStack, 0, self->stackSize_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->pathIndices_, 0, newPathIndices, 0, self->stackSize_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->pathNames_, 0, newPathNames, 0, self->stackSize_);
    self->stack_ = newStack;
    self->pathIndices_ = newPathIndices;
    self->pathNames_ = newPathNames;
  }
  *IOSIntArray_GetRef(self->stack_, self->stackSize_++) = newTop;
}

jboolean DPGSStreamJsonReader_fillBufferWithInt_(DPGSStreamJsonReader *self, jint minimum) {
  IOSCharArray *buffer = self->buffer_;
  self->lineStart_ -= self->pos_;
  if (self->limit_ != self->pos_) {
    self->limit_ -= self->pos_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, self->pos_, buffer, 0, self->limit_);
  }
  else {
    self->limit_ = 0;
  }
  self->pos_ = 0;
  jint total;
  while ((total = [((JavaIoReader *) nil_chk(self->in_)) readWithCharArray:buffer withInt:self->limit_ withInt:((IOSCharArray *) nil_chk(buffer))->size_ - self->limit_]) != -1) {
    self->limit_ += total;
    if (self->lineNumber_ == 0 && self->lineStart_ == 0 && self->limit_ > 0 && IOSCharArray_Get(buffer, 0) == 0xfeff) {
      self->pos_++;
      self->lineStart_++;
      minimum++;
    }
    if (self->limit_ >= minimum) {
      return true;
    }
  }
  return false;
}

jint DPGSStreamJsonReader_nextNonWhitespaceWithBoolean_(DPGSStreamJsonReader *self, jboolean throwOnEof) {
  IOSCharArray *buffer = self->buffer_;
  jint p = self->pos_;
  jint l = self->limit_;
  while (true) {
    if (p == l) {
      self->pos_ = p;
      if (!DPGSStreamJsonReader_fillBufferWithInt_(self, 1)) {
        break;
      }
      p = self->pos_;
      l = self->limit_;
    }
    jint c = IOSCharArray_Get(nil_chk(buffer), p++);
    if (c == 0x000a) {
      self->lineNumber_++;
      self->lineStart_ = p;
      continue;
    }
    else if (c == ' ' || c == 0x000d || c == 0x0009) {
      continue;
    }
    if (c == '/') {
      self->pos_ = p;
      if (p == l) {
        self->pos_--;
        jboolean charsLoaded = DPGSStreamJsonReader_fillBufferWithInt_(self, 2);
        self->pos_++;
        if (!charsLoaded) {
          return c;
        }
      }
      DPGSStreamJsonReader_checkLenient(self);
      jchar peek = IOSCharArray_Get(buffer, self->pos_);
      switch (peek) {
        case '*':
        self->pos_++;
        if (!DPGSStreamJsonReader_skipToWithNSString_(self, @"*/")) {
          @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated comment");
        }
        p = self->pos_ + 2;
        l = self->limit_;
        continue;
        case '/':
        self->pos_++;
        DPGSStreamJsonReader_skipToEndOfLine(self);
        p = self->pos_;
        l = self->limit_;
        continue;
        default:
        return c;
      }
    }
    else if (c == '#') {
      self->pos_ = p;
      DPGSStreamJsonReader_checkLenient(self);
      DPGSStreamJsonReader_skipToEndOfLine(self);
      p = self->pos_;
      l = self->limit_;
    }
    else {
      self->pos_ = p;
      return c;
    }
  }
  if (throwOnEof) {
    @throw new_JavaIoEOFException_initWithNSString_(JreStrcat("$I$I", @"End of input at line ", [self getLineNumber], @" column ", [self getColumnNumber]));
  }
  else {
    return -1;
  }
}

void DPGSStreamJsonReader_checkLenient(DPGSStreamJsonReader *self) {
  if (!self->lenient_) {
    @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Use JsonReader.setLenient(true) to accept malformed JSON");
  }
}

void DPGSStreamJsonReader_skipToEndOfLine(DPGSStreamJsonReader *self) {
  while (self->pos_ < self->limit_ || DPGSStreamJsonReader_fillBufferWithInt_(self, 1)) {
    jchar c = IOSCharArray_Get(nil_chk(self->buffer_), self->pos_++);
    if (c == 0x000a) {
      self->lineNumber_++;
      self->lineStart_ = self->pos_;
      break;
    }
    else if (c == 0x000d) {
      break;
    }
  }
}

jboolean DPGSStreamJsonReader_skipToWithNSString_(DPGSStreamJsonReader *self, NSString *toFind) {
  for (; self->pos_ + ((jint) [((NSString *) nil_chk(toFind)) length]) <= self->limit_ || DPGSStreamJsonReader_fillBufferWithInt_(self, ((jint) [toFind length])); self->pos_++) {
    {
      if (IOSCharArray_Get(nil_chk(self->buffer_), self->pos_) == 0x000a) {
        self->lineNumber_++;
        self->lineStart_ = self->pos_ + 1;
        continue;
      }
      for (jint c = 0; c < ((jint) [toFind length]); c++) {
        if (IOSCharArray_Get(self->buffer_, self->pos_ + c) != [toFind charAtWithInt:c]) {
          goto continue_outer;
        }
      }
      return true;
    }
    continue_outer: ;
  }
  return false;
}

jchar DPGSStreamJsonReader_readEscapeCharacter(DPGSStreamJsonReader *self) {
  if (self->pos_ == self->limit_ && !DPGSStreamJsonReader_fillBufferWithInt_(self, 1)) {
    @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated escape sequence");
  }
  jchar escaped = IOSCharArray_Get(nil_chk(self->buffer_), self->pos_++);
  {
    jchar result;
    switch (escaped) {
      case 'u':
      if (self->pos_ + 4 > self->limit_ && !DPGSStreamJsonReader_fillBufferWithInt_(self, 4)) {
        @throw DPGSStreamJsonReader_syntaxErrorWithNSString_(self, @"Unterminated escape sequence");
      }
      result = 0;
      for (jint i = self->pos_, end = i + 4; i < end; i++) {
        jchar c = IOSCharArray_Get(self->buffer_, i);
        JreLShiftAssignChar(&result, 4);
        if (c >= '0' && c <= '9') {
          result += (c - '0');
        }
        else if (c >= 'a' && c <= 'f') {
          result += (c - 'a' + 10);
        }
        else if (c >= 'A' && c <= 'F') {
          result += (c - 'A' + 10);
        }
        else {
          @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$", @"\\u", [NSString stringWithCharacters:self->buffer_ offset:self->pos_ length:4]));
        }
      }
      self->pos_ += 4;
      return result;
      case 't':
      return 0x0009;
      case 'b':
      return 0x0008;
      case 'n':
      return 0x000a;
      case 'r':
      return 0x000d;
      case 'f':
      return 0x000c;
      case 0x000a:
      self->lineNumber_++;
      self->lineStart_ = self->pos_;
      case '\'':
      case '"':
      case '\\':
      default:
      return escaped;
    }
  }
}

JavaIoIOException *DPGSStreamJsonReader_syntaxErrorWithNSString_(DPGSStreamJsonReader *self, NSString *message) {
  @throw new_DPGSStreamMalformedJsonException_initWithNSString_(JreStrcat("$$I$I$$", message, @" at line ", [self getLineNumber], @" column ", [self getColumnNumber], @" path ", [self getPath]));
}

void DPGSStreamJsonReader_consumeNonExecutePrefix(DPGSStreamJsonReader *self) {
  DPGSStreamJsonReader_nextNonWhitespaceWithBoolean_(self, true);
  self->pos_--;
  if (self->pos_ + ((IOSCharArray *) nil_chk(DPGSStreamJsonReader_NON_EXECUTE_PREFIX))->size_ > self->limit_ && !DPGSStreamJsonReader_fillBufferWithInt_(self, DPGSStreamJsonReader_NON_EXECUTE_PREFIX->size_)) {
    return;
  }
  for (jint i = 0; i < DPGSStreamJsonReader_NON_EXECUTE_PREFIX->size_; i++) {
    if (IOSCharArray_Get(nil_chk(self->buffer_), self->pos_ + i) != IOSCharArray_Get(DPGSStreamJsonReader_NON_EXECUTE_PREFIX, i)) {
      return;
    }
  }
  self->pos_ += DPGSStreamJsonReader_NON_EXECUTE_PREFIX->size_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DPGSStreamJsonReader)

@implementation DPGSStreamJsonReader_$1

- (void)promoteNameToValueWithDPGSStreamJsonReader:(DPGSStreamJsonReader *)reader {
  if ([reader isKindOfClass:[ComGoogleGsonInternalBindJsonTreeReader class]]) {
    [((ComGoogleGsonInternalBindJsonTreeReader *) nil_chk(((ComGoogleGsonInternalBindJsonTreeReader *) cast_chk(reader, [ComGoogleGsonInternalBindJsonTreeReader class])))) promoteNameToValue];
    return;
  }
  jint p = ((DPGSStreamJsonReader *) nil_chk(reader))->peeked_;
  if (p == DPGSStreamJsonReader_PEEKED_NONE) {
    p = [reader doPeek];
  }
  if (p == DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED_NAME) {
    reader->peeked_ = DPGSStreamJsonReader_PEEKED_DOUBLE_QUOTED;
  }
  else if (p == DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED_NAME) {
    reader->peeked_ = DPGSStreamJsonReader_PEEKED_SINGLE_QUOTED;
  }
  else if (p == DPGSStreamJsonReader_PEEKED_UNQUOTED_NAME) {
    reader->peeked_ = DPGSStreamJsonReader_PEEKED_UNQUOTED;
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$I$I$$", @"Expected a name but was ", [reader peek], @"  at line ", [reader getLineNumber], @" column ", [reader getColumnNumber], @" path ", [reader getPath]));
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DPGSStreamJsonReader_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "promoteNameToValueWithDPGSStreamJsonReader:", "promoteNameToValue", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _DPGSStreamJsonReader_$1 = { 2, "", "com.google.gson.stream", "JsonReader", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_DPGSStreamJsonReader_$1;
}

@end

void DPGSStreamJsonReader_$1_init(DPGSStreamJsonReader_$1 *self) {
  DPGSInternalJsonReaderInternalAccess_init(self);
}

DPGSStreamJsonReader_$1 *new_DPGSStreamJsonReader_$1_init() {
  DPGSStreamJsonReader_$1 *self = [DPGSStreamJsonReader_$1 alloc];
  DPGSStreamJsonReader_$1_init(self);
  return self;
}

DPGSStreamJsonReader_$1 *create_DPGSStreamJsonReader_$1_init() {
  return new_DPGSStreamJsonReader_$1_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DPGSStreamJsonReader_$1)
