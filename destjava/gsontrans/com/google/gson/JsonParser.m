//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/gson/gson/src/main/java/com/google/gson/JsonParser.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonIOException.h"
#include "com/google/gson/JsonParseException.h"
#include "com/google/gson/JsonParser.h"
#include "com/google/gson/JsonSyntaxException.h"
#include "com/google/gson/internal/Streams.h"
#include "com/google/gson/stream/JsonReader.h"
#include "com/google/gson/stream/JsonToken.h"
#include "com/google/gson/stream/MalformedJsonException.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/StackOverflowError.h"

@implementation DPGSJsonParser

- (DPGSJsonElement *)parseWithNSString:(NSString *)json {
  return [self parseWithJavaIoReader:new_JavaIoStringReader_initWithNSString_(json)];
}

- (DPGSJsonElement *)parseWithJavaIoReader:(JavaIoReader *)json {
  @try {
    DPGSStreamJsonReader *jsonReader = new_DPGSStreamJsonReader_initWithJavaIoReader_(json);
    DPGSJsonElement *element = [self parseWithDPGSStreamJsonReader:jsonReader];
    if (![((DPGSJsonElement *) nil_chk(element)) isJsonNull] && [jsonReader peek] != JreLoadEnum(DPGSStreamJsonToken, END_DOCUMENT)) {
      @throw new_DPGSJsonSyntaxException_initWithNSString_(@"Did not consume the entire document.");
    }
    return element;
  }
  @catch (DPGSStreamMalformedJsonException *e) {
    @throw new_DPGSJsonSyntaxException_initWithNSException_(e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_DPGSJsonIOException_initWithNSException_(e);
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw new_DPGSJsonSyntaxException_initWithNSException_(e);
  }
}

- (DPGSJsonElement *)parseWithDPGSStreamJsonReader:(DPGSStreamJsonReader *)json {
  jboolean lenient = [((DPGSStreamJsonReader *) nil_chk(json)) isLenient];
  [json setLenientWithBoolean:true];
  @try {
    return DPGSInternalStreams_parseWithDPGSStreamJsonReader_(json);
  }
  @catch (JavaLangStackOverflowError *e) {
    @throw new_DPGSJsonParseException_initWithNSString_withNSException_(JreStrcat("$@$", @"Failed parsing JSON source: ", json, @" to Json"), e);
  }
  @catch (JavaLangOutOfMemoryError *e) {
    @throw new_DPGSJsonParseException_initWithNSString_withNSException_(JreStrcat("$@$", @"Failed parsing JSON source: ", json, @" to Json"), e);
  }
  @finally {
    [json setLenientWithBoolean:lenient];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  DPGSJsonParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "parseWithNSString:", "parse", "Lcom.google.gson.JsonElement;", 0x1, "Lcom.google.gson.JsonSyntaxException;", NULL },
    { "parseWithJavaIoReader:", "parse", "Lcom.google.gson.JsonElement;", 0x1, "Lcom.google.gson.JsonIOException;Lcom.google.gson.JsonSyntaxException;", NULL },
    { "parseWithDPGSStreamJsonReader:", "parse", "Lcom.google.gson.JsonElement;", 0x1, "Lcom.google.gson.JsonIOException;Lcom.google.gson.JsonSyntaxException;", NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _DPGSJsonParser = { 2, "JsonParser", "com.google.gson", NULL, 0x11, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_DPGSJsonParser;
}

@end

void DPGSJsonParser_init(DPGSJsonParser *self) {
  NSObject_init(self);
}

DPGSJsonParser *new_DPGSJsonParser_init() {
  DPGSJsonParser *self = [DPGSJsonParser alloc];
  DPGSJsonParser_init(self);
  return self;
}

DPGSJsonParser *create_DPGSJsonParser_init() {
  return new_DPGSJsonParser_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DPGSJsonParser)
