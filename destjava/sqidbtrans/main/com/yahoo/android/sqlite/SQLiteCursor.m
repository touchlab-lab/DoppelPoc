//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/squidb/squidb-ios/src/com/yahoo/android/sqlite/SQLiteCursor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/yahoo/android/sqlite/AbstractCursor.h"
#include "com/yahoo/android/sqlite/AbstractWindowedCursor.h"
#include "com/yahoo/android/sqlite/CursorWindow.h"
#include "com/yahoo/android/sqlite/DatabaseObjectNotClosedException.h"
#include "com/yahoo/android/sqlite/DatabaseUtils.h"
#include "com/yahoo/android/sqlite/SQLiteCursor.h"
#include "com/yahoo/android/sqlite/SQLiteCursorDriver.h"
#include "com/yahoo/android/sqlite/SQLiteDatabase.h"
#include "com/yahoo/android/sqlite/SQLiteQuery.h"
#include "com/yahoo/squidb/utility/Logger.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface ComYahooAndroidSqliteSQLiteCursor () {
 @public
  NSString *mEditTable_;
  IOSObjectArray *mColumns_;
  ComYahooAndroidSqliteSQLiteQuery *mQuery_;
  id<ComYahooAndroidSqliteSQLiteCursorDriver> mDriver_;
  jint mCount_;
  jint mCursorWindowCapacity_;
  id<JavaUtilMap> mColumnNameMap_;
  NSException *mStackTrace_;
}

- (void)fillWindowWithInt:(jint)requiredPos;

@end

J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteCursor, mEditTable_, NSString *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteCursor, mColumns_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteCursor, mQuery_, ComYahooAndroidSqliteSQLiteQuery *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteCursor, mDriver_, id<ComYahooAndroidSqliteSQLiteCursorDriver>)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteCursor, mColumnNameMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteCursor, mStackTrace_, NSException *)

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteCursor_fillWindowWithInt_(ComYahooAndroidSqliteSQLiteCursor *self, jint requiredPos);

NSString *ComYahooAndroidSqliteSQLiteCursor_TAG = @"SQLiteCursor";

@implementation ComYahooAndroidSqliteSQLiteCursor

- (instancetype)initWithComYahooAndroidSqliteSQLiteDatabase:(ComYahooAndroidSqliteSQLiteDatabase *)db
                withComYahooAndroidSqliteSQLiteCursorDriver:(id<ComYahooAndroidSqliteSQLiteCursorDriver>)driver
                                               withNSString:(NSString *)editTable
                       withComYahooAndroidSqliteSQLiteQuery:(ComYahooAndroidSqliteSQLiteQuery *)query {
  ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteDatabase_withComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(self, db, driver, editTable, query);
  return self;
}

- (instancetype)initWithComYahooAndroidSqliteSQLiteCursorDriver:(id<ComYahooAndroidSqliteSQLiteCursorDriver>)driver
                                                   withNSString:(NSString *)editTable
                           withComYahooAndroidSqliteSQLiteQuery:(ComYahooAndroidSqliteSQLiteQuery *)query {
  ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(self, driver, editTable, query);
  return self;
}

- (ComYahooAndroidSqliteSQLiteDatabase *)getDatabase {
  return [((ComYahooAndroidSqliteSQLiteQuery *) nil_chk(mQuery_)) getDatabase];
}

- (jboolean)onMoveWithInt:(jint)oldPosition
                  withInt:(jint)newPosition {
  if (mWindow_ == nil || newPosition < [mWindow_ getStartPosition] || newPosition >= ([mWindow_ getStartPosition] + [mWindow_ getNumRows])) {
    ComYahooAndroidSqliteSQLiteCursor_fillWindowWithInt_(self, newPosition);
  }
  return true;
}

- (jint)getCount {
  if (mCount_ == ComYahooAndroidSqliteSQLiteCursor_NO_COUNT) {
    ComYahooAndroidSqliteSQLiteCursor_fillWindowWithInt_(self, 0);
  }
  return mCount_;
}

- (void)fillWindowWithInt:(jint)requiredPos {
  ComYahooAndroidSqliteSQLiteCursor_fillWindowWithInt_(self, requiredPos);
}

- (jint)getColumnIndexWithNSString:(NSString *)columnName {
  if (mColumnNameMap_ == nil) {
    IOSObjectArray *columns = mColumns_;
    jint columnCount = ((IOSObjectArray *) nil_chk(columns))->size_;
    JavaUtilHashMap *map = new_JavaUtilHashMap_initWithInt_withFloat_(columnCount, 1);
    for (jint i = 0; i < columnCount; i++) {
      (void) [map putWithId:IOSObjectArray_Get(columns, i) withId:JavaLangInteger_valueOfWithInt_(i)];
    }
    mColumnNameMap_ = map;
  }
  jint periodIndex = [((NSString *) nil_chk(columnName)) lastIndexOf:'.'];
  if (periodIndex != -1) {
    JavaLangException *e = new_JavaLangException_init();
    ComYahooSquidbUtilityLogger_eWithNSString_withNSString_withNSException_(ComYahooAndroidSqliteSQLiteCursor_TAG, JreStrcat("$$", @"requesting column name with table name -- ", columnName), e);
    columnName = [columnName substring:periodIndex + 1];
  }
  JavaLangInteger *i = [((id<JavaUtilMap>) nil_chk(mColumnNameMap_)) getWithId:columnName];
  if (i != nil) {
    return [i intValue];
  }
  else {
    return -1;
  }
}

- (IOSObjectArray *)getColumnNames {
  return mColumns_;
}

- (void)deactivate {
  [super deactivate];
  [((id<ComYahooAndroidSqliteSQLiteCursorDriver>) nil_chk(mDriver_)) cursorDeactivated];
}

- (void)close {
  [super close];
  @synchronized(self) {
    [((ComYahooAndroidSqliteSQLiteQuery *) nil_chk(mQuery_)) close];
    [((id<ComYahooAndroidSqliteSQLiteCursorDriver>) nil_chk(mDriver_)) cursorClosed];
  }
}

- (jboolean)requery {
  if ([self isClosed]) {
    return false;
  }
  @synchronized(self) {
    if (![((ComYahooAndroidSqliteSQLiteDatabase *) nil_chk([((ComYahooAndroidSqliteSQLiteQuery *) nil_chk(mQuery_)) getDatabase])) isOpen]) {
      return false;
    }
    if (mWindow_ != nil) {
      [mWindow_ clear];
    }
    mPos_ = -1;
    mCount_ = ComYahooAndroidSqliteSQLiteCursor_NO_COUNT;
    [((id<ComYahooAndroidSqliteSQLiteCursorDriver>) nil_chk(mDriver_)) cursorRequeriedWithComYahooSquidbDataICursor:self];
  }
  @try {
    return [super requery];
  }
  @catch (JavaLangIllegalStateException *e) {
    ComYahooSquidbUtilityLogger_wWithNSString_withNSString_withNSException_(ComYahooAndroidSqliteSQLiteCursor_TAG, JreStrcat("$$", @"requery() failed ", [((JavaLangIllegalStateException *) nil_chk(e)) getMessage]), e);
    return false;
  }
}

- (void)setWindowWithComYahooAndroidSqliteCursorWindow:(ComYahooAndroidSqliteCursorWindow *)window {
  [super setWindowWithComYahooAndroidSqliteCursorWindow:window];
  mCount_ = ComYahooAndroidSqliteSQLiteCursor_NO_COUNT;
}

- (void)setSelectionArgumentsWithNSStringArray:(IOSObjectArray *)selectionArgs {
  [((id<ComYahooAndroidSqliteSQLiteCursorDriver>) nil_chk(mDriver_)) setBindArgumentsWithNSStringArray:selectionArgs];
}

- (void)javaFinalize {
  @try {
    if (mWindow_ != nil) {
      if (mStackTrace_ != nil) {
        NSString *sql = [((ComYahooAndroidSqliteSQLiteQuery *) nil_chk(mQuery_)) getSql];
        jint len = ((jint) [((NSString *) nil_chk(sql)) length]);
        ComYahooSquidbUtilityLogger_eWithNSString_withNSString_withNSException_(ComYahooAndroidSqliteSQLiteCursor_TAG, JreStrcat("$$$$$$", @"Finalizing a Cursor that has not been deactivated or closed. database = ", [((ComYahooAndroidSqliteSQLiteDatabase *) nil_chk([mQuery_ getDatabase])) getLabel], @", table = ", mEditTable_, @", query = ", [sql substring:0 endIndex:(len > 1000) ? 1000 : len]), mStackTrace_);
      }
      [self close];
    }
  }
  @finally {
    [super javaFinalize];
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [ComYahooAndroidSqliteSQLiteCursor class]);
}

+ (IOSObjectArray *)__annotations_initWithComYahooAndroidSqliteSQLiteDatabase_withComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComYahooAndroidSqliteSQLiteDatabase:withComYahooAndroidSqliteSQLiteCursorDriver:withNSString:withComYahooAndroidSqliteSQLiteQuery:", "SQLiteCursor", NULL, 0x1, NULL, NULL },
    { "initWithComYahooAndroidSqliteSQLiteCursorDriver:withNSString:withComYahooAndroidSqliteSQLiteQuery:", "SQLiteCursor", NULL, 0x1, NULL, NULL },
    { "getDatabase", NULL, "Lcom.yahoo.android.sqlite.SQLiteDatabase;", 0x1, NULL, NULL },
    { "onMoveWithInt:withInt:", "onMove", "Z", 0x1, NULL, NULL },
    { "getCount", NULL, "I", 0x1, NULL, NULL },
    { "fillWindowWithInt:", "fillWindow", "V", 0x2, NULL, NULL },
    { "getColumnIndexWithNSString:", "getColumnIndex", "I", 0x1, NULL, NULL },
    { "getColumnNames", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "deactivate", NULL, "V", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "requery", NULL, "Z", 0x1, NULL, NULL },
    { "setWindowWithComYahooAndroidSqliteCursorWindow:", "setWindow", "V", 0x1, NULL, NULL },
    { "setSelectionArgumentsWithNSStringArray:", "setSelectionArguments", "V", 0x1, NULL, NULL },
    { "javaFinalize", "finalize", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "TAG", 0x18, "Ljava.lang.String;", &ComYahooAndroidSqliteSQLiteCursor_TAG, NULL, .constantValue.asLong = 0 },
    { "NO_COUNT", "NO_COUNT", 0x18, "I", NULL, NULL, .constantValue.asInt = ComYahooAndroidSqliteSQLiteCursor_NO_COUNT },
    { "mEditTable_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mColumns_", NULL, 0x12, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mQuery_", NULL, 0x12, "Lcom.yahoo.android.sqlite.SQLiteQuery;", NULL, NULL, .constantValue.asLong = 0 },
    { "mDriver_", NULL, 0x12, "Lcom.yahoo.android.sqlite.SQLiteCursorDriver;", NULL, NULL, .constantValue.asLong = 0 },
    { "mCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mCursorWindowCapacity_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mColumnNameMap_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
    { "mStackTrace_", NULL, 0x12, "Ljava.lang.Throwable;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComYahooAndroidSqliteSQLiteCursor = { 2, "SQLiteCursor", "com.yahoo.android.sqlite", NULL, 0x1, 14, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComYahooAndroidSqliteSQLiteCursor;
}

@end

void ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteDatabase_withComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(ComYahooAndroidSqliteSQLiteCursor *self, ComYahooAndroidSqliteSQLiteDatabase *db, id<ComYahooAndroidSqliteSQLiteCursorDriver> driver, NSString *editTable, ComYahooAndroidSqliteSQLiteQuery *query) {
  ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(self, driver, editTable, query);
}

ComYahooAndroidSqliteSQLiteCursor *new_ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteDatabase_withComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(ComYahooAndroidSqliteSQLiteDatabase *db, id<ComYahooAndroidSqliteSQLiteCursorDriver> driver, NSString *editTable, ComYahooAndroidSqliteSQLiteQuery *query) {
  ComYahooAndroidSqliteSQLiteCursor *self = [ComYahooAndroidSqliteSQLiteCursor alloc];
  ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteDatabase_withComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(self, db, driver, editTable, query);
  return self;
}

ComYahooAndroidSqliteSQLiteCursor *create_ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteDatabase_withComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(ComYahooAndroidSqliteSQLiteDatabase *db, id<ComYahooAndroidSqliteSQLiteCursorDriver> driver, NSString *editTable, ComYahooAndroidSqliteSQLiteQuery *query) {
  return new_ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteDatabase_withComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(db, driver, editTable, query);
}

void ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(ComYahooAndroidSqliteSQLiteCursor *self, id<ComYahooAndroidSqliteSQLiteCursorDriver> driver, NSString *editTable, ComYahooAndroidSqliteSQLiteQuery *query) {
  ComYahooAndroidSqliteAbstractWindowedCursor_init(self);
  self->mCount_ = ComYahooAndroidSqliteSQLiteCursor_NO_COUNT;
  if (query == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"query object cannot be null");
  }
  {
    self->mStackTrace_ = [new_ComYahooAndroidSqliteDatabaseObjectNotClosedException_init() fillInStackTrace];
  }
  self->mDriver_ = driver;
  self->mEditTable_ = editTable;
  self->mColumnNameMap_ = nil;
  self->mQuery_ = query;
  self->mColumns_ = [((ComYahooAndroidSqliteSQLiteQuery *) nil_chk(query)) getColumnNames];
  self->mRowIdColumnIndex_ = ComYahooAndroidSqliteDatabaseUtils_findRowIdColumnIndexWithNSStringArray_(self->mColumns_);
}

ComYahooAndroidSqliteSQLiteCursor *new_ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(id<ComYahooAndroidSqliteSQLiteCursorDriver> driver, NSString *editTable, ComYahooAndroidSqliteSQLiteQuery *query) {
  ComYahooAndroidSqliteSQLiteCursor *self = [ComYahooAndroidSqliteSQLiteCursor alloc];
  ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(self, driver, editTable, query);
  return self;
}

ComYahooAndroidSqliteSQLiteCursor *create_ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(id<ComYahooAndroidSqliteSQLiteCursorDriver> driver, NSString *editTable, ComYahooAndroidSqliteSQLiteQuery *query) {
  return new_ComYahooAndroidSqliteSQLiteCursor_initWithComYahooAndroidSqliteSQLiteCursorDriver_withNSString_withComYahooAndroidSqliteSQLiteQuery_(driver, editTable, query);
}

void ComYahooAndroidSqliteSQLiteCursor_fillWindowWithInt_(ComYahooAndroidSqliteSQLiteCursor *self, jint requiredPos) {
  [self clearOrCreateWindowWithNSString:[((ComYahooAndroidSqliteSQLiteDatabase *) nil_chk([self getDatabase])) getPath]];
  @try {
    if (self->mCount_ == ComYahooAndroidSqliteSQLiteCursor_NO_COUNT) {
      jint startPos = ComYahooAndroidSqliteDatabaseUtils_cursorPickFillWindowStartPositionWithInt_withInt_(requiredPos, 0);
      self->mCount_ = [((ComYahooAndroidSqliteSQLiteQuery *) nil_chk(self->mQuery_)) fillWindowWithComYahooAndroidSqliteCursorWindow:self->mWindow_ withInt:startPos withInt:requiredPos withBoolean:true];
      self->mCursorWindowCapacity_ = [((ComYahooAndroidSqliteCursorWindow *) nil_chk(self->mWindow_)) getNumRows];
      if (ComYahooSquidbUtilityLogger_isLoggableWithNSString_withComYahooSquidbUtilityLogger_Level_(ComYahooAndroidSqliteSQLiteCursor_TAG, JreLoadEnum(ComYahooSquidbUtilityLogger_Level, INFO))) {
        ComYahooSquidbUtilityLogger_iWithNSString_withNSString_(ComYahooAndroidSqliteSQLiteCursor_TAG, JreStrcat("$I", @"received count(*) from native_fill_window: ", self->mCount_));
      }
    }
    else {
      jint startPos = ComYahooAndroidSqliteDatabaseUtils_cursorPickFillWindowStartPositionWithInt_withInt_(requiredPos, self->mCursorWindowCapacity_);
      [((ComYahooAndroidSqliteSQLiteQuery *) nil_chk(self->mQuery_)) fillWindowWithComYahooAndroidSqliteCursorWindow:self->mWindow_ withInt:startPos withInt:requiredPos withBoolean:false];
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [self closeWindow];
    @throw ex;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooAndroidSqliteSQLiteCursor)
