//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/squidb/squidb-ios/src/com/yahoo/android/sqlite/SQLiteConnectionPool.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/yahoo/android/sqlite/CloseGuard.h"
#include "com/yahoo/android/sqlite/PrefixPrinter.h"
#include "com/yahoo/android/sqlite/Printer.h"
#include "com/yahoo/android/sqlite/SQLiteConnection.h"
#include "com/yahoo/android/sqlite/SQLiteConnectionPool.h"
#include "com/yahoo/android/sqlite/SQLiteDatabase.h"
#include "com/yahoo/android/sqlite/SQLiteDatabaseConfiguration.h"
#include "com/yahoo/android/sqlite/SQLiteGlobal.h"
#include "com/yahoo/squidb/utility/Logger.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/locks/LockSupport.h"

@class ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter;

@interface ComYahooAndroidSqliteSQLiteConnectionPool () {
 @public
  ComYahooAndroidSqliteCloseGuard *mCloseGuard_;
  id mLock_;
  JavaUtilConcurrentAtomicAtomicBoolean *mConnectionLeaked_;
  ComYahooAndroidSqliteSQLiteDatabaseConfiguration *mConfiguration_;
  jint mMaxConnectionPoolSize_;
  jboolean mIsOpen_;
  jint mNextConnectionId_;
  ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *mConnectionWaiterPool_;
  ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *mConnectionWaiterQueue_;
  JavaUtilArrayList *mAvailableNonPrimaryConnections_;
  ComYahooAndroidSqliteSQLiteConnection *mAvailablePrimaryConnection_;
  JavaUtilWeakHashMap *mAcquiredConnections_;
}

- (instancetype)initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:(ComYahooAndroidSqliteSQLiteDatabaseConfiguration *)configuration;

- (void)open;

- (void)disposeWithBoolean:(jboolean)finalized;

- (jboolean)recycleConnectionLockedWithComYahooAndroidSqliteSQLiteConnection:(ComYahooAndroidSqliteSQLiteConnection *)connection
      withComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus:(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)status;

- (ComYahooAndroidSqliteSQLiteConnection *)openConnectionLockedWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:(ComYahooAndroidSqliteSQLiteDatabaseConfiguration *)configuration
                                                                                                        withBoolean:(jboolean)primaryConnection;

- (void)closeAvailableConnectionsAndLogExceptionsLocked;

- (void)closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked;

- (void)closeExcessConnectionsAndLogExceptionsLocked;

- (void)closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection:(ComYahooAndroidSqliteSQLiteConnection *)connection;

- (void)discardAcquiredConnectionsLocked;

- (void)reconfigureAllConnectionsLocked;

- (void)markAcquiredConnectionsLockedWithComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus:(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)status;

+ (jlong)uptimeMillis;

- (ComYahooAndroidSqliteSQLiteConnection *)waitForConnectionWithNSString:(NSString *)sql
                                                                 withInt:(jint)connectionFlags;

- (void)logConnectionPoolBusyLockedWithLong:(jlong)waitMillis
                                    withInt:(jint)connectionFlags;

- (void)wakeConnectionWaitersLocked;

- (ComYahooAndroidSqliteSQLiteConnection *)tryAcquirePrimaryConnectionLockedWithInt:(jint)connectionFlags;

- (ComYahooAndroidSqliteSQLiteConnection *)tryAcquireNonPrimaryConnectionLockedWithNSString:(NSString *)sql
                                                                                    withInt:(jint)connectionFlags;

- (void)finishAcquireConnectionLockedWithComYahooAndroidSqliteSQLiteConnection:(ComYahooAndroidSqliteSQLiteConnection *)connection
                                                                       withInt:(jint)connectionFlags;

- (jboolean)isSessionBlockingImportantConnectionWaitersLockedWithBoolean:(jboolean)holdingPrimaryConnection
                                                                 withInt:(jint)connectionFlags;

+ (jint)getPriorityWithInt:(jint)connectionFlags;

- (void)setMaxConnectionPoolSizeLocked;

- (void)throwIfClosedLocked;

- (ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *)obtainConnectionWaiterLockedWithJavaLangThread:(JavaLangThread *)thread
                                                                                                      withLong:(jlong)startTime
                                                                                                       withInt:(jint)priority
                                                                                                   withBoolean:(jboolean)wantPrimaryConnection
                                                                                                  withNSString:(NSString *)sql
                                                                                                       withInt:(jint)connectionFlags;

- (void)recycleConnectionWaiterLockedWithComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter:(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *)waiter;

@end

J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool, mCloseGuard_, ComYahooAndroidSqliteCloseGuard *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool, mLock_, id)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool, mConnectionLeaked_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool, mConfiguration_, ComYahooAndroidSqliteSQLiteDatabaseConfiguration *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool, mConnectionWaiterPool_, ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool, mConnectionWaiterQueue_, ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool, mAvailableNonPrimaryConnections_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool, mAvailablePrimaryConnection_, ComYahooAndroidSqliteSQLiteConnection *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool, mAcquiredConnections_, JavaUtilWeakHashMap *)

inline NSString *ComYahooAndroidSqliteSQLiteConnectionPool_get_TAG();
static NSString *ComYahooAndroidSqliteSQLiteConnectionPool_TAG = @"SQLiteConnectionPool";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYahooAndroidSqliteSQLiteConnectionPool, TAG, NSString *)

inline jlong ComYahooAndroidSqliteSQLiteConnectionPool_get_CONNECTION_POOL_BUSY_MILLIS();
#define ComYahooAndroidSqliteSQLiteConnectionPool_CONNECTION_POOL_BUSY_MILLIS 30000LL
J2OBJC_STATIC_FIELD_CONSTANT(ComYahooAndroidSqliteSQLiteConnectionPool, CONNECTION_POOL_BUSY_MILLIS, jlong)

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteDatabaseConfiguration *configuration);

__attribute__((unused)) static ComYahooAndroidSqliteSQLiteConnectionPool *new_ComYahooAndroidSqliteSQLiteConnectionPool_initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(ComYahooAndroidSqliteSQLiteDatabaseConfiguration *configuration) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYahooAndroidSqliteSQLiteConnectionPool *create_ComYahooAndroidSqliteSQLiteConnectionPool_initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(ComYahooAndroidSqliteSQLiteDatabaseConfiguration *configuration);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_open(ComYahooAndroidSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_disposeWithBoolean_(ComYahooAndroidSqliteSQLiteConnectionPool *self, jboolean finalized);

__attribute__((unused)) static jboolean ComYahooAndroidSqliteSQLiteConnectionPool_recycleConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteConnection *connection, ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *status);

__attribute__((unused)) static ComYahooAndroidSqliteSQLiteConnection *ComYahooAndroidSqliteSQLiteConnectionPool_openConnectionLockedWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_withBoolean_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteDatabaseConfiguration *configuration, jboolean primaryConnection);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_closeExcessConnectionsAndLogExceptionsLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteConnection *connection);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_discardAcquiredConnectionsLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_reconfigureAllConnectionsLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_markAcquiredConnectionsLockedWithComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *status);

__attribute__((unused)) static jlong ComYahooAndroidSqliteSQLiteConnectionPool_uptimeMillis();

__attribute__((unused)) static ComYahooAndroidSqliteSQLiteConnection *ComYahooAndroidSqliteSQLiteConnectionPool_waitForConnectionWithNSString_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, NSString *sql, jint connectionFlags);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_logConnectionPoolBusyLockedWithLong_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, jlong waitMillis, jint connectionFlags);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static ComYahooAndroidSqliteSQLiteConnection *ComYahooAndroidSqliteSQLiteConnectionPool_tryAcquirePrimaryConnectionLockedWithInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, jint connectionFlags);

__attribute__((unused)) static ComYahooAndroidSqliteSQLiteConnection *ComYahooAndroidSqliteSQLiteConnectionPool_tryAcquireNonPrimaryConnectionLockedWithNSString_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, NSString *sql, jint connectionFlags);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteConnection *connection, jint connectionFlags);

__attribute__((unused)) static jboolean ComYahooAndroidSqliteSQLiteConnectionPool_isSessionBlockingImportantConnectionWaitersLockedWithBoolean_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, jboolean holdingPrimaryConnection, jint connectionFlags);

__attribute__((unused)) static jint ComYahooAndroidSqliteSQLiteConnectionPool_getPriorityWithInt_(jint connectionFlags);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_throwIfClosedLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self);

__attribute__((unused)) static ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *ComYahooAndroidSqliteSQLiteConnectionPool_obtainConnectionWaiterLockedWithJavaLangThread_withLong_withInt_withBoolean_withNSString_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, JavaLangThread *thread, jlong startTime, jint priority, jboolean wantPrimaryConnection, NSString *sql, jint connectionFlags);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_recycleConnectionWaiterLockedWithComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *waiter);

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initWithNSString_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *new_ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter : NSObject {
 @public
  ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *mNext_;
  JavaLangThread *mThread_;
  jlong mStartTime_;
  jint mPriority_;
  jboolean mWantPrimaryConnection_;
  NSString *mSql_;
  jint mConnectionFlags_;
  ComYahooAndroidSqliteSQLiteConnection *mAssignedConnection_;
  JavaLangRuntimeException *mException_;
  jint mNonce_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter)

J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter, mNext_, ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter, mThread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter, mSql_, NSString *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter, mAssignedConnection_, ComYahooAndroidSqliteSQLiteConnection *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter, mException_, JavaLangRuntimeException *)

__attribute__((unused)) static void ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_init(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *self);

__attribute__((unused)) static ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *new_ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *create_ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_init();

J2OBJC_TYPE_LITERAL_HEADER(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter)

@implementation ComYahooAndroidSqliteSQLiteConnectionPool

- (instancetype)initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:(ComYahooAndroidSqliteSQLiteDatabaseConfiguration *)configuration {
  ComYahooAndroidSqliteSQLiteConnectionPool_initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(self, configuration);
  return self;
}

- (void)javaFinalize {
  @try {
    ComYahooAndroidSqliteSQLiteConnectionPool_disposeWithBoolean_(self, true);
  }
  @finally {
    [super javaFinalize];
  }
}

+ (ComYahooAndroidSqliteSQLiteConnectionPool *)openWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:(ComYahooAndroidSqliteSQLiteDatabaseConfiguration *)configuration {
  return ComYahooAndroidSqliteSQLiteConnectionPool_openWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(configuration);
}

- (void)open {
  ComYahooAndroidSqliteSQLiteConnectionPool_open(self);
}

- (void)close {
  ComYahooAndroidSqliteSQLiteConnectionPool_disposeWithBoolean_(self, false);
}

- (void)disposeWithBoolean:(jboolean)finalized {
  ComYahooAndroidSqliteSQLiteConnectionPool_disposeWithBoolean_(self, finalized);
}

- (void)reconfigureWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:(ComYahooAndroidSqliteSQLiteDatabaseConfiguration *)configuration {
  if (configuration == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"configuration must not be null.");
  }
  @synchronized(mLock_) {
    ComYahooAndroidSqliteSQLiteConnectionPool_throwIfClosedLocked(self);
    jboolean walModeChanged = ((((ComYahooAndroidSqliteSQLiteDatabaseConfiguration *) nil_chk(configuration))->openFlags_ ^ ((ComYahooAndroidSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->openFlags_) & ComYahooAndroidSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0;
    if (walModeChanged) {
      if (![((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) isEmpty]) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"Write Ahead Logging (WAL) mode cannot be enabled or disabled while there are transactions in progress.  Finish all transactions and release all active database connections first.");
      }
      ComYahooAndroidSqliteSQLiteConnectionPool_closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked(self);
      JreAssert(([((JavaUtilArrayList *) nil_chk(mAvailableNonPrimaryConnections_)) isEmpty]), (@"com/yahoo/android/sqlite/SQLiteConnectionPool.java:269 condition failed: assert mAvailableNonPrimaryConnections.isEmpty();"));
    }
    jboolean foreignKeyModeChanged = configuration->foreignKeyConstraintsEnabled_ != mConfiguration_->foreignKeyConstraintsEnabled_;
    if (foreignKeyModeChanged) {
      if (![((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) isEmpty]) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"Foreign Key Constraints cannot be enabled or disabled while there are transactions in progress.  Finish all transactions and release all active database connections first.");
      }
    }
    if (mConfiguration_->openFlags_ != configuration->openFlags_) {
      if (walModeChanged) {
        ComYahooAndroidSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(self);
      }
      ComYahooAndroidSqliteSQLiteConnection *newPrimaryConnection = ComYahooAndroidSqliteSQLiteConnectionPool_openConnectionLockedWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_withBoolean_(self, configuration, true);
      ComYahooAndroidSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(self);
      ComYahooAndroidSqliteSQLiteConnectionPool_discardAcquiredConnectionsLocked(self);
      mAvailablePrimaryConnection_ = newPrimaryConnection;
      [mConfiguration_ updateParametersFromWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:configuration];
      ComYahooAndroidSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(self);
    }
    else {
      [mConfiguration_ updateParametersFromWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:configuration];
      ComYahooAndroidSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(self);
      ComYahooAndroidSqliteSQLiteConnectionPool_closeExcessConnectionsAndLogExceptionsLocked(self);
      ComYahooAndroidSqliteSQLiteConnectionPool_reconfigureAllConnectionsLocked(self);
    }
    ComYahooAndroidSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
  }
}

- (ComYahooAndroidSqliteSQLiteConnection *)acquireConnectionWithNSString:(NSString *)sql
                                                                 withInt:(jint)connectionFlags {
  return ComYahooAndroidSqliteSQLiteConnectionPool_waitForConnectionWithNSString_withInt_(self, sql, connectionFlags);
}

- (void)releaseConnectionWithComYahooAndroidSqliteSQLiteConnection:(ComYahooAndroidSqliteSQLiteConnection *)connection {
  @synchronized(mLock_) {
    ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *status = [((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) removeWithId:connection];
    if (status == nil) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because the specified connection was not acquired from this pool or has already been released.");
    }
    if (!mIsOpen_) {
      ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(self, connection);
    }
    else if ([((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(connection)) isPrimaryConnection]) {
      if (ComYahooAndroidSqliteSQLiteConnectionPool_recycleConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, connection, status)) {
        JreAssert((mAvailablePrimaryConnection_ == nil), (@"com/yahoo/android/sqlite/SQLiteConnectionPool.java:366 condition failed: assert mAvailablePrimaryConnection == null;"));
        mAvailablePrimaryConnection_ = connection;
      }
      ComYahooAndroidSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
    }
    else if ([((JavaUtilArrayList *) nil_chk(mAvailableNonPrimaryConnections_)) size] >= mMaxConnectionPoolSize_ - 1) {
      ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(self, connection);
    }
    else {
      if (ComYahooAndroidSqliteSQLiteConnectionPool_recycleConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, connection, status)) {
        [mAvailableNonPrimaryConnections_ addWithId:connection];
      }
      ComYahooAndroidSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
    }
  }
}

- (jboolean)recycleConnectionLockedWithComYahooAndroidSqliteSQLiteConnection:(ComYahooAndroidSqliteSQLiteConnection *)connection
      withComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus:(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)status {
  return ComYahooAndroidSqliteSQLiteConnectionPool_recycleConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, connection, status);
}

- (jboolean)shouldYieldConnectionWithComYahooAndroidSqliteSQLiteConnection:(ComYahooAndroidSqliteSQLiteConnection *)connection
                                                                   withInt:(jint)connectionFlags {
  @synchronized(mLock_) {
    if (![((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) containsKeyWithId:connection]) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because the specified connection was not acquired from this pool or has already been released.");
    }
    if (!mIsOpen_) {
      return false;
    }
    return ComYahooAndroidSqliteSQLiteConnectionPool_isSessionBlockingImportantConnectionWaitersLockedWithBoolean_withInt_(self, [((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(connection)) isPrimaryConnection], connectionFlags);
  }
}

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  @synchronized(mLock_) {
    if (mAvailablePrimaryConnection_ != nil) {
      [mAvailablePrimaryConnection_ collectDbStatsWithJavaUtilArrayList:dbStatsList];
    }
    for (ComYahooAndroidSqliteSQLiteConnection * __strong connection in nil_chk(mAvailableNonPrimaryConnections_)) {
      [((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(connection)) collectDbStatsWithJavaUtilArrayList:dbStatsList];
    }
    for (ComYahooAndroidSqliteSQLiteConnection * __strong connection in nil_chk([((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) keySet])) {
      [((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(connection)) collectDbStatsUnsafeWithJavaUtilArrayList:dbStatsList];
    }
  }
}

- (ComYahooAndroidSqliteSQLiteConnection *)openConnectionLockedWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:(ComYahooAndroidSqliteSQLiteDatabaseConfiguration *)configuration
                                                                                                        withBoolean:(jboolean)primaryConnection {
  return ComYahooAndroidSqliteSQLiteConnectionPool_openConnectionLockedWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_withBoolean_(self, configuration, primaryConnection);
}

- (void)onConnectionLeaked {
  ComYahooSquidbUtilityLogger_wWithNSString_withNSString_(ComYahooAndroidSqliteSQLiteConnectionPool_TAG, JreStrcat("$$$", @"A SQLiteConnection object for database '", ((ComYahooAndroidSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->label_, @"' was leaked!  Please fix your application to end transactions in progress properly and to close the database when it is no longer needed."));
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(mConnectionLeaked_)) setWithBoolean:true];
}

- (void)closeAvailableConnectionsAndLogExceptionsLocked {
  ComYahooAndroidSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(self);
}

- (void)closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked {
  ComYahooAndroidSqliteSQLiteConnectionPool_closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked(self);
}

- (void)closeExcessConnectionsAndLogExceptionsLocked {
  ComYahooAndroidSqliteSQLiteConnectionPool_closeExcessConnectionsAndLogExceptionsLocked(self);
}

- (void)closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection:(ComYahooAndroidSqliteSQLiteConnection *)connection {
  ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(self, connection);
}

- (void)discardAcquiredConnectionsLocked {
  ComYahooAndroidSqliteSQLiteConnectionPool_discardAcquiredConnectionsLocked(self);
}

- (void)reconfigureAllConnectionsLocked {
  ComYahooAndroidSqliteSQLiteConnectionPool_reconfigureAllConnectionsLocked(self);
}

- (void)markAcquiredConnectionsLockedWithComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus:(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)status {
  ComYahooAndroidSqliteSQLiteConnectionPool_markAcquiredConnectionsLockedWithComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, status);
}

+ (jlong)uptimeMillis {
  return ComYahooAndroidSqliteSQLiteConnectionPool_uptimeMillis();
}

- (ComYahooAndroidSqliteSQLiteConnection *)waitForConnectionWithNSString:(NSString *)sql
                                                                 withInt:(jint)connectionFlags {
  return ComYahooAndroidSqliteSQLiteConnectionPool_waitForConnectionWithNSString_withInt_(self, sql, connectionFlags);
}

- (void)logConnectionPoolBusyLockedWithLong:(jlong)waitMillis
                                    withInt:(jint)connectionFlags {
  ComYahooAndroidSqliteSQLiteConnectionPool_logConnectionPoolBusyLockedWithLong_withInt_(self, waitMillis, connectionFlags);
}

- (void)wakeConnectionWaitersLocked {
  ComYahooAndroidSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
}

- (ComYahooAndroidSqliteSQLiteConnection *)tryAcquirePrimaryConnectionLockedWithInt:(jint)connectionFlags {
  return ComYahooAndroidSqliteSQLiteConnectionPool_tryAcquirePrimaryConnectionLockedWithInt_(self, connectionFlags);
}

- (ComYahooAndroidSqliteSQLiteConnection *)tryAcquireNonPrimaryConnectionLockedWithNSString:(NSString *)sql
                                                                                    withInt:(jint)connectionFlags {
  return ComYahooAndroidSqliteSQLiteConnectionPool_tryAcquireNonPrimaryConnectionLockedWithNSString_withInt_(self, sql, connectionFlags);
}

- (void)finishAcquireConnectionLockedWithComYahooAndroidSqliteSQLiteConnection:(ComYahooAndroidSqliteSQLiteConnection *)connection
                                                                       withInt:(jint)connectionFlags {
  ComYahooAndroidSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
}

- (jboolean)isSessionBlockingImportantConnectionWaitersLockedWithBoolean:(jboolean)holdingPrimaryConnection
                                                                 withInt:(jint)connectionFlags {
  return ComYahooAndroidSqliteSQLiteConnectionPool_isSessionBlockingImportantConnectionWaitersLockedWithBoolean_withInt_(self, holdingPrimaryConnection, connectionFlags);
}

+ (jint)getPriorityWithInt:(jint)connectionFlags {
  return ComYahooAndroidSqliteSQLiteConnectionPool_getPriorityWithInt_(connectionFlags);
}

- (void)setMaxConnectionPoolSizeLocked {
  ComYahooAndroidSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(self);
}

- (void)throwIfClosedLocked {
  ComYahooAndroidSqliteSQLiteConnectionPool_throwIfClosedLocked(self);
}

- (ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *)obtainConnectionWaiterLockedWithJavaLangThread:(JavaLangThread *)thread
                                                                                                      withLong:(jlong)startTime
                                                                                                       withInt:(jint)priority
                                                                                                   withBoolean:(jboolean)wantPrimaryConnection
                                                                                                  withNSString:(NSString *)sql
                                                                                                       withInt:(jint)connectionFlags {
  return ComYahooAndroidSqliteSQLiteConnectionPool_obtainConnectionWaiterLockedWithJavaLangThread_withLong_withInt_withBoolean_withNSString_withInt_(self, thread, startTime, priority, wantPrimaryConnection, sql, connectionFlags);
}

- (void)recycleConnectionWaiterLockedWithComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter:(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *)waiter {
  ComYahooAndroidSqliteSQLiteConnectionPool_recycleConnectionWaiterLockedWithComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_(self, waiter);
}

- (void)dumpWithComYahooAndroidSqlitePrinter:(id<ComYahooAndroidSqlitePrinter>)printer
                                 withBoolean:(jboolean)verbose {
  id<ComYahooAndroidSqlitePrinter> indentedPrinter = ComYahooAndroidSqlitePrefixPrinter_createWithComYahooAndroidSqlitePrinter_withNSString_(printer, @"    ");
  @synchronized(mLock_) {
    [((id<ComYahooAndroidSqlitePrinter>) nil_chk(printer)) printlnWithNSString:JreStrcat("$$C", @"Connection pool for ", ((ComYahooAndroidSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->path_, ':')];
    [printer printlnWithNSString:JreStrcat("$Z", @"  Open: ", mIsOpen_)];
    [printer printlnWithNSString:JreStrcat("$I", @"  Max connections: ", mMaxConnectionPoolSize_)];
    [printer printlnWithNSString:@"  Available primary connection:"];
    if (mAvailablePrimaryConnection_ != nil) {
      [mAvailablePrimaryConnection_ dumpWithComYahooAndroidSqlitePrinter:indentedPrinter withBoolean:verbose];
    }
    else {
      [((id<ComYahooAndroidSqlitePrinter>) nil_chk(indentedPrinter)) printlnWithNSString:@"<none>"];
    }
    [printer printlnWithNSString:@"  Available non-primary connections:"];
    if (![((JavaUtilArrayList *) nil_chk(mAvailableNonPrimaryConnections_)) isEmpty]) {
      jint count = [mAvailableNonPrimaryConnections_ size];
      for (jint i = 0; i < count; i++) {
        [((ComYahooAndroidSqliteSQLiteConnection *) nil_chk([mAvailableNonPrimaryConnections_ getWithInt:i])) dumpWithComYahooAndroidSqlitePrinter:indentedPrinter withBoolean:verbose];
      }
    }
    else {
      [((id<ComYahooAndroidSqlitePrinter>) nil_chk(indentedPrinter)) printlnWithNSString:@"<none>"];
    }
    [printer printlnWithNSString:@"  Acquired connections:"];
    if (![((JavaUtilWeakHashMap *) nil_chk(mAcquiredConnections_)) isEmpty]) {
      for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([mAcquiredConnections_ entrySet])) {
        ComYahooAndroidSqliteSQLiteConnection *connection = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
        [((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(connection)) dumpUnsafeWithComYahooAndroidSqlitePrinter:indentedPrinter withBoolean:verbose];
        [((id<ComYahooAndroidSqlitePrinter>) nil_chk(indentedPrinter)) printlnWithNSString:JreStrcat("$@", @"  Status: ", [entry_ getValue])];
      }
    }
    else {
      [((id<ComYahooAndroidSqlitePrinter>) nil_chk(indentedPrinter)) printlnWithNSString:@"<none>"];
    }
    [printer printlnWithNSString:@"  Connection waiters:"];
    if (mConnectionWaiterQueue_ != nil) {
      jint i = 0;
      jlong now = ComYahooAndroidSqliteSQLiteConnectionPool_uptimeMillis();
      for (ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *waiter = mConnectionWaiterQueue_; waiter != nil; waiter = waiter->mNext_, i++) {
        [((id<ComYahooAndroidSqlitePrinter>) nil_chk(indentedPrinter)) printlnWithNSString:JreStrcat("I$F$@$I$$C", i, @": waited for ", ((now - waiter->mStartTime_) * 0.001f), @" ms - thread=", waiter->mThread_, @", priority=", waiter->mPriority_, @", sql='", waiter->mSql_, '\'')];
      }
    }
    else {
      [((id<ComYahooAndroidSqlitePrinter>) nil_chk(indentedPrinter)) printlnWithNSString:@"<none>"];
    }
  }
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteConnectionPool: ", ((ComYahooAndroidSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->path_);
}

- (void)dealloc {
  JreCheckFinalize(self, [ComYahooAndroidSqliteSQLiteConnectionPool class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:", "SQLiteConnectionPool", NULL, 0x2, NULL, NULL },
    { "javaFinalize", "finalize", "V", 0x4, "Ljava.lang.Throwable;", NULL },
    { "openWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:", "open", "Lcom.yahoo.android.sqlite.SQLiteConnectionPool;", 0x9, NULL, NULL },
    { "open", NULL, "V", 0x2, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "disposeWithBoolean:", "dispose", "V", 0x2, NULL, NULL },
    { "reconfigureWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:", "reconfigure", "V", 0x1, NULL, NULL },
    { "acquireConnectionWithNSString:withInt:", "acquireConnection", "Lcom.yahoo.android.sqlite.SQLiteConnection;", 0x1, NULL, NULL },
    { "releaseConnectionWithComYahooAndroidSqliteSQLiteConnection:", "releaseConnection", "V", 0x1, NULL, NULL },
    { "recycleConnectionLockedWithComYahooAndroidSqliteSQLiteConnection:withComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus:", "recycleConnectionLocked", "Z", 0x2, NULL, NULL },
    { "shouldYieldConnectionWithComYahooAndroidSqliteSQLiteConnection:withInt:", "shouldYieldConnection", "Z", 0x1, NULL, NULL },
    { "collectDbStatsWithJavaUtilArrayList:", "collectDbStats", "V", 0x1, NULL, "(Ljava/util/ArrayList<Lcom/yahoo/android/sqlite/SQLiteDebug$DbStats;>;)V" },
    { "openConnectionLockedWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:withBoolean:", "openConnectionLocked", "Lcom.yahoo.android.sqlite.SQLiteConnection;", 0x2, NULL, NULL },
    { "onConnectionLeaked", NULL, "V", 0x0, NULL, NULL },
    { "closeAvailableConnectionsAndLogExceptionsLocked", NULL, "V", 0x2, NULL, NULL },
    { "closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked", NULL, "V", 0x2, NULL, NULL },
    { "closeExcessConnectionsAndLogExceptionsLocked", NULL, "V", 0x2, NULL, NULL },
    { "closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection:", "closeConnectionAndLogExceptionsLocked", "V", 0x2, NULL, NULL },
    { "discardAcquiredConnectionsLocked", NULL, "V", 0x2, NULL, NULL },
    { "reconfigureAllConnectionsLocked", NULL, "V", 0x2, NULL, NULL },
    { "markAcquiredConnectionsLockedWithComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus:", "markAcquiredConnectionsLocked", "V", 0x2, NULL, NULL },
    { "uptimeMillis", NULL, "J", 0x10a, NULL, NULL },
    { "waitForConnectionWithNSString:withInt:", "waitForConnection", "Lcom.yahoo.android.sqlite.SQLiteConnection;", 0x2, NULL, NULL },
    { "logConnectionPoolBusyLockedWithLong:withInt:", "logConnectionPoolBusyLocked", "V", 0x2, NULL, NULL },
    { "wakeConnectionWaitersLocked", NULL, "V", 0x2, NULL, NULL },
    { "tryAcquirePrimaryConnectionLockedWithInt:", "tryAcquirePrimaryConnectionLocked", "Lcom.yahoo.android.sqlite.SQLiteConnection;", 0x2, NULL, NULL },
    { "tryAcquireNonPrimaryConnectionLockedWithNSString:withInt:", "tryAcquireNonPrimaryConnectionLocked", "Lcom.yahoo.android.sqlite.SQLiteConnection;", 0x2, NULL, NULL },
    { "finishAcquireConnectionLockedWithComYahooAndroidSqliteSQLiteConnection:withInt:", "finishAcquireConnectionLocked", "V", 0x2, NULL, NULL },
    { "isSessionBlockingImportantConnectionWaitersLockedWithBoolean:withInt:", "isSessionBlockingImportantConnectionWaitersLocked", "Z", 0x2, NULL, NULL },
    { "getPriorityWithInt:", "getPriority", "I", 0xa, NULL, NULL },
    { "setMaxConnectionPoolSizeLocked", NULL, "V", 0x2, NULL, NULL },
    { "throwIfClosedLocked", NULL, "V", 0x2, NULL, NULL },
    { "obtainConnectionWaiterLockedWithJavaLangThread:withLong:withInt:withBoolean:withNSString:withInt:", "obtainConnectionWaiterLocked", "Lcom.yahoo.android.sqlite.SQLiteConnectionPool$ConnectionWaiter;", 0x2, NULL, NULL },
    { "recycleConnectionWaiterLockedWithComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter:", "recycleConnectionWaiterLocked", "V", 0x2, NULL, NULL },
    { "dumpWithComYahooAndroidSqlitePrinter:withBoolean:", "dump", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "TAG", 0x1a, "Ljava.lang.String;", &ComYahooAndroidSqliteSQLiteConnectionPool_TAG, NULL, .constantValue.asLong = 0 },
    { "CONNECTION_POOL_BUSY_MILLIS", "CONNECTION_POOL_BUSY_MILLIS", 0x1a, "J", NULL, NULL, .constantValue.asLong = ComYahooAndroidSqliteSQLiteConnectionPool_CONNECTION_POOL_BUSY_MILLIS },
    { "mCloseGuard_", NULL, 0x12, "Lcom.yahoo.android.sqlite.CloseGuard;", NULL, NULL, .constantValue.asLong = 0 },
    { "mLock_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "mConnectionLeaked_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicBoolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "mConfiguration_", NULL, 0x12, "Lcom.yahoo.android.sqlite.SQLiteDatabaseConfiguration;", NULL, NULL, .constantValue.asLong = 0 },
    { "mMaxConnectionPoolSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mIsOpen_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mNextConnectionId_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mConnectionWaiterPool_", NULL, 0x2, "Lcom.yahoo.android.sqlite.SQLiteConnectionPool$ConnectionWaiter;", NULL, NULL, .constantValue.asLong = 0 },
    { "mConnectionWaiterQueue_", NULL, 0x2, "Lcom.yahoo.android.sqlite.SQLiteConnectionPool$ConnectionWaiter;", NULL, NULL, .constantValue.asLong = 0 },
    { "mAvailableNonPrimaryConnections_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lcom/yahoo/android/sqlite/SQLiteConnection;>;", .constantValue.asLong = 0 },
    { "mAvailablePrimaryConnection_", NULL, 0x2, "Lcom.yahoo.android.sqlite.SQLiteConnection;", NULL, NULL, .constantValue.asLong = 0 },
    { "mAcquiredConnections_", NULL, 0x12, "Ljava.util.WeakHashMap;", NULL, "Ljava/util/WeakHashMap<Lcom/yahoo/android/sqlite/SQLiteConnection;Lcom/yahoo/android/sqlite/SQLiteConnectionPool$AcquiredConnectionStatus;>;", .constantValue.asLong = 0 },
    { "CONNECTION_FLAG_READ_ONLY", "CONNECTION_FLAG_READ_ONLY", 0x19, "I", NULL, NULL, .constantValue.asInt = ComYahooAndroidSqliteSQLiteConnectionPool_CONNECTION_FLAG_READ_ONLY },
    { "CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY", "CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY", 0x19, "I", NULL, NULL, .constantValue.asInt = ComYahooAndroidSqliteSQLiteConnectionPool_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY },
    { "CONNECTION_FLAG_INTERACTIVE", "CONNECTION_FLAG_INTERACTIVE", 0x19, "I", NULL, NULL, .constantValue.asInt = ComYahooAndroidSqliteSQLiteConnectionPool_CONNECTION_FLAG_INTERACTIVE },
  };
  static const char *inner_classes[] = {"Lcom.yahoo.android.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus;", "Lcom.yahoo.android.sqlite.SQLiteConnectionPool$ConnectionWaiter;"};
  static const J2ObjcClassInfo _ComYahooAndroidSqliteSQLiteConnectionPool = { 2, "SQLiteConnectionPool", "com.yahoo.android.sqlite", NULL, 0x11, 36, methods, 17, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_ComYahooAndroidSqliteSQLiteConnectionPool;
}

@end

void ComYahooAndroidSqliteSQLiteConnectionPool_initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteDatabaseConfiguration *configuration) {
  NSObject_init(self);
  self->mCloseGuard_ = ComYahooAndroidSqliteCloseGuard_get();
  self->mLock_ = new_NSObject_init();
  self->mConnectionLeaked_ = new_JavaUtilConcurrentAtomicAtomicBoolean_init();
  self->mAvailableNonPrimaryConnections_ = new_JavaUtilArrayList_init();
  self->mAcquiredConnections_ = new_JavaUtilWeakHashMap_init();
  self->mConfiguration_ = new_ComYahooAndroidSqliteSQLiteDatabaseConfiguration_initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(configuration);
  ComYahooAndroidSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(self);
}

ComYahooAndroidSqliteSQLiteConnectionPool *new_ComYahooAndroidSqliteSQLiteConnectionPool_initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(ComYahooAndroidSqliteSQLiteDatabaseConfiguration *configuration) {
  ComYahooAndroidSqliteSQLiteConnectionPool *self = [ComYahooAndroidSqliteSQLiteConnectionPool alloc];
  ComYahooAndroidSqliteSQLiteConnectionPool_initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(self, configuration);
  return self;
}

ComYahooAndroidSqliteSQLiteConnectionPool *create_ComYahooAndroidSqliteSQLiteConnectionPool_initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(ComYahooAndroidSqliteSQLiteDatabaseConfiguration *configuration) {
  return new_ComYahooAndroidSqliteSQLiteConnectionPool_initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(configuration);
}

ComYahooAndroidSqliteSQLiteConnectionPool *ComYahooAndroidSqliteSQLiteConnectionPool_openWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(ComYahooAndroidSqliteSQLiteDatabaseConfiguration *configuration) {
  ComYahooAndroidSqliteSQLiteConnectionPool_initialize();
  if (configuration == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"configuration must not be null.");
  }
  ComYahooAndroidSqliteSQLiteConnectionPool *pool = new_ComYahooAndroidSqliteSQLiteConnectionPool_initWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_(configuration);
  ComYahooAndroidSqliteSQLiteConnectionPool_open(pool);
  return pool;
}

void ComYahooAndroidSqliteSQLiteConnectionPool_open(ComYahooAndroidSqliteSQLiteConnectionPool *self) {
  self->mAvailablePrimaryConnection_ = ComYahooAndroidSqliteSQLiteConnectionPool_openConnectionLockedWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_withBoolean_(self, self->mConfiguration_, true);
  self->mIsOpen_ = true;
  [((ComYahooAndroidSqliteCloseGuard *) nil_chk(self->mCloseGuard_)) openWithNSString:@"close"];
}

void ComYahooAndroidSqliteSQLiteConnectionPool_disposeWithBoolean_(ComYahooAndroidSqliteSQLiteConnectionPool *self, jboolean finalized) {
  if (self->mCloseGuard_ != nil) {
    if (finalized) {
      [self->mCloseGuard_ warnIfOpen];
    }
    [self->mCloseGuard_ close];
  }
  if (!finalized) {
    @synchronized(self->mLock_) {
      ComYahooAndroidSqliteSQLiteConnectionPool_throwIfClosedLocked(self);
      self->mIsOpen_ = false;
      ComYahooAndroidSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(self);
      jint pendingCount = [((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) size];
      if (pendingCount != 0) {
        ComYahooSquidbUtilityLogger_iWithNSString_withNSString_(ComYahooAndroidSqliteSQLiteConnectionPool_TAG, JreStrcat("$$$I$", @"The connection pool for ", ((ComYahooAndroidSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->label_, @" has been closed but there are still ", pendingCount, @" connections in use.  They will be closed as they are released back to the pool."));
      }
      ComYahooAndroidSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
    }
  }
}

jboolean ComYahooAndroidSqliteSQLiteConnectionPool_recycleConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteConnection *connection, ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *status) {
  if (status == JreLoadEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, RECONFIGURE)) {
    @try {
      [((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(connection)) reconfigureWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:self->mConfiguration_];
    }
    @catch (JavaLangRuntimeException *ex) {
      ComYahooSquidbUtilityLogger_eWithNSString_withNSString_withNSException_(ComYahooAndroidSqliteSQLiteConnectionPool_TAG, JreStrcat("$@", @"Failed to reconfigure released connection, closing it: ", connection), ex);
      status = JreLoadEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD);
    }
  }
  if (status == JreLoadEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD)) {
    ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(self, connection);
    return false;
  }
  return true;
}

ComYahooAndroidSqliteSQLiteConnection *ComYahooAndroidSqliteSQLiteConnectionPool_openConnectionLockedWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_withBoolean_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteDatabaseConfiguration *configuration, jboolean primaryConnection) {
  jint connectionId = self->mNextConnectionId_++;
  return ComYahooAndroidSqliteSQLiteConnection_openWithComYahooAndroidSqliteSQLiteConnectionPool_withComYahooAndroidSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(self, configuration, connectionId, primaryConnection);
}

void ComYahooAndroidSqliteSQLiteConnectionPool_closeAvailableConnectionsAndLogExceptionsLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self) {
  ComYahooAndroidSqliteSQLiteConnectionPool_closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked(self);
  if (self->mAvailablePrimaryConnection_ != nil) {
    ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(self, self->mAvailablePrimaryConnection_);
    self->mAvailablePrimaryConnection_ = nil;
  }
}

void ComYahooAndroidSqliteSQLiteConnectionPool_closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self) {
  jint count = [((JavaUtilArrayList *) nil_chk(self->mAvailableNonPrimaryConnections_)) size];
  for (jint i = 0; i < count; i++) {
    ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(self, [self->mAvailableNonPrimaryConnections_ getWithInt:i]);
  }
  [self->mAvailableNonPrimaryConnections_ clear];
}

void ComYahooAndroidSqliteSQLiteConnectionPool_closeExcessConnectionsAndLogExceptionsLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self) {
  jint availableCount = [((JavaUtilArrayList *) nil_chk(self->mAvailableNonPrimaryConnections_)) size];
  while (availableCount-- > self->mMaxConnectionPoolSize_ - 1) {
    ComYahooAndroidSqliteSQLiteConnection *connection = [self->mAvailableNonPrimaryConnections_ removeWithInt:availableCount];
    ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(self, connection);
  }
}

void ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteConnection *connection) {
  @try {
    [((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(connection)) close];
  }
  @catch (JavaLangRuntimeException *ex) {
    ComYahooSquidbUtilityLogger_eWithNSString_withNSString_withNSException_(ComYahooAndroidSqliteSQLiteConnectionPool_TAG, JreStrcat("$@", @"Failed to close connection, its fate is now in the hands of the merciful GC: ", connection), ex);
  }
}

void ComYahooAndroidSqliteSQLiteConnectionPool_discardAcquiredConnectionsLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self) {
  ComYahooAndroidSqliteSQLiteConnectionPool_markAcquiredConnectionsLockedWithComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, JreLoadEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD));
}

void ComYahooAndroidSqliteSQLiteConnectionPool_reconfigureAllConnectionsLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self) {
  if (self->mAvailablePrimaryConnection_ != nil) {
    @try {
      [self->mAvailablePrimaryConnection_ reconfigureWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:self->mConfiguration_];
    }
    @catch (JavaLangRuntimeException *ex) {
      ComYahooSquidbUtilityLogger_eWithNSString_withNSString_withNSException_(ComYahooAndroidSqliteSQLiteConnectionPool_TAG, JreStrcat("$@", @"Failed to reconfigure available primary connection, closing it: ", self->mAvailablePrimaryConnection_), ex);
      ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(self, self->mAvailablePrimaryConnection_);
      self->mAvailablePrimaryConnection_ = nil;
    }
  }
  jint count = [((JavaUtilArrayList *) nil_chk(self->mAvailableNonPrimaryConnections_)) size];
  for (jint i = 0; i < count; i++) {
    ComYahooAndroidSqliteSQLiteConnection *connection = [self->mAvailableNonPrimaryConnections_ getWithInt:i];
    @try {
      [((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(connection)) reconfigureWithComYahooAndroidSqliteSQLiteDatabaseConfiguration:self->mConfiguration_];
    }
    @catch (JavaLangRuntimeException *ex) {
      ComYahooSquidbUtilityLogger_eWithNSString_withNSString_withNSException_(ComYahooAndroidSqliteSQLiteConnectionPool_TAG, JreStrcat("$@", @"Failed to reconfigure available non-primary connection, closing it: ", connection), ex);
      ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(self, connection);
      (void) [self->mAvailableNonPrimaryConnections_ removeWithInt:i--];
      count -= 1;
    }
  }
  ComYahooAndroidSqliteSQLiteConnectionPool_markAcquiredConnectionsLockedWithComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(self, JreLoadEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, RECONFIGURE));
}

void ComYahooAndroidSqliteSQLiteConnectionPool_markAcquiredConnectionsLockedWithComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *status) {
  if (![((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) isEmpty]) {
    JavaUtilArrayList *keysToUpdate = new_JavaUtilArrayList_initWithInt_([self->mAcquiredConnections_ size]);
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([self->mAcquiredConnections_ entrySet])) {
      ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *oldStatus = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if (status != oldStatus && oldStatus != JreLoadEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD)) {
        [keysToUpdate addWithId:[entry_ getKey]];
      }
    }
    jint updateCount = [keysToUpdate size];
    for (jint i = 0; i < updateCount; i++) {
      (void) [self->mAcquiredConnections_ putWithId:[keysToUpdate getWithInt:i] withId:status];
    }
  }
}

jlong ComYahooAndroidSqliteSQLiteConnectionPool_uptimeMillis() {
  ComYahooAndroidSqliteSQLiteConnectionPool_initialize();
  return (long) [[NSProcessInfo processInfo] systemUptime] * 1000;
}

ComYahooAndroidSqliteSQLiteConnection *ComYahooAndroidSqliteSQLiteConnectionPool_waitForConnectionWithNSString_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, NSString *sql, jint connectionFlags) {
  jboolean wantPrimaryConnection = (connectionFlags & ComYahooAndroidSqliteSQLiteConnectionPool_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY) != 0;
  ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *waiter;
  jint nonce;
  @synchronized(self->mLock_) {
    ComYahooAndroidSqliteSQLiteConnectionPool_throwIfClosedLocked(self);
    ComYahooAndroidSqliteSQLiteConnection *connection = nil;
    if (!wantPrimaryConnection) {
      connection = ComYahooAndroidSqliteSQLiteConnectionPool_tryAcquireNonPrimaryConnectionLockedWithNSString_withInt_(self, sql, connectionFlags);
    }
    if (connection == nil) {
      connection = ComYahooAndroidSqliteSQLiteConnectionPool_tryAcquirePrimaryConnectionLockedWithInt_(self, connectionFlags);
    }
    if (connection != nil) {
      return connection;
    }
    jint priority = ComYahooAndroidSqliteSQLiteConnectionPool_getPriorityWithInt_(connectionFlags);
    jlong startTime = ComYahooAndroidSqliteSQLiteConnectionPool_uptimeMillis();
    waiter = ComYahooAndroidSqliteSQLiteConnectionPool_obtainConnectionWaiterLockedWithJavaLangThread_withLong_withInt_withBoolean_withNSString_withInt_(self, JavaLangThread_currentThread(), startTime, priority, wantPrimaryConnection, sql, connectionFlags);
    ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *predecessor = nil;
    ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *successor = self->mConnectionWaiterQueue_;
    while (successor != nil) {
      if (priority > ((ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(successor))->mPriority_) {
        ((ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(waiter))->mNext_ = successor;
        break;
      }
      predecessor = successor;
      successor = successor->mNext_;
    }
    if (predecessor != nil) {
      predecessor->mNext_ = waiter;
    }
    else {
      self->mConnectionWaiterQueue_ = waiter;
    }
    nonce = ((ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(waiter))->mNonce_;
  }
  @try {
    jlong busyTimeoutMillis = ComYahooAndroidSqliteSQLiteConnectionPool_CONNECTION_POOL_BUSY_MILLIS;
    jlong nextBusyTimeoutTime = waiter->mStartTime_ + busyTimeoutMillis;
    for (; ; ) {
      if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(self->mConnectionLeaked_)) compareAndSetWithBoolean:true withBoolean:false]) {
        @synchronized(self->mLock_) {
          ComYahooAndroidSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(self);
        }
      }
      JavaUtilConcurrentLocksLockSupport_parkNanosWithId_withLong_(self, busyTimeoutMillis * 1000000LL);
      JavaLangThread_interrupted();
      @synchronized(self->mLock_) {
        ComYahooAndroidSqliteSQLiteConnectionPool_throwIfClosedLocked(self);
        ComYahooAndroidSqliteSQLiteConnection *connection = waiter->mAssignedConnection_;
        JavaLangRuntimeException *ex = waiter->mException_;
        if (connection != nil || ex != nil) {
          ComYahooAndroidSqliteSQLiteConnectionPool_recycleConnectionWaiterLockedWithComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_(self, waiter);
          if (connection != nil) {
            return connection;
          }
          @throw ex;
        }
        jlong now = ComYahooAndroidSqliteSQLiteConnectionPool_uptimeMillis();
        if (now < nextBusyTimeoutTime) {
          busyTimeoutMillis = now - nextBusyTimeoutTime;
        }
        else {
          ComYahooAndroidSqliteSQLiteConnectionPool_logConnectionPoolBusyLockedWithLong_withInt_(self, now - waiter->mStartTime_, connectionFlags);
          busyTimeoutMillis = ComYahooAndroidSqliteSQLiteConnectionPool_CONNECTION_POOL_BUSY_MILLIS;
          nextBusyTimeoutTime = now + busyTimeoutMillis;
        }
      }
    }
  }
  @finally {
  }
}

void ComYahooAndroidSqliteSQLiteConnectionPool_logConnectionPoolBusyLockedWithLong_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, jlong waitMillis, jint connectionFlags) {
  JavaLangThread *thread = JavaLangThread_currentThread();
  JavaLangStringBuilder *msg = new_JavaLangStringBuilder_init();
  (void) [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"The connection pool for database '"])) appendWithNSString:((ComYahooAndroidSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->label_];
  (void) [msg appendWithNSString:@"' has been unable to grant a connection to thread "];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithLong:[((JavaLangThread *) nil_chk(thread)) getId]])) appendWithNSString:@" ("])) appendWithNSString:[thread getName]])) appendWithNSString:@") "];
  (void) [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"with flags 0x"])) appendWithNSString:JavaLangInteger_toHexStringWithInt_(connectionFlags)];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" for "])) appendWithFloat:waitMillis * 0.001f])) appendWithNSString:@" seconds.\n"];
  JavaUtilArrayList *requests = new_JavaUtilArrayList_init();
  jint activeConnections = 0;
  jint idleConnections = 0;
  if (![((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) isEmpty]) {
    for (ComYahooAndroidSqliteSQLiteConnection * __strong connection in nil_chk([self->mAcquiredConnections_ keySet])) {
      NSString *description_ = [((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(connection)) describeCurrentOperationUnsafe];
      if (description_ != nil) {
        [requests addWithId:description_];
        activeConnections += 1;
      }
      else {
        idleConnections += 1;
      }
    }
  }
  jint availableConnections = [((JavaUtilArrayList *) nil_chk(self->mAvailableNonPrimaryConnections_)) size];
  if (self->mAvailablePrimaryConnection_ != nil) {
    availableConnections += 1;
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"Connections: "])) appendWithInt:activeConnections])) appendWithNSString:@" active, "];
  (void) [((JavaLangStringBuilder *) nil_chk([msg appendWithInt:idleConnections])) appendWithNSString:@" idle, "];
  (void) [((JavaLangStringBuilder *) nil_chk([msg appendWithInt:availableConnections])) appendWithNSString:@" available.\n"];
  if (![requests isEmpty]) {
    (void) [msg appendWithNSString:@"\nRequests in progress:\n"];
    for (NSString * __strong request in requests) {
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"  "])) appendWithNSString:request])) appendWithNSString:@"\n"];
    }
  }
  ComYahooSquidbUtilityLogger_wWithNSString_withNSString_(ComYahooAndroidSqliteSQLiteConnectionPool_TAG, [msg description]);
}

void ComYahooAndroidSqliteSQLiteConnectionPool_wakeConnectionWaitersLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self) {
  ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *predecessor = nil;
  ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *waiter = self->mConnectionWaiterQueue_;
  jboolean primaryConnectionNotAvailable = false;
  jboolean nonPrimaryConnectionNotAvailable = false;
  while (waiter != nil) {
    jboolean unpark = false;
    if (!self->mIsOpen_) {
      unpark = true;
    }
    else {
      @try {
        ComYahooAndroidSqliteSQLiteConnection *connection = nil;
        if (!((ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(waiter))->mWantPrimaryConnection_ && !nonPrimaryConnectionNotAvailable) {
          connection = ComYahooAndroidSqliteSQLiteConnectionPool_tryAcquireNonPrimaryConnectionLockedWithNSString_withInt_(self, waiter->mSql_, waiter->mConnectionFlags_);
          if (connection == nil) {
            nonPrimaryConnectionNotAvailable = true;
          }
        }
        if (connection == nil && !primaryConnectionNotAvailable) {
          connection = ComYahooAndroidSqliteSQLiteConnectionPool_tryAcquirePrimaryConnectionLockedWithInt_(self, waiter->mConnectionFlags_);
          if (connection == nil) {
            primaryConnectionNotAvailable = true;
          }
        }
        if (connection != nil) {
          waiter->mAssignedConnection_ = connection;
          unpark = true;
        }
        else if (nonPrimaryConnectionNotAvailable && primaryConnectionNotAvailable) {
          break;
        }
      }
      @catch (JavaLangRuntimeException *ex) {
        ((ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(waiter))->mException_ = ex;
        unpark = true;
      }
    }
    ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *successor = ((ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(waiter))->mNext_;
    if (unpark) {
      if (predecessor != nil) {
        predecessor->mNext_ = successor;
      }
      else {
        self->mConnectionWaiterQueue_ = successor;
      }
      waiter->mNext_ = nil;
      JavaUtilConcurrentLocksLockSupport_unparkWithJavaLangThread_(waiter->mThread_);
    }
    else {
      predecessor = waiter;
    }
    waiter = successor;
  }
}

ComYahooAndroidSqliteSQLiteConnection *ComYahooAndroidSqliteSQLiteConnectionPool_tryAcquirePrimaryConnectionLockedWithInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, jint connectionFlags) {
  ComYahooAndroidSqliteSQLiteConnection *connection = self->mAvailablePrimaryConnection_;
  if (connection != nil) {
    self->mAvailablePrimaryConnection_ = nil;
    ComYahooAndroidSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
    return connection;
  }
  for (ComYahooAndroidSqliteSQLiteConnection * __strong acquiredConnection in nil_chk([((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) keySet])) {
    if ([((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(acquiredConnection)) isPrimaryConnection]) {
      return nil;
    }
  }
  connection = ComYahooAndroidSqliteSQLiteConnectionPool_openConnectionLockedWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_withBoolean_(self, self->mConfiguration_, true);
  ComYahooAndroidSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
  return connection;
}

ComYahooAndroidSqliteSQLiteConnection *ComYahooAndroidSqliteSQLiteConnectionPool_tryAcquireNonPrimaryConnectionLockedWithNSString_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, NSString *sql, jint connectionFlags) {
  ComYahooAndroidSqliteSQLiteConnection *connection;
  jint availableCount = [((JavaUtilArrayList *) nil_chk(self->mAvailableNonPrimaryConnections_)) size];
  if (availableCount > 1 && sql != nil) {
    for (jint i = 0; i < availableCount; i++) {
      connection = [self->mAvailableNonPrimaryConnections_ getWithInt:i];
      if ([((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(connection)) isPreparedStatementInCacheWithNSString:sql]) {
        (void) [self->mAvailableNonPrimaryConnections_ removeWithInt:i];
        ComYahooAndroidSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
        return connection;
      }
    }
  }
  if (availableCount > 0) {
    connection = [self->mAvailableNonPrimaryConnections_ removeWithInt:availableCount - 1];
    ComYahooAndroidSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
    return connection;
  }
  jint openConnections = [((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) size];
  if (self->mAvailablePrimaryConnection_ != nil) {
    openConnections += 1;
  }
  if (openConnections >= self->mMaxConnectionPoolSize_) {
    return nil;
  }
  connection = ComYahooAndroidSqliteSQLiteConnectionPool_openConnectionLockedWithComYahooAndroidSqliteSQLiteDatabaseConfiguration_withBoolean_(self, self->mConfiguration_, false);
  ComYahooAndroidSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withInt_(self, connection, connectionFlags);
  return connection;
}

void ComYahooAndroidSqliteSQLiteConnectionPool_finishAcquireConnectionLockedWithComYahooAndroidSqliteSQLiteConnection_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteConnection *connection, jint connectionFlags) {
  @try {
    jboolean readOnly = (connectionFlags & ComYahooAndroidSqliteSQLiteConnectionPool_CONNECTION_FLAG_READ_ONLY) != 0;
    [((ComYahooAndroidSqliteSQLiteConnection *) nil_chk(connection)) setOnlyAllowReadOnlyOperationsWithBoolean:readOnly];
    (void) [((JavaUtilWeakHashMap *) nil_chk(self->mAcquiredConnections_)) putWithId:connection withId:JreLoadEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, NORMAL)];
  }
  @catch (JavaLangRuntimeException *ex) {
    ComYahooSquidbUtilityLogger_eWithNSString_withNSString_(ComYahooAndroidSqliteSQLiteConnectionPool_TAG, JreStrcat("$@$I", @"Failed to prepare acquired connection for session, closing it: ", connection, @", connectionFlags=", connectionFlags));
    ComYahooAndroidSqliteSQLiteConnectionPool_closeConnectionAndLogExceptionsLockedWithComYahooAndroidSqliteSQLiteConnection_(self, connection);
    @throw ex;
  }
}

jboolean ComYahooAndroidSqliteSQLiteConnectionPool_isSessionBlockingImportantConnectionWaitersLockedWithBoolean_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, jboolean holdingPrimaryConnection, jint connectionFlags) {
  ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *waiter = self->mConnectionWaiterQueue_;
  if (waiter != nil) {
    jint priority = ComYahooAndroidSqliteSQLiteConnectionPool_getPriorityWithInt_(connectionFlags);
    do {
      if (priority > waiter->mPriority_) {
        break;
      }
      if (holdingPrimaryConnection || !waiter->mWantPrimaryConnection_) {
        return true;
      }
      waiter = waiter->mNext_;
    }
    while (waiter != nil);
  }
  return false;
}

jint ComYahooAndroidSqliteSQLiteConnectionPool_getPriorityWithInt_(jint connectionFlags) {
  ComYahooAndroidSqliteSQLiteConnectionPool_initialize();
  return (connectionFlags & ComYahooAndroidSqliteSQLiteConnectionPool_CONNECTION_FLAG_INTERACTIVE) != 0 ? 1 : 0;
}

void ComYahooAndroidSqliteSQLiteConnectionPool_setMaxConnectionPoolSizeLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self) {
  if ((((ComYahooAndroidSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->openFlags_ & ComYahooAndroidSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0) {
    self->mMaxConnectionPoolSize_ = ComYahooAndroidSqliteSQLiteGlobal_getWALConnectionPoolSize();
  }
  else {
    self->mMaxConnectionPoolSize_ = 1;
  }
}

void ComYahooAndroidSqliteSQLiteConnectionPool_throwIfClosedLocked(ComYahooAndroidSqliteSQLiteConnectionPool *self) {
  if (!self->mIsOpen_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because the connection pool has been closed.");
  }
}

ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *ComYahooAndroidSqliteSQLiteConnectionPool_obtainConnectionWaiterLockedWithJavaLangThread_withLong_withInt_withBoolean_withNSString_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool *self, JavaLangThread *thread, jlong startTime, jint priority, jboolean wantPrimaryConnection, NSString *sql, jint connectionFlags) {
  ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *waiter = self->mConnectionWaiterPool_;
  if (waiter != nil) {
    self->mConnectionWaiterPool_ = waiter->mNext_;
    waiter->mNext_ = nil;
  }
  else {
    waiter = new_ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_init();
  }
  ((ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(waiter))->mThread_ = thread;
  waiter->mStartTime_ = startTime;
  waiter->mPriority_ = priority;
  waiter->mWantPrimaryConnection_ = wantPrimaryConnection;
  waiter->mSql_ = sql;
  waiter->mConnectionFlags_ = connectionFlags;
  return waiter;
}

void ComYahooAndroidSqliteSQLiteConnectionPool_recycleConnectionWaiterLockedWithComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_(ComYahooAndroidSqliteSQLiteConnectionPool *self, ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *waiter) {
  ((ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *) nil_chk(waiter))->mNext_ = self->mConnectionWaiterPool_;
  waiter->mThread_ = nil;
  waiter->mSql_ = nil;
  waiter->mAssignedConnection_ = nil;
  waiter->mException_ = nil;
  waiter->mNonce_ += 1;
  self->mConnectionWaiterPool_ = waiter;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooAndroidSqliteSQLiteConnectionPool)

J2OBJC_INITIALIZED_DEFN(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus)

ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values_[3];

@implementation ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus

+ (IOSObjectArray *)values {
  return ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values();
}

+ (ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *)valueOfWithNSString:(NSString *)name {
  return ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus class]) {
    JreEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, NORMAL) = new_ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initWithNSString_withInt_(@"NORMAL", 0);
    JreEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, RECONFIGURE) = new_ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initWithNSString_withInt_(@"RECONFIGURE", 1);
    JreEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD) = new_ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initWithNSString_withInt_(@"DISCARD", 2);
    J2OBJC_SET_INITIALIZED(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NORMAL", "NORMAL", 0x4019, "Lcom.yahoo.android.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus;", &JreEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, NORMAL), NULL, .constantValue.asLong = 0 },
    { "RECONFIGURE", "RECONFIGURE", 0x4019, "Lcom.yahoo.android.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus;", &JreEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, RECONFIGURE), NULL, .constantValue.asLong = 0 },
    { "DISCARD", "DISCARD", 0x4019, "Lcom.yahoo.android.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus;", &JreEnum(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus, DISCARD), NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lcom.yahoo.android.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus;"};
  static const J2ObjcClassInfo _ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus = { 2, "AcquiredConnectionStatus", "com.yahoo.android.sqlite", "SQLiteConnectionPool", 0x4018, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lcom/yahoo/android/sqlite/SQLiteConnectionPool$AcquiredConnectionStatus;>;" };
  return &_ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus;
}

@end

void ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initWithNSString_withInt_(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *new_ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *self = [ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus alloc];
  ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values() {
  ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initialize();
  return [IOSObjectArray arrayWithObjects:ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values_ count:3 type:ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_class_()];
}

ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_valueOfWithNSString_(NSString *name) {
  ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initialize();
  for (int i = 0; i < 3; i++) {
    ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *e = ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus *ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_fromOrdinal(NSUInteger ordinal) {
  ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooAndroidSqliteSQLiteConnectionPool_AcquiredConnectionStatus)

@implementation ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mNext_", NULL, 0x1, "Lcom.yahoo.android.sqlite.SQLiteConnectionPool$ConnectionWaiter;", NULL, NULL, .constantValue.asLong = 0 },
    { "mThread_", NULL, 0x1, "Ljava.lang.Thread;", NULL, NULL, .constantValue.asLong = 0 },
    { "mStartTime_", NULL, 0x1, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "mPriority_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mWantPrimaryConnection_", NULL, 0x1, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mSql_", NULL, 0x1, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mConnectionFlags_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mAssignedConnection_", NULL, 0x1, "Lcom.yahoo.android.sqlite.SQLiteConnection;", NULL, NULL, .constantValue.asLong = 0 },
    { "mException_", NULL, 0x1, "Ljava.lang.RuntimeException;", NULL, NULL, .constantValue.asLong = 0 },
    { "mNonce_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter = { 2, "ConnectionWaiter", "com.yahoo.android.sqlite", "SQLiteConnectionPool", 0x1a, 1, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter;
}

@end

void ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_init(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *self) {
  NSObject_init(self);
}

ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *new_ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_init() {
  ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *self = [ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter alloc];
  ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_init(self);
  return self;
}

ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter *create_ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_init() {
  return new_ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooAndroidSqliteSQLiteConnectionPool_ConnectionWaiter)
