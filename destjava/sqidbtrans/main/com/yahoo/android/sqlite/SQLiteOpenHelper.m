//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/squidb/squidb-ios/src/com/yahoo/android/sqlite/SQLiteOpenHelper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/yahoo/android/sqlite/DatabaseErrorHandler.h"
#include "com/yahoo/android/sqlite/SQLiteCantOpenDatabaseException.h"
#include "com/yahoo/android/sqlite/SQLiteDatabase.h"
#include "com/yahoo/android/sqlite/SQLiteException.h"
#include "com/yahoo/android/sqlite/SQLiteOpenHelper.h"
#include "com/yahoo/squidb/utility/Logger.h"
#include "java/io/File.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"

@interface ComYahooAndroidSqliteSQLiteOpenHelper () {
 @public
  NSString *mPath_;
  NSString *mName_;
  JavaIoFile *mDatabasePath_;
  id<ComYahooAndroidSqliteSQLiteDatabase_CursorFactory> mFactory_;
  jint mNewVersion_;
  ComYahooAndroidSqliteSQLiteDatabase *mDatabase_;
  jboolean mIsInitializing_;
  jboolean mEnableWriteAheadLogging_;
  id<ComYahooAndroidSqliteDatabaseErrorHandler> mErrorHandler_;
}

- (ComYahooAndroidSqliteSQLiteDatabase *)getDatabaseLockedWithBoolean:(jboolean)writable;

@end

J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteOpenHelper, mPath_, NSString *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteOpenHelper, mName_, NSString *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteOpenHelper, mDatabasePath_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteOpenHelper, mFactory_, id<ComYahooAndroidSqliteSQLiteDatabase_CursorFactory>)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteOpenHelper, mDatabase_, ComYahooAndroidSqliteSQLiteDatabase *)
J2OBJC_FIELD_SETTER(ComYahooAndroidSqliteSQLiteOpenHelper, mErrorHandler_, id<ComYahooAndroidSqliteDatabaseErrorHandler>)

inline NSString *ComYahooAndroidSqliteSQLiteOpenHelper_get_TAG();
static NSString *ComYahooAndroidSqliteSQLiteOpenHelper_TAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYahooAndroidSqliteSQLiteOpenHelper, TAG, NSString *)

inline jboolean ComYahooAndroidSqliteSQLiteOpenHelper_get_DEBUG_STRICT_READONLY();
#define ComYahooAndroidSqliteSQLiteOpenHelper_DEBUG_STRICT_READONLY false
J2OBJC_STATIC_FIELD_CONSTANT(ComYahooAndroidSqliteSQLiteOpenHelper, DEBUG_STRICT_READONLY, jboolean)

__attribute__((unused)) static ComYahooAndroidSqliteSQLiteDatabase *ComYahooAndroidSqliteSQLiteOpenHelper_getDatabaseLockedWithBoolean_(ComYahooAndroidSqliteSQLiteOpenHelper *self, jboolean writable);

J2OBJC_INITIALIZED_DEFN(ComYahooAndroidSqliteSQLiteOpenHelper)

@implementation ComYahooAndroidSqliteSQLiteOpenHelper

- (instancetype)initWithNSString:(NSString *)path
                    withNSString:(NSString *)name
withComYahooAndroidSqliteSQLiteDatabase_CursorFactory:(id<ComYahooAndroidSqliteSQLiteDatabase_CursorFactory>)factory
                         withInt:(jint)version_ {
  ComYahooAndroidSqliteSQLiteOpenHelper_initWithNSString_withNSString_withComYahooAndroidSqliteSQLiteDatabase_CursorFactory_withInt_(self, path, name, factory, version_);
  return self;
}

- (instancetype)initWithNSString:(NSString *)path
                    withNSString:(NSString *)name
withComYahooAndroidSqliteSQLiteDatabase_CursorFactory:(id<ComYahooAndroidSqliteSQLiteDatabase_CursorFactory>)factory
                         withInt:(jint)version_
withComYahooAndroidSqliteDatabaseErrorHandler:(id<ComYahooAndroidSqliteDatabaseErrorHandler>)errorHandler {
  ComYahooAndroidSqliteSQLiteOpenHelper_initWithNSString_withNSString_withComYahooAndroidSqliteSQLiteDatabase_CursorFactory_withInt_withComYahooAndroidSqliteDatabaseErrorHandler_(self, path, name, factory, version_, errorHandler);
  return self;
}

- (JavaIoFile *)getDatabaseFile {
  return mDatabasePath_;
}

- (NSString *)getDatabaseName {
  return mName_;
}

- (void)setWriteAheadLoggingEnabledWithBoolean:(jboolean)enabled {
  @synchronized(self) {
    if (mEnableWriteAheadLogging_ != enabled) {
      if (mDatabase_ != nil && [mDatabase_ isOpen] && ![mDatabase_ isReadOnly]) {
        if (enabled) {
          [mDatabase_ enableWriteAheadLogging];
        }
        else {
          [mDatabase_ disableWriteAheadLogging];
        }
      }
      mEnableWriteAheadLogging_ = enabled;
    }
  }
}

- (ComYahooAndroidSqliteSQLiteDatabase *)getWritableDatabase {
  @synchronized(self) {
    return ComYahooAndroidSqliteSQLiteOpenHelper_getDatabaseLockedWithBoolean_(self, true);
  }
}

- (ComYahooAndroidSqliteSQLiteDatabase *)getReadableDatabase {
  @synchronized(self) {
    return ComYahooAndroidSqliteSQLiteOpenHelper_getDatabaseLockedWithBoolean_(self, false);
  }
}

- (ComYahooAndroidSqliteSQLiteDatabase *)getDatabaseLockedWithBoolean:(jboolean)writable {
  return ComYahooAndroidSqliteSQLiteOpenHelper_getDatabaseLockedWithBoolean_(self, writable);
}

- (void)close {
  @synchronized(self) {
    if (mIsInitializing_) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Closed during initialization");
    }
    if (mDatabase_ != nil && [mDatabase_ isOpen]) {
      [mDatabase_ close];
      mDatabase_ = nil;
    }
  }
}

- (void)onConfigureWithComYahooAndroidSqliteSQLiteDatabase:(ComYahooAndroidSqliteSQLiteDatabase *)db {
}

- (void)onCreateWithComYahooAndroidSqliteSQLiteDatabase:(ComYahooAndroidSqliteSQLiteDatabase *)db {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onUpgradeWithComYahooAndroidSqliteSQLiteDatabase:(ComYahooAndroidSqliteSQLiteDatabase *)db
                                                 withInt:(jint)oldVersion
                                                 withInt:(jint)newVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onDowngradeWithComYahooAndroidSqliteSQLiteDatabase:(ComYahooAndroidSqliteSQLiteDatabase *)db
                                                   withInt:(jint)oldVersion
                                                   withInt:(jint)newVersion {
  @throw new_ComYahooAndroidSqliteSQLiteException_initWithNSString_(JreStrcat("$I$I", @"Can't downgrade database from version ", oldVersion, @" to ", newVersion));
}

- (void)onOpenWithComYahooAndroidSqliteSQLiteDatabase:(ComYahooAndroidSqliteSQLiteDatabase *)db {
}

+ (void)initialize {
  if (self == [ComYahooAndroidSqliteSQLiteOpenHelper class]) {
    ComYahooAndroidSqliteSQLiteOpenHelper_TAG = [ComYahooAndroidSqliteSQLiteOpenHelper_class_() getSimpleName];
    J2OBJC_SET_INITIALIZED(ComYahooAndroidSqliteSQLiteOpenHelper)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withComYahooAndroidSqliteSQLiteDatabase_CursorFactory:withInt:", "SQLiteOpenHelper", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withNSString:withComYahooAndroidSqliteSQLiteDatabase_CursorFactory:withInt:withComYahooAndroidSqliteDatabaseErrorHandler:", "SQLiteOpenHelper", NULL, 0x1, NULL, NULL },
    { "getDatabaseFile", NULL, "Ljava.io.File;", 0x1, NULL, NULL },
    { "getDatabaseName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setWriteAheadLoggingEnabledWithBoolean:", "setWriteAheadLoggingEnabled", "V", 0x1, NULL, NULL },
    { "getWritableDatabase", NULL, "Lcom.yahoo.android.sqlite.SQLiteDatabase;", 0x1, NULL, NULL },
    { "getReadableDatabase", NULL, "Lcom.yahoo.android.sqlite.SQLiteDatabase;", 0x1, NULL, NULL },
    { "getDatabaseLockedWithBoolean:", "getDatabaseLocked", "Lcom.yahoo.android.sqlite.SQLiteDatabase;", 0x2, NULL, NULL },
    { "close", NULL, "V", 0x21, NULL, NULL },
    { "onConfigureWithComYahooAndroidSqliteSQLiteDatabase:", "onConfigure", "V", 0x1, NULL, NULL },
    { "onCreateWithComYahooAndroidSqliteSQLiteDatabase:", "onCreate", "V", 0x401, NULL, NULL },
    { "onUpgradeWithComYahooAndroidSqliteSQLiteDatabase:withInt:withInt:", "onUpgrade", "V", 0x401, NULL, NULL },
    { "onDowngradeWithComYahooAndroidSqliteSQLiteDatabase:withInt:withInt:", "onDowngrade", "V", 0x1, NULL, NULL },
    { "onOpenWithComYahooAndroidSqliteSQLiteDatabase:", "onOpen", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "TAG", 0x1a, "Ljava.lang.String;", &ComYahooAndroidSqliteSQLiteOpenHelper_TAG, NULL, .constantValue.asLong = 0 },
    { "DEBUG_STRICT_READONLY", "DEBUG_STRICT_READONLY", 0x1a, "Z", NULL, NULL, .constantValue.asBOOL = ComYahooAndroidSqliteSQLiteOpenHelper_DEBUG_STRICT_READONLY },
    { "mPath_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mDatabasePath_", NULL, 0x12, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "mFactory_", NULL, 0x12, "Lcom.yahoo.android.sqlite.SQLiteDatabase$CursorFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "mNewVersion_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mDatabase_", NULL, 0x2, "Lcom.yahoo.android.sqlite.SQLiteDatabase;", NULL, NULL, .constantValue.asLong = 0 },
    { "mIsInitializing_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mEnableWriteAheadLogging_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mErrorHandler_", NULL, 0x12, "Lcom.yahoo.android.sqlite.DatabaseErrorHandler;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComYahooAndroidSqliteSQLiteOpenHelper = { 2, "SQLiteOpenHelper", "com.yahoo.android.sqlite", NULL, 0x401, 14, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComYahooAndroidSqliteSQLiteOpenHelper;
}

@end

void ComYahooAndroidSqliteSQLiteOpenHelper_initWithNSString_withNSString_withComYahooAndroidSqliteSQLiteDatabase_CursorFactory_withInt_(ComYahooAndroidSqliteSQLiteOpenHelper *self, NSString *path, NSString *name, id<ComYahooAndroidSqliteSQLiteDatabase_CursorFactory> factory, jint version_) {
  ComYahooAndroidSqliteSQLiteOpenHelper_initWithNSString_withNSString_withComYahooAndroidSqliteSQLiteDatabase_CursorFactory_withInt_withComYahooAndroidSqliteDatabaseErrorHandler_(self, path, name, factory, version_, nil);
}

void ComYahooAndroidSqliteSQLiteOpenHelper_initWithNSString_withNSString_withComYahooAndroidSqliteSQLiteDatabase_CursorFactory_withInt_withComYahooAndroidSqliteDatabaseErrorHandler_(ComYahooAndroidSqliteSQLiteOpenHelper *self, NSString *path, NSString *name, id<ComYahooAndroidSqliteSQLiteDatabase_CursorFactory> factory, jint version_, id<ComYahooAndroidSqliteDatabaseErrorHandler> errorHandler) {
  NSObject_init(self);
  if (version_ < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Version must be >= 1, was ", version_));
  }
  self->mPath_ = path;
  self->mName_ = name;
  self->mDatabasePath_ = new_JavaIoFile_initWithNSString_withNSString_(path, name);
  self->mFactory_ = factory;
  self->mNewVersion_ = version_;
  self->mErrorHandler_ = errorHandler;
}

ComYahooAndroidSqliteSQLiteDatabase *ComYahooAndroidSqliteSQLiteOpenHelper_getDatabaseLockedWithBoolean_(ComYahooAndroidSqliteSQLiteOpenHelper *self, jboolean writable) {
  if (self->mDatabase_ != nil) {
    if (![self->mDatabase_ isOpen]) {
      self->mDatabase_ = nil;
    }
    else if (!writable || ![self->mDatabase_ isReadOnly]) {
      return self->mDatabase_;
    }
  }
  if (self->mIsInitializing_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"getDatabase called recursively");
  }
  ComYahooAndroidSqliteSQLiteDatabase *db = self->mDatabase_;
  @try {
    self->mIsInitializing_ = true;
    if (db != nil) {
      if (writable && [db isReadOnly]) {
        [db reopenReadWrite];
      }
    }
    else if (self->mName_ == nil) {
      db = ComYahooAndroidSqliteSQLiteDatabase_createWithComYahooAndroidSqliteSQLiteDatabase_CursorFactory_(nil);
    }
    else {
      @try {
        {
          JavaIoFile *databasePath = self->mDatabasePath_;
          JavaIoFile *databaseParent = [((JavaIoFile *) nil_chk(databasePath)) getParentFile];
          if ([((JavaIoFile *) nil_chk(databaseParent)) mkdirs] || [databaseParent isDirectory]) {
            NSString *path = [databasePath getPath];
            db = ComYahooAndroidSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withComYahooAndroidSqliteSQLiteDatabase_CursorFactory_withComYahooAndroidSqliteDatabaseErrorHandler_(path, self->mFactory_, self->mErrorHandler_);
          }
          else {
            @throw new_ComYahooAndroidSqliteSQLiteCantOpenDatabaseException_initWithNSString_(@"Failed to create database parent directory");
          }
        }
      }
      @catch (ComYahooAndroidSqliteSQLiteException *ex) {
        if (writable) {
          @throw ex;
        }
        ComYahooSquidbUtilityLogger_eWithNSString_withNSString_withNSException_(ComYahooAndroidSqliteSQLiteOpenHelper_TAG, JreStrcat("$$$", @"Couldn't open ", self->mName_, @" for writing (will try read-only):"), ex);
        NSString *path = [((JavaIoFile *) nil_chk(self->mDatabasePath_)) getPath];
        db = ComYahooAndroidSqliteSQLiteDatabase_openDatabaseWithNSString_withComYahooAndroidSqliteSQLiteDatabase_CursorFactory_withInt_withComYahooAndroidSqliteDatabaseErrorHandler_(path, self->mFactory_, ComYahooAndroidSqliteSQLiteDatabase_OPEN_READONLY, self->mErrorHandler_);
      }
    }
    [self onConfigureWithComYahooAndroidSqliteSQLiteDatabase:db];
    jint version_ = [((ComYahooAndroidSqliteSQLiteDatabase *) nil_chk(db)) getVersion];
    if (version_ != self->mNewVersion_) {
      if ([db isReadOnly]) {
        @throw new_ComYahooAndroidSqliteSQLiteException_initWithNSString_(JreStrcat("$I$I$$", @"Can't upgrade read-only database from version ", [db getVersion], @" to ", self->mNewVersion_, @": ", self->mName_));
      }
      [db beginTransaction];
      @try {
        if (version_ == 0) {
          [self onCreateWithComYahooAndroidSqliteSQLiteDatabase:db];
        }
        else {
          if (version_ > self->mNewVersion_) {
            [self onDowngradeWithComYahooAndroidSqliteSQLiteDatabase:db withInt:version_ withInt:self->mNewVersion_];
          }
          else {
            [self onUpgradeWithComYahooAndroidSqliteSQLiteDatabase:db withInt:version_ withInt:self->mNewVersion_];
          }
        }
        [db setVersionWithInt:self->mNewVersion_];
        [db setTransactionSuccessful];
      }
      @finally {
        [db endTransaction];
      }
    }
    [self onOpenWithComYahooAndroidSqliteSQLiteDatabase:db];
    if ([db isReadOnly]) {
      ComYahooSquidbUtilityLogger_wWithNSString_withNSString_(ComYahooAndroidSqliteSQLiteOpenHelper_TAG, JreStrcat("$$$", @"Opened ", self->mName_, @" in read-only mode"));
    }
    self->mDatabase_ = db;
    return db;
  }
  @finally {
    self->mIsInitializing_ = false;
    if (db != nil && db != self->mDatabase_) {
      [db close];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooAndroidSqliteSQLiteOpenHelper)
