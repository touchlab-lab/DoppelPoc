//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/squidb/squidb/src/com/yahoo/squidb/data/MapValuesStorage.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/yahoo/squidb/data/MapValuesStorage.h"
#include "com/yahoo/squidb/data/ValuesStorage.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation ComYahooSquidbDataMapValuesStorage

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYahooSquidbDataMapValuesStorage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)values {
  ComYahooSquidbDataMapValuesStorage_initWithJavaUtilMap_(self, values);
  return self;
}

- (jboolean)containsKeyWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(values_)) containsKeyWithId:key];
}

- (id)getWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(values_)) getWithId:key];
}

- (void)removeWithNSString:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) removeWithId:key];
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(values_)) size];
}

- (void)putNullWithNSString:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:nil];
}

- (void)putWithNSString:(NSString *)key
    withJavaLangBoolean:(JavaLangBoolean *)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
       withJavaLangByte:(JavaLangByte *)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
     withJavaLangDouble:(JavaLangDouble *)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
      withJavaLangFloat:(JavaLangFloat *)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
    withJavaLangInteger:(JavaLangInteger *)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
       withJavaLangLong:(JavaLangLong *)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
      withJavaLangShort:(JavaLangShort *)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (void)putWithNSString:(NSString *)key
          withByteArray:(IOSByteArray *)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (void)putAllWithComYahooSquidbDataValuesStorage:(ComYahooSquidbDataValuesStorage *)other {
  if ([other isKindOfClass:[ComYahooSquidbDataMapValuesStorage class]]) {
    [((id<JavaUtilMap>) nil_chk(values_)) putAllWithJavaUtilMap:((ComYahooSquidbDataMapValuesStorage *) nil_chk(((ComYahooSquidbDataMapValuesStorage *) cast_chk(other, [ComYahooSquidbDataMapValuesStorage class]))))->values_];
  }
  else {
    id<JavaUtilSet> valuesSet = [((ComYahooSquidbDataValuesStorage *) nil_chk(other)) valueSet];
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk(valuesSet)) {
      [self putWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue] withBoolean:false];
    }
  }
}

- (id<JavaUtilSet>)valueSet {
  return [((id<JavaUtilMap>) nil_chk(values_)) entrySet];
}

- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(values_)) keySet];
}

- (jboolean)isEqual:(id)o {
  return ([o isKindOfClass:[ComYahooSquidbDataMapValuesStorage class]]) && [((id<JavaUtilMap>) nil_chk(values_)) isEqual:((ComYahooSquidbDataMapValuesStorage *) nil_chk(((ComYahooSquidbDataMapValuesStorage *) cast_chk(o, [ComYahooSquidbDataMapValuesStorage class]))))->values_];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilMap>) nil_chk(values_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MapValuesStorage", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilMap:", "MapValuesStorage", NULL, 0x1, NULL, "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V" },
    { "containsKeyWithNSString:", "containsKey", "Z", 0x1, NULL, NULL },
    { "getWithNSString:", "get", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "removeWithNSString:", "remove", "V", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "putNullWithNSString:", "putNull", "V", 0x1, NULL, NULL },
    { "putWithNSString:withJavaLangBoolean:", "put", "V", 0x1, NULL, NULL },
    { "putWithNSString:withJavaLangByte:", "put", "V", 0x1, NULL, NULL },
    { "putWithNSString:withJavaLangDouble:", "put", "V", 0x1, NULL, NULL },
    { "putWithNSString:withJavaLangFloat:", "put", "V", 0x1, NULL, NULL },
    { "putWithNSString:withJavaLangInteger:", "put", "V", 0x1, NULL, NULL },
    { "putWithNSString:withJavaLangLong:", "put", "V", 0x1, NULL, NULL },
    { "putWithNSString:withJavaLangShort:", "put", "V", 0x1, NULL, NULL },
    { "putWithNSString:withNSString:", "put", "V", 0x1, NULL, NULL },
    { "putWithNSString:withByteArray:", "put", "V", 0x1, NULL, NULL },
    { "putAllWithComYahooSquidbDataValuesStorage:", "putAll", "V", 0x1, NULL, NULL },
    { "valueSet", NULL, "Ljava.util.Set;", 0x1, NULL, "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;" },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, "()Ljava/util/Set<Ljava/lang/String;>;" },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "values_", NULL, 0x10, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComYahooSquidbDataMapValuesStorage = { 2, "MapValuesStorage", "com.yahoo.squidb.data", NULL, 0x1, 21, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComYahooSquidbDataMapValuesStorage;
}

@end

void ComYahooSquidbDataMapValuesStorage_init(ComYahooSquidbDataMapValuesStorage *self) {
  ComYahooSquidbDataValuesStorage_init(self);
  self->values_ = new_JavaUtilHashMap_init();
}

ComYahooSquidbDataMapValuesStorage *new_ComYahooSquidbDataMapValuesStorage_init() {
  ComYahooSquidbDataMapValuesStorage *self = [ComYahooSquidbDataMapValuesStorage alloc];
  ComYahooSquidbDataMapValuesStorage_init(self);
  return self;
}

ComYahooSquidbDataMapValuesStorage *create_ComYahooSquidbDataMapValuesStorage_init() {
  return new_ComYahooSquidbDataMapValuesStorage_init();
}

void ComYahooSquidbDataMapValuesStorage_initWithJavaUtilMap_(ComYahooSquidbDataMapValuesStorage *self, id<JavaUtilMap> values) {
  ComYahooSquidbDataValuesStorage_init(self);
  if (values == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't create a MapValuesStorage with null Map");
  }
  self->values_ = values;
}

ComYahooSquidbDataMapValuesStorage *new_ComYahooSquidbDataMapValuesStorage_initWithJavaUtilMap_(id<JavaUtilMap> values) {
  ComYahooSquidbDataMapValuesStorage *self = [ComYahooSquidbDataMapValuesStorage alloc];
  ComYahooSquidbDataMapValuesStorage_initWithJavaUtilMap_(self, values);
  return self;
}

ComYahooSquidbDataMapValuesStorage *create_ComYahooSquidbDataMapValuesStorage_initWithJavaUtilMap_(id<JavaUtilMap> values) {
  return new_ComYahooSquidbDataMapValuesStorage_initWithJavaUtilMap_(values);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbDataMapValuesStorage)
