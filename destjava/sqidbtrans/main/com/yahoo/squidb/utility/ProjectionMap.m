//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/squidb/squidb/src/com/yahoo/squidb/utility/ProjectionMap.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/yahoo/squidb/sql/Field.h"
#include "com/yahoo/squidb/sql/SqlUtils.h"
#include "com/yahoo/squidb/utility/ProjectionMap.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComYahooSquidbUtilityProjectionMap () {
 @public
  id<JavaUtilMap> map_;
}

@end

J2OBJC_FIELD_SETTER(ComYahooSquidbUtilityProjectionMap, map_, id<JavaUtilMap>)

@implementation ComYahooSquidbUtilityProjectionMap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYahooSquidbUtilityProjectionMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithComYahooSquidbUtilityProjectionMap:(ComYahooSquidbUtilityProjectionMap *)other {
  ComYahooSquidbUtilityProjectionMap_initWithComYahooSquidbUtilityProjectionMap_(self, other);
  return self;
}

- (ComYahooSquidbSqlField *)putWithNSString:(NSString *)name
                 withComYahooSquidbSqlField:(ComYahooSquidbSqlField *)column {
  if (column == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot use null column in ProjectionMap");
  }
  if (ComYahooSquidbSqlSqlUtils_isEmptyWithNSString_(name)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot use empty string as a key");
  }
  if (!ComYahooSquidbSqlSqlUtils_equalsWithNSString_withNSString_(name, [((ComYahooSquidbSqlField *) nil_chk(column)) getName])) {
    column = [column asWithNSString:name];
  }
  return [((id<JavaUtilMap>) nil_chk(map_)) putWithId:name withId:column];
}

- (ComYahooSquidbSqlField *)putWithComYahooSquidbSqlField:(ComYahooSquidbSqlField *)column {
  if (column == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot use null column in ProjectionMap");
  }
  return [((id<JavaUtilMap>) nil_chk(map_)) putWithId:[((ComYahooSquidbSqlField *) nil_chk(column)) getName] withId:column];
}

- (void)putAllWithComYahooSquidbSqlFieldArray:(IOSObjectArray *)columns {
  if (columns != nil) {
    {
      IOSObjectArray *a__ = columns;
      ComYahooSquidbSqlField * const *b__ = a__->buffer_;
      ComYahooSquidbSqlField * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComYahooSquidbSqlField *field = *b__++;
        (void) [self putWithComYahooSquidbSqlField:field];
      }
    }
  }
}

- (ComYahooSquidbSqlField *)putWithNSString:(NSString *)expression {
  if (ComYahooSquidbSqlSqlUtils_isEmptyWithNSString_(expression)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Expression cannot be empty");
  }
  return [((id<JavaUtilMap>) nil_chk(map_)) putWithId:expression withId:ComYahooSquidbSqlField_fieldWithNSString_(expression)];
}

- (ComYahooSquidbSqlField *)getWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
}

- (id<JavaUtilList>)getDefaultProjection {
  return new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(map_)) values]);
}

- (IOSObjectArray *)getDefaultProjectionNames {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[map_ size] type:NSString_class_()]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ProjectionMap", NULL, 0x1, NULL, NULL },
    { "initWithComYahooSquidbUtilityProjectionMap:", "ProjectionMap", NULL, 0x1, NULL, NULL },
    { "putWithNSString:withComYahooSquidbSqlField:", "put", "Lcom.yahoo.squidb.sql.Field;", 0x1, NULL, "(Ljava/lang/String;Lcom/yahoo/squidb/sql/Field<*>;)Lcom/yahoo/squidb/sql/Field<*>;" },
    { "putWithComYahooSquidbSqlField:", "put", "Lcom.yahoo.squidb.sql.Field;", 0x1, NULL, "(Lcom/yahoo/squidb/sql/Field<*>;)Lcom/yahoo/squidb/sql/Field<*>;" },
    { "putAllWithComYahooSquidbSqlFieldArray:", "putAll", "V", 0x81, NULL, NULL },
    { "putWithNSString:", "put", "Lcom.yahoo.squidb.sql.Field;", 0x1, NULL, "(Ljava/lang/String;)Lcom/yahoo/squidb/sql/Field<*>;" },
    { "getWithNSString:", "get", "Lcom.yahoo.squidb.sql.Field;", 0x1, NULL, "(Ljava/lang/String;)Lcom/yahoo/squidb/sql/Field<*>;" },
    { "getDefaultProjection", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lcom/yahoo/squidb/sql/Field<*>;>;" },
    { "getDefaultProjectionNames", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "map_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lcom/yahoo/squidb/sql/Field<*>;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComYahooSquidbUtilityProjectionMap = { 2, "ProjectionMap", "com.yahoo.squidb.utility", NULL, 0x1, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComYahooSquidbUtilityProjectionMap;
}

@end

void ComYahooSquidbUtilityProjectionMap_init(ComYahooSquidbUtilityProjectionMap *self) {
  NSObject_init(self);
  self->map_ = new_JavaUtilLinkedHashMap_init();
}

ComYahooSquidbUtilityProjectionMap *new_ComYahooSquidbUtilityProjectionMap_init() {
  ComYahooSquidbUtilityProjectionMap *self = [ComYahooSquidbUtilityProjectionMap alloc];
  ComYahooSquidbUtilityProjectionMap_init(self);
  return self;
}

ComYahooSquidbUtilityProjectionMap *create_ComYahooSquidbUtilityProjectionMap_init() {
  return new_ComYahooSquidbUtilityProjectionMap_init();
}

void ComYahooSquidbUtilityProjectionMap_initWithComYahooSquidbUtilityProjectionMap_(ComYahooSquidbUtilityProjectionMap *self, ComYahooSquidbUtilityProjectionMap *other) {
  NSObject_init(self);
  self->map_ = new_JavaUtilLinkedHashMap_initWithJavaUtilMap_(((ComYahooSquidbUtilityProjectionMap *) nil_chk(other))->map_);
}

ComYahooSquidbUtilityProjectionMap *new_ComYahooSquidbUtilityProjectionMap_initWithComYahooSquidbUtilityProjectionMap_(ComYahooSquidbUtilityProjectionMap *other) {
  ComYahooSquidbUtilityProjectionMap *self = [ComYahooSquidbUtilityProjectionMap alloc];
  ComYahooSquidbUtilityProjectionMap_initWithComYahooSquidbUtilityProjectionMap_(self, other);
  return self;
}

ComYahooSquidbUtilityProjectionMap *create_ComYahooSquidbUtilityProjectionMap_initWithComYahooSquidbUtilityProjectionMap_(ComYahooSquidbUtilityProjectionMap *other) {
  return new_ComYahooSquidbUtilityProjectionMap_initWithComYahooSquidbUtilityProjectionMap_(other);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbUtilityProjectionMap)
