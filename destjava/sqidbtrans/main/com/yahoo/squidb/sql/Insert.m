//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/squidb/squidb/src/com/yahoo/squidb/sql/Insert.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/yahoo/squidb/data/ValuesStorage.h"
#include "com/yahoo/squidb/sql/Insert.h"
#include "com/yahoo/squidb/sql/Property.h"
#include "com/yahoo/squidb/sql/Query.h"
#include "com/yahoo/squidb/sql/SqlBuilder.h"
#include "com/yahoo/squidb/sql/SqlTable.h"
#include "com/yahoo/squidb/sql/Table.h"
#include "com/yahoo/squidb/sql/TableStatement.h"
#include "com/yahoo/squidb/sql/View.h"
#include "com/yahoo/squidb/utility/SquidUtilities.h"
#include "com/yahoo/squidb/utility/VersionCode.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComYahooSquidbSqlInsert () {
 @public
  ComYahooSquidbSqlSqlTable *table_;
  ComYahooSquidbSqlTableStatement_ConflictAlgorithm *conflictAlgorithm_;
  id<JavaUtilList> columns_;
  id<JavaUtilList> valuesToInsert_;
  ComYahooSquidbSqlQuery *query_;
  jboolean defaultValues_;
}

- (instancetype)initWithComYahooSquidbSqlSqlTable:(ComYahooSquidbSqlSqlTable *)table;

- (void)assertValues;

- (void)assertValueSetSizesWithInt:(jint)size;

- (void)visitConflictAlgorithmWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql;

- (void)visitColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql;

- (void)visitQueryWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder
                                      withBoolean:(jboolean)forSqlValidation;

- (void)visitValuesWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder
                                       withBoolean:(jboolean)forSqlValidation;

@end

J2OBJC_FIELD_SETTER(ComYahooSquidbSqlInsert, table_, ComYahooSquidbSqlSqlTable *)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlInsert, conflictAlgorithm_, ComYahooSquidbSqlTableStatement_ConflictAlgorithm *)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlInsert, columns_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlInsert, valuesToInsert_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlInsert, query_, ComYahooSquidbSqlQuery *)

__attribute__((unused)) static void ComYahooSquidbSqlInsert_initWithComYahooSquidbSqlSqlTable_(ComYahooSquidbSqlInsert *self, ComYahooSquidbSqlSqlTable *table);

__attribute__((unused)) static ComYahooSquidbSqlInsert *new_ComYahooSquidbSqlInsert_initWithComYahooSquidbSqlSqlTable_(ComYahooSquidbSqlSqlTable *table) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYahooSquidbSqlInsert *create_ComYahooSquidbSqlInsert_initWithComYahooSquidbSqlSqlTable_(ComYahooSquidbSqlSqlTable *table);

__attribute__((unused)) static void ComYahooSquidbSqlInsert_assertValues(ComYahooSquidbSqlInsert *self);

__attribute__((unused)) static void ComYahooSquidbSqlInsert_assertValueSetSizesWithInt_(ComYahooSquidbSqlInsert *self, jint size);

__attribute__((unused)) static void ComYahooSquidbSqlInsert_visitConflictAlgorithmWithJavaLangStringBuilder_(ComYahooSquidbSqlInsert *self, JavaLangStringBuilder *sql);

__attribute__((unused)) static void ComYahooSquidbSqlInsert_visitColumnsWithJavaLangStringBuilder_(ComYahooSquidbSqlInsert *self, JavaLangStringBuilder *sql);

__attribute__((unused)) static void ComYahooSquidbSqlInsert_visitQueryWithComYahooSquidbSqlSqlBuilder_withBoolean_(ComYahooSquidbSqlInsert *self, ComYahooSquidbSqlSqlBuilder *builder, jboolean forSqlValidation);

__attribute__((unused)) static void ComYahooSquidbSqlInsert_visitValuesWithComYahooSquidbSqlSqlBuilder_withBoolean_(ComYahooSquidbSqlInsert *self, ComYahooSquidbSqlSqlBuilder *builder, jboolean forSqlValidation);

@implementation ComYahooSquidbSqlInsert

- (instancetype)initWithComYahooSquidbSqlSqlTable:(ComYahooSquidbSqlSqlTable *)table {
  ComYahooSquidbSqlInsert_initWithComYahooSquidbSqlSqlTable_(self, table);
  return self;
}

+ (ComYahooSquidbSqlInsert *)intoWithComYahooSquidbSqlTable:(ComYahooSquidbSqlTable *)table {
  return ComYahooSquidbSqlInsert_intoWithComYahooSquidbSqlTable_(table);
}

+ (ComYahooSquidbSqlInsert *)intoWithComYahooSquidbSqlView:(ComYahooSquidbSqlView *)view {
  return ComYahooSquidbSqlInsert_intoWithComYahooSquidbSqlView_(view);
}

- (ComYahooSquidbSqlSqlTable *)getTable {
  return table_;
}

- (ComYahooSquidbSqlInsert *)columnsWithComYahooSquidbSqlPropertyArray:(IOSObjectArray *)columns {
  {
    IOSObjectArray *a__ = columns;
    ComYahooSquidbSqlProperty * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComYahooSquidbSqlProperty * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComYahooSquidbSqlProperty *column = *b__++;
      [((id<JavaUtilList>) nil_chk(self->columns_)) addWithId:[((ComYahooSquidbSqlProperty *) nil_chk(column)) getExpression]];
    }
  }
  defaultValues_ = false;
  [self invalidateCompileCache];
  return self;
}

- (ComYahooSquidbSqlInsert *)columnsWithNSStringArray:(IOSObjectArray *)columnNames {
  ComYahooSquidbUtilitySquidUtilities_addAllWithJavaUtilCollection_withNSObjectArray_(self->columns_, columnNames);
  defaultValues_ = false;
  [self invalidateCompileCache];
  return self;
}

- (ComYahooSquidbSqlInsert *)valuesWithNSObjectArray:(IOSObjectArray *)values {
  [((id<JavaUtilList>) nil_chk(valuesToInsert_)) addWithId:JavaUtilArrays_asListWithNSObjectArray_(values)];
  query_ = nil;
  defaultValues_ = false;
  [self invalidateCompileCache];
  return self;
}

- (ComYahooSquidbSqlInsert *)selectWithComYahooSquidbSqlQuery:(ComYahooSquidbSqlQuery *)select {
  self->query_ = select;
  [((id<JavaUtilList>) nil_chk(valuesToInsert_)) clear];
  defaultValues_ = false;
  [self invalidateCompileCache];
  return self;
}

- (ComYahooSquidbSqlInsert *)fromValuesWithComYahooSquidbDataValuesStorage:(ComYahooSquidbDataValuesStorage *)values {
  id<JavaUtilList> valuesToInsert = new_JavaUtilArrayList_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((ComYahooSquidbDataValuesStorage *) nil_chk(values)) valueSet])) {
    [((id<JavaUtilList>) nil_chk(self->columns_)) addWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
    [valuesToInsert addWithId:[entry_ getValue]];
  }
  [((id<JavaUtilList>) nil_chk(self->valuesToInsert_)) addWithId:valuesToInsert];
  [self invalidateCompileCache];
  return self;
}

- (ComYahooSquidbSqlInsert *)defaultValues {
  defaultValues_ = true;
  [((id<JavaUtilList>) nil_chk(columns_)) clear];
  [((id<JavaUtilList>) nil_chk(valuesToInsert_)) clear];
  query_ = nil;
  [self invalidateCompileCache];
  return self;
}

- (jint)getNumRows {
  return [((id<JavaUtilList>) nil_chk(valuesToInsert_)) size];
}

- (ComYahooSquidbSqlInsert *)onConflictWithComYahooSquidbSqlTableStatement_ConflictAlgorithm:(ComYahooSquidbSqlTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  self->conflictAlgorithm_ = conflictAlgorithm;
  [self invalidateCompileCache];
  return self;
}

- (void)appendToSqlBuilderWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder
                                              withBoolean:(jboolean)forSqlValidation {
  ComYahooSquidbSqlInsert_assertValues(self);
  (void) [((JavaLangStringBuilder *) nil_chk(((ComYahooSquidbSqlSqlBuilder *) nil_chk(builder))->sql_)) appendWithNSString:@"INSERT "];
  ComYahooSquidbSqlInsert_visitConflictAlgorithmWithJavaLangStringBuilder_(self, builder->sql_);
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder->sql_ appendWithNSString:@"INTO "])) appendWithNSString:[((ComYahooSquidbSqlSqlTable *) nil_chk(table_)) getExpression]])) appendWithNSString:@" "];
  ComYahooSquidbSqlInsert_visitColumnsWithJavaLangStringBuilder_(self, builder->sql_);
  if (![((id<JavaUtilList>) nil_chk(valuesToInsert_)) isEmpty]) {
    ComYahooSquidbSqlInsert_visitValuesWithComYahooSquidbSqlSqlBuilder_withBoolean_(self, builder, forSqlValidation);
  }
  else if (query_ != nil) {
    ComYahooSquidbSqlInsert_visitQueryWithComYahooSquidbSqlSqlBuilder_withBoolean_(self, builder, forSqlValidation);
  }
  else {
    (void) [builder->sql_ appendWithNSString:@"DEFAULT VALUES"];
  }
}

- (void)assertValues {
  ComYahooSquidbSqlInsert_assertValues(self);
}

- (void)assertValueSetSizesWithInt:(jint)size {
  ComYahooSquidbSqlInsert_assertValueSetSizesWithInt_(self, size);
}

- (void)visitConflictAlgorithmWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql {
  ComYahooSquidbSqlInsert_visitConflictAlgorithmWithJavaLangStringBuilder_(self, sql);
}

- (void)visitColumnsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql {
  ComYahooSquidbSqlInsert_visitColumnsWithJavaLangStringBuilder_(self, sql);
}

- (void)visitQueryWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder
                                      withBoolean:(jboolean)forSqlValidation {
  ComYahooSquidbSqlInsert_visitQueryWithComYahooSquidbSqlSqlBuilder_withBoolean_(self, builder, forSqlValidation);
}

- (void)visitValuesWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder
                                       withBoolean:(jboolean)forSqlValidation {
  ComYahooSquidbSqlInsert_visitValuesWithComYahooSquidbSqlSqlBuilder_withBoolean_(self, builder, forSqlValidation);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComYahooSquidbSqlSqlTable:", "Insert", NULL, 0x2, NULL, "(Lcom/yahoo/squidb/sql/SqlTable<*>;)V" },
    { "intoWithComYahooSquidbSqlTable:", "into", "Lcom.yahoo.squidb.sql.Insert;", 0x9, NULL, NULL },
    { "intoWithComYahooSquidbSqlView:", "into", "Lcom.yahoo.squidb.sql.Insert;", 0x9, NULL, NULL },
    { "getTable", NULL, "Lcom.yahoo.squidb.sql.SqlTable;", 0x1, NULL, "()Lcom/yahoo/squidb/sql/SqlTable<*>;" },
    { "columnsWithComYahooSquidbSqlPropertyArray:", "columns", "Lcom.yahoo.squidb.sql.Insert;", 0x81, NULL, NULL },
    { "columnsWithNSStringArray:", "columns", "Lcom.yahoo.squidb.sql.Insert;", 0x81, NULL, NULL },
    { "valuesWithNSObjectArray:", "values", "Lcom.yahoo.squidb.sql.Insert;", 0x81, NULL, NULL },
    { "selectWithComYahooSquidbSqlQuery:", "select", "Lcom.yahoo.squidb.sql.Insert;", 0x1, NULL, NULL },
    { "fromValuesWithComYahooSquidbDataValuesStorage:", "fromValues", "Lcom.yahoo.squidb.sql.Insert;", 0x1, NULL, NULL },
    { "defaultValues", NULL, "Lcom.yahoo.squidb.sql.Insert;", 0x1, NULL, NULL },
    { "getNumRows", NULL, "I", 0x1, NULL, NULL },
    { "onConflictWithComYahooSquidbSqlTableStatement_ConflictAlgorithm:", "onConflict", "Lcom.yahoo.squidb.sql.Insert;", 0x1, NULL, NULL },
    { "appendToSqlBuilderWithComYahooSquidbSqlSqlBuilder:withBoolean:", "appendToSqlBuilder", "V", 0x0, NULL, NULL },
    { "assertValues", NULL, "V", 0x2, NULL, NULL },
    { "assertValueSetSizesWithInt:", "assertValueSetSizes", "V", 0x2, NULL, NULL },
    { "visitConflictAlgorithmWithJavaLangStringBuilder:", "visitConflictAlgorithm", "V", 0x2, NULL, NULL },
    { "visitColumnsWithJavaLangStringBuilder:", "visitColumns", "V", 0x2, NULL, NULL },
    { "visitQueryWithComYahooSquidbSqlSqlBuilder:withBoolean:", "visitQuery", "V", 0x2, NULL, NULL },
    { "visitValuesWithComYahooSquidbSqlSqlBuilder:withBoolean:", "visitValues", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "table_", NULL, 0x12, "Lcom.yahoo.squidb.sql.SqlTable;", NULL, "Lcom/yahoo/squidb/sql/SqlTable<*>;", .constantValue.asLong = 0 },
    { "conflictAlgorithm_", NULL, 0x2, "Lcom.yahoo.squidb.sql.TableStatement$ConflictAlgorithm;", NULL, NULL, .constantValue.asLong = 0 },
    { "columns_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "valuesToInsert_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/util/List<Ljava/lang/Object;>;>;", .constantValue.asLong = 0 },
    { "query_", NULL, 0x2, "Lcom.yahoo.squidb.sql.Query;", NULL, NULL, .constantValue.asLong = 0 },
    { "defaultValues_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComYahooSquidbSqlInsert = { 2, "Insert", "com.yahoo.squidb.sql", NULL, 0x1, 19, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComYahooSquidbSqlInsert;
}

@end

void ComYahooSquidbSqlInsert_initWithComYahooSquidbSqlSqlTable_(ComYahooSquidbSqlInsert *self, ComYahooSquidbSqlSqlTable *table) {
  ComYahooSquidbSqlTableStatement_init(self);
  self->conflictAlgorithm_ = JreLoadEnum(ComYahooSquidbSqlTableStatement_ConflictAlgorithm, NONE);
  self->columns_ = new_JavaUtilArrayList_init();
  self->valuesToInsert_ = new_JavaUtilArrayList_init();
  self->table_ = table;
}

ComYahooSquidbSqlInsert *new_ComYahooSquidbSqlInsert_initWithComYahooSquidbSqlSqlTable_(ComYahooSquidbSqlSqlTable *table) {
  ComYahooSquidbSqlInsert *self = [ComYahooSquidbSqlInsert alloc];
  ComYahooSquidbSqlInsert_initWithComYahooSquidbSqlSqlTable_(self, table);
  return self;
}

ComYahooSquidbSqlInsert *create_ComYahooSquidbSqlInsert_initWithComYahooSquidbSqlSqlTable_(ComYahooSquidbSqlSqlTable *table) {
  return new_ComYahooSquidbSqlInsert_initWithComYahooSquidbSqlSqlTable_(table);
}

ComYahooSquidbSqlInsert *ComYahooSquidbSqlInsert_intoWithComYahooSquidbSqlTable_(ComYahooSquidbSqlTable *table) {
  ComYahooSquidbSqlInsert_initialize();
  return new_ComYahooSquidbSqlInsert_initWithComYahooSquidbSqlSqlTable_(table);
}

ComYahooSquidbSqlInsert *ComYahooSquidbSqlInsert_intoWithComYahooSquidbSqlView_(ComYahooSquidbSqlView *view) {
  ComYahooSquidbSqlInsert_initialize();
  return new_ComYahooSquidbSqlInsert_initWithComYahooSquidbSqlSqlTable_(view);
}

void ComYahooSquidbSqlInsert_assertValues(ComYahooSquidbSqlInsert *self) {
  if (![((id<JavaUtilList>) nil_chk(self->valuesToInsert_)) isEmpty]) {
    if ([((id<JavaUtilList>) nil_chk(self->columns_)) isEmpty]) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"No columns were specified to insert into.");
    }
    ComYahooSquidbSqlInsert_assertValueSetSizesWithInt_(self, [self->columns_ size]);
  }
  else if (self->query_ != nil) {
    if ([((id<JavaUtilList>) nil_chk(self->columns_)) size] != [((id<JavaUtilList>) nil_chk([self->query_ getFields])) size]) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Number of properties being selected must match the number of columns specified.");
    }
  }
  else if (!self->defaultValues_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"No values to insert were specified.");
  }
}

void ComYahooSquidbSqlInsert_assertValueSetSizesWithInt_(ComYahooSquidbSqlInsert *self, jint size) {
  for (id<JavaUtilList> __strong valueSet in nil_chk(self->valuesToInsert_)) {
    if ([((id<JavaUtilList>) nil_chk(valueSet)) size] != size) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Number of terms in each values set must match the number of columns specified.");
    }
  }
}

void ComYahooSquidbSqlInsert_visitConflictAlgorithmWithJavaLangStringBuilder_(ComYahooSquidbSqlInsert *self, JavaLangStringBuilder *sql) {
  if (JreLoadEnum(ComYahooSquidbSqlTableStatement_ConflictAlgorithm, NONE) != self->conflictAlgorithm_) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:@"OR "])) appendWithId:self->conflictAlgorithm_])) appendWithNSString:@" "];
  }
}

void ComYahooSquidbSqlInsert_visitColumnsWithJavaLangStringBuilder_(ComYahooSquidbSqlInsert *self, JavaLangStringBuilder *sql) {
  if ([((id<JavaUtilList>) nil_chk(self->columns_)) isEmpty]) {
    return;
  }
  (void) [((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:@"("];
  for (NSString * __strong column in self->columns_) {
    (void) [((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:column])) appendWithNSString:@","];
  }
  (void) [sql deleteCharAtWithInt:[sql length] - 1];
  (void) [sql appendWithNSString:@") "];
}

void ComYahooSquidbSqlInsert_visitQueryWithComYahooSquidbSqlSqlBuilder_withBoolean_(ComYahooSquidbSqlInsert *self, ComYahooSquidbSqlSqlBuilder *builder, jboolean forSqlValidation) {
  [((ComYahooSquidbSqlQuery *) nil_chk(self->query_)) appendToSqlBuilderWithComYahooSquidbSqlSqlBuilder:builder withBoolean:forSqlValidation];
}

void ComYahooSquidbSqlInsert_visitValuesWithComYahooSquidbSqlSqlBuilder_withBoolean_(ComYahooSquidbSqlInsert *self, ComYahooSquidbSqlSqlBuilder *builder, jboolean forSqlValidation) {
  if ([((ComYahooSquidbUtilityVersionCode *) nil_chk(((ComYahooSquidbSqlSqlBuilder *) nil_chk(builder))->sqliteVersion_)) isLessThanWithComYahooSquidbUtilityVersionCode:JreLoadStatic(ComYahooSquidbUtilityVersionCode, V3_7_11)] && [((id<JavaUtilList>) nil_chk(self->valuesToInsert_)) size] > 1) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Can't insert with multiple sets of values below SQLite version 3.7.11");
  }
  (void) [((JavaLangStringBuilder *) nil_chk(builder->sql_)) appendWithNSString:@"VALUES "];
  for (id<JavaUtilList> __strong valuesList in nil_chk(self->valuesToInsert_)) {
    if ([((id<JavaUtilList>) nil_chk(valuesList)) isEmpty]) {
      continue;
    }
    (void) [builder->sql_ appendWithNSString:@"("];
    for (id __strong value in valuesList) {
      [builder addValueToSqlWithId:value withBoolean:forSqlValidation];
      (void) [builder->sql_ appendWithNSString:@","];
    }
    (void) [builder->sql_ deleteCharAtWithInt:[builder->sql_ length] - 1];
    (void) [builder->sql_ appendWithNSString:@"),"];
  }
  (void) [builder->sql_ deleteCharAtWithInt:[builder->sql_ length] - 1];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbSqlInsert)
