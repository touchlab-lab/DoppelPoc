//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/squidb/squidb/src/com/yahoo/squidb/sql/SqlBuilder.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/yahoo/squidb/sql/CompilableWithArguments.h"
#include "com/yahoo/squidb/sql/DBObject.h"
#include "com/yahoo/squidb/sql/Query.h"
#include "com/yahoo/squidb/sql/SqlBuilder.h"
#include "com/yahoo/squidb/sql/SqlStatement.h"
#include "com/yahoo/squidb/sql/SqlUtils.h"
#include "com/yahoo/squidb/utility/VersionCode.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@interface ComYahooSquidbSqlSqlBuilder () {
 @public
  jboolean needsValidation_;
}

@end

inline jint ComYahooSquidbSqlSqlBuilder_get_STRING_BUILDER_INITIAL_CAPACITY();
#define ComYahooSquidbSqlSqlBuilder_STRING_BUILDER_INITIAL_CAPACITY 128
J2OBJC_STATIC_FIELD_CONSTANT(ComYahooSquidbSqlSqlBuilder, STRING_BUILDER_INITIAL_CAPACITY, jint)

@implementation ComYahooSquidbSqlSqlBuilder

- (instancetype)initWithComYahooSquidbUtilityVersionCode:(ComYahooSquidbUtilityVersionCode *)sqliteVersion
                                             withBoolean:(jboolean)withBoundArguments {
  ComYahooSquidbSqlSqlBuilder_initWithComYahooSquidbUtilityVersionCode_withBoolean_(self, sqliteVersion, withBoundArguments);
  return self;
}

- (NSString *)getSqlString {
  return [((JavaLangStringBuilder *) nil_chk(sql_)) description];
}

- (id<JavaUtilList>)getBoundArguments {
  return args_;
}

- (jboolean)needsValidation {
  return needsValidation_;
}

- (void)setNeedsValidation {
  needsValidation_ = true;
}

- (void)addValueToSqlWithId:(id)value
                withBoolean:(jboolean)forSqlValidation {
  if ([value isKindOfClass:[ComYahooSquidbSqlDBObject class]]) {
    [((ComYahooSquidbSqlDBObject *) nil_chk(((ComYahooSquidbSqlDBObject *) cast_chk(value, [ComYahooSquidbSqlDBObject class])))) appendQualifiedExpressionWithComYahooSquidbSqlSqlBuilder:self withBoolean:forSqlValidation];
  }
  else if ([value isKindOfClass:[ComYahooSquidbSqlQuery class]]) {
    ComYahooSquidbSqlQuery *query = (ComYahooSquidbSqlQuery *) cast_chk(value, [ComYahooSquidbSqlQuery class]);
    (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:@"("];
    [((ComYahooSquidbSqlQuery *) nil_chk(query)) appendToSqlBuilderWithComYahooSquidbSqlSqlBuilder:self withBoolean:forSqlValidation];
    (void) [sql_ appendWithNSString:@")"];
  }
  else if ([value isKindOfClass:[ComYahooSquidbSqlCompilableWithArguments class]]) {
    [((ComYahooSquidbSqlCompilableWithArguments *) nil_chk(((ComYahooSquidbSqlCompilableWithArguments *) cast_chk(value, [ComYahooSquidbSqlCompilableWithArguments class])))) appendToSqlBuilderWithComYahooSquidbSqlSqlBuilder:self withBoolean:forSqlValidation];
  }
  else if ([JavaUtilCollection_class_() isInstance:value]) {
    [self addCollectionArgWithJavaUtilCollection:(id<JavaUtilCollection>) cast_check(value, JavaUtilCollection_class_())];
  }
  else if (args_ == nil) {
    (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:ComYahooSquidbSqlSqlUtils_toSanitizedStringWithId_(value)];
  }
  else {
    if (value != nil) {
      (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:ComYahooSquidbSqlSqlStatement_REPLACEABLE_PARAMETER];
      [args_ addWithId:value];
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:@"NULL"];
    }
  }
}

- (void)addCollectionArgWithJavaUtilCollection:(id<JavaUtilCollection>)value {
  if (value != nil) {
    if (args_ == nil) {
      ComYahooSquidbSqlSqlUtils_addInlineCollectionToSqlStringWithJavaLangStringBuilder_withJavaUtilCollection_(sql_, value);
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:ComYahooSquidbSqlSqlStatement_REPLACEABLE_ARRAY_PARAMETER];
      [args_ addWithId:value];
    }
  }
}

- (void)appendConcatenatedCompilablesWithJavaUtilList:(id<JavaUtilList>)compilables
                                         withNSString:(NSString *)separator
                                          withBoolean:(jboolean)forSqlValidation {
  if (compilables != nil && ![compilables isEmpty]) {
    jboolean needSeparator = false;
    for (ComYahooSquidbSqlCompilableWithArguments * __strong compilable in compilables) {
      if (needSeparator) {
        (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:separator];
      }
      needSeparator = true;
      [((ComYahooSquidbSqlCompilableWithArguments *) nil_chk(compilable)) appendToSqlBuilderWithComYahooSquidbSqlSqlBuilder:self withBoolean:forSqlValidation];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComYahooSquidbUtilityVersionCode:withBoolean:", "SqlBuilder", NULL, 0x0, NULL, NULL },
    { "getSqlString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getBoundArguments", NULL, "Ljava.util.List;", 0x0, NULL, "()Ljava/util/List<Ljava/lang/Object;>;" },
    { "needsValidation", NULL, "Z", 0x1, NULL, NULL },
    { "setNeedsValidation", NULL, "V", 0x1, NULL, NULL },
    { "addValueToSqlWithId:withBoolean:", "addValueToSql", "V", 0x1, NULL, NULL },
    { "addCollectionArgWithJavaUtilCollection:", "addCollectionArg", "V", 0x0, NULL, "(Ljava/util/Collection<*>;)V" },
    { "appendConcatenatedCompilablesWithJavaUtilList:withNSString:withBoolean:", "appendConcatenatedCompilables", "V", 0x0, NULL, "(Ljava/util/List<+Lcom/yahoo/squidb/sql/CompilableWithArguments;>;Ljava/lang/String;Z)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STRING_BUILDER_INITIAL_CAPACITY", "STRING_BUILDER_INITIAL_CAPACITY", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComYahooSquidbSqlSqlBuilder_STRING_BUILDER_INITIAL_CAPACITY },
    { "sql_", NULL, 0x11, "Ljava.lang.StringBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "sqliteVersion_", NULL, 0x11, "Lcom.yahoo.squidb.utility.VersionCode;", NULL, NULL, .constantValue.asLong = 0 },
    { "args_", NULL, 0x10, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "needsValidation_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComYahooSquidbSqlSqlBuilder = { 2, "SqlBuilder", "com.yahoo.squidb.sql", NULL, 0x11, 8, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComYahooSquidbSqlSqlBuilder;
}

@end

void ComYahooSquidbSqlSqlBuilder_initWithComYahooSquidbUtilityVersionCode_withBoolean_(ComYahooSquidbSqlSqlBuilder *self, ComYahooSquidbUtilityVersionCode *sqliteVersion, jboolean withBoundArguments) {
  NSObject_init(self);
  self->sql_ = new_JavaLangStringBuilder_initWithInt_(ComYahooSquidbSqlSqlBuilder_STRING_BUILDER_INITIAL_CAPACITY);
  self->needsValidation_ = false;
  self->sqliteVersion_ = sqliteVersion;
  self->args_ = withBoundArguments ? new_JavaUtilArrayList_init() : nil;
}

ComYahooSquidbSqlSqlBuilder *new_ComYahooSquidbSqlSqlBuilder_initWithComYahooSquidbUtilityVersionCode_withBoolean_(ComYahooSquidbUtilityVersionCode *sqliteVersion, jboolean withBoundArguments) {
  ComYahooSquidbSqlSqlBuilder *self = [ComYahooSquidbSqlSqlBuilder alloc];
  ComYahooSquidbSqlSqlBuilder_initWithComYahooSquidbUtilityVersionCode_withBoolean_(self, sqliteVersion, withBoundArguments);
  return self;
}

ComYahooSquidbSqlSqlBuilder *create_ComYahooSquidbSqlSqlBuilder_initWithComYahooSquidbUtilityVersionCode_withBoolean_(ComYahooSquidbUtilityVersionCode *sqliteVersion, jboolean withBoundArguments) {
  return new_ComYahooSquidbSqlSqlBuilder_initWithComYahooSquidbUtilityVersionCode_withBoolean_(sqliteVersion, withBoundArguments);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbSqlSqlBuilder)
