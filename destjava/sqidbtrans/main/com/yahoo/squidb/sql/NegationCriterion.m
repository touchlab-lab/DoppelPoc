//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/squidb/squidb/src/com/yahoo/squidb/sql/NegationCriterion.java
//

#include "J2ObjC_source.h"
#include "com/yahoo/squidb/sql/Criterion.h"
#include "com/yahoo/squidb/sql/NegationCriterion.h"
#include "com/yahoo/squidb/sql/Operator.h"
#include "com/yahoo/squidb/sql/SqlBuilder.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"

@interface ComYahooSquidbSqlNegationCriterion () {
 @public
  ComYahooSquidbSqlCriterion *toNegate_;
}

@end

J2OBJC_FIELD_SETTER(ComYahooSquidbSqlNegationCriterion, toNegate_, ComYahooSquidbSqlCriterion *)

@implementation ComYahooSquidbSqlNegationCriterion

- (instancetype)initWithComYahooSquidbSqlCriterion:(ComYahooSquidbSqlCriterion *)toNegate {
  ComYahooSquidbSqlNegationCriterion_initWithComYahooSquidbSqlCriterion_(self, toNegate);
  return self;
}

- (void)populateWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder
                                    withBoolean:(jboolean)forSqlValidation {
  (void) [((JavaLangStringBuilder *) nil_chk(((ComYahooSquidbSqlSqlBuilder *) nil_chk(builder))->sql_)) appendWithId:operator__];
  [((ComYahooSquidbSqlCriterion *) nil_chk(toNegate_)) appendToSqlBuilderWithComYahooSquidbSqlSqlBuilder:builder withBoolean:forSqlValidation];
}

- (ComYahooSquidbSqlCriterion *)negate {
  return toNegate_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComYahooSquidbSqlCriterion:", "NegationCriterion", NULL, 0x0, NULL, NULL },
    { "populateWithComYahooSquidbSqlSqlBuilder:withBoolean:", "populate", "V", 0x4, NULL, NULL },
    { "negate", NULL, "Lcom.yahoo.squidb.sql.Criterion;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "toNegate_", NULL, 0x12, "Lcom.yahoo.squidb.sql.Criterion;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComYahooSquidbSqlNegationCriterion = { 2, "NegationCriterion", "com.yahoo.squidb.sql", NULL, 0x0, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComYahooSquidbSqlNegationCriterion;
}

@end

void ComYahooSquidbSqlNegationCriterion_initWithComYahooSquidbSqlCriterion_(ComYahooSquidbSqlNegationCriterion *self, ComYahooSquidbSqlCriterion *toNegate) {
  ComYahooSquidbSqlCriterion_initWithComYahooSquidbSqlOperator_(self, JreLoadEnum(ComYahooSquidbSqlOperator, not));
  if (toNegate == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't negate a null criterion");
  }
  self->toNegate_ = toNegate;
}

ComYahooSquidbSqlNegationCriterion *new_ComYahooSquidbSqlNegationCriterion_initWithComYahooSquidbSqlCriterion_(ComYahooSquidbSqlCriterion *toNegate) {
  ComYahooSquidbSqlNegationCriterion *self = [ComYahooSquidbSqlNegationCriterion alloc];
  ComYahooSquidbSqlNegationCriterion_initWithComYahooSquidbSqlCriterion_(self, toNegate);
  return self;
}

ComYahooSquidbSqlNegationCriterion *create_ComYahooSquidbSqlNegationCriterion_initWithComYahooSquidbSqlCriterion_(ComYahooSquidbSqlCriterion *toNegate) {
  return new_ComYahooSquidbSqlNegationCriterion_initWithComYahooSquidbSqlCriterion_(toNegate);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbSqlNegationCriterion)
