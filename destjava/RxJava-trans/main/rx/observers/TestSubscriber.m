//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/observers/TestSubscriber.java
//

#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "rx/Observer.h"
#include "rx/Subscriber.h"
#include "rx/observers/TestObserver.h"
#include "rx/observers/TestSubscriber.h"

@interface RxObserversTestSubscriber () {
 @public
  RxObserversTestObserver *testObserver_;
  JavaUtilConcurrentCountDownLatch *latch_;
  volatile_id lastSeenThread_;
}

@end

J2OBJC_FIELD_SETTER(RxObserversTestSubscriber, testObserver_, RxObserversTestObserver *)
J2OBJC_FIELD_SETTER(RxObserversTestSubscriber, latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_VOLATILE_FIELD_SETTER(RxObserversTestSubscriber, lastSeenThread_, JavaLangThread *)

@interface RxObserversTestSubscriber_$1 : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;
#ifdef J2OBJC_RENAME_ALIASES
#define onErrorWithJavaLangThrowable onErrorWithNSException
#endif // J2OBJC_RENAME_ALIASES

- (void)onNextWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversTestSubscriber_$1)

__attribute__((unused)) static void RxObserversTestSubscriber_$1_init(RxObserversTestSubscriber_$1 *self);

__attribute__((unused)) static RxObserversTestSubscriber_$1 *new_RxObserversTestSubscriber_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversTestSubscriber_$1 *create_RxObserversTestSubscriber_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObserversTestSubscriber_$1)

@implementation RxObserversTestSubscriber

- (instancetype)initWithRxSubscriber:(RxSubscriber *)delegate {
  RxObserversTestSubscriber_initWithRxSubscriber_(self, delegate);
  return self;
}

- (instancetype)initWithRxObserver:(id<RxObserver>)delegate {
  RxObserversTestSubscriber_initWithRxObserver_(self, delegate);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestSubscriber_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCompleted {
  @try {
    (void) JreVolatileStrongAssign(&lastSeenThread_, JavaLangThread_currentThread());
    [((RxObserversTestObserver *) nil_chk(testObserver_)) onCompleted];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
  }
}

- (id<JavaUtilList>)getOnCompletedEvents {
  return [((RxObserversTestObserver *) nil_chk(testObserver_)) getOnCompletedEvents];
}

- (void)onErrorWithNSException:(NSException *)e {
  @try {
    (void) JreVolatileStrongAssign(&lastSeenThread_, JavaLangThread_currentThread());
    [((RxObserversTestObserver *) nil_chk(testObserver_)) onErrorWithNSException:e];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
  }
}

- (id<JavaUtilList>)getOnErrorEvents {
  return [((RxObserversTestObserver *) nil_chk(testObserver_)) getOnErrorEvents];
}

- (void)onNextWithId:(id)t {
  (void) JreVolatileStrongAssign(&lastSeenThread_, JavaLangThread_currentThread());
  [((RxObserversTestObserver *) nil_chk(testObserver_)) onNextWithId:t];
}

- (void)requestMoreWithLong:(jlong)n {
  [self requestWithLong:n];
}

- (id<JavaUtilList>)getOnNextEvents {
  return [((RxObserversTestObserver *) nil_chk(testObserver_)) getOnNextEvents];
}

- (void)assertReceivedOnNextWithJavaUtilList:(id<JavaUtilList>)items {
  [((RxObserversTestObserver *) nil_chk(testObserver_)) assertReceivedOnNextWithJavaUtilList:items];
}

- (void)assertTerminalEvent {
  [((RxObserversTestObserver *) nil_chk(testObserver_)) assertTerminalEvent];
}

- (void)assertUnsubscribed {
  if (![self isUnsubscribed]) {
    @throw new_JavaLangAssertionError_initWithId_(@"Not unsubscribed.");
  }
}

- (void)assertNoErrors {
  if ([((id<JavaUtilList>) nil_chk([self getOnErrorEvents])) size] > 0) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$I", @"Unexpected onError events: ", [((id<JavaUtilList>) nil_chk([self getOnErrorEvents])) size]), [((id<JavaUtilList>) nil_chk([self getOnErrorEvents])) getWithInt:0]);
  }
}

- (void)awaitTerminalEvent {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) await];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(@"Interrupted", e);
  }
}

- (void)awaitTerminalEventWithLong:(jlong)timeout
    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) awaitWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(@"Interrupted", e);
  }
}

- (void)awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:(jlong)timeout
                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    [self awaitTerminalEventWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
  }
  @catch (JavaLangRuntimeException *e) {
    [self unsubscribe];
  }
}

- (JavaLangThread *)getLastSeenThread {
  return JreLoadVolatileId(&lastSeenThread_);
}

- (void)dealloc {
  JreReleaseVolatile(&lastSeenThread_);
}

- (void)__javaClone:(RxObserversTestSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&lastSeenThread_, &original->lastSeenThread_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxSubscriber:", "TestSubscriber", NULL, 0x1, NULL, "(Lrx/Subscriber<TT;>;)V" },
    { "initWithRxObserver:", "TestSubscriber", NULL, 0x1, NULL, "(Lrx/Observer<TT;>;)V" },
    { "init", "TestSubscriber", NULL, 0x1, NULL, NULL },
    { "onCompleted", NULL, "V", 0x1, NULL, NULL },
    { "getOnCompletedEvents", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lrx/Notification<TT;>;>;" },
    { "onErrorWithNSException:", "onError", "V", 0x1, NULL, NULL },
    { "getOnErrorEvents", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Ljava/lang/Throwable;>;" },
    { "onNextWithId:", "onNext", "V", 0x1, NULL, "(TT;)V" },
    { "requestMoreWithLong:", "requestMore", "V", 0x1, NULL, NULL },
    { "getOnNextEvents", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<TT;>;" },
    { "assertReceivedOnNextWithJavaUtilList:", "assertReceivedOnNext", "V", 0x1, NULL, "(Ljava/util/List<TT;>;)V" },
    { "assertTerminalEvent", NULL, "V", 0x1, NULL, NULL },
    { "assertUnsubscribed", NULL, "V", 0x1, NULL, NULL },
    { "assertNoErrors", NULL, "V", 0x1, NULL, NULL },
    { "awaitTerminalEvent", NULL, "V", 0x1, NULL, NULL },
    { "awaitTerminalEventWithLong:withJavaUtilConcurrentTimeUnit:", "awaitTerminalEvent", "V", 0x1, NULL, NULL },
    { "awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:withJavaUtilConcurrentTimeUnit:", "awaitTerminalEventAndUnsubscribeOnTimeout", "V", 0x1, NULL, NULL },
    { "getLastSeenThread", NULL, "Ljava.lang.Thread;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "testObserver_", NULL, 0x12, "Lrx.observers.TestObserver;", NULL, "Lrx/observers/TestObserver<TT;>;", .constantValue.asLong = 0 },
    { "latch_", NULL, 0x12, "Ljava.util.concurrent.CountDownLatch;", NULL, NULL, .constantValue.asLong = 0 },
    { "lastSeenThread_", NULL, 0x42, "Ljava.lang.Thread;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjcClassInfo _RxObserversTestSubscriber = { 2, "TestSubscriber", "rx.observers", NULL, 0x1, 18, methods, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;" };
  return &_RxObserversTestSubscriber;
}

@end

void RxObserversTestSubscriber_initWithRxSubscriber_(RxObserversTestSubscriber *self, RxSubscriber *delegate) {
  RxSubscriber_init(self);
  self->latch_ = new_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  self->testObserver_ = new_RxObserversTestObserver_initWithRxObserver_(delegate);
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithRxSubscriber_(RxSubscriber *delegate) {
  RxObserversTestSubscriber *self = [RxObserversTestSubscriber alloc];
  RxObserversTestSubscriber_initWithRxSubscriber_(self, delegate);
  return self;
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithRxSubscriber_(RxSubscriber *delegate) {
  return new_RxObserversTestSubscriber_initWithRxSubscriber_(delegate);
}

void RxObserversTestSubscriber_initWithRxObserver_(RxObserversTestSubscriber *self, id<RxObserver> delegate) {
  RxSubscriber_init(self);
  self->latch_ = new_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  self->testObserver_ = new_RxObserversTestObserver_initWithRxObserver_(delegate);
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithRxObserver_(id<RxObserver> delegate) {
  RxObserversTestSubscriber *self = [RxObserversTestSubscriber alloc];
  RxObserversTestSubscriber_initWithRxObserver_(self, delegate);
  return self;
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithRxObserver_(id<RxObserver> delegate) {
  return new_RxObserversTestSubscriber_initWithRxObserver_(delegate);
}

void RxObserversTestSubscriber_init(RxObserversTestSubscriber *self) {
  RxSubscriber_init(self);
  self->latch_ = new_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  self->testObserver_ = new_RxObserversTestObserver_initWithRxObserver_(new_RxObserversTestSubscriber_$1_init());
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_init() {
  RxObserversTestSubscriber *self = [RxObserversTestSubscriber alloc];
  RxObserversTestSubscriber_init(self);
  return self;
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_init() {
  return new_RxObserversTestSubscriber_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversTestSubscriber)

@implementation RxObserversTestSubscriber_$1

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(id)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestSubscriber_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onCompleted", NULL, "V", 0x1, NULL, NULL },
    { "onErrorWithNSException:", "onError", "V", 0x1, NULL, NULL },
    { "onNextWithId:", "onNext", "V", 0x1, NULL, "(TT;)V" },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RxObserversTestSubscriber", "init" };
  static const J2ObjcClassInfo _RxObserversTestSubscriber_$1 = { 2, "", "rx.observers", "TestSubscriber", 0x8008, 4, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lrx/Observer<TT;>;" };
  return &_RxObserversTestSubscriber_$1;
}

@end

void RxObserversTestSubscriber_$1_init(RxObserversTestSubscriber_$1 *self) {
  NSObject_init(self);
}

RxObserversTestSubscriber_$1 *new_RxObserversTestSubscriber_$1_init() {
  RxObserversTestSubscriber_$1 *self = [RxObserversTestSubscriber_$1 alloc];
  RxObserversTestSubscriber_$1_init(self);
  return self;
}

RxObserversTestSubscriber_$1 *create_RxObserversTestSubscriber_$1_init() {
  return new_RxObserversTestSubscriber_$1_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversTestSubscriber_$1)
