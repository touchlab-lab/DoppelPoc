//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/schedulers/EventLoopsScheduler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Runtime.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/TimeUnit.h"
#include "rx/Scheduler.h"
#include "rx/Subscription.h"
#include "rx/functions/Action0.h"
#include "rx/internal/schedulers/NewThreadWorker.h"
#include "rx/internal/schedulers/ScheduledAction.h"
#include "rx/internal/util/RxThreadFactory.h"
#include "rx/schedulers/EventLoopsScheduler.h"
#include "rx/subscriptions/CompositeSubscription.h"
#include "rx/subscriptions/Subscriptions.h"

inline NSString *RxSchedulersEventLoopsScheduler_get_THREAD_NAME_PREFIX();
static NSString *RxSchedulersEventLoopsScheduler_THREAD_NAME_PREFIX = @"RxComputationThreadPool-";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSchedulersEventLoopsScheduler, THREAD_NAME_PREFIX, NSString *)

inline RxInternalUtilRxThreadFactory *RxSchedulersEventLoopsScheduler_get_THREAD_FACTORY();
static RxInternalUtilRxThreadFactory *RxSchedulersEventLoopsScheduler_THREAD_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSchedulersEventLoopsScheduler, THREAD_FACTORY, RxInternalUtilRxThreadFactory *)

@interface RxSchedulersEventLoopsScheduler_EventLoopWorker : RxScheduler_Worker {
 @public
  RxSubscriptionsCompositeSubscription *innerSubscription_;
  RxSchedulersEventLoopsScheduler_PoolWorker *poolWorker_;
}

- (instancetype)initWithRxSchedulersEventLoopsScheduler_PoolWorker:(RxSchedulersEventLoopsScheduler_PoolWorker *)poolWorker;

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersEventLoopsScheduler_EventLoopWorker)

J2OBJC_FIELD_SETTER(RxSchedulersEventLoopsScheduler_EventLoopWorker, innerSubscription_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxSchedulersEventLoopsScheduler_EventLoopWorker, poolWorker_, RxSchedulersEventLoopsScheduler_PoolWorker *)

__attribute__((unused)) static void RxSchedulersEventLoopsScheduler_EventLoopWorker_initWithRxSchedulersEventLoopsScheduler_PoolWorker_(RxSchedulersEventLoopsScheduler_EventLoopWorker *self, RxSchedulersEventLoopsScheduler_PoolWorker *poolWorker);

__attribute__((unused)) static RxSchedulersEventLoopsScheduler_EventLoopWorker *new_RxSchedulersEventLoopsScheduler_EventLoopWorker_initWithRxSchedulersEventLoopsScheduler_PoolWorker_(RxSchedulersEventLoopsScheduler_PoolWorker *poolWorker) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersEventLoopsScheduler_EventLoopWorker *create_RxSchedulersEventLoopsScheduler_EventLoopWorker_initWithRxSchedulersEventLoopsScheduler_PoolWorker_(RxSchedulersEventLoopsScheduler_PoolWorker *poolWorker);

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersEventLoopsScheduler_EventLoopWorker)

J2OBJC_INITIALIZED_DEFN(RxSchedulersEventLoopsScheduler)

@implementation RxSchedulersEventLoopsScheduler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersEventLoopsScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (RxScheduler_Worker *)createWorker {
  return new_RxSchedulersEventLoopsScheduler_EventLoopWorker_initWithRxSchedulersEventLoopsScheduler_PoolWorker_([((RxSchedulersEventLoopsScheduler_FixedSchedulerPool *) nil_chk(pool_)) getEventLoop]);
}

+ (void)initialize {
  if (self == [RxSchedulersEventLoopsScheduler class]) {
    RxSchedulersEventLoopsScheduler_THREAD_FACTORY = new_RxInternalUtilRxThreadFactory_initWithNSString_(RxSchedulersEventLoopsScheduler_THREAD_NAME_PREFIX);
    J2OBJC_SET_INITIALIZED(RxSchedulersEventLoopsScheduler)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "EventLoopsScheduler", NULL, 0x0, NULL, NULL },
    { "createWorker", NULL, "Lrx.Scheduler$Worker;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "THREAD_NAME_PREFIX", "THREAD_NAME_PREFIX", 0x1a, "Ljava.lang.String;", &RxSchedulersEventLoopsScheduler_THREAD_NAME_PREFIX, NULL, .constantValue.asLong = 0 },
    { "THREAD_FACTORY", "THREAD_FACTORY", 0x1a, "Lrx.internal.util.RxThreadFactory;", &RxSchedulersEventLoopsScheduler_THREAD_FACTORY, NULL, .constantValue.asLong = 0 },
    { "pool_", NULL, 0x10, "Lrx.schedulers.EventLoopsScheduler$FixedSchedulerPool;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lrx.schedulers.EventLoopsScheduler$FixedSchedulerPool;", "Lrx.schedulers.EventLoopsScheduler$EventLoopWorker;", "Lrx.schedulers.EventLoopsScheduler$PoolWorker;"};
  static const J2ObjcClassInfo _RxSchedulersEventLoopsScheduler = { 2, "EventLoopsScheduler", "rx.schedulers", NULL, 0x0, 2, methods, 3, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_RxSchedulersEventLoopsScheduler;
}

@end

void RxSchedulersEventLoopsScheduler_init(RxSchedulersEventLoopsScheduler *self) {
  RxScheduler_init(self);
  self->pool_ = new_RxSchedulersEventLoopsScheduler_FixedSchedulerPool_init();
}

RxSchedulersEventLoopsScheduler *new_RxSchedulersEventLoopsScheduler_init() {
  RxSchedulersEventLoopsScheduler *self = [RxSchedulersEventLoopsScheduler alloc];
  RxSchedulersEventLoopsScheduler_init(self);
  return self;
}

RxSchedulersEventLoopsScheduler *create_RxSchedulersEventLoopsScheduler_init() {
  return new_RxSchedulersEventLoopsScheduler_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersEventLoopsScheduler)

@implementation RxSchedulersEventLoopsScheduler_FixedSchedulerPool

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersEventLoopsScheduler_FixedSchedulerPool_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (RxSchedulersEventLoopsScheduler_PoolWorker *)getEventLoop {
  return IOSObjectArray_Get(nil_chk(eventLoops_), (jint) (n_++ % cores_));
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "FixedSchedulerPool", NULL, 0x0, NULL, NULL },
    { "getEventLoop", NULL, "Lrx.schedulers.EventLoopsScheduler$PoolWorker;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cores_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "eventLoops_", NULL, 0x10, "[Lrx.schedulers.EventLoopsScheduler$PoolWorker;", NULL, NULL, .constantValue.asLong = 0 },
    { "n_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxSchedulersEventLoopsScheduler_FixedSchedulerPool = { 2, "FixedSchedulerPool", "rx.schedulers", "EventLoopsScheduler", 0x18, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxSchedulersEventLoopsScheduler_FixedSchedulerPool;
}

@end

void RxSchedulersEventLoopsScheduler_FixedSchedulerPool_init(RxSchedulersEventLoopsScheduler_FixedSchedulerPool *self) {
  NSObject_init(self);
  self->cores_ = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors];
  self->eventLoops_ = [IOSObjectArray newArrayWithLength:self->cores_ type:RxSchedulersEventLoopsScheduler_PoolWorker_class_()];
  for (jint i = 0; i < self->cores_; i++) {
    (void) IOSObjectArray_Set(self->eventLoops_, i, new_RxSchedulersEventLoopsScheduler_PoolWorker_initWithJavaUtilConcurrentThreadFactory_(JreLoadStatic(RxSchedulersEventLoopsScheduler, THREAD_FACTORY)));
  }
}

RxSchedulersEventLoopsScheduler_FixedSchedulerPool *new_RxSchedulersEventLoopsScheduler_FixedSchedulerPool_init() {
  RxSchedulersEventLoopsScheduler_FixedSchedulerPool *self = [RxSchedulersEventLoopsScheduler_FixedSchedulerPool alloc];
  RxSchedulersEventLoopsScheduler_FixedSchedulerPool_init(self);
  return self;
}

RxSchedulersEventLoopsScheduler_FixedSchedulerPool *create_RxSchedulersEventLoopsScheduler_FixedSchedulerPool_init() {
  return new_RxSchedulersEventLoopsScheduler_FixedSchedulerPool_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersEventLoopsScheduler_FixedSchedulerPool)

@implementation RxSchedulersEventLoopsScheduler_EventLoopWorker

- (instancetype)initWithRxSchedulersEventLoopsScheduler_PoolWorker:(RxSchedulersEventLoopsScheduler_PoolWorker *)poolWorker {
  RxSchedulersEventLoopsScheduler_EventLoopWorker_initWithRxSchedulersEventLoopsScheduler_PoolWorker_(self, poolWorker);
  return self;
}

- (void)unsubscribe {
  [((RxSubscriptionsCompositeSubscription *) nil_chk(innerSubscription_)) unsubscribe];
}

- (jboolean)isUnsubscribed {
  return [((RxSubscriptionsCompositeSubscription *) nil_chk(innerSubscription_)) isUnsubscribed];
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  return [self scheduleWithRxFunctionsAction0:action withLong:0 withJavaUtilConcurrentTimeUnit:nil];
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if ([((RxSubscriptionsCompositeSubscription *) nil_chk(innerSubscription_)) isUnsubscribed]) {
    return RxSubscriptionsSubscriptions_empty();
  }
  RxInternalSchedulersScheduledAction *s = [((RxSchedulersEventLoopsScheduler_PoolWorker *) nil_chk(poolWorker_)) scheduleActualWithRxFunctionsAction0:action withLong:delayTime withJavaUtilConcurrentTimeUnit:unit];
  [innerSubscription_ addWithRxSubscription:s];
  [((RxInternalSchedulersScheduledAction *) nil_chk(s)) addParentWithRxSubscriptionsCompositeSubscription:innerSubscription_];
  return s;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxSchedulersEventLoopsScheduler_PoolWorker:", "EventLoopWorker", NULL, 0x0, NULL, NULL },
    { "unsubscribe", NULL, "V", 0x1, NULL, NULL },
    { "isUnsubscribed", NULL, "Z", 0x1, NULL, NULL },
    { "scheduleWithRxFunctionsAction0:", "schedule", "Lrx.Subscription;", 0x1, NULL, NULL },
    { "scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:", "schedule", "Lrx.Subscription;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "innerSubscription_", NULL, 0x12, "Lrx.subscriptions.CompositeSubscription;", NULL, NULL, .constantValue.asLong = 0 },
    { "poolWorker_", NULL, 0x12, "Lrx.schedulers.EventLoopsScheduler$PoolWorker;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxSchedulersEventLoopsScheduler_EventLoopWorker = { 2, "EventLoopWorker", "rx.schedulers", "EventLoopsScheduler", 0xa, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxSchedulersEventLoopsScheduler_EventLoopWorker;
}

@end

void RxSchedulersEventLoopsScheduler_EventLoopWorker_initWithRxSchedulersEventLoopsScheduler_PoolWorker_(RxSchedulersEventLoopsScheduler_EventLoopWorker *self, RxSchedulersEventLoopsScheduler_PoolWorker *poolWorker) {
  RxScheduler_Worker_init(self);
  self->innerSubscription_ = new_RxSubscriptionsCompositeSubscription_init();
  self->poolWorker_ = poolWorker;
}

RxSchedulersEventLoopsScheduler_EventLoopWorker *new_RxSchedulersEventLoopsScheduler_EventLoopWorker_initWithRxSchedulersEventLoopsScheduler_PoolWorker_(RxSchedulersEventLoopsScheduler_PoolWorker *poolWorker) {
  RxSchedulersEventLoopsScheduler_EventLoopWorker *self = [RxSchedulersEventLoopsScheduler_EventLoopWorker alloc];
  RxSchedulersEventLoopsScheduler_EventLoopWorker_initWithRxSchedulersEventLoopsScheduler_PoolWorker_(self, poolWorker);
  return self;
}

RxSchedulersEventLoopsScheduler_EventLoopWorker *create_RxSchedulersEventLoopsScheduler_EventLoopWorker_initWithRxSchedulersEventLoopsScheduler_PoolWorker_(RxSchedulersEventLoopsScheduler_PoolWorker *poolWorker) {
  return new_RxSchedulersEventLoopsScheduler_EventLoopWorker_initWithRxSchedulersEventLoopsScheduler_PoolWorker_(poolWorker);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersEventLoopsScheduler_EventLoopWorker)

@implementation RxSchedulersEventLoopsScheduler_PoolWorker

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  RxSchedulersEventLoopsScheduler_PoolWorker_initWithJavaUtilConcurrentThreadFactory_(self, threadFactory);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilConcurrentThreadFactory:", "PoolWorker", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _RxSchedulersEventLoopsScheduler_PoolWorker = { 2, "PoolWorker", "rx.schedulers", "EventLoopsScheduler", 0x1a, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxSchedulersEventLoopsScheduler_PoolWorker;
}

@end

void RxSchedulersEventLoopsScheduler_PoolWorker_initWithJavaUtilConcurrentThreadFactory_(RxSchedulersEventLoopsScheduler_PoolWorker *self, id<JavaUtilConcurrentThreadFactory> threadFactory) {
  RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(self, threadFactory);
}

RxSchedulersEventLoopsScheduler_PoolWorker *new_RxSchedulersEventLoopsScheduler_PoolWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  RxSchedulersEventLoopsScheduler_PoolWorker *self = [RxSchedulersEventLoopsScheduler_PoolWorker alloc];
  RxSchedulersEventLoopsScheduler_PoolWorker_initWithJavaUtilConcurrentThreadFactory_(self, threadFactory);
  return self;
}

RxSchedulersEventLoopsScheduler_PoolWorker *create_RxSchedulersEventLoopsScheduler_PoolWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  return new_RxSchedulersEventLoopsScheduler_PoolWorker_initWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersEventLoopsScheduler_PoolWorker)
