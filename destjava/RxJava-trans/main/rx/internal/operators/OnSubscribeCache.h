//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/operators/OnSubscribeCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxInternalOperatorsOnSubscribeCache_INCLUDE_ALL")
#ifdef RxInternalOperatorsOnSubscribeCache_RESTRICT
#define RxInternalOperatorsOnSubscribeCache_INCLUDE_ALL 0
#else
#define RxInternalOperatorsOnSubscribeCache_INCLUDE_ALL 1
#endif
#undef RxInternalOperatorsOnSubscribeCache_RESTRICT

#if !defined (RxInternalOperatorsOnSubscribeCache_) && (RxInternalOperatorsOnSubscribeCache_INCLUDE_ALL || defined(RxInternalOperatorsOnSubscribeCache_INCLUDE))
#define RxInternalOperatorsOnSubscribeCache_

#define RxObservable_RESTRICT 1
#define RxObservable_OnSubscribe_INCLUDE 1
#include "rx/Observable.h"

@class JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater;
@class RxObservable;
@class RxSubjectsSubject;
@class RxSubscriber;

@interface RxInternalOperatorsOnSubscribeCache : NSObject < RxObservable_OnSubscribe > {
 @public
  RxObservable *source_;
  RxSubjectsSubject *cache_;
  volatile_jint sourceSubscribed_;
}

#pragma mark Public

- (instancetype)initWithRxObservable:(RxObservable *)source;

- (instancetype)initWithRxObservable:(RxObservable *)source
                             withInt:(jint)capacity;

- (void)callWithId:(RxSubscriber *)s;

#pragma mark Package-Private

- (instancetype)initWithRxObservable:(RxObservable *)source
               withRxSubjectsSubject:(RxSubjectsSubject *)cache;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOnSubscribeCache)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeCache, source_, RxObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeCache, cache_, RxSubjectsSubject *)

inline JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxInternalOperatorsOnSubscribeCache_get_SRC_SUBSCRIBED_UPDATER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxInternalOperatorsOnSubscribeCache_SRC_SUBSCRIBED_UPDATER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOnSubscribeCache, SRC_SUBSCRIBED_UPDATER, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeCache_initWithRxObservable_(RxInternalOperatorsOnSubscribeCache *self, RxObservable *source);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeCache *new_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_(RxObservable *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeCache *create_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_(RxObservable *source);

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withInt_(RxInternalOperatorsOnSubscribeCache *self, RxObservable *source, jint capacity);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeCache *new_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withInt_(RxObservable *source, jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeCache *create_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withInt_(RxObservable *source, jint capacity);

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withRxSubjectsSubject_(RxInternalOperatorsOnSubscribeCache *self, RxObservable *source, RxSubjectsSubject *cache);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeCache *new_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withRxSubjectsSubject_(RxObservable *source, RxSubjectsSubject *cache) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeCache *create_RxInternalOperatorsOnSubscribeCache_initWithRxObservable_withRxSubjectsSubject_(RxObservable *source, RxSubjectsSubject *cache);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeCache)

#endif

#pragma pop_macro("RxInternalOperatorsOnSubscribeCache_INCLUDE_ALL")
