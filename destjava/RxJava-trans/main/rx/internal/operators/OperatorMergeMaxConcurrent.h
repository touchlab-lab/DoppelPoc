//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/operators/OperatorMergeMaxConcurrent.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxInternalOperatorsOperatorMergeMaxConcurrent_INCLUDE_ALL")
#ifdef RxInternalOperatorsOperatorMergeMaxConcurrent_RESTRICT
#define RxInternalOperatorsOperatorMergeMaxConcurrent_INCLUDE_ALL 0
#else
#define RxInternalOperatorsOperatorMergeMaxConcurrent_INCLUDE_ALL 1
#endif
#undef RxInternalOperatorsOperatorMergeMaxConcurrent_RESTRICT

#if !defined (RxInternalOperatorsOperatorMergeMaxConcurrent_) && (RxInternalOperatorsOperatorMergeMaxConcurrent_INCLUDE_ALL || defined(RxInternalOperatorsOperatorMergeMaxConcurrent_INCLUDE))
#define RxInternalOperatorsOperatorMergeMaxConcurrent_

#define RxObservable_RESTRICT 1
#define RxObservable_Operator_INCLUDE 1
#include "rx/Observable.h"

@class RxSubscriber;

@interface RxInternalOperatorsOperatorMergeMaxConcurrent : NSObject < RxObservable_Operator > {
 @public
  jint maxConcurrency_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)maxConcurrency;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMergeMaxConcurrent)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorMergeMaxConcurrent_initWithInt_(RxInternalOperatorsOperatorMergeMaxConcurrent *self, jint maxConcurrency);

FOUNDATION_EXPORT RxInternalOperatorsOperatorMergeMaxConcurrent *new_RxInternalOperatorsOperatorMergeMaxConcurrent_initWithInt_(jint maxConcurrency) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorMergeMaxConcurrent *create_RxInternalOperatorsOperatorMergeMaxConcurrent_initWithInt_(jint maxConcurrency);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorMergeMaxConcurrent)

#endif

#if !defined (RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber_) && (RxInternalOperatorsOperatorMergeMaxConcurrent_INCLUDE_ALL || defined(RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber_INCLUDE))
#define RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber_

#define RxSubscriber_RESTRICT 1
#define RxSubscriber_INCLUDE 1
#include "rx/Subscriber.h"

@class JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater;
@class RxObservable;
@class RxSubscriptionsCompositeSubscription;
@protocol JavaUtilQueue;

@interface RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber : RxSubscriber {
 @public
  jint maxConcurrency_;
  RxSubscriber *s_;
  RxSubscriptionsCompositeSubscription *csub_;
  id guard_;
  volatile_jint wip_;
  jint active_;
  id<JavaUtilQueue> queue_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)maxConcurrency
           withRxSubscriber:(RxSubscriber *)s
withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)csub;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;
#ifdef J2OBJC_RENAME_ALIASES
#define onErrorWithJavaLangThrowable onErrorWithNSException
#endif // J2OBJC_RENAME_ALIASES

- (void)onNextWithId:(RxObservable *)t;

#pragma mark Package-Private

- (void)subscribeNext;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber, s_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber, csub_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber, guard_, id)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber, queue_, id<JavaUtilQueue>)

inline JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber_get_WIP_UPDATER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber_WIP_UPDATER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber, WIP_UPDATER, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber_initWithInt_withRxSubscriber_withRxSubscriptionsCompositeSubscription_(RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber *self, jint maxConcurrency, RxSubscriber *s, RxSubscriptionsCompositeSubscription *csub);

FOUNDATION_EXPORT RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber *new_RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber_initWithInt_withRxSubscriber_withRxSubscriptionsCompositeSubscription_(jint maxConcurrency, RxSubscriber *s, RxSubscriptionsCompositeSubscription *csub) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber *create_RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber_initWithInt_withRxSubscriber_withRxSubscriptionsCompositeSubscription_(jint maxConcurrency, RxSubscriber *s, RxSubscriptionsCompositeSubscription *csub);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorMergeMaxConcurrent_SourceSubscriber)

#endif

#pragma pop_macro("RxInternalOperatorsOperatorMergeMaxConcurrent_INCLUDE_ALL")
