//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/operators/OperatorObserveOn.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxInternalOperatorsOperatorObserveOn_INCLUDE_ALL")
#ifdef RxInternalOperatorsOperatorObserveOn_RESTRICT
#define RxInternalOperatorsOperatorObserveOn_INCLUDE_ALL 0
#else
#define RxInternalOperatorsOperatorObserveOn_INCLUDE_ALL 1
#endif
#undef RxInternalOperatorsOperatorObserveOn_RESTRICT

#if !defined (RxInternalOperatorsOperatorObserveOn_) && (RxInternalOperatorsOperatorObserveOn_INCLUDE_ALL || defined(RxInternalOperatorsOperatorObserveOn_INCLUDE))
#define RxInternalOperatorsOperatorObserveOn_

#define RxObservable_RESTRICT 1
#define RxObservable_Operator_INCLUDE 1
#include "rx/Observable.h"

@class RxScheduler;
@class RxSubscriber;

@interface RxInternalOperatorsOperatorObserveOn : NSObject < RxObservable_Operator >

#pragma mark Public

- (instancetype)initWithRxScheduler:(RxScheduler *)scheduler;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOn)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_(RxInternalOperatorsOperatorObserveOn *self, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOperatorObserveOn *new_RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_(RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorObserveOn *create_RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_(RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorObserveOn)

#endif

#if !defined (RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe_) && (RxInternalOperatorsOperatorObserveOn_INCLUDE_ALL || defined(RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe_INCLUDE))
#define RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe_

#define RxSubscription_RESTRICT 1
#define RxSubscription_INCLUDE 1
#include "rx/Subscription.h"

@class JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater;
@class RxInternalUtilRxRingBuffer;
@class RxScheduler_Worker;

@interface RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe : NSObject < RxSubscription > {
 @public
  RxScheduler_Worker *worker_;
  volatile_jint once_;
  RxInternalUtilRxRingBuffer *queue_;
  volatile_jboolean unsubscribed_;
}

#pragma mark Public

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)worker
            withRxInternalUtilRxRingBuffer:(RxInternalUtilRxRingBuffer *)queue;

- (jboolean)isUnsubscribed;

- (void)unsubscribe;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe, worker_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe, queue_, RxInternalUtilRxRingBuffer *)

inline JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe_get_ONCE_UPDATER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe_ONCE_UPDATER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe, ONCE_UPDATER, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe_initWithRxScheduler_Worker_withRxInternalUtilRxRingBuffer_(RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe *self, RxScheduler_Worker *worker, RxInternalUtilRxRingBuffer *queue);

FOUNDATION_EXPORT RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe *new_RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe_initWithRxScheduler_Worker_withRxInternalUtilRxRingBuffer_(RxScheduler_Worker *worker, RxInternalUtilRxRingBuffer *queue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe *create_RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe_initWithRxScheduler_Worker_withRxInternalUtilRxRingBuffer_(RxScheduler_Worker *worker, RxInternalUtilRxRingBuffer *queue);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorObserveOn_ScheduledUnsubscribe)

#endif

#pragma pop_macro("RxInternalOperatorsOperatorObserveOn_INCLUDE_ALL")
