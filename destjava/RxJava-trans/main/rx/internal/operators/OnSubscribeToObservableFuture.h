//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/operators/OnSubscribeToObservableFuture.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RxInternalOperatorsOnSubscribeToObservableFuture_INCLUDE_ALL")
#ifdef RxInternalOperatorsOnSubscribeToObservableFuture_RESTRICT
#define RxInternalOperatorsOnSubscribeToObservableFuture_INCLUDE_ALL 0
#else
#define RxInternalOperatorsOnSubscribeToObservableFuture_INCLUDE_ALL 1
#endif
#undef RxInternalOperatorsOnSubscribeToObservableFuture_RESTRICT

#if !defined (RxInternalOperatorsOnSubscribeToObservableFuture_) && (RxInternalOperatorsOnSubscribeToObservableFuture_INCLUDE_ALL || defined(RxInternalOperatorsOnSubscribeToObservableFuture_INCLUDE))
#define RxInternalOperatorsOnSubscribeToObservableFuture_

@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilConcurrentFuture;
@protocol RxObservable_OnSubscribe;

@interface RxInternalOperatorsOnSubscribeToObservableFuture : NSObject

#pragma mark Public

+ (id<RxObservable_OnSubscribe>)toObservableFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)that;

+ (id<RxObservable_OnSubscribe>)toObservableFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)that
                                                                      withLong:(jlong)time
                                                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeToObservableFuture)

FOUNDATION_EXPORT id<RxObservable_OnSubscribe> RxInternalOperatorsOnSubscribeToObservableFuture_toObservableFutureWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> that);

FOUNDATION_EXPORT id<RxObservable_OnSubscribe> RxInternalOperatorsOnSubscribeToObservableFuture_toObservableFutureWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> that, jlong time, JavaUtilConcurrentTimeUnit *unit);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeToObservableFuture)

#endif

#if !defined (RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_) && (RxInternalOperatorsOnSubscribeToObservableFuture_INCLUDE_ALL || defined(RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_INCLUDE))
#define RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_

#define RxObservable_RESTRICT 1
#define RxObservable_OnSubscribe_INCLUDE 1
#include "rx/Observable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxSubscriber;
@protocol JavaUtilConcurrentFuture;

@interface RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture : NSObject < RxObservable_OnSubscribe >

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)that;

- (instancetype)initWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)that
                                        withLong:(jlong)time
                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)callWithId:(RxSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_(RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *self, id<JavaUtilConcurrentFuture> that);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *new_RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> that) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *create_RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> that);

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *self, id<JavaUtilConcurrentFuture> that, jlong time, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *new_RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> that, jlong time, JavaUtilConcurrentTimeUnit *unit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *create_RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> that, jlong time, JavaUtilConcurrentTimeUnit *unit);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture)

#endif

#pragma pop_macro("RxInternalOperatorsOnSubscribeToObservableFuture_INCLUDE_ALL")
