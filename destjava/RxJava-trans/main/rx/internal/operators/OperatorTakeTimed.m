//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/operators/OperatorTakeTimed.java
//

#include "J2ObjC_source.h"
#include "java/util/concurrent/TimeUnit.h"
#include "rx/Scheduler.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/internal/operators/OperatorTakeTimed.h"
#include "rx/observers/SerializedSubscriber.h"

@implementation RxInternalOperatorsOperatorTakeTimed

- (instancetype)initWithLong:(jlong)time
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler {
  RxInternalOperatorsOperatorTakeTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(self, time, unit, scheduler);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:worker];
  RxInternalOperatorsOperatorTakeTimed_TakeSubscriber *ts = new_RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_initWithRxSubscriber_(new_RxObserversSerializedSubscriber_initWithRxSubscriber_(child));
  (void) [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:ts withLong:time_ withJavaUtilConcurrentTimeUnit:unit_];
  return ts;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withJavaUtilConcurrentTimeUnit:withRxScheduler:", "OperatorTakeTimed", NULL, 0x1, NULL, NULL },
    { "callWithId:", "call", "Lrx.Subscriber;", 0x1, NULL, "(Lrx/Subscriber<-TT;>;)Lrx/Subscriber<-TT;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "time_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "unit_", NULL, 0x10, "Ljava.util.concurrent.TimeUnit;", NULL, NULL, .constantValue.asLong = 0 },
    { "scheduler_", NULL, 0x10, "Lrx.Scheduler;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lrx.internal.operators.OperatorTakeTimed$TakeSubscriber;"};
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTimed = { 2, "OperatorTakeTimed", "rx.internal.operators", NULL, 0x11, 2, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<TT;TT;>;" };
  return &_RxInternalOperatorsOperatorTakeTimed;
}

@end

void RxInternalOperatorsOperatorTakeTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOperatorTakeTimed *self, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  NSObject_init(self);
  self->time_ = time;
  self->unit_ = unit;
  self->scheduler_ = scheduler;
}

RxInternalOperatorsOperatorTakeTimed *new_RxInternalOperatorsOperatorTakeTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  RxInternalOperatorsOperatorTakeTimed *self = [RxInternalOperatorsOperatorTakeTimed alloc];
  RxInternalOperatorsOperatorTakeTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(self, time, unit, scheduler);
  return self;
}

RxInternalOperatorsOperatorTakeTimed *create_RxInternalOperatorsOperatorTakeTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  return new_RxInternalOperatorsOperatorTakeTimed_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(time, unit, scheduler);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTakeTimed)

@implementation RxInternalOperatorsOperatorTakeTimed_TakeSubscriber

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child {
  RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_initWithRxSubscriber_(self, child);
  return self;
}

- (void)onNextWithId:(id)t {
  [((RxSubscriber *) nil_chk(child_)) onNextWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubscriber *) nil_chk(child_)) onErrorWithNSException:e];
  [self unsubscribe];
}

- (void)onCompleted {
  [((RxSubscriber *) nil_chk(child_)) onCompleted];
  [self unsubscribe];
}

- (void)call {
  [self onCompleted];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxSubscriber:", "TakeSubscriber", NULL, 0x1, NULL, "(Lrx/Subscriber<-TT;>;)V" },
    { "onNextWithId:", "onNext", "V", 0x1, NULL, "(TT;)V" },
    { "onErrorWithNSException:", "onError", "V", 0x1, NULL, NULL },
    { "onCompleted", NULL, "V", 0x1, NULL, NULL },
    { "call", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "child_", NULL, 0x10, "Lrx.Subscriber;", NULL, "Lrx/Subscriber<-TT;>;", .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTimed_TakeSubscriber = { 2, "TakeSubscriber", "rx.internal.operators", "OperatorTakeTimed", 0x18, 5, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;Lrx/functions/Action0;" };
  return &_RxInternalOperatorsOperatorTakeTimed_TakeSubscriber;
}

@end

void RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_initWithRxSubscriber_(RxInternalOperatorsOperatorTakeTimed_TakeSubscriber *self, RxSubscriber *child) {
  RxSubscriber_initWithRxSubscriber_(self, child);
  self->child_ = child;
}

RxInternalOperatorsOperatorTakeTimed_TakeSubscriber *new_RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_initWithRxSubscriber_(RxSubscriber *child) {
  RxInternalOperatorsOperatorTakeTimed_TakeSubscriber *self = [RxInternalOperatorsOperatorTakeTimed_TakeSubscriber alloc];
  RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_initWithRxSubscriber_(self, child);
  return self;
}

RxInternalOperatorsOperatorTakeTimed_TakeSubscriber *create_RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_initWithRxSubscriber_(RxSubscriber *child) {
  return new_RxInternalOperatorsOperatorTakeTimed_TakeSubscriber_initWithRxSubscriber_(child);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTakeTimed_TakeSubscriber)
