//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/schedulers/NewThreadWorker.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/List.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/TimeUnit.h"
#include "rx/Scheduler.h"
#include "rx/Subscription.h"
#include "rx/functions/Action0.h"
#include "rx/internal/schedulers/NewThreadWorker.h"
#include "rx/internal/schedulers/ScheduledAction.h"
#include "rx/plugins/RxJavaPlugins.h"
#include "rx/plugins/RxJavaSchedulersHook.h"
#include "rx/subscriptions/Subscriptions.h"

@interface RxInternalSchedulersNewThreadWorker () {
 @public
  id<JavaUtilConcurrentScheduledExecutorService> executor_;
  RxPluginsRxJavaSchedulersHook *schedulersHook_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalSchedulersNewThreadWorker, executor_, id<JavaUtilConcurrentScheduledExecutorService>)
J2OBJC_FIELD_SETTER(RxInternalSchedulersNewThreadWorker, schedulersHook_, RxPluginsRxJavaSchedulersHook *)

@implementation RxInternalSchedulersNewThreadWorker

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(self, threadFactory);
  return self;
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  return [self scheduleWithRxFunctionsAction0:action withLong:0 withJavaUtilConcurrentTimeUnit:nil];
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (JreLoadVolatileBoolean(&isUnsubscribed_)) {
    return RxSubscriptionsSubscriptions_empty();
  }
  return [self scheduleActualWithRxFunctionsAction0:action withLong:delayTime withJavaUtilConcurrentTimeUnit:unit];
}

- (RxInternalSchedulersScheduledAction *)scheduleActualWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                                                     withLong:(jlong)delayTime
                                               withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  id<RxFunctionsAction0> decoratedAction = [((RxPluginsRxJavaSchedulersHook *) nil_chk(schedulersHook_)) onScheduleWithRxFunctionsAction0:action];
  RxInternalSchedulersScheduledAction *run = new_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_(decoratedAction);
  id<JavaUtilConcurrentFuture> f;
  if (delayTime <= 0) {
    f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) submitWithJavaLangRunnable:run];
  }
  else {
    f = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) scheduleWithJavaLangRunnable:run withLong:delayTime withJavaUtilConcurrentTimeUnit:unit];
  }
  [run addWithRxSubscription:RxSubscriptionsSubscriptions_fromWithJavaUtilConcurrentFuture_(f)];
  return run;
}

- (void)unsubscribe {
  JreAssignVolatileBoolean(&isUnsubscribed_, true);
  (void) [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) shutdownNow];
}

- (jboolean)isUnsubscribed {
  return JreLoadVolatileBoolean(&isUnsubscribed_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilConcurrentThreadFactory:", "NewThreadWorker", NULL, 0x1, NULL, NULL },
    { "scheduleWithRxFunctionsAction0:", "schedule", "Lrx.Subscription;", 0x1, NULL, NULL },
    { "scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:", "schedule", "Lrx.Subscription;", 0x1, NULL, NULL },
    { "scheduleActualWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:", "scheduleActual", "Lrx.internal.schedulers.ScheduledAction;", 0x1, NULL, NULL },
    { "unsubscribe", NULL, "V", 0x1, NULL, NULL },
    { "isUnsubscribed", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "executor_", NULL, 0x12, "Ljava.util.concurrent.ScheduledExecutorService;", NULL, NULL, .constantValue.asLong = 0 },
    { "schedulersHook_", NULL, 0x12, "Lrx.plugins.RxJavaSchedulersHook;", NULL, NULL, .constantValue.asLong = 0 },
    { "isUnsubscribed_", NULL, 0x40, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxInternalSchedulersNewThreadWorker = { 2, "NewThreadWorker", "rx.internal.schedulers", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxInternalSchedulersNewThreadWorker;
}

@end

void RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(RxInternalSchedulersNewThreadWorker *self, id<JavaUtilConcurrentThreadFactory> threadFactory) {
  RxScheduler_Worker_init(self);
  self->executor_ = JavaUtilConcurrentExecutors_newScheduledThreadPoolWithInt_withJavaUtilConcurrentThreadFactory_(1, threadFactory);
  self->schedulersHook_ = [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getSchedulersHook];
}

RxInternalSchedulersNewThreadWorker *new_RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  RxInternalSchedulersNewThreadWorker *self = [RxInternalSchedulersNewThreadWorker alloc];
  RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(self, threadFactory);
  return self;
}

RxInternalSchedulersNewThreadWorker *create_RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  return new_RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersNewThreadWorker)
