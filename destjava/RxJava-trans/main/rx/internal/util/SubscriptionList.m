//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/util/SubscriptionList.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "rx/Subscription.h"
#include "rx/exceptions/CompositeException.h"
#include "rx/internal/util/SubscriptionList.h"

@interface RxInternalUtilSubscriptionList () {
 @public
  id<JavaUtilList> subscriptions_;
  jboolean unsubscribed_;
}

+ (void)unsubscribeFromAllWithJavaUtilCollection:(id<JavaUtilCollection>)subscriptions;

@end

J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionList, subscriptions_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalUtilSubscriptionList_unsubscribeFromAllWithJavaUtilCollection_(id<JavaUtilCollection> subscriptions);

@implementation RxInternalUtilSubscriptionList

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilSubscriptionList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithRxSubscriptionArray:(IOSObjectArray *)subscriptions {
  RxInternalUtilSubscriptionList_initWithRxSubscriptionArray_(self, subscriptions);
  return self;
}

- (jboolean)isUnsubscribed {
  @synchronized(self) {
    return unsubscribed_;
  }
}

- (void)addWithRxSubscription:(id<RxSubscription>)s {
  id<RxSubscription> unsubscribe = nil;
  @synchronized(self) {
    if (unsubscribed_) {
      unsubscribe = s;
    }
    else {
      if (subscriptions_ == nil) {
        subscriptions_ = new_JavaUtilLinkedList_init();
      }
      [((id<JavaUtilList>) nil_chk(subscriptions_)) addWithId:s];
    }
  }
  if (unsubscribe != nil) {
    [unsubscribe unsubscribe];
  }
}

- (void)unsubscribe {
  @synchronized(self) {
    if (unsubscribed_) {
      return;
    }
    unsubscribed_ = true;
  }
  RxInternalUtilSubscriptionList_unsubscribeFromAllWithJavaUtilCollection_(subscriptions_);
  subscriptions_ = nil;
}

+ (void)unsubscribeFromAllWithJavaUtilCollection:(id<JavaUtilCollection>)subscriptions {
  RxInternalUtilSubscriptionList_unsubscribeFromAllWithJavaUtilCollection_(subscriptions);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SubscriptionList", NULL, 0x1, NULL, NULL },
    { "initWithRxSubscriptionArray:", "SubscriptionList", NULL, 0x81, NULL, NULL },
    { "isUnsubscribed", NULL, "Z", 0x21, NULL, NULL },
    { "addWithRxSubscription:", "add", "V", 0x1, NULL, NULL },
    { "unsubscribe", NULL, "V", 0x1, NULL, NULL },
    { "unsubscribeFromAllWithJavaUtilCollection:", "unsubscribeFromAll", "V", 0xa, NULL, "(Ljava/util/Collection<Lrx/Subscription;>;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "subscriptions_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lrx/Subscription;>;", .constantValue.asLong = 0 },
    { "unsubscribed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionList = { 2, "SubscriptionList", "rx.internal.util", NULL, 0x11, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxInternalUtilSubscriptionList;
}

@end

void RxInternalUtilSubscriptionList_init(RxInternalUtilSubscriptionList *self) {
  NSObject_init(self);
  self->unsubscribed_ = false;
}

RxInternalUtilSubscriptionList *new_RxInternalUtilSubscriptionList_init() {
  RxInternalUtilSubscriptionList *self = [RxInternalUtilSubscriptionList alloc];
  RxInternalUtilSubscriptionList_init(self);
  return self;
}

RxInternalUtilSubscriptionList *create_RxInternalUtilSubscriptionList_init() {
  return new_RxInternalUtilSubscriptionList_init();
}

void RxInternalUtilSubscriptionList_initWithRxSubscriptionArray_(RxInternalUtilSubscriptionList *self, IOSObjectArray *subscriptions) {
  NSObject_init(self);
  self->unsubscribed_ = false;
  self->subscriptions_ = new_JavaUtilLinkedList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(subscriptions));
}

RxInternalUtilSubscriptionList *new_RxInternalUtilSubscriptionList_initWithRxSubscriptionArray_(IOSObjectArray *subscriptions) {
  RxInternalUtilSubscriptionList *self = [RxInternalUtilSubscriptionList alloc];
  RxInternalUtilSubscriptionList_initWithRxSubscriptionArray_(self, subscriptions);
  return self;
}

RxInternalUtilSubscriptionList *create_RxInternalUtilSubscriptionList_initWithRxSubscriptionArray_(IOSObjectArray *subscriptions) {
  return new_RxInternalUtilSubscriptionList_initWithRxSubscriptionArray_(subscriptions);
}

void RxInternalUtilSubscriptionList_unsubscribeFromAllWithJavaUtilCollection_(id<JavaUtilCollection> subscriptions) {
  RxInternalUtilSubscriptionList_initialize();
  if (subscriptions == nil) {
    return;
  }
  id<JavaUtilList> es = nil;
  for (id<RxSubscription> __strong s in nil_chk(subscriptions)) {
    @try {
      [((id<RxSubscription>) nil_chk(s)) unsubscribe];
    }
    @catch (NSException *e) {
      if (es == nil) {
        es = new_JavaUtilArrayList_init();
      }
      [((id<JavaUtilList>) nil_chk(es)) addWithId:e];
    }
  }
  if (es != nil) {
    if ([es size] == 1) {
      NSException *t = [es getWithInt:0];
      if ([t isKindOfClass:[JavaLangRuntimeException class]]) {
        @throw (JavaLangRuntimeException *) cast_chk(t, [JavaLangRuntimeException class]);
      }
      else {
        @throw new_RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(@"Failed to unsubscribe to 1 or more subscriptions.", es);
      }
    }
    else {
      @throw new_RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(@"Failed to unsubscribe to 2 or more subscriptions.", es);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilSubscriptionList)
