//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/internal/util/PaddedAtomicIntegerBase.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicIntegerFieldUpdater.h"
#include "rx/internal/util/FrontPadding.h"
#include "rx/internal/util/PaddedAtomicIntegerBase.h"

@interface RxInternalUtilPaddedAtomicIntegerBase () {
 @public
  volatile_jint value_;
}

@end

inline jlong RxInternalUtilPaddedAtomicIntegerBase_get_serialVersionUID();
#define RxInternalUtilPaddedAtomicIntegerBase_serialVersionUID 6513142711280243198LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalUtilPaddedAtomicIntegerBase, serialVersionUID, jlong)

inline JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxInternalUtilPaddedAtomicIntegerBase_get_updater();
static JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *RxInternalUtilPaddedAtomicIntegerBase_updater;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalUtilPaddedAtomicIntegerBase, updater, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *)

__attribute__((unused)) static jint RxInternalUtilPaddedAtomicIntegerBase_get(RxInternalUtilPaddedAtomicIntegerBase *self);

J2OBJC_INITIALIZED_DEFN(RxInternalUtilPaddedAtomicIntegerBase)

@implementation RxInternalUtilPaddedAtomicIntegerBase

- (jint)get {
  return RxInternalUtilPaddedAtomicIntegerBase_get(self);
}

- (void)setWithInt:(jint)newValue {
  JreAssignVolatileInt(&self->value_, newValue);
}

- (void)lazySetWithInt:(jint)newValue {
  [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalUtilPaddedAtomicIntegerBase_updater)) lazySetWithId:self withInt:newValue];
}

- (jboolean)compareAndSetWithInt:(jint)expect
                         withInt:(jint)update {
  return [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalUtilPaddedAtomicIntegerBase_updater)) compareAndSetWithId:self withInt:expect withInt:update];
}

- (jboolean)weakCompareAndSetWithInt:(jint)expect
                             withInt:(jint)update {
  return [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalUtilPaddedAtomicIntegerBase_updater)) weakCompareAndSetWithId:self withInt:expect withInt:update];
}

- (jint)getAndSetWithInt:(jint)newValue {
  return [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalUtilPaddedAtomicIntegerBase_updater)) getAndSetWithId:self withInt:JreLoadVolatileInt(&value_)];
}

- (jint)getAndAddWithInt:(jint)delta {
  return [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalUtilPaddedAtomicIntegerBase_updater)) getAndAddWithId:self withInt:delta];
}

- (jint)incrementAndGet {
  return [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalUtilPaddedAtomicIntegerBase_updater)) incrementAndGetWithId:self];
}

- (jint)decrementAndGet {
  return [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalUtilPaddedAtomicIntegerBase_updater)) decrementAndGetWithId:self];
}

- (jint)getAndIncrement {
  return [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalUtilPaddedAtomicIntegerBase_updater)) getAndIncrementWithId:self];
}

- (jint)getAndDecrement {
  return [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalUtilPaddedAtomicIntegerBase_updater)) getAndDecrementWithId:self];
}

- (jint)addAndGetWithInt:(jint)delta {
  return [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(RxInternalUtilPaddedAtomicIntegerBase_updater)) addAndGetWithId:self withInt:delta];
}

- (NSString *)description {
  return NSString_valueOfInt_(RxInternalUtilPaddedAtomicIntegerBase_get(self));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilPaddedAtomicIntegerBase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [RxInternalUtilPaddedAtomicIntegerBase class]) {
    {
      RxInternalUtilPaddedAtomicIntegerBase_updater = JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_newUpdaterWithIOSClass_withNSString_(RxInternalUtilPaddedAtomicIntegerBase_class_(), @"value");
    }
    J2OBJC_SET_INITIALIZED(RxInternalUtilPaddedAtomicIntegerBase)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "get", NULL, "I", 0x11, NULL, NULL },
    { "setWithInt:", "set", "V", 0x11, NULL, NULL },
    { "lazySetWithInt:", "lazySet", "V", 0x11, NULL, NULL },
    { "compareAndSetWithInt:withInt:", "compareAndSet", "Z", 0x11, NULL, NULL },
    { "weakCompareAndSetWithInt:withInt:", "weakCompareAndSet", "Z", 0x11, NULL, NULL },
    { "getAndSetWithInt:", "getAndSet", "I", 0x11, NULL, NULL },
    { "getAndAddWithInt:", "getAndAdd", "I", 0x11, NULL, NULL },
    { "incrementAndGet", NULL, "I", 0x11, NULL, NULL },
    { "decrementAndGet", NULL, "I", 0x11, NULL, NULL },
    { "getAndIncrement", NULL, "I", 0x11, NULL, NULL },
    { "getAndDecrement", NULL, "I", 0x11, NULL, NULL },
    { "addAndGetWithInt:", "addAndGet", "I", 0x11, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = RxInternalUtilPaddedAtomicIntegerBase_serialVersionUID },
    { "updater", "updater", 0x1a, "Ljava.util.concurrent.atomic.AtomicIntegerFieldUpdater;", &RxInternalUtilPaddedAtomicIntegerBase_updater, "Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater<Lrx/internal/util/PaddedAtomicIntegerBase;>;", .constantValue.asLong = 0 },
    { "value_", NULL, 0x42, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RxInternalUtilPaddedAtomicIntegerBase = { 2, "PaddedAtomicIntegerBase", "rx.internal.util", NULL, 0x400, 14, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxInternalUtilPaddedAtomicIntegerBase;
}

@end

jint RxInternalUtilPaddedAtomicIntegerBase_get(RxInternalUtilPaddedAtomicIntegerBase *self) {
  return JreLoadVolatileInt(&self->value_);
}

void RxInternalUtilPaddedAtomicIntegerBase_init(RxInternalUtilPaddedAtomicIntegerBase *self) {
  RxInternalUtilFrontPadding_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilPaddedAtomicIntegerBase)
