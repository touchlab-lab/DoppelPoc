//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/RxJava/src/main/java/rx/exceptions/OnErrorFailedException.java
//

#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "rx/exceptions/OnErrorFailedException.h"

inline jlong RxExceptionsOnErrorFailedException_get_serialVersionUID();
#define RxExceptionsOnErrorFailedException_serialVersionUID -419289748403337611LL
J2OBJC_STATIC_FIELD_CONSTANT(RxExceptionsOnErrorFailedException, serialVersionUID, jlong)

@implementation RxExceptionsOnErrorFailedException

- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)e {
  RxExceptionsOnErrorFailedException_initWithNSString_withNSException_(self, message, e);
  return self;
}

- (instancetype)initWithNSException:(NSException *)e {
  RxExceptionsOnErrorFailedException_initWithNSException_(self, e);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSException:", "OnErrorFailedException", NULL, 0x1, NULL, NULL },
    { "initWithNSException:", "OnErrorFailedException", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = RxExceptionsOnErrorFailedException_serialVersionUID },
  };
  static const J2ObjcClassInfo _RxExceptionsOnErrorFailedException = { 2, "OnErrorFailedException", "rx.exceptions", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RxExceptionsOnErrorFailedException;
}

@end

void RxExceptionsOnErrorFailedException_initWithNSString_withNSException_(RxExceptionsOnErrorFailedException *self, NSString *message, NSException *e) {
  JavaLangRuntimeException_initWithNSString_withNSException_(self, message, e);
}

RxExceptionsOnErrorFailedException *new_RxExceptionsOnErrorFailedException_initWithNSString_withNSException_(NSString *message, NSException *e) {
  RxExceptionsOnErrorFailedException *self = [RxExceptionsOnErrorFailedException alloc];
  RxExceptionsOnErrorFailedException_initWithNSString_withNSException_(self, message, e);
  return self;
}

RxExceptionsOnErrorFailedException *create_RxExceptionsOnErrorFailedException_initWithNSString_withNSException_(NSString *message, NSException *e) {
  return new_RxExceptionsOnErrorFailedException_initWithNSString_withNSException_(message, e);
}

void RxExceptionsOnErrorFailedException_initWithNSException_(RxExceptionsOnErrorFailedException *self, NSException *e) {
  JavaLangRuntimeException_initWithNSString_withNSException_(self, [((NSException *) nil_chk(e)) getMessage], e);
}

RxExceptionsOnErrorFailedException *new_RxExceptionsOnErrorFailedException_initWithNSException_(NSException *e) {
  RxExceptionsOnErrorFailedException *self = [RxExceptionsOnErrorFailedException alloc];
  RxExceptionsOnErrorFailedException_initWithNSException_(self, e);
  return self;
}

RxExceptionsOnErrorFailedException *create_RxExceptionsOnErrorFailedException_initWithNSException_(NSException *e) {
  return new_RxExceptionsOnErrorFailedException_initWithNSException_(e);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsOnErrorFailedException)
