//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/retrofit/retrofit/src/main/java/retrofit/Types.java
//

#include "J2ObjC_header.h"

#pragma push_macro("RetrofitTypes_INCLUDE_ALL")
#ifdef RetrofitTypes_RESTRICT
#define RetrofitTypes_INCLUDE_ALL 0
#else
#define RetrofitTypes_INCLUDE_ALL 1
#endif
#undef RetrofitTypes_RESTRICT

#if !defined (RetrofitTypes_) && (RetrofitTypes_INCLUDE_ALL || defined(RetrofitTypes_INCLUDE))
#define RetrofitTypes_

@class IOSClass;
@protocol JavaLangReflectType;

@interface RetrofitTypes : NSObject

#pragma mark Public

+ (jboolean)equalsWithJavaLangReflectType:(id<JavaLangReflectType>)a
                  withJavaLangReflectType:(id<JavaLangReflectType>)b;

+ (IOSClass *)getRawTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (id<JavaLangReflectType>)getSupertypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                  withIOSClass:(IOSClass *)contextRawType
                                                  withIOSClass:(IOSClass *)supertype;

+ (id<JavaLangReflectType>)resolveWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                             withIOSClass:(IOSClass *)contextRawType
                                  withJavaLangReflectType:(id<JavaLangReflectType>)toResolve;

+ (NSString *)typeToStringWithJavaLangReflectType:(id<JavaLangReflectType>)type;

#pragma mark Package-Private

+ (id<JavaLangReflectType>)getGenericSupertypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                         withIOSClass:(IOSClass *)rawType
                                                         withIOSClass:(IOSClass *)toResolve;

@end

J2OBJC_STATIC_INIT(RetrofitTypes)

FOUNDATION_EXPORT IOSClass *RetrofitTypes_getRawTypeWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT jboolean RetrofitTypes_equalsWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> a, id<JavaLangReflectType> b);

FOUNDATION_EXPORT id<JavaLangReflectType> RetrofitTypes_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *rawType, IOSClass *toResolve);

FOUNDATION_EXPORT NSString *RetrofitTypes_typeToStringWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectType> RetrofitTypes_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *contextRawType, IOSClass *supertype);

FOUNDATION_EXPORT id<JavaLangReflectType> RetrofitTypes_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectType> toResolve);

J2OBJC_TYPE_LITERAL_HEADER(RetrofitTypes)

#endif

#pragma pop_macro("RetrofitTypes_INCLUDE_ALL")
