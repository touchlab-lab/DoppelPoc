//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/retrofit/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/net/URLEncoder.h"
#include "retrofit/mime/FormUrlEncodedTypedOutput.h"

@implementation RetrofitMimeFormUrlEncodedTypedOutput

- (void)addFieldWithNSString:(NSString *)name
                withNSString:(NSString *)value {
  [self addFieldWithNSString:name withBoolean:true withNSString:value withBoolean:true];
}

- (void)addFieldWithNSString:(NSString *)name
                 withBoolean:(jboolean)encodeName
                withNSString:(NSString *)value
                 withBoolean:(jboolean)encodeValue {
  if (name == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"name");
  }
  if (value == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"value");
  }
  if ([((JavaIoByteArrayOutputStream *) nil_chk(content_)) size] > 0) {
    [content_ writeWithInt:'&'];
  }
  @try {
    if (encodeName) {
      name = JavaNetURLEncoder_encodeWithNSString_withNSString_(name, @"UTF-8");
    }
    if (encodeValue) {
      value = JavaNetURLEncoder_encodeWithNSString_withNSString_(value, @"UTF-8");
    }
    [content_ writeWithByteArray:[((NSString *) nil_chk(name)) getBytesWithCharsetName:@"UTF-8"]];
    [content_ writeWithInt:'='];
    [content_ writeWithByteArray:[((NSString *) nil_chk(value)) getBytesWithCharsetName:@"UTF-8"]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (NSString *)fileName {
  return nil;
}

- (NSString *)mimeType {
  return @"application/x-www-form-urlencoded; charset=UTF-8";
}

- (jlong)length {
  return [((JavaIoByteArrayOutputStream *) nil_chk(content_)) size];
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:[((JavaIoByteArrayOutputStream *) nil_chk(content_)) toByteArray]];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitMimeFormUrlEncodedTypedOutput_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addFieldWithNSString:withNSString:", "addField", "V", 0x1, NULL, NULL },
    { "addFieldWithNSString:withBoolean:withNSString:withBoolean:", "addField", "V", 0x1, NULL, NULL },
    { "fileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "mimeType", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "length", NULL, "J", 0x1, NULL, NULL },
    { "writeToWithJavaIoOutputStream:", "writeTo", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "content_", NULL, 0x10, "Ljava.io.ByteArrayOutputStream;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RetrofitMimeFormUrlEncodedTypedOutput = { 2, "FormUrlEncodedTypedOutput", "retrofit.mime", NULL, 0x11, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RetrofitMimeFormUrlEncodedTypedOutput;
}

@end

void RetrofitMimeFormUrlEncodedTypedOutput_init(RetrofitMimeFormUrlEncodedTypedOutput *self) {
  NSObject_init(self);
  self->content_ = new_JavaIoByteArrayOutputStream_init();
}

RetrofitMimeFormUrlEncodedTypedOutput *new_RetrofitMimeFormUrlEncodedTypedOutput_init() {
  RetrofitMimeFormUrlEncodedTypedOutput *self = [RetrofitMimeFormUrlEncodedTypedOutput alloc];
  RetrofitMimeFormUrlEncodedTypedOutput_init(self);
  return self;
}

RetrofitMimeFormUrlEncodedTypedOutput *create_RetrofitMimeFormUrlEncodedTypedOutput_init() {
  return new_RetrofitMimeFormUrlEncodedTypedOutput_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitMimeFormUrlEncodedTypedOutput)
