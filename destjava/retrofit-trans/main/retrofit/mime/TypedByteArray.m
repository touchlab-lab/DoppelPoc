//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/retrofit/retrofit/src/main/java/retrofit/mime/TypedByteArray.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Arrays.h"
#include "retrofit/mime/TypedByteArray.h"

@interface RetrofitMimeTypedByteArray () {
 @public
  NSString *mimeType_;
  IOSByteArray *bytes_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitMimeTypedByteArray, mimeType_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitMimeTypedByteArray, bytes_, IOSByteArray *)

@implementation RetrofitMimeTypedByteArray

- (instancetype)initWithNSString:(NSString *)mimeType
                   withByteArray:(IOSByteArray *)bytes {
  RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(self, mimeType, bytes);
  return self;
}

- (IOSByteArray *)getBytes {
  return bytes_;
}

- (NSString *)fileName {
  return nil;
}

- (NSString *)mimeType {
  return mimeType_;
}

- (jlong)length {
  return ((IOSByteArray *) nil_chk(bytes_))->size_;
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:bytes_];
}

- (JavaIoInputStream *)in {
  return new_JavaIoByteArrayInputStream_initWithByteArray_(bytes_);
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self getClass] != (id) [o getClass]) return false;
  RetrofitMimeTypedByteArray *that = (RetrofitMimeTypedByteArray *) cast_chk(o, [RetrofitMimeTypedByteArray class]);
  if (!JavaUtilArrays_equalsWithByteArray_withByteArray_(bytes_, ((RetrofitMimeTypedByteArray *) nil_chk(that))->bytes_)) return false;
  if (![((NSString *) nil_chk(mimeType_)) isEqual:that->mimeType_]) return false;
  return true;
}

- (NSUInteger)hash {
  jint result = ((jint) [((NSString *) nil_chk(mimeType_)) hash]);
  result = 31 * result + JavaUtilArrays_hashCodeWithByteArray_(bytes_);
  return result;
}

- (NSString *)description {
  return JreStrcat("$JC", @"TypedByteArray[length=", [self length], ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withByteArray:", "TypedByteArray", NULL, 0x1, NULL, NULL },
    { "getBytes", NULL, "[B", 0x1, NULL, NULL },
    { "fileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "mimeType", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "length", NULL, "J", 0x1, NULL, NULL },
    { "writeToWithJavaIoOutputStream:", "writeTo", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "in", NULL, "Ljava.io.InputStream;", 0x1, "Ljava.io.IOException;", NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mimeType_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "bytes_", NULL, 0x12, "[B", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RetrofitMimeTypedByteArray = { 2, "TypedByteArray", "retrofit.mime", NULL, 0x1, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RetrofitMimeTypedByteArray;
}

@end

void RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(RetrofitMimeTypedByteArray *self, NSString *mimeType, IOSByteArray *bytes) {
  NSObject_init(self);
  if (mimeType == nil) {
    mimeType = @"application/unknown";
  }
  if (bytes == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"bytes");
  }
  self->mimeType_ = mimeType;
  self->bytes_ = bytes;
}

RetrofitMimeTypedByteArray *new_RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(NSString *mimeType, IOSByteArray *bytes) {
  RetrofitMimeTypedByteArray *self = [RetrofitMimeTypedByteArray alloc];
  RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(self, mimeType, bytes);
  return self;
}

RetrofitMimeTypedByteArray *create_RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(NSString *mimeType, IOSByteArray *bytes) {
  return new_RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(mimeType, bytes);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitMimeTypedByteArray)
