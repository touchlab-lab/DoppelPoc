//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/retrofit/retrofit/src/main/java/retrofit/mime/TypedFile.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/NullPointerException.h"
#include "retrofit/mime/TypedFile.h"

@interface RetrofitMimeTypedFile () {
 @public
  NSString *mimeType_;
  JavaIoFile *file_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitMimeTypedFile, mimeType_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitMimeTypedFile, file_, JavaIoFile *)

inline jint RetrofitMimeTypedFile_get_BUFFER_SIZE();
#define RetrofitMimeTypedFile_BUFFER_SIZE 4096
J2OBJC_STATIC_FIELD_CONSTANT(RetrofitMimeTypedFile, BUFFER_SIZE, jint)

@implementation RetrofitMimeTypedFile

- (instancetype)initWithNSString:(NSString *)mimeType
                  withJavaIoFile:(JavaIoFile *)file {
  RetrofitMimeTypedFile_initWithNSString_withJavaIoFile_(self, mimeType, file);
  return self;
}

- (JavaIoFile *)file {
  return file_;
}

- (NSString *)mimeType {
  return mimeType_;
}

- (jlong)length {
  return [((JavaIoFile *) nil_chk(file_)) length];
}

- (NSString *)fileName {
  return [((JavaIoFile *) nil_chk(file_)) getName];
}

- (JavaIoInputStream *)in {
  return new_JavaIoFileInputStream_initWithJavaIoFile_(file_);
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:RetrofitMimeTypedFile_BUFFER_SIZE];
  JavaIoFileInputStream *in = new_JavaIoFileInputStream_initWithJavaIoFile_(file_);
  @try {
    jint read;
    while ((read = [in readWithByteArray:buffer]) != -1) {
      [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buffer withInt:0 withInt:read];
    }
  }
  @finally {
    [in close];
  }
}

- (void)moveToWithRetrofitMimeTypedFile:(RetrofitMimeTypedFile *)destination {
  if (![((NSString *) nil_chk([self mimeType])) isEqual:[((RetrofitMimeTypedFile *) nil_chk(destination)) mimeType]]) {
    @throw new_JavaIoIOException_initWithNSString_(@"Type mismatch.");
  }
  if (![((JavaIoFile *) nil_chk(file_)) renameToWithJavaIoFile:[destination file]]) {
    @throw new_JavaIoIOException_initWithNSString_(@"Rename failed!");
  }
}

- (NSString *)description {
  return JreStrcat("$$$C", [((JavaIoFile *) nil_chk(file_)) getAbsolutePath], @" (", [self mimeType], ')');
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if ([o isKindOfClass:[RetrofitMimeTypedFile class]]) {
    RetrofitMimeTypedFile *rhs = (RetrofitMimeTypedFile *) cast_chk(o, [RetrofitMimeTypedFile class]);
    return [((JavaIoFile *) nil_chk(file_)) isEqual:((RetrofitMimeTypedFile *) nil_chk(rhs))->file_];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [((JavaIoFile *) nil_chk(file_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaIoFile:", "TypedFile", NULL, 0x1, NULL, NULL },
    { "file", NULL, "Ljava.io.File;", 0x1, NULL, NULL },
    { "mimeType", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "length", NULL, "J", 0x1, NULL, NULL },
    { "fileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "in", NULL, "Ljava.io.InputStream;", 0x1, "Ljava.io.IOException;", NULL },
    { "writeToWithJavaIoOutputStream:", "writeTo", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "moveToWithRetrofitMimeTypedFile:", "moveTo", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFER_SIZE", "BUFFER_SIZE", 0x1a, "I", NULL, NULL, .constantValue.asInt = RetrofitMimeTypedFile_BUFFER_SIZE },
    { "mimeType_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "file_", NULL, 0x12, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _RetrofitMimeTypedFile = { 2, "TypedFile", "retrofit.mime", NULL, 0x1, 11, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RetrofitMimeTypedFile;
}

@end

void RetrofitMimeTypedFile_initWithNSString_withJavaIoFile_(RetrofitMimeTypedFile *self, NSString *mimeType, JavaIoFile *file) {
  NSObject_init(self);
  if (mimeType == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"mimeType");
  }
  if (file == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"file");
  }
  self->mimeType_ = mimeType;
  self->file_ = file;
}

RetrofitMimeTypedFile *new_RetrofitMimeTypedFile_initWithNSString_withJavaIoFile_(NSString *mimeType, JavaIoFile *file) {
  RetrofitMimeTypedFile *self = [RetrofitMimeTypedFile alloc];
  RetrofitMimeTypedFile_initWithNSString_withJavaIoFile_(self, mimeType, file);
  return self;
}

RetrofitMimeTypedFile *create_RetrofitMimeTypedFile_initWithNSString_withJavaIoFile_(NSString *mimeType, JavaIoFile *file) {
  return new_RetrofitMimeTypedFile_initWithNSString_withJavaIoFile_(mimeType, file);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitMimeTypedFile)
