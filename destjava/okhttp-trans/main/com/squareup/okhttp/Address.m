//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/Address.java
//

#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Address.h"
#include "com/squareup/okhttp/Authenticator.h"
#include "com/squareup/okhttp/CertificatePinner.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/net/Proxy.h"
#include "java/net/ProxySelector.h"
#include "java/util/List.h"
#include "javax/net/SocketFactory.h"
#include "javax/net/ssl/HostnameVerifier.h"
#include "javax/net/ssl/SSLSocketFactory.h"

@implementation ComSquareupOkhttpAddress

- (instancetype)initWithNSString:(NSString *)uriHost
                         withInt:(jint)uriPort
       withJavaxNetSocketFactory:(JavaxNetSocketFactory *)socketFactory
 withJavaxNetSslSSLSocketFactory:(JavaxNetSslSSLSocketFactory *)sslSocketFactory
 withJavaxNetSslHostnameVerifier:(id<JavaxNetSslHostnameVerifier>)hostnameVerifier
withComSquareupOkhttpCertificatePinner:(ComSquareupOkhttpCertificatePinner *)certificatePinner
withComSquareupOkhttpAuthenticator:(id<ComSquareupOkhttpAuthenticator>)authenticator
                withJavaNetProxy:(JavaNetProxy *)proxy
                withJavaUtilList:(id<JavaUtilList>)protocols
                withJavaUtilList:(id<JavaUtilList>)connectionSpecs
        withJavaNetProxySelector:(JavaNetProxySelector *)proxySelector {
  ComSquareupOkhttpAddress_initWithNSString_withInt_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withComSquareupOkhttpCertificatePinner_withComSquareupOkhttpAuthenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(self, uriHost, uriPort, socketFactory, sslSocketFactory, hostnameVerifier, certificatePinner, authenticator, proxy, protocols, connectionSpecs, proxySelector);
  return self;
}

- (NSString *)getUriHost {
  return uriHost_;
}

- (jint)getUriPort {
  return uriPort_;
}

- (JavaxNetSocketFactory *)getSocketFactory {
  return socketFactory_;
}

- (JavaxNetSslSSLSocketFactory *)getSslSocketFactory {
  return sslSocketFactory_;
}

- (id<JavaxNetSslHostnameVerifier>)getHostnameVerifier {
  return hostnameVerifier_;
}

- (id<ComSquareupOkhttpAuthenticator>)getAuthenticator {
  return authenticator_;
}

- (id<JavaUtilList>)getProtocols {
  return protocols_;
}

- (id<JavaUtilList>)getConnectionSpecs {
  return connectionSpecs_;
}

- (JavaNetProxy *)getProxy {
  return proxy_;
}

- (JavaNetProxySelector *)getProxySelector {
  return proxySelector_;
}

- (jboolean)isEqual:(id)other {
  if ([other isKindOfClass:[ComSquareupOkhttpAddress class]]) {
    ComSquareupOkhttpAddress *that = (ComSquareupOkhttpAddress *) cast_chk(other, [ComSquareupOkhttpAddress class]);
    return ComSquareupOkhttpInternalUtil_equalWithId_withId_(self->proxy_, ((ComSquareupOkhttpAddress *) nil_chk(that))->proxy_) && [((NSString *) nil_chk(self->uriHost_)) isEqual:that->uriHost_] && self->uriPort_ == that->uriPort_ && ComSquareupOkhttpInternalUtil_equalWithId_withId_(self->sslSocketFactory_, that->sslSocketFactory_) && ComSquareupOkhttpInternalUtil_equalWithId_withId_(self->hostnameVerifier_, that->hostnameVerifier_) && ComSquareupOkhttpInternalUtil_equalWithId_withId_(self->certificatePinner_, that->certificatePinner_) && ComSquareupOkhttpInternalUtil_equalWithId_withId_(self->authenticator_, that->authenticator_) && ComSquareupOkhttpInternalUtil_equalWithId_withId_(self->protocols_, that->protocols_) && ComSquareupOkhttpInternalUtil_equalWithId_withId_(self->connectionSpecs_, that->connectionSpecs_) && ComSquareupOkhttpInternalUtil_equalWithId_withId_(self->proxySelector_, that->proxySelector_);
  }
  return false;
}

- (NSUInteger)hash {
  jint result = 17;
  result = 31 * result + (proxy_ != nil ? ((jint) [proxy_ hash]) : 0);
  result = 31 * result + ((jint) [((NSString *) nil_chk(uriHost_)) hash]);
  result = 31 * result + uriPort_;
  result = 31 * result + (sslSocketFactory_ != nil ? ((jint) [sslSocketFactory_ hash]) : 0);
  result = 31 * result + (hostnameVerifier_ != nil ? ((jint) [hostnameVerifier_ hash]) : 0);
  result = 31 * result + (certificatePinner_ != nil ? ((jint) [certificatePinner_ hash]) : 0);
  result = 31 * result + ((jint) [((id<ComSquareupOkhttpAuthenticator>) nil_chk(authenticator_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(protocols_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(connectionSpecs_)) hash]);
  result = 31 * result + ((jint) [((JavaNetProxySelector *) nil_chk(proxySelector_)) hash]);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:withJavaxNetSocketFactory:withJavaxNetSslSSLSocketFactory:withJavaxNetSslHostnameVerifier:withComSquareupOkhttpCertificatePinner:withComSquareupOkhttpAuthenticator:withJavaNetProxy:withJavaUtilList:withJavaUtilList:withJavaNetProxySelector:", "Address", NULL, 0x1, NULL, "(Ljava/lang/String;ILjavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lcom/squareup/okhttp/CertificatePinner;Lcom/squareup/okhttp/Authenticator;Ljava/net/Proxy;Ljava/util/List<Lcom/squareup/okhttp/Protocol;>;Ljava/util/List<Lcom/squareup/okhttp/ConnectionSpec;>;Ljava/net/ProxySelector;)V" },
    { "getUriHost", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getUriPort", NULL, "I", 0x1, NULL, NULL },
    { "getSocketFactory", NULL, "Ljavax.net.SocketFactory;", 0x1, NULL, NULL },
    { "getSslSocketFactory", NULL, "Ljavax.net.ssl.SSLSocketFactory;", 0x1, NULL, NULL },
    { "getHostnameVerifier", NULL, "Ljavax.net.ssl.HostnameVerifier;", 0x1, NULL, NULL },
    { "getAuthenticator", NULL, "Lcom.squareup.okhttp.Authenticator;", 0x1, NULL, NULL },
    { "getProtocols", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lcom/squareup/okhttp/Protocol;>;" },
    { "getConnectionSpecs", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lcom/squareup/okhttp/ConnectionSpec;>;" },
    { "getProxy", NULL, "Ljava.net.Proxy;", 0x1, NULL, NULL },
    { "getProxySelector", NULL, "Ljava.net.ProxySelector;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "proxy_", NULL, 0x10, "Ljava.net.Proxy;", NULL, NULL, .constantValue.asLong = 0 },
    { "uriHost_", NULL, 0x10, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "uriPort_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "socketFactory_", NULL, 0x10, "Ljavax.net.SocketFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "sslSocketFactory_", NULL, 0x10, "Ljavax.net.ssl.SSLSocketFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "hostnameVerifier_", NULL, 0x10, "Ljavax.net.ssl.HostnameVerifier;", NULL, NULL, .constantValue.asLong = 0 },
    { "certificatePinner_", NULL, 0x10, "Lcom.squareup.okhttp.CertificatePinner;", NULL, NULL, .constantValue.asLong = 0 },
    { "authenticator_", NULL, 0x10, "Lcom.squareup.okhttp.Authenticator;", NULL, NULL, .constantValue.asLong = 0 },
    { "protocols_", NULL, 0x10, "Ljava.util.List;", NULL, "Ljava/util/List<Lcom/squareup/okhttp/Protocol;>;", .constantValue.asLong = 0 },
    { "connectionSpecs_", NULL, 0x10, "Ljava.util.List;", NULL, "Ljava/util/List<Lcom/squareup/okhttp/ConnectionSpec;>;", .constantValue.asLong = 0 },
    { "proxySelector_", NULL, 0x10, "Ljava.net.ProxySelector;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpAddress = { 2, "Address", "com.squareup.okhttp", NULL, 0x11, 13, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpAddress;
}

@end

void ComSquareupOkhttpAddress_initWithNSString_withInt_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withComSquareupOkhttpCertificatePinner_withComSquareupOkhttpAuthenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(ComSquareupOkhttpAddress *self, NSString *uriHost, jint uriPort, JavaxNetSocketFactory *socketFactory, JavaxNetSslSSLSocketFactory *sslSocketFactory, id<JavaxNetSslHostnameVerifier> hostnameVerifier, ComSquareupOkhttpCertificatePinner *certificatePinner, id<ComSquareupOkhttpAuthenticator> authenticator, JavaNetProxy *proxy, id<JavaUtilList> protocols, id<JavaUtilList> connectionSpecs, JavaNetProxySelector *proxySelector) {
  NSObject_init(self);
  if (uriHost == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"uriHost == null");
  if (uriPort <= 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"uriPort <= 0: ", uriPort));
  if (authenticator == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"authenticator == null");
  if (protocols == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"protocols == null");
  if (proxySelector == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"proxySelector == null");
  self->proxy_ = proxy;
  self->uriHost_ = uriHost;
  self->uriPort_ = uriPort;
  self->socketFactory_ = socketFactory;
  self->sslSocketFactory_ = sslSocketFactory;
  self->hostnameVerifier_ = hostnameVerifier;
  self->certificatePinner_ = certificatePinner;
  self->authenticator_ = authenticator;
  self->protocols_ = ComSquareupOkhttpInternalUtil_immutableListWithJavaUtilList_(protocols);
  self->connectionSpecs_ = ComSquareupOkhttpInternalUtil_immutableListWithJavaUtilList_(connectionSpecs);
  self->proxySelector_ = proxySelector;
}

ComSquareupOkhttpAddress *new_ComSquareupOkhttpAddress_initWithNSString_withInt_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withComSquareupOkhttpCertificatePinner_withComSquareupOkhttpAuthenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(NSString *uriHost, jint uriPort, JavaxNetSocketFactory *socketFactory, JavaxNetSslSSLSocketFactory *sslSocketFactory, id<JavaxNetSslHostnameVerifier> hostnameVerifier, ComSquareupOkhttpCertificatePinner *certificatePinner, id<ComSquareupOkhttpAuthenticator> authenticator, JavaNetProxy *proxy, id<JavaUtilList> protocols, id<JavaUtilList> connectionSpecs, JavaNetProxySelector *proxySelector) {
  ComSquareupOkhttpAddress *self = [ComSquareupOkhttpAddress alloc];
  ComSquareupOkhttpAddress_initWithNSString_withInt_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withComSquareupOkhttpCertificatePinner_withComSquareupOkhttpAuthenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(self, uriHost, uriPort, socketFactory, sslSocketFactory, hostnameVerifier, certificatePinner, authenticator, proxy, protocols, connectionSpecs, proxySelector);
  return self;
}

ComSquareupOkhttpAddress *create_ComSquareupOkhttpAddress_initWithNSString_withInt_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withComSquareupOkhttpCertificatePinner_withComSquareupOkhttpAuthenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(NSString *uriHost, jint uriPort, JavaxNetSocketFactory *socketFactory, JavaxNetSslSSLSocketFactory *sslSocketFactory, id<JavaxNetSslHostnameVerifier> hostnameVerifier, ComSquareupOkhttpCertificatePinner *certificatePinner, id<ComSquareupOkhttpAuthenticator> authenticator, JavaNetProxy *proxy, id<JavaUtilList> protocols, id<JavaUtilList> connectionSpecs, JavaNetProxySelector *proxySelector) {
  return new_ComSquareupOkhttpAddress_initWithNSString_withInt_withJavaxNetSocketFactory_withJavaxNetSslSSLSocketFactory_withJavaxNetSslHostnameVerifier_withComSquareupOkhttpCertificatePinner_withComSquareupOkhttpAuthenticator_withJavaNetProxy_withJavaUtilList_withJavaUtilList_withJavaNetProxySelector_(uriHost, uriPort, socketFactory, sslSocketFactory, hostnameVerifier, certificatePinner, authenticator, proxy, protocols, connectionSpecs, proxySelector);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpAddress)
