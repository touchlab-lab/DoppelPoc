//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/CertificatePinner.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/security/Principal.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "javax/net/ssl/SSLPeerUnverifiedException.h"
#include "okio/ByteString.h"

@interface ComSquareupOkhttpCertificatePinner () {
 @public
  id<JavaUtilMap> hostnameToPins_;
}

- (instancetype)initWithComSquareupOkhttpCertificatePinner_Builder:(ComSquareupOkhttpCertificatePinner_Builder *)builder;

+ (OkioByteString *)sha1WithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)x509Certificate;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpCertificatePinner, hostnameToPins_, id<JavaUtilMap>)

__attribute__((unused)) static void ComSquareupOkhttpCertificatePinner_initWithComSquareupOkhttpCertificatePinner_Builder_(ComSquareupOkhttpCertificatePinner *self, ComSquareupOkhttpCertificatePinner_Builder *builder);

__attribute__((unused)) static ComSquareupOkhttpCertificatePinner *new_ComSquareupOkhttpCertificatePinner_initWithComSquareupOkhttpCertificatePinner_Builder_(ComSquareupOkhttpCertificatePinner_Builder *builder) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpCertificatePinner *create_ComSquareupOkhttpCertificatePinner_initWithComSquareupOkhttpCertificatePinner_Builder_(ComSquareupOkhttpCertificatePinner_Builder *builder);

__attribute__((unused)) static OkioByteString *ComSquareupOkhttpCertificatePinner_sha1WithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *x509Certificate);

@interface ComSquareupOkhttpCertificatePinner_Builder () {
 @public
  id<JavaUtilMap> hostnameToPins_;
}

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpCertificatePinner_Builder, hostnameToPins_, id<JavaUtilMap>)

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpCertificatePinner)

ComSquareupOkhttpCertificatePinner *ComSquareupOkhttpCertificatePinner_DEFAULT;

@implementation ComSquareupOkhttpCertificatePinner

- (instancetype)initWithComSquareupOkhttpCertificatePinner_Builder:(ComSquareupOkhttpCertificatePinner_Builder *)builder {
  ComSquareupOkhttpCertificatePinner_initWithComSquareupOkhttpCertificatePinner_Builder_(self, builder);
  return self;
}

- (void)checkWithNSString:(NSString *)hostname
         withJavaUtilList:(id<JavaUtilList>)peerCertificates {
  id<JavaUtilList> pins = [((id<JavaUtilMap>) nil_chk(hostnameToPins_)) getWithId:hostname];
  if (pins == nil) return;
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(peerCertificates)) size]; i < size; i++) {
    JavaSecurityCertX509Certificate *x509Certificate = (JavaSecurityCertX509Certificate *) cast_chk([peerCertificates getWithInt:i], [JavaSecurityCertX509Certificate class]);
    if ([((id<JavaUtilList>) nil_chk(pins)) containsWithId:ComSquareupOkhttpCertificatePinner_sha1WithJavaSecurityCertX509Certificate_(x509Certificate)]) return;
  }
  JavaLangStringBuilder *message = [((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_init() appendWithNSString:@"Certificate pinning failure!"])) appendWithNSString:@"\n  Peer certificate chain:"];
  for (jint i = 0, size = [peerCertificates size]; i < size; i++) {
    JavaSecurityCertX509Certificate *x509Certificate = (JavaSecurityCertX509Certificate *) cast_chk([peerCertificates getWithInt:i], [JavaSecurityCertX509Certificate class]);
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(message)) appendWithNSString:@"\n    "])) appendWithNSString:ComSquareupOkhttpCertificatePinner_pinWithJavaSecurityCertCertificate_(x509Certificate)])) appendWithNSString:@": "])) appendWithNSString:[((id<JavaSecurityPrincipal>) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(x509Certificate)) getSubjectDN])) getName]];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(message)) appendWithNSString:@"\n  Pinned certificates for "])) appendWithNSString:hostname])) appendWithNSString:@":"];
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(pins)) size]; i < size; i++) {
    OkioByteString *pin = [pins getWithInt:i];
    (void) [((JavaLangStringBuilder *) nil_chk([message appendWithNSString:@"\n    sha1/"])) appendWithNSString:[((OkioByteString *) nil_chk(pin)) base64]];
  }
  @throw new_JavaxNetSslSSLPeerUnverifiedException_initWithNSString_([message description]);
}

- (void)checkWithNSString:(NSString *)hostname
withJavaSecurityCertCertificateArray:(IOSObjectArray *)peerCertificates {
  [self checkWithNSString:hostname withJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_(peerCertificates)];
}

+ (NSString *)pinWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)certificate {
  return ComSquareupOkhttpCertificatePinner_pinWithJavaSecurityCertCertificate_(certificate);
}

+ (OkioByteString *)sha1WithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)x509Certificate {
  return ComSquareupOkhttpCertificatePinner_sha1WithJavaSecurityCertX509Certificate_(x509Certificate);
}

+ (void)initialize {
  if (self == [ComSquareupOkhttpCertificatePinner class]) {
    ComSquareupOkhttpCertificatePinner_DEFAULT = [new_ComSquareupOkhttpCertificatePinner_Builder_init() build];
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpCertificatePinner)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpCertificatePinner_Builder:", "CertificatePinner", NULL, 0x2, NULL, NULL },
    { "checkWithNSString:withJavaUtilList:", "check", "V", 0x1, "Ljavax.net.ssl.SSLPeerUnverifiedException;", "(Ljava/lang/String;Ljava/util/List<Ljava/security/cert/Certificate;>;)V" },
    { "checkWithNSString:withJavaSecurityCertCertificateArray:", "check", "V", 0x81, "Ljavax.net.ssl.SSLPeerUnverifiedException;", NULL },
    { "pinWithJavaSecurityCertCertificate:", "pin", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "sha1WithJavaSecurityCertX509Certificate:", "sha1", "Lokio.ByteString;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT", "DEFAULT", 0x19, "Lcom.squareup.okhttp.CertificatePinner;", &ComSquareupOkhttpCertificatePinner_DEFAULT, NULL, .constantValue.asLong = 0 },
    { "hostnameToPins_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Lokio/ByteString;>;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.squareup.okhttp.CertificatePinner$Builder;"};
  static const J2ObjcClassInfo _ComSquareupOkhttpCertificatePinner = { 2, "CertificatePinner", "com.squareup.okhttp", NULL, 0x11, 5, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComSquareupOkhttpCertificatePinner;
}

@end

void ComSquareupOkhttpCertificatePinner_initWithComSquareupOkhttpCertificatePinner_Builder_(ComSquareupOkhttpCertificatePinner *self, ComSquareupOkhttpCertificatePinner_Builder *builder) {
  NSObject_init(self);
  self->hostnameToPins_ = ComSquareupOkhttpInternalUtil_immutableMapWithJavaUtilMap_(((ComSquareupOkhttpCertificatePinner_Builder *) nil_chk(builder))->hostnameToPins_);
}

ComSquareupOkhttpCertificatePinner *new_ComSquareupOkhttpCertificatePinner_initWithComSquareupOkhttpCertificatePinner_Builder_(ComSquareupOkhttpCertificatePinner_Builder *builder) {
  ComSquareupOkhttpCertificatePinner *self = [ComSquareupOkhttpCertificatePinner alloc];
  ComSquareupOkhttpCertificatePinner_initWithComSquareupOkhttpCertificatePinner_Builder_(self, builder);
  return self;
}

ComSquareupOkhttpCertificatePinner *create_ComSquareupOkhttpCertificatePinner_initWithComSquareupOkhttpCertificatePinner_Builder_(ComSquareupOkhttpCertificatePinner_Builder *builder) {
  return new_ComSquareupOkhttpCertificatePinner_initWithComSquareupOkhttpCertificatePinner_Builder_(builder);
}

NSString *ComSquareupOkhttpCertificatePinner_pinWithJavaSecurityCertCertificate_(JavaSecurityCertCertificate *certificate) {
  ComSquareupOkhttpCertificatePinner_initialize();
  if (!([certificate isKindOfClass:[JavaSecurityCertX509Certificate class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Certificate pinning requires X509 certificates");
  }
  return JreStrcat("$$", @"sha1/", [((OkioByteString *) nil_chk(ComSquareupOkhttpCertificatePinner_sha1WithJavaSecurityCertX509Certificate_((JavaSecurityCertX509Certificate *) cast_chk(certificate, [JavaSecurityCertX509Certificate class])))) base64]);
}

OkioByteString *ComSquareupOkhttpCertificatePinner_sha1WithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *x509Certificate) {
  ComSquareupOkhttpCertificatePinner_initialize();
  return ComSquareupOkhttpInternalUtil_sha1WithOkioByteString_(OkioByteString_ofWithByteArray_([((id<JavaSecurityPublicKey>) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(x509Certificate)) getPublicKey])) getEncoded]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpCertificatePinner)

@implementation ComSquareupOkhttpCertificatePinner_Builder

- (ComSquareupOkhttpCertificatePinner_Builder *)addWithNSString:(NSString *)hostname
                                              withNSStringArray:(IOSObjectArray *)pins {
  if (hostname == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"hostname == null");
  id<JavaUtilList> hostPins = new_JavaUtilArrayList_init();
  id<JavaUtilList> previousPins = [((id<JavaUtilMap>) nil_chk(hostnameToPins_)) putWithId:hostname withId:JavaUtilCollections_unmodifiableListWithJavaUtilList_(hostPins)];
  if (previousPins != nil) {
    [hostPins addAllWithJavaUtilCollection:previousPins];
  }
  {
    IOSObjectArray *a__ = pins;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *pin = *b__++;
      if (![((NSString *) nil_chk(pin)) hasPrefix:@"sha1/"]) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"pins must start with 'sha1/': ", pin));
      }
      OkioByteString *decodedPin = OkioByteString_decodeBase64WithNSString_([pin substring:((jint) [@"sha1/" length])]);
      if (decodedPin == nil) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"pins must be base64: ", pin));
      }
      [hostPins addWithId:decodedPin];
    }
  }
  return self;
}

- (ComSquareupOkhttpCertificatePinner *)build {
  return new_ComSquareupOkhttpCertificatePinner_initWithComSquareupOkhttpCertificatePinner_Builder_(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpCertificatePinner_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addWithNSString:withNSStringArray:", "add", "Lcom.squareup.okhttp.CertificatePinner$Builder;", 0x81, NULL, NULL },
    { "build", NULL, "Lcom.squareup.okhttp.CertificatePinner;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hostnameToPins_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Lokio/ByteString;>;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpCertificatePinner_Builder = { 2, "Builder", "com.squareup.okhttp", "CertificatePinner", 0x19, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpCertificatePinner_Builder;
}

@end

void ComSquareupOkhttpCertificatePinner_Builder_init(ComSquareupOkhttpCertificatePinner_Builder *self) {
  NSObject_init(self);
  self->hostnameToPins_ = new_JavaUtilLinkedHashMap_init();
}

ComSquareupOkhttpCertificatePinner_Builder *new_ComSquareupOkhttpCertificatePinner_Builder_init() {
  ComSquareupOkhttpCertificatePinner_Builder *self = [ComSquareupOkhttpCertificatePinner_Builder alloc];
  ComSquareupOkhttpCertificatePinner_Builder_init(self);
  return self;
}

ComSquareupOkhttpCertificatePinner_Builder *create_ComSquareupOkhttpCertificatePinner_Builder_init() {
  return new_ComSquareupOkhttpCertificatePinner_Builder_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpCertificatePinner_Builder)
