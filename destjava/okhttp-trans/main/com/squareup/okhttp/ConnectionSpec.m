//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Address.h"
#include "com/squareup/okhttp/CipherSuite.h"
#include "com/squareup/okhttp/ConnectionSpec.h"
#include "com/squareup/okhttp/Route.h"
#include "com/squareup/okhttp/TlsVersion.h"
#include "com/squareup/okhttp/internal/Platform.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "javax/net/ssl/SSLSocket.h"

@interface ComSquareupOkhttpConnectionSpec () {
 @public
  IOSObjectArray *cipherSuites_;
  IOSObjectArray *tlsVersions_;
  ComSquareupOkhttpConnectionSpec *supportedSpec_;
}

- (instancetype)initWithComSquareupOkhttpConnectionSpec_Builder:(ComSquareupOkhttpConnectionSpec_Builder *)builder;

- (ComSquareupOkhttpConnectionSpec *)supportedSpecWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnectionSpec, cipherSuites_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnectionSpec, tlsVersions_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnectionSpec, supportedSpec_, ComSquareupOkhttpConnectionSpec *)

__attribute__((unused)) static void ComSquareupOkhttpConnectionSpec_initWithComSquareupOkhttpConnectionSpec_Builder_(ComSquareupOkhttpConnectionSpec *self, ComSquareupOkhttpConnectionSpec_Builder *builder);

__attribute__((unused)) static ComSquareupOkhttpConnectionSpec *new_ComSquareupOkhttpConnectionSpec_initWithComSquareupOkhttpConnectionSpec_Builder_(ComSquareupOkhttpConnectionSpec_Builder *builder) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpConnectionSpec *create_ComSquareupOkhttpConnectionSpec_initWithComSquareupOkhttpConnectionSpec_Builder_(ComSquareupOkhttpConnectionSpec_Builder *builder);

__attribute__((unused)) static ComSquareupOkhttpConnectionSpec *ComSquareupOkhttpConnectionSpec_supportedSpecWithJavaxNetSslSSLSocket_(ComSquareupOkhttpConnectionSpec *self, JavaxNetSslSSLSocket *sslSocket);

@interface ComSquareupOkhttpConnectionSpec_Builder () {
 @public
  jboolean tls_;
  IOSObjectArray *cipherSuites_;
  IOSObjectArray *tlsVersions_;
  jboolean supportsTlsExtensions_;
}

- (instancetype)initWithBoolean:(jboolean)tls;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnectionSpec_Builder, cipherSuites_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnectionSpec_Builder, tlsVersions_, IOSObjectArray *)

__attribute__((unused)) static void ComSquareupOkhttpConnectionSpec_Builder_initWithBoolean_(ComSquareupOkhttpConnectionSpec_Builder *self, jboolean tls);

__attribute__((unused)) static ComSquareupOkhttpConnectionSpec_Builder *new_ComSquareupOkhttpConnectionSpec_Builder_initWithBoolean_(jboolean tls) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpConnectionSpec_Builder *create_ComSquareupOkhttpConnectionSpec_Builder_initWithBoolean_(jboolean tls);

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpConnectionSpec)

ComSquareupOkhttpConnectionSpec *ComSquareupOkhttpConnectionSpec_MODERN_TLS;
ComSquareupOkhttpConnectionSpec *ComSquareupOkhttpConnectionSpec_COMPATIBLE_TLS;
ComSquareupOkhttpConnectionSpec *ComSquareupOkhttpConnectionSpec_CLEARTEXT;

@implementation ComSquareupOkhttpConnectionSpec

- (instancetype)initWithComSquareupOkhttpConnectionSpec_Builder:(ComSquareupOkhttpConnectionSpec_Builder *)builder {
  ComSquareupOkhttpConnectionSpec_initWithComSquareupOkhttpConnectionSpec_Builder_(self, builder);
  return self;
}

- (jboolean)isTls {
  return tls_;
}

- (id<JavaUtilList>)cipherSuites {
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(cipherSuites_))->size_ type:ComSquareupOkhttpCipherSuite_class_()];
  for (jint i = 0; i < cipherSuites_->size_; i++) {
    (void) IOSObjectArray_Set(result, i, ComSquareupOkhttpCipherSuite_forJavaNameWithNSString_(IOSObjectArray_Get(cipherSuites_, i)));
  }
  return ComSquareupOkhttpInternalUtil_immutableListWithNSObjectArray_(result);
}

- (id<JavaUtilList>)tlsVersions {
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(tlsVersions_))->size_ type:ComSquareupOkhttpTlsVersion_class_()];
  for (jint i = 0; i < tlsVersions_->size_; i++) {
    (void) IOSObjectArray_Set(result, i, ComSquareupOkhttpTlsVersion_forJavaNameWithNSString_(IOSObjectArray_Get(tlsVersions_, i)));
  }
  return ComSquareupOkhttpInternalUtil_immutableListWithNSObjectArray_(result);
}

- (jboolean)supportsTlsExtensions {
  return supportsTlsExtensions_;
}

- (void)applyWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
           withComSquareupOkhttpRoute:(ComSquareupOkhttpRoute *)route {
  ComSquareupOkhttpConnectionSpec *specToApply = supportedSpec_;
  if (specToApply == nil) {
    specToApply = ComSquareupOkhttpConnectionSpec_supportedSpecWithJavaxNetSslSSLSocket_(self, sslSocket);
    supportedSpec_ = specToApply;
  }
  [((JavaxNetSslSSLSocket *) nil_chk(sslSocket)) setEnabledProtocolsWithNSStringArray:((ComSquareupOkhttpConnectionSpec *) nil_chk(specToApply))->tlsVersions_];
  IOSObjectArray *cipherSuitesToEnable = specToApply->cipherSuites_;
  if (((ComSquareupOkhttpRoute *) nil_chk(route))->shouldSendTlsFallbackIndicator_) {
    NSString *fallbackScsv = @"TLS_FALLBACK_SCSV";
    jboolean socketSupportsFallbackScsv = [((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_([sslSocket getSupportedCipherSuites]))) containsWithId:fallbackScsv];
    if (socketSupportsFallbackScsv) {
      IOSObjectArray *oldEnabledCipherSuites = cipherSuitesToEnable;
      IOSObjectArray *newEnabledCipherSuites = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(oldEnabledCipherSuites))->size_ + 1 type:NSString_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldEnabledCipherSuites, 0, newEnabledCipherSuites, 0, oldEnabledCipherSuites->size_);
      (void) IOSObjectArray_Set(newEnabledCipherSuites, newEnabledCipherSuites->size_ - 1, fallbackScsv);
      cipherSuitesToEnable = newEnabledCipherSuites;
    }
  }
  [sslSocket setEnabledCipherSuitesWithNSStringArray:cipherSuitesToEnable];
  ComSquareupOkhttpInternalPlatform *platform = ComSquareupOkhttpInternalPlatform_get();
  if (specToApply->supportsTlsExtensions_) {
    [((ComSquareupOkhttpInternalPlatform *) nil_chk(platform)) configureTlsExtensionsWithJavaxNetSslSSLSocket:sslSocket withNSString:((ComSquareupOkhttpAddress *) nil_chk(route->address_))->uriHost_ withJavaUtilList:route->address_->protocols_];
  }
}

- (ComSquareupOkhttpConnectionSpec *)supportedSpecWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket {
  return ComSquareupOkhttpConnectionSpec_supportedSpecWithJavaxNetSslSSLSocket_(self, sslSocket);
}

- (jboolean)isEqual:(id)other {
  if (!([other isKindOfClass:[ComSquareupOkhttpConnectionSpec class]])) return false;
  ComSquareupOkhttpConnectionSpec *that = (ComSquareupOkhttpConnectionSpec *) cast_chk(other, [ComSquareupOkhttpConnectionSpec class]);
  if (self->tls_ != ((ComSquareupOkhttpConnectionSpec *) nil_chk(that))->tls_) return false;
  if (tls_) {
    if (!JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(self->cipherSuites_, that->cipherSuites_)) return false;
    if (!JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(self->tlsVersions_, that->tlsVersions_)) return false;
    if (self->supportsTlsExtensions_ != that->supportsTlsExtensions_) return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint result = 17;
  if (tls_) {
    result = 31 * result + JavaUtilArrays_hashCodeWithNSObjectArray_(cipherSuites_);
    result = 31 * result + JavaUtilArrays_hashCodeWithNSObjectArray_(tlsVersions_);
    result = 31 * result + (supportsTlsExtensions_ ? 0 : 1);
  }
  return result;
}

- (NSString *)description {
  if (tls_) {
    return JreStrcat("$@$@$ZC", @"ConnectionSpec(cipherSuites=", [self cipherSuites], @", tlsVersions=", [self tlsVersions], @", supportsTlsExtensions=", supportsTlsExtensions_, ')');
  }
  else {
    return @"ConnectionSpec()";
  }
}

+ (void)initialize {
  if (self == [ComSquareupOkhttpConnectionSpec class]) {
    ComSquareupOkhttpConnectionSpec_MODERN_TLS = [((ComSquareupOkhttpConnectionSpec_Builder *) nil_chk([((ComSquareupOkhttpConnectionSpec_Builder *) nil_chk([((ComSquareupOkhttpConnectionSpec_Builder *) nil_chk([new_ComSquareupOkhttpConnectionSpec_Builder_initWithBoolean_(true) cipherSuitesWithComSquareupOkhttpCipherSuiteArray:[IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_ECDHE_ECDSA_WITH_RC4_128_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_ECDHE_RSA_WITH_RC4_128_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_DHE_RSA_WITH_AES_128_CBC_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_DHE_DSS_WITH_AES_128_CBC_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_DHE_RSA_WITH_AES_256_CBC_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_RSA_WITH_AES_128_GCM_SHA256), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_RSA_WITH_AES_128_CBC_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_RSA_WITH_AES_256_CBC_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_RSA_WITH_3DES_EDE_CBC_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_RSA_WITH_RC4_128_SHA), JreLoadEnum(ComSquareupOkhttpCipherSuite, TLS_RSA_WITH_RC4_128_MD5) } count:18 type:ComSquareupOkhttpCipherSuite_class_()]])) tlsVersionsWithComSquareupOkhttpTlsVersionArray:[IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(ComSquareupOkhttpTlsVersion, TLS_1_2), JreLoadEnum(ComSquareupOkhttpTlsVersion, TLS_1_1), JreLoadEnum(ComSquareupOkhttpTlsVersion, TLS_1_0) } count:3 type:ComSquareupOkhttpTlsVersion_class_()]])) supportsTlsExtensionsWithBoolean:true])) build];
    ComSquareupOkhttpConnectionSpec_COMPATIBLE_TLS = [((ComSquareupOkhttpConnectionSpec_Builder *) nil_chk([new_ComSquareupOkhttpConnectionSpec_Builder_initWithComSquareupOkhttpConnectionSpec_(ComSquareupOkhttpConnectionSpec_MODERN_TLS) tlsVersionsWithComSquareupOkhttpTlsVersionArray:[IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(ComSquareupOkhttpTlsVersion, TLS_1_0) } count:1 type:ComSquareupOkhttpTlsVersion_class_()]])) build];
    ComSquareupOkhttpConnectionSpec_CLEARTEXT = [new_ComSquareupOkhttpConnectionSpec_Builder_initWithBoolean_(false) build];
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpConnectionSpec)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpConnectionSpec_Builder:", "ConnectionSpec", NULL, 0x2, NULL, NULL },
    { "isTls", NULL, "Z", 0x1, NULL, NULL },
    { "cipherSuites", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lcom/squareup/okhttp/CipherSuite;>;" },
    { "tlsVersions", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lcom/squareup/okhttp/TlsVersion;>;" },
    { "supportsTlsExtensions", NULL, "Z", 0x1, NULL, NULL },
    { "applyWithJavaxNetSslSSLSocket:withComSquareupOkhttpRoute:", "apply", "V", 0x0, NULL, NULL },
    { "supportedSpecWithJavaxNetSslSSLSocket:", "supportedSpec", "Lcom.squareup.okhttp.ConnectionSpec;", 0x2, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MODERN_TLS", "MODERN_TLS", 0x19, "Lcom.squareup.okhttp.ConnectionSpec;", &ComSquareupOkhttpConnectionSpec_MODERN_TLS, NULL, .constantValue.asLong = 0 },
    { "COMPATIBLE_TLS", "COMPATIBLE_TLS", 0x19, "Lcom.squareup.okhttp.ConnectionSpec;", &ComSquareupOkhttpConnectionSpec_COMPATIBLE_TLS, NULL, .constantValue.asLong = 0 },
    { "CLEARTEXT", "CLEARTEXT", 0x19, "Lcom.squareup.okhttp.ConnectionSpec;", &ComSquareupOkhttpConnectionSpec_CLEARTEXT, NULL, .constantValue.asLong = 0 },
    { "tls_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "cipherSuites_", NULL, 0x12, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "tlsVersions_", NULL, 0x12, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "supportsTlsExtensions_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "supportedSpec_", NULL, 0x2, "Lcom.squareup.okhttp.ConnectionSpec;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.squareup.okhttp.ConnectionSpec$Builder;"};
  static const J2ObjcClassInfo _ComSquareupOkhttpConnectionSpec = { 2, "ConnectionSpec", "com.squareup.okhttp", NULL, 0x11, 10, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComSquareupOkhttpConnectionSpec;
}

@end

void ComSquareupOkhttpConnectionSpec_initWithComSquareupOkhttpConnectionSpec_Builder_(ComSquareupOkhttpConnectionSpec *self, ComSquareupOkhttpConnectionSpec_Builder *builder) {
  NSObject_init(self);
  self->tls_ = ((ComSquareupOkhttpConnectionSpec_Builder *) nil_chk(builder))->tls_;
  self->cipherSuites_ = builder->cipherSuites_;
  self->tlsVersions_ = builder->tlsVersions_;
  self->supportsTlsExtensions_ = builder->supportsTlsExtensions_;
}

ComSquareupOkhttpConnectionSpec *new_ComSquareupOkhttpConnectionSpec_initWithComSquareupOkhttpConnectionSpec_Builder_(ComSquareupOkhttpConnectionSpec_Builder *builder) {
  ComSquareupOkhttpConnectionSpec *self = [ComSquareupOkhttpConnectionSpec alloc];
  ComSquareupOkhttpConnectionSpec_initWithComSquareupOkhttpConnectionSpec_Builder_(self, builder);
  return self;
}

ComSquareupOkhttpConnectionSpec *create_ComSquareupOkhttpConnectionSpec_initWithComSquareupOkhttpConnectionSpec_Builder_(ComSquareupOkhttpConnectionSpec_Builder *builder) {
  return new_ComSquareupOkhttpConnectionSpec_initWithComSquareupOkhttpConnectionSpec_Builder_(builder);
}

ComSquareupOkhttpConnectionSpec *ComSquareupOkhttpConnectionSpec_supportedSpecWithJavaxNetSslSSLSocket_(ComSquareupOkhttpConnectionSpec *self, JavaxNetSslSSLSocket *sslSocket) {
  id<JavaUtilList> supportedCipherSuites = ComSquareupOkhttpInternalUtil_intersectWithNSObjectArray_withNSObjectArray_(self->cipherSuites_, [((JavaxNetSslSSLSocket *) nil_chk(sslSocket)) getSupportedCipherSuites]);
  id<JavaUtilList> supportedTlsVersions = ComSquareupOkhttpInternalUtil_intersectWithNSObjectArray_withNSObjectArray_(self->tlsVersions_, [sslSocket getSupportedProtocols]);
  return [((ComSquareupOkhttpConnectionSpec_Builder *) nil_chk([((ComSquareupOkhttpConnectionSpec_Builder *) nil_chk([new_ComSquareupOkhttpConnectionSpec_Builder_initWithComSquareupOkhttpConnectionSpec_(self) cipherSuitesWithNSStringArray:[supportedCipherSuites toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(supportedCipherSuites)) size] type:NSString_class_()]]])) tlsVersionsWithNSStringArray:[supportedTlsVersions toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(supportedTlsVersions)) size] type:NSString_class_()]]])) build];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpConnectionSpec)

@implementation ComSquareupOkhttpConnectionSpec_Builder

- (instancetype)initWithBoolean:(jboolean)tls {
  ComSquareupOkhttpConnectionSpec_Builder_initWithBoolean_(self, tls);
  return self;
}

- (instancetype)initWithComSquareupOkhttpConnectionSpec:(ComSquareupOkhttpConnectionSpec *)connectionSpec {
  ComSquareupOkhttpConnectionSpec_Builder_initWithComSquareupOkhttpConnectionSpec_(self, connectionSpec);
  return self;
}

- (ComSquareupOkhttpConnectionSpec_Builder *)cipherSuitesWithComSquareupOkhttpCipherSuiteArray:(IOSObjectArray *)cipherSuites {
  if (!tls_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"no cipher suites for cleartext connections");
  IOSObjectArray *strings = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(cipherSuites))->size_ type:NSString_class_()];
  for (jint i = 0; i < cipherSuites->size_; i++) {
    (void) IOSObjectArray_Set(strings, i, ((ComSquareupOkhttpCipherSuite *) nil_chk(IOSObjectArray_Get(cipherSuites, i)))->javaName_);
  }
  return [self cipherSuitesWithNSStringArray:strings];
}

- (ComSquareupOkhttpConnectionSpec_Builder *)cipherSuitesWithNSStringArray:(IOSObjectArray *)cipherSuites {
  self->cipherSuites_ = cipherSuites;
  return self;
}

- (ComSquareupOkhttpConnectionSpec_Builder *)tlsVersionsWithComSquareupOkhttpTlsVersionArray:(IOSObjectArray *)tlsVersions {
  if (!tls_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"no TLS versions for cleartext connections");
  IOSObjectArray *strings = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(tlsVersions))->size_ type:NSString_class_()];
  for (jint i = 0; i < tlsVersions->size_; i++) {
    (void) IOSObjectArray_Set(strings, i, ((ComSquareupOkhttpTlsVersion *) nil_chk(IOSObjectArray_Get(tlsVersions, i)))->javaName_);
  }
  return [self tlsVersionsWithNSStringArray:strings];
}

- (ComSquareupOkhttpConnectionSpec_Builder *)tlsVersionsWithNSStringArray:(IOSObjectArray *)tlsVersions {
  self->tlsVersions_ = tlsVersions;
  return self;
}

- (ComSquareupOkhttpConnectionSpec_Builder *)supportsTlsExtensionsWithBoolean:(jboolean)supportsTlsExtensions {
  if (!tls_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"no TLS extensions for cleartext connections");
  self->supportsTlsExtensions_ = supportsTlsExtensions;
  return self;
}

- (ComSquareupOkhttpConnectionSpec *)build {
  return new_ComSquareupOkhttpConnectionSpec_initWithComSquareupOkhttpConnectionSpec_Builder_(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:", "Builder", NULL, 0x2, NULL, NULL },
    { "initWithComSquareupOkhttpConnectionSpec:", "Builder", NULL, 0x1, NULL, NULL },
    { "cipherSuitesWithComSquareupOkhttpCipherSuiteArray:", "cipherSuites", "Lcom.squareup.okhttp.ConnectionSpec$Builder;", 0x81, NULL, NULL },
    { "cipherSuitesWithNSStringArray:", "cipherSuites", "Lcom.squareup.okhttp.ConnectionSpec$Builder;", 0x0, NULL, NULL },
    { "tlsVersionsWithComSquareupOkhttpTlsVersionArray:", "tlsVersions", "Lcom.squareup.okhttp.ConnectionSpec$Builder;", 0x81, NULL, NULL },
    { "tlsVersionsWithNSStringArray:", "tlsVersions", "Lcom.squareup.okhttp.ConnectionSpec$Builder;", 0x80, NULL, NULL },
    { "supportsTlsExtensionsWithBoolean:", "supportsTlsExtensions", "Lcom.squareup.okhttp.ConnectionSpec$Builder;", 0x1, NULL, NULL },
    { "build", NULL, "Lcom.squareup.okhttp.ConnectionSpec;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "tls_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "cipherSuites_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "tlsVersions_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "supportsTlsExtensions_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpConnectionSpec_Builder = { 2, "Builder", "com.squareup.okhttp", "ConnectionSpec", 0x19, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpConnectionSpec_Builder;
}

@end

void ComSquareupOkhttpConnectionSpec_Builder_initWithBoolean_(ComSquareupOkhttpConnectionSpec_Builder *self, jboolean tls) {
  NSObject_init(self);
  self->tls_ = tls;
}

ComSquareupOkhttpConnectionSpec_Builder *new_ComSquareupOkhttpConnectionSpec_Builder_initWithBoolean_(jboolean tls) {
  ComSquareupOkhttpConnectionSpec_Builder *self = [ComSquareupOkhttpConnectionSpec_Builder alloc];
  ComSquareupOkhttpConnectionSpec_Builder_initWithBoolean_(self, tls);
  return self;
}

ComSquareupOkhttpConnectionSpec_Builder *create_ComSquareupOkhttpConnectionSpec_Builder_initWithBoolean_(jboolean tls) {
  return new_ComSquareupOkhttpConnectionSpec_Builder_initWithBoolean_(tls);
}

void ComSquareupOkhttpConnectionSpec_Builder_initWithComSquareupOkhttpConnectionSpec_(ComSquareupOkhttpConnectionSpec_Builder *self, ComSquareupOkhttpConnectionSpec *connectionSpec) {
  NSObject_init(self);
  self->tls_ = ((ComSquareupOkhttpConnectionSpec *) nil_chk(connectionSpec))->tls_;
  self->cipherSuites_ = connectionSpec->cipherSuites_;
  self->tlsVersions_ = connectionSpec->tlsVersions_;
  self->supportsTlsExtensions_ = connectionSpec->supportsTlsExtensions_;
}

ComSquareupOkhttpConnectionSpec_Builder *new_ComSquareupOkhttpConnectionSpec_Builder_initWithComSquareupOkhttpConnectionSpec_(ComSquareupOkhttpConnectionSpec *connectionSpec) {
  ComSquareupOkhttpConnectionSpec_Builder *self = [ComSquareupOkhttpConnectionSpec_Builder alloc];
  ComSquareupOkhttpConnectionSpec_Builder_initWithComSquareupOkhttpConnectionSpec_(self, connectionSpec);
  return self;
}

ComSquareupOkhttpConnectionSpec_Builder *create_ComSquareupOkhttpConnectionSpec_Builder_initWithComSquareupOkhttpConnectionSpec_(ComSquareupOkhttpConnectionSpec *connectionSpec) {
  return new_ComSquareupOkhttpConnectionSpec_Builder_initWithComSquareupOkhttpConnectionSpec_(connectionSpec);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpConnectionSpec_Builder)
