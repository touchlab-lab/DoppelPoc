//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Protocol.h"
#include "com/squareup/okhttp/internal/Internal.h"
#include "com/squareup/okhttp/internal/OptionalMethod.h"
#include "com/squareup/okhttp/internal/Platform.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/System.h"
#include "java/lang/reflect/InvocationHandler.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Proxy.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/Socket.h"
#include "java/net/SocketException.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/net/ssl/SSLSocket.h"
#include "okio/Buffer.h"

@interface ComSquareupOkhttpInternalPlatform ()

+ (ComSquareupOkhttpInternalPlatform *)findPlatform;

@end

inline ComSquareupOkhttpInternalPlatform *ComSquareupOkhttpInternalPlatform_get_PLATFORM();
static ComSquareupOkhttpInternalPlatform *ComSquareupOkhttpInternalPlatform_PLATFORM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalPlatform, PLATFORM, ComSquareupOkhttpInternalPlatform *)

__attribute__((unused)) static ComSquareupOkhttpInternalPlatform *ComSquareupOkhttpInternalPlatform_findPlatform();

@interface ComSquareupOkhttpInternalPlatform_Android : ComSquareupOkhttpInternalPlatform {
 @public
  JavaLangReflectMethod *trafficStatsTagSocket_;
  JavaLangReflectMethod *trafficStatsUntagSocket_;
}

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)trafficStatsTagSocket
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)trafficStatsUntagSocket;

- (void)connectSocketWithJavaNetSocket:(JavaNetSocket *)socket
          withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)address
                               withInt:(jint)connectTimeout;

- (void)configureTlsExtensionsWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                                          withNSString:(NSString *)hostname
                                      withJavaUtilList:(id<JavaUtilList>)protocols;

- (NSString *)getSelectedProtocolWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket;

- (void)tagSocketWithJavaNetSocket:(JavaNetSocket *)socket;

- (void)untagSocketWithJavaNetSocket:(JavaNetSocket *)socket;

@end

J2OBJC_STATIC_INIT(ComSquareupOkhttpInternalPlatform_Android)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalPlatform_Android, trafficStatsTagSocket_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalPlatform_Android, trafficStatsUntagSocket_, JavaLangReflectMethod *)

inline ComSquareupOkhttpInternalOptionalMethod *ComSquareupOkhttpInternalPlatform_Android_get_SET_USE_SESSION_TICKETS();
static ComSquareupOkhttpInternalOptionalMethod *ComSquareupOkhttpInternalPlatform_Android_SET_USE_SESSION_TICKETS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalPlatform_Android, SET_USE_SESSION_TICKETS, ComSquareupOkhttpInternalOptionalMethod *)

inline ComSquareupOkhttpInternalOptionalMethod *ComSquareupOkhttpInternalPlatform_Android_get_SET_HOSTNAME();
static ComSquareupOkhttpInternalOptionalMethod *ComSquareupOkhttpInternalPlatform_Android_SET_HOSTNAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalPlatform_Android, SET_HOSTNAME, ComSquareupOkhttpInternalOptionalMethod *)

inline ComSquareupOkhttpInternalOptionalMethod *ComSquareupOkhttpInternalPlatform_Android_get_GET_ALPN_SELECTED_PROTOCOL();
static ComSquareupOkhttpInternalOptionalMethod *ComSquareupOkhttpInternalPlatform_Android_GET_ALPN_SELECTED_PROTOCOL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalPlatform_Android, GET_ALPN_SELECTED_PROTOCOL, ComSquareupOkhttpInternalOptionalMethod *)

inline ComSquareupOkhttpInternalOptionalMethod *ComSquareupOkhttpInternalPlatform_Android_get_SET_ALPN_PROTOCOLS();
static ComSquareupOkhttpInternalOptionalMethod *ComSquareupOkhttpInternalPlatform_Android_SET_ALPN_PROTOCOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalPlatform_Android, SET_ALPN_PROTOCOLS, ComSquareupOkhttpInternalOptionalMethod *)

__attribute__((unused)) static void ComSquareupOkhttpInternalPlatform_Android_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(ComSquareupOkhttpInternalPlatform_Android *self, JavaLangReflectMethod *trafficStatsTagSocket, JavaLangReflectMethod *trafficStatsUntagSocket);

__attribute__((unused)) static ComSquareupOkhttpInternalPlatform_Android *new_ComSquareupOkhttpInternalPlatform_Android_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(JavaLangReflectMethod *trafficStatsTagSocket, JavaLangReflectMethod *trafficStatsUntagSocket) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalPlatform_Android *create_ComSquareupOkhttpInternalPlatform_Android_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(JavaLangReflectMethod *trafficStatsTagSocket, JavaLangReflectMethod *trafficStatsUntagSocket);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalPlatform_Android)

@interface ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform : ComSquareupOkhttpInternalPlatform {
 @public
  JavaLangReflectMethod *putMethod_;
  JavaLangReflectMethod *getMethod_;
  JavaLangReflectMethod *removeMethod_;
  IOSClass *clientProviderClass_;
  IOSClass *serverProviderClass_;
}

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)putMethod
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)getMethod
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)removeMethod
                                 withIOSClass:(IOSClass *)clientProviderClass
                                 withIOSClass:(IOSClass *)serverProviderClass;

- (void)configureTlsExtensionsWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                                          withNSString:(NSString *)hostname
                                      withJavaUtilList:(id<JavaUtilList>)protocols;

- (void)afterHandshakeWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket;

- (NSString *)getSelectedProtocolWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform, putMethod_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform, getMethod_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform, removeMethod_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform, clientProviderClass_, IOSClass *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform, serverProviderClass_, IOSClass *)

__attribute__((unused)) static void ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform *self, JavaLangReflectMethod *putMethod, JavaLangReflectMethod *getMethod, JavaLangReflectMethod *removeMethod, IOSClass *clientProviderClass, IOSClass *serverProviderClass);

__attribute__((unused)) static ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform *new_ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(JavaLangReflectMethod *putMethod, JavaLangReflectMethod *getMethod, JavaLangReflectMethod *removeMethod, IOSClass *clientProviderClass, IOSClass *serverProviderClass) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform *create_ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(JavaLangReflectMethod *putMethod, JavaLangReflectMethod *getMethod, JavaLangReflectMethod *removeMethod, IOSClass *clientProviderClass, IOSClass *serverProviderClass);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform)

@interface ComSquareupOkhttpInternalPlatform_JettyNegoProvider : NSObject < JavaLangReflectInvocationHandler > {
 @public
  id<JavaUtilList> protocols_;
  jboolean unsupported_;
  NSString *selected_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)protocols;

- (id)invokeWithId:(id)proxy
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
 withNSObjectArray:(IOSObjectArray *)args;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalPlatform_JettyNegoProvider)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalPlatform_JettyNegoProvider, protocols_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalPlatform_JettyNegoProvider, selected_, NSString *)

__attribute__((unused)) static void ComSquareupOkhttpInternalPlatform_JettyNegoProvider_initWithJavaUtilList_(ComSquareupOkhttpInternalPlatform_JettyNegoProvider *self, id<JavaUtilList> protocols);

__attribute__((unused)) static ComSquareupOkhttpInternalPlatform_JettyNegoProvider *new_ComSquareupOkhttpInternalPlatform_JettyNegoProvider_initWithJavaUtilList_(id<JavaUtilList> protocols) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalPlatform_JettyNegoProvider *create_ComSquareupOkhttpInternalPlatform_JettyNegoProvider_initWithJavaUtilList_(id<JavaUtilList> protocols);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalPlatform_JettyNegoProvider)

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpInternalPlatform)

@implementation ComSquareupOkhttpInternalPlatform

+ (ComSquareupOkhttpInternalPlatform *)get {
  return ComSquareupOkhttpInternalPlatform_get();
}

- (NSString *)getPrefix {
  return @"OkHttp";
}

- (void)logWWithNSString:(NSString *)warning {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:warning];
}

- (void)tagSocketWithJavaNetSocket:(JavaNetSocket *)socket {
}

- (void)untagSocketWithJavaNetSocket:(JavaNetSocket *)socket {
}

- (JavaNetURI *)toUriLenientWithJavaNetURL:(JavaNetURL *)url {
  return [((JavaNetURL *) nil_chk(url)) toURI];
}

- (void)configureTlsExtensionsWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                                          withNSString:(NSString *)hostname
                                      withJavaUtilList:(id<JavaUtilList>)protocols {
}

- (void)afterHandshakeWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket {
}

- (NSString *)getSelectedProtocolWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket {
  return nil;
}

- (void)connectSocketWithJavaNetSocket:(JavaNetSocket *)socket
          withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)address
                               withInt:(jint)connectTimeout {
  [((JavaNetSocket *) nil_chk(socket)) connectWithJavaNetSocketAddress:address withInt:connectTimeout];
}

+ (ComSquareupOkhttpInternalPlatform *)findPlatform {
  return ComSquareupOkhttpInternalPlatform_findPlatform();
}

+ (IOSByteArray *)concatLengthPrefixedWithJavaUtilList:(id<JavaUtilList>)protocols {
  return ComSquareupOkhttpInternalPlatform_concatLengthPrefixedWithJavaUtilList_(protocols);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpInternalPlatform_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [ComSquareupOkhttpInternalPlatform class]) {
    ComSquareupOkhttpInternalPlatform_PLATFORM = ComSquareupOkhttpInternalPlatform_findPlatform();
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpInternalPlatform)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "get", NULL, "Lcom.squareup.okhttp.internal.Platform;", 0x9, NULL, NULL },
    { "getPrefix", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "logWWithNSString:", "logW", "V", 0x1, NULL, NULL },
    { "tagSocketWithJavaNetSocket:", "tagSocket", "V", 0x1, "Ljava.net.SocketException;", NULL },
    { "untagSocketWithJavaNetSocket:", "untagSocket", "V", 0x1, "Ljava.net.SocketException;", NULL },
    { "toUriLenientWithJavaNetURL:", "toUriLenient", "Ljava.net.URI;", 0x1, "Ljava.net.URISyntaxException;", NULL },
    { "configureTlsExtensionsWithJavaxNetSslSSLSocket:withNSString:withJavaUtilList:", "configureTlsExtensions", "V", 0x1, NULL, "(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List<Lcom/squareup/okhttp/Protocol;>;)V" },
    { "afterHandshakeWithJavaxNetSslSSLSocket:", "afterHandshake", "V", 0x1, NULL, NULL },
    { "getSelectedProtocolWithJavaxNetSslSSLSocket:", "getSelectedProtocol", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "connectSocketWithJavaNetSocket:withJavaNetInetSocketAddress:withInt:", "connectSocket", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "findPlatform", NULL, "Lcom.squareup.okhttp.internal.Platform;", 0xa, NULL, NULL },
    { "concatLengthPrefixedWithJavaUtilList:", "concatLengthPrefixed", "[B", 0x8, NULL, "(Ljava/util/List<Lcom/squareup/okhttp/Protocol;>;)[B" },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PLATFORM", "PLATFORM", 0x1a, "Lcom.squareup.okhttp.internal.Platform;", &ComSquareupOkhttpInternalPlatform_PLATFORM, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.squareup.okhttp.internal.Platform$Android;", "Lcom.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform;", "Lcom.squareup.okhttp.internal.Platform$JettyNegoProvider;"};
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalPlatform = { 2, "Platform", "com.squareup.okhttp.internal", NULL, 0x1, 13, methods, 1, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_ComSquareupOkhttpInternalPlatform;
}

@end

ComSquareupOkhttpInternalPlatform *ComSquareupOkhttpInternalPlatform_get() {
  ComSquareupOkhttpInternalPlatform_initialize();
  return ComSquareupOkhttpInternalPlatform_PLATFORM;
}

ComSquareupOkhttpInternalPlatform *ComSquareupOkhttpInternalPlatform_findPlatform() {
  ComSquareupOkhttpInternalPlatform_initialize();
  @try {
    @try {
      (void) IOSClass_forName_(@"com.android.org.conscrypt.OpenSSLSocketImpl");
    }
    @catch (JavaLangClassNotFoundException *ignored) {
      (void) IOSClass_forName_(@"org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");
    }
    JavaLangReflectMethod *trafficStatsTagSocket = nil;
    JavaLangReflectMethod *trafficStatsUntagSocket = nil;
    @try {
      IOSClass *trafficStats = IOSClass_forName_(@"android.net.TrafficStats");
      trafficStatsTagSocket = [((IOSClass *) nil_chk(trafficStats)) getMethod:@"tagSocket" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ JavaNetSocket_class_() } count:1 type:IOSClass_class_()]];
      trafficStatsUntagSocket = [trafficStats getMethod:@"untagSocket" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ JavaNetSocket_class_() } count:1 type:IOSClass_class_()]];
    }
    @catch (JavaLangClassNotFoundException *ignored) {
    }
    @catch (JavaLangNoSuchMethodException *ignored) {
    }
    return new_ComSquareupOkhttpInternalPlatform_Android_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(trafficStatsTagSocket, trafficStatsUntagSocket);
  }
  @catch (JavaLangClassNotFoundException *ignored) {
  }
  @try {
    NSString *negoClassName = @"org.eclipse.jetty.alpn.ALPN";
    IOSClass *negoClass = IOSClass_forName_(negoClassName);
    IOSClass *providerClass = IOSClass_forName_(JreStrcat("$$", negoClassName, @"$Provider"));
    IOSClass *clientProviderClass = IOSClass_forName_(JreStrcat("$$", negoClassName, @"$ClientProvider"));
    IOSClass *serverProviderClass = IOSClass_forName_(JreStrcat("$$", negoClassName, @"$ServerProvider"));
    JavaLangReflectMethod *putMethod = [((IOSClass *) nil_chk(negoClass)) getMethod:@"put" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ JavaxNetSslSSLSocket_class_(), providerClass } count:2 type:IOSClass_class_()]];
    JavaLangReflectMethod *getMethod = [negoClass getMethod:@"get" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ JavaxNetSslSSLSocket_class_() } count:1 type:IOSClass_class_()]];
    JavaLangReflectMethod *removeMethod = [negoClass getMethod:@"remove" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ JavaxNetSslSSLSocket_class_() } count:1 type:IOSClass_class_()]];
    return new_ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);
  }
  @catch (JavaLangClassNotFoundException *ignored) {
  }
  @catch (JavaLangNoSuchMethodException *ignored) {
  }
  return new_ComSquareupOkhttpInternalPlatform_init();
}

IOSByteArray *ComSquareupOkhttpInternalPlatform_concatLengthPrefixedWithJavaUtilList_(id<JavaUtilList> protocols) {
  ComSquareupOkhttpInternalPlatform_initialize();
  OkioBuffer *result = new_OkioBuffer_init();
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(protocols)) size]; i < size; i++) {
    ComSquareupOkhttpProtocol *protocol = [protocols getWithInt:i];
    if (protocol == JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_1_0)) continue;
    (void) [result writeByteWithInt:((jint) [((NSString *) nil_chk([((ComSquareupOkhttpProtocol *) nil_chk(protocol)) description])) length])];
    (void) [result writeUtf8WithNSString:[protocol description]];
  }
  return [result readByteArray];
}

void ComSquareupOkhttpInternalPlatform_init(ComSquareupOkhttpInternalPlatform *self) {
  NSObject_init(self);
}

ComSquareupOkhttpInternalPlatform *new_ComSquareupOkhttpInternalPlatform_init() {
  ComSquareupOkhttpInternalPlatform *self = [ComSquareupOkhttpInternalPlatform alloc];
  ComSquareupOkhttpInternalPlatform_init(self);
  return self;
}

ComSquareupOkhttpInternalPlatform *create_ComSquareupOkhttpInternalPlatform_init() {
  return new_ComSquareupOkhttpInternalPlatform_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalPlatform)

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpInternalPlatform_Android)

@implementation ComSquareupOkhttpInternalPlatform_Android

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)trafficStatsTagSocket
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)trafficStatsUntagSocket {
  ComSquareupOkhttpInternalPlatform_Android_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(self, trafficStatsTagSocket, trafficStatsUntagSocket);
  return self;
}

- (void)connectSocketWithJavaNetSocket:(JavaNetSocket *)socket
          withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)address
                               withInt:(jint)connectTimeout {
  @try {
    [((JavaNetSocket *) nil_chk(socket)) connectWithJavaNetSocketAddress:address withInt:connectTimeout];
  }
  @catch (JavaLangSecurityException *se) {
    JavaIoIOException *ioException = new_JavaIoIOException_initWithNSString_(@"Exception in connect");
    (void) [ioException initCauseWithNSException:se];
    @throw ioException;
  }
}

- (void)configureTlsExtensionsWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                                          withNSString:(NSString *)hostname
                                      withJavaUtilList:(id<JavaUtilList>)protocols {
  if (hostname != nil) {
    (void) [((ComSquareupOkhttpInternalOptionalMethod *) nil_chk(ComSquareupOkhttpInternalPlatform_Android_SET_USE_SESSION_TICKETS)) invokeOptionalWithoutCheckedExceptionWithId:sslSocket withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(true) } count:1 type:NSObject_class_()]];
    (void) [((ComSquareupOkhttpInternalOptionalMethod *) nil_chk(ComSquareupOkhttpInternalPlatform_Android_SET_HOSTNAME)) invokeOptionalWithoutCheckedExceptionWithId:sslSocket withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ hostname } count:1 type:NSObject_class_()]];
  }
  jboolean alpnSupported = [((ComSquareupOkhttpInternalOptionalMethod *) nil_chk(ComSquareupOkhttpInternalPlatform_Android_SET_ALPN_PROTOCOLS)) isSupportedWithId:sslSocket];
  if (!alpnSupported) {
    return;
  }
  IOSObjectArray *parameters = [IOSObjectArray newArrayWithObjects:(id[]){ ComSquareupOkhttpInternalPlatform_concatLengthPrefixedWithJavaUtilList_(protocols) } count:1 type:NSObject_class_()];
  (void) [ComSquareupOkhttpInternalPlatform_Android_SET_ALPN_PROTOCOLS invokeWithoutCheckedExceptionWithId:sslSocket withNSObjectArray:parameters];
}

- (NSString *)getSelectedProtocolWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket {
  jboolean alpnSupported = [((ComSquareupOkhttpInternalOptionalMethod *) nil_chk(ComSquareupOkhttpInternalPlatform_Android_GET_ALPN_SELECTED_PROTOCOL)) isSupportedWithId:socket];
  if (!alpnSupported) {
    return nil;
  }
  IOSByteArray *alpnResult = (IOSByteArray *) cast_chk([ComSquareupOkhttpInternalPlatform_Android_GET_ALPN_SELECTED_PROTOCOL invokeWithoutCheckedExceptionWithId:socket withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]], [IOSByteArray class]);
  if (alpnResult != nil) {
    return [NSString stringWithBytes:alpnResult charset:JreLoadStatic(ComSquareupOkhttpInternalUtil, UTF_8)];
  }
  return nil;
}

- (void)tagSocketWithJavaNetSocket:(JavaNetSocket *)socket {
  if (trafficStatsTagSocket_ == nil) return;
  @try {
    (void) [((JavaLangReflectMethod *) nil_chk(trafficStatsTagSocket_)) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ socket } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_([((JavaLangReflectInvocationTargetException *) nil_chk(e)) getCause]);
  }
}

- (void)untagSocketWithJavaNetSocket:(JavaNetSocket *)socket {
  if (trafficStatsUntagSocket_ == nil) return;
  @try {
    (void) [((JavaLangReflectMethod *) nil_chk(trafficStatsUntagSocket_)) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ socket } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_([((JavaLangReflectInvocationTargetException *) nil_chk(e)) getCause]);
  }
}

+ (void)initialize {
  if (self == [ComSquareupOkhttpInternalPlatform_Android class]) {
    ComSquareupOkhttpInternalPlatform_Android_SET_USE_SESSION_TICKETS = new_ComSquareupOkhttpInternalOptionalMethod_initWithIOSClass_withNSString_withIOSClassArray_(nil, @"setUseSessionTickets", [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(JavaLangBoolean, TYPE) } count:1 type:IOSClass_class_()]);
    ComSquareupOkhttpInternalPlatform_Android_SET_HOSTNAME = new_ComSquareupOkhttpInternalOptionalMethod_initWithIOSClass_withNSString_withIOSClassArray_(nil, @"setHostname", [IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]);
    ComSquareupOkhttpInternalPlatform_Android_GET_ALPN_SELECTED_PROTOCOL = new_ComSquareupOkhttpInternalOptionalMethod_initWithIOSClass_withNSString_withIOSClassArray_(IOSClass_byteArray(1), @"getAlpnSelectedProtocol", [IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]);
    ComSquareupOkhttpInternalPlatform_Android_SET_ALPN_PROTOCOLS = new_ComSquareupOkhttpInternalOptionalMethod_initWithIOSClass_withNSString_withIOSClassArray_(nil, @"setAlpnProtocols", [IOSObjectArray newArrayWithObjects:(id[]){ IOSClass_byteArray(1) } count:1 type:IOSClass_class_()]);
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpInternalPlatform_Android)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangReflectMethod:withJavaLangReflectMethod:", "Android", NULL, 0x2, NULL, NULL },
    { "connectSocketWithJavaNetSocket:withJavaNetInetSocketAddress:withInt:", "connectSocket", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "configureTlsExtensionsWithJavaxNetSslSSLSocket:withNSString:withJavaUtilList:", "configureTlsExtensions", "V", 0x1, NULL, "(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List<Lcom/squareup/okhttp/Protocol;>;)V" },
    { "getSelectedProtocolWithJavaxNetSslSSLSocket:", "getSelectedProtocol", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "tagSocketWithJavaNetSocket:", "tagSocket", "V", 0x1, "Ljava.net.SocketException;", NULL },
    { "untagSocketWithJavaNetSocket:", "untagSocket", "V", 0x1, "Ljava.net.SocketException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SET_USE_SESSION_TICKETS", "SET_USE_SESSION_TICKETS", 0x1a, "Lcom.squareup.okhttp.internal.OptionalMethod;", &ComSquareupOkhttpInternalPlatform_Android_SET_USE_SESSION_TICKETS, "Lcom/squareup/okhttp/internal/OptionalMethod<Ljava/net/Socket;>;", .constantValue.asLong = 0 },
    { "SET_HOSTNAME", "SET_HOSTNAME", 0x1a, "Lcom.squareup.okhttp.internal.OptionalMethod;", &ComSquareupOkhttpInternalPlatform_Android_SET_HOSTNAME, "Lcom/squareup/okhttp/internal/OptionalMethod<Ljava/net/Socket;>;", .constantValue.asLong = 0 },
    { "GET_ALPN_SELECTED_PROTOCOL", "GET_ALPN_SELECTED_PROTOCOL", 0x1a, "Lcom.squareup.okhttp.internal.OptionalMethod;", &ComSquareupOkhttpInternalPlatform_Android_GET_ALPN_SELECTED_PROTOCOL, "Lcom/squareup/okhttp/internal/OptionalMethod<Ljava/net/Socket;>;", .constantValue.asLong = 0 },
    { "SET_ALPN_PROTOCOLS", "SET_ALPN_PROTOCOLS", 0x1a, "Lcom.squareup.okhttp.internal.OptionalMethod;", &ComSquareupOkhttpInternalPlatform_Android_SET_ALPN_PROTOCOLS, "Lcom/squareup/okhttp/internal/OptionalMethod<Ljava/net/Socket;>;", .constantValue.asLong = 0 },
    { "trafficStatsTagSocket_", NULL, 0x12, "Ljava.lang.reflect.Method;", NULL, NULL, .constantValue.asLong = 0 },
    { "trafficStatsUntagSocket_", NULL, 0x12, "Ljava.lang.reflect.Method;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalPlatform_Android = { 2, "Android", "com.squareup.okhttp.internal", "Platform", 0xa, 6, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalPlatform_Android;
}

@end

void ComSquareupOkhttpInternalPlatform_Android_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(ComSquareupOkhttpInternalPlatform_Android *self, JavaLangReflectMethod *trafficStatsTagSocket, JavaLangReflectMethod *trafficStatsUntagSocket) {
  ComSquareupOkhttpInternalPlatform_init(self);
  self->trafficStatsTagSocket_ = trafficStatsTagSocket;
  self->trafficStatsUntagSocket_ = trafficStatsUntagSocket;
}

ComSquareupOkhttpInternalPlatform_Android *new_ComSquareupOkhttpInternalPlatform_Android_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(JavaLangReflectMethod *trafficStatsTagSocket, JavaLangReflectMethod *trafficStatsUntagSocket) {
  ComSquareupOkhttpInternalPlatform_Android *self = [ComSquareupOkhttpInternalPlatform_Android alloc];
  ComSquareupOkhttpInternalPlatform_Android_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(self, trafficStatsTagSocket, trafficStatsUntagSocket);
  return self;
}

ComSquareupOkhttpInternalPlatform_Android *create_ComSquareupOkhttpInternalPlatform_Android_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(JavaLangReflectMethod *trafficStatsTagSocket, JavaLangReflectMethod *trafficStatsUntagSocket) {
  return new_ComSquareupOkhttpInternalPlatform_Android_initWithJavaLangReflectMethod_withJavaLangReflectMethod_(trafficStatsTagSocket, trafficStatsUntagSocket);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalPlatform_Android)

@implementation ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)putMethod
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)getMethod
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)removeMethod
                                 withIOSClass:(IOSClass *)clientProviderClass
                                 withIOSClass:(IOSClass *)serverProviderClass {
  ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(self, putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);
  return self;
}

- (void)configureTlsExtensionsWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                                          withNSString:(NSString *)hostname
                                      withJavaUtilList:(id<JavaUtilList>)protocols {
  id<JavaUtilList> names = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(protocols)) size]);
  for (jint i = 0, size = [protocols size]; i < size; i++) {
    ComSquareupOkhttpProtocol *protocol = [protocols getWithInt:i];
    if (protocol == JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_1_0)) continue;
    [names addWithId:[((ComSquareupOkhttpProtocol *) nil_chk(protocol)) description]];
  }
  @try {
    id provider = JavaLangReflectProxy_newProxyInstanceWithJavaLangClassLoader_withIOSClassArray_withJavaLangReflectInvocationHandler_([ComSquareupOkhttpInternalPlatform_class_() getClassLoader], [IOSObjectArray newArrayWithObjects:(id[]){ clientProviderClass_, serverProviderClass_ } count:2 type:IOSClass_class_()], new_ComSquareupOkhttpInternalPlatform_JettyNegoProvider_initWithJavaUtilList_(names));
    (void) [((JavaLangReflectMethod *) nil_chk(putMethod_)) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ sslSocket, provider } count:2 type:NSObject_class_()]];
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
}

- (void)afterHandshakeWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket {
  @try {
    (void) [((JavaLangReflectMethod *) nil_chk(removeMethod_)) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ sslSocket } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangIllegalAccessException *ignored) {
    @throw new_JavaLangAssertionError_init();
  }
  @catch (JavaLangReflectInvocationTargetException *ignored) {
    @throw new_JavaLangAssertionError_init();
  }
}

- (NSString *)getSelectedProtocolWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket {
  @try {
    ComSquareupOkhttpInternalPlatform_JettyNegoProvider *provider = (ComSquareupOkhttpInternalPlatform_JettyNegoProvider *) cast_chk(JavaLangReflectProxy_getInvocationHandlerWithId_([((JavaLangReflectMethod *) nil_chk(getMethod_)) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ socket } count:1 type:NSObject_class_()]]), [ComSquareupOkhttpInternalPlatform_JettyNegoProvider class]);
    if (!((ComSquareupOkhttpInternalPlatform_JettyNegoProvider *) nil_chk(provider))->unsupported_ && provider->selected_ == nil) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComSquareupOkhttpInternalInternal, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:@"ALPN callback dropped: SPDY and HTTP/2 are disabled. Is alpn-boot on the boot class path?"];
      return nil;
    }
    return provider->unsupported_ ? nil : provider->selected_;
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw new_JavaLangAssertionError_init();
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw new_JavaLangAssertionError_init();
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangReflectMethod:withJavaLangReflectMethod:withJavaLangReflectMethod:withIOSClass:withIOSClass:", "JdkWithJettyBootPlatform", NULL, 0x1, NULL, "(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class<*>;Ljava/lang/Class<*>;)V" },
    { "configureTlsExtensionsWithJavaxNetSslSSLSocket:withNSString:withJavaUtilList:", "configureTlsExtensions", "V", 0x1, NULL, "(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List<Lcom/squareup/okhttp/Protocol;>;)V" },
    { "afterHandshakeWithJavaxNetSslSSLSocket:", "afterHandshake", "V", 0x1, NULL, NULL },
    { "getSelectedProtocolWithJavaxNetSslSSLSocket:", "getSelectedProtocol", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "putMethod_", NULL, 0x12, "Ljava.lang.reflect.Method;", NULL, NULL, .constantValue.asLong = 0 },
    { "getMethod_", NULL, 0x12, "Ljava.lang.reflect.Method;", NULL, NULL, .constantValue.asLong = 0 },
    { "removeMethod_", NULL, 0x12, "Ljava.lang.reflect.Method;", NULL, NULL, .constantValue.asLong = 0 },
    { "clientProviderClass_", NULL, 0x12, "Ljava.lang.Class;", NULL, "Ljava/lang/Class<*>;", .constantValue.asLong = 0 },
    { "serverProviderClass_", NULL, 0x12, "Ljava.lang.Class;", NULL, "Ljava/lang/Class<*>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform = { 2, "JdkWithJettyBootPlatform", "com.squareup.okhttp.internal", "Platform", 0xa, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform;
}

@end

void ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform *self, JavaLangReflectMethod *putMethod, JavaLangReflectMethod *getMethod, JavaLangReflectMethod *removeMethod, IOSClass *clientProviderClass, IOSClass *serverProviderClass) {
  ComSquareupOkhttpInternalPlatform_init(self);
  self->putMethod_ = putMethod;
  self->getMethod_ = getMethod;
  self->removeMethod_ = removeMethod;
  self->clientProviderClass_ = clientProviderClass;
  self->serverProviderClass_ = serverProviderClass;
}

ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform *new_ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(JavaLangReflectMethod *putMethod, JavaLangReflectMethod *getMethod, JavaLangReflectMethod *removeMethod, IOSClass *clientProviderClass, IOSClass *serverProviderClass) {
  ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform *self = [ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform alloc];
  ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(self, putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);
  return self;
}

ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform *create_ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(JavaLangReflectMethod *putMethod, JavaLangReflectMethod *getMethod, JavaLangReflectMethod *removeMethod, IOSClass *clientProviderClass, IOSClass *serverProviderClass) {
  return new_ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_withIOSClass_(putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalPlatform_JdkWithJettyBootPlatform)

@implementation ComSquareupOkhttpInternalPlatform_JettyNegoProvider

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)protocols {
  ComSquareupOkhttpInternalPlatform_JettyNegoProvider_initWithJavaUtilList_(self, protocols);
  return self;
}

- (id)invokeWithId:(id)proxy
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
 withNSObjectArray:(IOSObjectArray *)args {
  NSString *methodName = [((JavaLangReflectMethod *) nil_chk(method)) getName];
  IOSClass *returnType = [method getReturnType];
  if (args == nil) {
    args = JreLoadStatic(ComSquareupOkhttpInternalUtil, EMPTY_STRING_ARRAY);
  }
  if ([((NSString *) nil_chk(methodName)) isEqual:@"supports"] && [IOSClass booleanClass] == returnType) {
    return JavaLangBoolean_valueOfWithBoolean_(true);
  }
  else if ([methodName isEqual:@"unsupported"] && [IOSClass voidClass] == returnType) {
    self->unsupported_ = true;
    return nil;
  }
  else if ([methodName isEqual:@"protocols"] && ((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    return protocols_;
  }
  else if (([methodName isEqual:@"selectProtocol"] || [methodName isEqual:@"select"]) && NSString_class_() == returnType && ((IOSObjectArray *) nil_chk(args))->size_ == 1 && [JavaUtilList_class_() isInstance:IOSObjectArray_Get(args, 0)]) {
    id<JavaUtilList> peerProtocols = (id<JavaUtilList>) cast_check(IOSObjectArray_Get(args, 0), JavaUtilList_class_());
    for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(peerProtocols)) size]; i < size; i++) {
      if ([((id<JavaUtilList>) nil_chk(protocols_)) containsWithId:[peerProtocols getWithInt:i]]) {
        return selected_ = [peerProtocols getWithInt:i];
      }
    }
    return selected_ = [((id<JavaUtilList>) nil_chk(protocols_)) getWithInt:0];
  }
  else if (([methodName isEqual:@"protocolSelected"] || [methodName isEqual:@"selected"]) && ((IOSObjectArray *) nil_chk(args))->size_ == 1) {
    self->selected_ = (NSString *) cast_chk(IOSObjectArray_Get(args, 0), [NSString class]);
    return nil;
  }
  else {
    return [method invokeWithId:self withNSObjectArray:args];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:", "JettyNegoProvider", NULL, 0x1, NULL, "(Ljava/util/List<Ljava/lang/String;>;)V" },
    { "invokeWithId:withJavaLangReflectMethod:withNSObjectArray:", "invoke", "Ljava.lang.Object;", 0x1, "Ljava.lang.Throwable;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "protocols_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "unsupported_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "selected_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalPlatform_JettyNegoProvider = { 2, "JettyNegoProvider", "com.squareup.okhttp.internal", "Platform", 0xa, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalPlatform_JettyNegoProvider;
}

@end

void ComSquareupOkhttpInternalPlatform_JettyNegoProvider_initWithJavaUtilList_(ComSquareupOkhttpInternalPlatform_JettyNegoProvider *self, id<JavaUtilList> protocols) {
  NSObject_init(self);
  self->protocols_ = protocols;
}

ComSquareupOkhttpInternalPlatform_JettyNegoProvider *new_ComSquareupOkhttpInternalPlatform_JettyNegoProvider_initWithJavaUtilList_(id<JavaUtilList> protocols) {
  ComSquareupOkhttpInternalPlatform_JettyNegoProvider *self = [ComSquareupOkhttpInternalPlatform_JettyNegoProvider alloc];
  ComSquareupOkhttpInternalPlatform_JettyNegoProvider_initWithJavaUtilList_(self, protocols);
  return self;
}

ComSquareupOkhttpInternalPlatform_JettyNegoProvider *create_ComSquareupOkhttpInternalPlatform_JettyNegoProvider_initWithJavaUtilList_(id<JavaUtilList> protocols) {
  return new_ComSquareupOkhttpInternalPlatform_JettyNegoProvider_initWithJavaUtilList_(protocols);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalPlatform_JettyNegoProvider)
