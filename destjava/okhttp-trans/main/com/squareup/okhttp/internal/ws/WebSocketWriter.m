//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketWriter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/internal/ws/WebSocket.h"
#include "com/squareup/okhttp/internal/ws/WebSocketWriter.h"
#include "com/squareup/okhttp/internal/ws/WsProtocol.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Short.h"
#include "java/util/Random.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Timeout.h"

@class ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink;

@interface ComSquareupOkhttpInternalWsWebSocketWriter () {
 @public
  jboolean isClient_;
  id<OkioBufferedSink> sink_;
  JavaUtilRandom *random_;
  ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink *frameSink_;
  jboolean closed_;
  jboolean activeWriter_;
  IOSByteArray *maskKey_;
  IOSByteArray *maskBuffer_;
}

- (void)writeControlFrameWithInt:(jint)opcode
                  withOkioBuffer:(OkioBuffer *)payload;

- (void)writeFrameWithComSquareupOkhttpInternalWsWebSocket_PayloadType:(ComSquareupOkhttpInternalWsWebSocket_PayloadType *)payloadType
                                                        withOkioBuffer:(OkioBuffer *)source
                                                              withLong:(jlong)byteCount
                                                           withBoolean:(jboolean)isFirstFrame
                                                           withBoolean:(jboolean)isFinal;

- (void)writeAllMaskedWithOkioBufferedSource:(id<OkioBufferedSource>)source
                                    withLong:(jlong)byteCount;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketWriter, sink_, id<OkioBufferedSink>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketWriter, random_, JavaUtilRandom *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketWriter, frameSink_, ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketWriter, maskKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketWriter, maskBuffer_, IOSByteArray *)

__attribute__((unused)) static void ComSquareupOkhttpInternalWsWebSocketWriter_writeControlFrameWithInt_withOkioBuffer_(ComSquareupOkhttpInternalWsWebSocketWriter *self, jint opcode, OkioBuffer *payload);

__attribute__((unused)) static void ComSquareupOkhttpInternalWsWebSocketWriter_writeFrameWithComSquareupOkhttpInternalWsWebSocket_PayloadType_withOkioBuffer_withLong_withBoolean_withBoolean_(ComSquareupOkhttpInternalWsWebSocketWriter *self, ComSquareupOkhttpInternalWsWebSocket_PayloadType *payloadType, OkioBuffer *source, jlong byteCount, jboolean isFirstFrame, jboolean isFinal);

__attribute__((unused)) static void ComSquareupOkhttpInternalWsWebSocketWriter_writeAllMaskedWithOkioBufferedSource_withLong_(ComSquareupOkhttpInternalWsWebSocketWriter *self, id<OkioBufferedSource> source, jlong byteCount);

@interface ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink : NSObject < OkioSink > {
 @public
  ComSquareupOkhttpInternalWsWebSocketWriter *this$0_;
  ComSquareupOkhttpInternalWsWebSocket_PayloadType *payloadType_;
  jboolean isFirstFrame_;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (void)flush;

- (OkioTimeout *)timeout;

- (void)close;

- (instancetype)initWithComSquareupOkhttpInternalWsWebSocketWriter:(ComSquareupOkhttpInternalWsWebSocketWriter *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink, this$0_, ComSquareupOkhttpInternalWsWebSocketWriter *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink, payloadType_, ComSquareupOkhttpInternalWsWebSocket_PayloadType *)

__attribute__((unused)) static void ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink_initWithComSquareupOkhttpInternalWsWebSocketWriter_(ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink *self, ComSquareupOkhttpInternalWsWebSocketWriter *outer$);

__attribute__((unused)) static ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink *new_ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink_initWithComSquareupOkhttpInternalWsWebSocketWriter_(ComSquareupOkhttpInternalWsWebSocketWriter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink *create_ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink_initWithComSquareupOkhttpInternalWsWebSocketWriter_(ComSquareupOkhttpInternalWsWebSocketWriter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink)

@implementation ComSquareupOkhttpInternalWsWebSocketWriter

- (instancetype)initWithBoolean:(jboolean)isClient
           withOkioBufferedSink:(id<OkioBufferedSink>)sink
             withJavaUtilRandom:(JavaUtilRandom *)random {
  ComSquareupOkhttpInternalWsWebSocketWriter_initWithBoolean_withOkioBufferedSink_withJavaUtilRandom_(self, isClient, sink, random);
  return self;
}

- (jboolean)isClosed {
  return closed_;
}

- (void)writePingWithOkioBuffer:(OkioBuffer *)payload {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"Closed");
  @synchronized(sink_) {
    ComSquareupOkhttpInternalWsWebSocketWriter_writeControlFrameWithInt_withOkioBuffer_(self, ComSquareupOkhttpInternalWsWsProtocol_OPCODE_CONTROL_PING, payload);
  }
}

- (void)writePongWithOkioBuffer:(OkioBuffer *)payload {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"Closed");
  @synchronized(sink_) {
    ComSquareupOkhttpInternalWsWebSocketWriter_writeControlFrameWithInt_withOkioBuffer_(self, ComSquareupOkhttpInternalWsWsProtocol_OPCODE_CONTROL_PONG, payload);
  }
}

- (void)writeCloseWithInt:(jint)code
             withNSString:(NSString *)reason {
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"Closed");
  OkioBuffer *payload = nil;
  if (code != 0) {
    if (code < 1000 || code >= 5000) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Code must be in range [1000,5000).");
    }
    payload = new_OkioBuffer_init();
    (void) [payload writeShortWithInt:code];
    if (reason != nil) {
      (void) [payload writeUtf8WithNSString:reason];
    }
  }
  else if (reason != nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Code required to include reason.");
  }
  [self writeCloseWithOkioBuffer:payload];
}

- (void)writeCloseWithOkioBuffer:(OkioBuffer *)payload {
  @synchronized(sink_) {
    ComSquareupOkhttpInternalWsWebSocketWriter_writeControlFrameWithInt_withOkioBuffer_(self, ComSquareupOkhttpInternalWsWsProtocol_OPCODE_CONTROL_CLOSE, payload);
    closed_ = true;
  }
}

- (void)writeControlFrameWithInt:(jint)opcode
                  withOkioBuffer:(OkioBuffer *)payload {
  ComSquareupOkhttpInternalWsWebSocketWriter_writeControlFrameWithInt_withOkioBuffer_(self, opcode, payload);
}

- (id<OkioBufferedSink>)newMessageSinkWithComSquareupOkhttpInternalWsWebSocket_PayloadType:(ComSquareupOkhttpInternalWsWebSocket_PayloadType *)type {
  if (type == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"type == null");
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"Closed");
  if (activeWriter_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Another message writer is active. Did you call close()?");
  }
  activeWriter_ = true;
  ((ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink *) nil_chk(frameSink_))->payloadType_ = type;
  frameSink_->isFirstFrame_ = true;
  return OkioOkio_bufferWithOkioSink_(frameSink_);
}

- (void)sendMessageWithComSquareupOkhttpInternalWsWebSocket_PayloadType:(ComSquareupOkhttpInternalWsWebSocket_PayloadType *)type
                                                         withOkioBuffer:(OkioBuffer *)payload {
  if (type == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"type == null");
  if (payload == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"payload == null");
  if (closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"Closed");
  if (activeWriter_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"A message writer is active. Did you call close()?");
  }
  ComSquareupOkhttpInternalWsWebSocketWriter_writeFrameWithComSquareupOkhttpInternalWsWebSocket_PayloadType_withOkioBuffer_withLong_withBoolean_withBoolean_(self, type, payload, [((OkioBuffer *) nil_chk(payload)) size], true, true);
}

- (void)writeFrameWithComSquareupOkhttpInternalWsWebSocket_PayloadType:(ComSquareupOkhttpInternalWsWebSocket_PayloadType *)payloadType
                                                        withOkioBuffer:(OkioBuffer *)source
                                                              withLong:(jlong)byteCount
                                                           withBoolean:(jboolean)isFirstFrame
                                                           withBoolean:(jboolean)isFinal {
  ComSquareupOkhttpInternalWsWebSocketWriter_writeFrameWithComSquareupOkhttpInternalWsWebSocket_PayloadType_withOkioBuffer_withLong_withBoolean_withBoolean_(self, payloadType, source, byteCount, isFirstFrame, isFinal);
}

- (void)writeAllMaskedWithOkioBufferedSource:(id<OkioBufferedSource>)source
                                    withLong:(jlong)byteCount {
  ComSquareupOkhttpInternalWsWebSocketWriter_writeAllMaskedWithOkioBufferedSource_withLong_(self, source, byteCount);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:withOkioBufferedSink:withJavaUtilRandom:", "WebSocketWriter", NULL, 0x1, NULL, NULL },
    { "isClosed", NULL, "Z", 0x1, NULL, NULL },
    { "writePingWithOkioBuffer:", "writePing", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writePongWithOkioBuffer:", "writePong", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeCloseWithInt:withNSString:", "writeClose", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeCloseWithOkioBuffer:", "writeClose", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeControlFrameWithInt:withOkioBuffer:", "writeControlFrame", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "newMessageSinkWithComSquareupOkhttpInternalWsWebSocket_PayloadType:", "newMessageSink", "Lokio.BufferedSink;", 0x1, NULL, NULL },
    { "sendMessageWithComSquareupOkhttpInternalWsWebSocket_PayloadType:withOkioBuffer:", "sendMessage", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeFrameWithComSquareupOkhttpInternalWsWebSocket_PayloadType:withOkioBuffer:withLong:withBoolean:withBoolean:", "writeFrame", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeAllMaskedWithOkioBufferedSource:withLong:", "writeAllMasked", "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isClient_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "sink_", NULL, 0x12, "Lokio.BufferedSink;", NULL, NULL, .constantValue.asLong = 0 },
    { "random_", NULL, 0x12, "Ljava.util.Random;", NULL, NULL, .constantValue.asLong = 0 },
    { "frameSink_", NULL, 0x12, "Lcom.squareup.okhttp.internal.ws.WebSocketWriter$FrameSink;", NULL, NULL, .constantValue.asLong = 0 },
    { "closed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "activeWriter_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "maskKey_", NULL, 0x12, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "maskBuffer_", NULL, 0x12, "[B", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.squareup.okhttp.internal.ws.WebSocketWriter$FrameSink;"};
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalWsWebSocketWriter = { 2, "WebSocketWriter", "com.squareup.okhttp.internal.ws", NULL, 0x11, 11, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComSquareupOkhttpInternalWsWebSocketWriter;
}

@end

void ComSquareupOkhttpInternalWsWebSocketWriter_initWithBoolean_withOkioBufferedSink_withJavaUtilRandom_(ComSquareupOkhttpInternalWsWebSocketWriter *self, jboolean isClient, id<OkioBufferedSink> sink, JavaUtilRandom *random) {
  NSObject_init(self);
  self->frameSink_ = new_ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink_initWithComSquareupOkhttpInternalWsWebSocketWriter_(self);
  self->maskKey_ = [IOSByteArray newArrayWithLength:4];
  self->maskBuffer_ = [IOSByteArray newArrayWithLength:2048];
  if (sink == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"sink");
  if (random == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"random");
  self->isClient_ = isClient;
  self->sink_ = sink;
  self->random_ = random;
}

ComSquareupOkhttpInternalWsWebSocketWriter *new_ComSquareupOkhttpInternalWsWebSocketWriter_initWithBoolean_withOkioBufferedSink_withJavaUtilRandom_(jboolean isClient, id<OkioBufferedSink> sink, JavaUtilRandom *random) {
  ComSquareupOkhttpInternalWsWebSocketWriter *self = [ComSquareupOkhttpInternalWsWebSocketWriter alloc];
  ComSquareupOkhttpInternalWsWebSocketWriter_initWithBoolean_withOkioBufferedSink_withJavaUtilRandom_(self, isClient, sink, random);
  return self;
}

ComSquareupOkhttpInternalWsWebSocketWriter *create_ComSquareupOkhttpInternalWsWebSocketWriter_initWithBoolean_withOkioBufferedSink_withJavaUtilRandom_(jboolean isClient, id<OkioBufferedSink> sink, JavaUtilRandom *random) {
  return new_ComSquareupOkhttpInternalWsWebSocketWriter_initWithBoolean_withOkioBufferedSink_withJavaUtilRandom_(isClient, sink, random);
}

void ComSquareupOkhttpInternalWsWebSocketWriter_writeControlFrameWithInt_withOkioBuffer_(ComSquareupOkhttpInternalWsWebSocketWriter *self, jint opcode, OkioBuffer *payload) {
  jint length = 0;
  if (payload != nil) {
    length = (jint) [payload size];
    if (length > ComSquareupOkhttpInternalWsWsProtocol_PAYLOAD_MAX) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Control frame payload must be less than ", ComSquareupOkhttpInternalWsWsProtocol_PAYLOAD_MAX, @"B."));
    }
  }
  jint b0 = ComSquareupOkhttpInternalWsWsProtocol_B0_FLAG_FIN | opcode;
  (void) [((id<OkioBufferedSink>) nil_chk(self->sink_)) writeByteWithInt:b0];
  jint b1 = length;
  if (self->isClient_) {
    b1 |= ComSquareupOkhttpInternalWsWsProtocol_B1_FLAG_MASK;
    (void) [self->sink_ writeByteWithInt:b1];
    [((JavaUtilRandom *) nil_chk(self->random_)) nextBytesWithByteArray:self->maskKey_];
    (void) [self->sink_ writeWithByteArray:self->maskKey_];
    if (payload != nil) {
      ComSquareupOkhttpInternalWsWebSocketWriter_writeAllMaskedWithOkioBufferedSource_withLong_(self, payload, length);
    }
  }
  else {
    (void) [self->sink_ writeByteWithInt:b1];
    if (payload != nil) {
      [self->sink_ writeAllWithOkioSource:payload];
    }
  }
  [self->sink_ flush];
}

void ComSquareupOkhttpInternalWsWebSocketWriter_writeFrameWithComSquareupOkhttpInternalWsWebSocket_PayloadType_withOkioBuffer_withLong_withBoolean_withBoolean_(ComSquareupOkhttpInternalWsWebSocketWriter *self, ComSquareupOkhttpInternalWsWebSocket_PayloadType *payloadType, OkioBuffer *source, jlong byteCount, jboolean isFirstFrame, jboolean isFinal) {
  jint opcode = ComSquareupOkhttpInternalWsWsProtocol_OPCODE_CONTINUATION;
  if (isFirstFrame) {
    switch ([payloadType ordinal]) {
      case ComSquareupOkhttpInternalWsWebSocket_PayloadType_Enum_TEXT:
      opcode = ComSquareupOkhttpInternalWsWsProtocol_OPCODE_TEXT;
      break;
      case ComSquareupOkhttpInternalWsWebSocket_PayloadType_Enum_BINARY:
      opcode = ComSquareupOkhttpInternalWsWsProtocol_OPCODE_BINARY;
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Unknown payload type: ", payloadType));
    }
  }
  @synchronized(self->sink_) {
    jint b0 = opcode;
    if (isFinal) {
      b0 |= ComSquareupOkhttpInternalWsWsProtocol_B0_FLAG_FIN;
    }
    (void) [((id<OkioBufferedSink>) nil_chk(self->sink_)) writeByteWithInt:b0];
    jint b1 = 0;
    if (self->isClient_) {
      b1 |= ComSquareupOkhttpInternalWsWsProtocol_B1_FLAG_MASK;
      [((JavaUtilRandom *) nil_chk(self->random_)) nextBytesWithByteArray:self->maskKey_];
    }
    if (byteCount <= ComSquareupOkhttpInternalWsWsProtocol_PAYLOAD_MAX) {
      b1 |= (jint) byteCount;
      (void) [self->sink_ writeByteWithInt:b1];
    }
    else if (byteCount <= JavaLangShort_MAX_VALUE) {
      b1 |= ComSquareupOkhttpInternalWsWsProtocol_PAYLOAD_SHORT;
      (void) [self->sink_ writeByteWithInt:b1];
      (void) [self->sink_ writeShortWithInt:(jint) byteCount];
    }
    else {
      b1 |= ComSquareupOkhttpInternalWsWsProtocol_PAYLOAD_LONG;
      (void) [self->sink_ writeByteWithInt:b1];
      (void) [self->sink_ writeLongWithLong:byteCount];
    }
    if (self->isClient_) {
      (void) [self->sink_ writeWithByteArray:self->maskKey_];
      ComSquareupOkhttpInternalWsWebSocketWriter_writeAllMaskedWithOkioBufferedSource_withLong_(self, source, byteCount);
    }
    else {
      [self->sink_ writeWithOkioBuffer:source withLong:byteCount];
    }
    [self->sink_ flush];
  }
}

void ComSquareupOkhttpInternalWsWebSocketWriter_writeAllMaskedWithOkioBufferedSource_withLong_(ComSquareupOkhttpInternalWsWebSocketWriter *self, id<OkioBufferedSource> source, jlong byteCount) {
  jlong written = 0;
  while (written < byteCount) {
    jint toRead = (jint) JavaLangMath_minWithLong_withLong_(byteCount, ((IOSByteArray *) nil_chk(self->maskBuffer_))->size_);
    jint read = [((id<OkioBufferedSource>) nil_chk(source)) readWithByteArray:self->maskBuffer_ withInt:0 withInt:toRead];
    if (read == -1) @throw new_JavaLangAssertionError_init();
    ComSquareupOkhttpInternalWsWsProtocol_toggleMaskWithByteArray_withLong_withByteArray_withLong_(self->maskBuffer_, read, self->maskKey_, written);
    (void) [((id<OkioBufferedSink>) nil_chk(self->sink_)) writeWithByteArray:self->maskBuffer_ withInt:0 withInt:read];
    written += read;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalWsWebSocketWriter)

@implementation ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  ComSquareupOkhttpInternalWsWebSocketWriter_writeFrameWithComSquareupOkhttpInternalWsWebSocket_PayloadType_withOkioBuffer_withLong_withBoolean_withBoolean_(this$0_, payloadType_, source, byteCount, isFirstFrame_, false);
  isFirstFrame_ = false;
}

- (void)flush {
  @synchronized(this$0_->sink_) {
    [((id<OkioBufferedSink>) nil_chk(this$0_->sink_)) flush];
  }
}

- (OkioTimeout *)timeout {
  return [((id<OkioBufferedSink>) nil_chk(this$0_->sink_)) timeout];
}

- (void)close {
  jint length = 0;
  @synchronized(this$0_->sink_) {
    (void) [((id<OkioBufferedSink>) nil_chk(this$0_->sink_)) writeByteWithInt:ComSquareupOkhttpInternalWsWsProtocol_B0_FLAG_FIN | ComSquareupOkhttpInternalWsWsProtocol_OPCODE_CONTINUATION];
    if (this$0_->isClient_) {
      (void) [this$0_->sink_ writeByteWithInt:ComSquareupOkhttpInternalWsWsProtocol_B1_FLAG_MASK | length];
      [((JavaUtilRandom *) nil_chk(this$0_->random_)) nextBytesWithByteArray:this$0_->maskKey_];
      (void) [this$0_->sink_ writeWithByteArray:this$0_->maskKey_];
    }
    else {
      (void) [this$0_->sink_ writeByteWithInt:length];
    }
    [this$0_->sink_ flush];
  }
  this$0_->activeWriter_ = false;
}

- (instancetype)initWithComSquareupOkhttpInternalWsWebSocketWriter:(ComSquareupOkhttpInternalWsWebSocketWriter *)outer$ {
  ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink_initWithComSquareupOkhttpInternalWsWebSocketWriter_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeWithOkioBuffer:withLong:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "timeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "initWithComSquareupOkhttpInternalWsWebSocketWriter:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.squareup.okhttp.internal.ws.WebSocketWriter;", NULL, NULL, .constantValue.asLong = 0 },
    { "payloadType_", NULL, 0x2, "Lcom.squareup.okhttp.internal.ws.WebSocket$PayloadType;", NULL, NULL, .constantValue.asLong = 0 },
    { "isFirstFrame_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink = { 2, "FrameSink", "com.squareup.okhttp.internal.ws", "WebSocketWriter", 0x12, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink;
}

@end

void ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink_initWithComSquareupOkhttpInternalWsWebSocketWriter_(ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink *self, ComSquareupOkhttpInternalWsWebSocketWriter *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink *new_ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink_initWithComSquareupOkhttpInternalWsWebSocketWriter_(ComSquareupOkhttpInternalWsWebSocketWriter *outer$) {
  ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink *self = [ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink alloc];
  ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink_initWithComSquareupOkhttpInternalWsWebSocketWriter_(self, outer$);
  return self;
}

ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink *create_ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink_initWithComSquareupOkhttpInternalWsWebSocketWriter_(ComSquareupOkhttpInternalWsWebSocketWriter *outer$) {
  return new_ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink_initWithComSquareupOkhttpInternalWsWebSocketWriter_(outer$);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalWsWebSocketWriter_FrameSink)
