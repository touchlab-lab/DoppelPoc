//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/internal/ws/WebSocket.h"
#include "com/squareup/okhttp/internal/ws/WebSocketListener.h"
#include "com/squareup/okhttp/internal/ws/WebSocketReader.h"
#include "com/squareup/okhttp/internal/ws/WsProtocol.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/net/ProtocolException.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"
#include "okio/Okio.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface ComSquareupOkhttpInternalWsWebSocketReader () {
 @public
  jboolean isClient_;
  id<OkioBufferedSource> source_;
  id<ComSquareupOkhttpInternalWsWebSocketListener> listener_;
  id<ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback> frameCallback_;
  id<OkioSource> framedMessageSource_;
  jboolean closed_;
  jboolean messageClosed_;
  jint opcode_;
  jlong frameLength_;
  jlong frameBytesRead_;
  jboolean isFinalFrame_;
  jboolean isControlFrame_;
  jboolean isMasked_;
  IOSByteArray *maskKey_;
  IOSByteArray *maskBuffer_;
}

- (void)readUntilNonControlFrame;

- (void)readHeader;

- (void)readControlFrame;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketReader, source_, id<OkioBufferedSource>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketReader, listener_, id<ComSquareupOkhttpInternalWsWebSocketListener>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketReader, frameCallback_, id<ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketReader, framedMessageSource_, id<OkioSource>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketReader, maskKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketReader, maskBuffer_, IOSByteArray *)

__attribute__((unused)) static void ComSquareupOkhttpInternalWsWebSocketReader_readUntilNonControlFrame(ComSquareupOkhttpInternalWsWebSocketReader *self);

__attribute__((unused)) static void ComSquareupOkhttpInternalWsWebSocketReader_readHeader(ComSquareupOkhttpInternalWsWebSocketReader *self);

__attribute__((unused)) static void ComSquareupOkhttpInternalWsWebSocketReader_readControlFrame(ComSquareupOkhttpInternalWsWebSocketReader *self);

@interface ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback : NSObject

@end

@interface ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource : NSObject < OkioSource > {
 @public
  ComSquareupOkhttpInternalWsWebSocketReader *this$0_;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (OkioTimeout *)timeout;

- (void)close;

- (instancetype)initWithComSquareupOkhttpInternalWsWebSocketReader:(ComSquareupOkhttpInternalWsWebSocketReader *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource, this$0_, ComSquareupOkhttpInternalWsWebSocketReader *)

__attribute__((unused)) static void ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource_initWithComSquareupOkhttpInternalWsWebSocketReader_(ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource *self, ComSquareupOkhttpInternalWsWebSocketReader *outer$);

__attribute__((unused)) static ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource *new_ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource_initWithComSquareupOkhttpInternalWsWebSocketReader_(ComSquareupOkhttpInternalWsWebSocketReader *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource *create_ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource_initWithComSquareupOkhttpInternalWsWebSocketReader_(ComSquareupOkhttpInternalWsWebSocketReader *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource)

@implementation ComSquareupOkhttpInternalWsWebSocketReader

- (instancetype)initWithBoolean:(jboolean)isClient
         withOkioBufferedSource:(id<OkioBufferedSource>)source
withComSquareupOkhttpInternalWsWebSocketListener:(id<ComSquareupOkhttpInternalWsWebSocketListener>)listener
withComSquareupOkhttpInternalWsWebSocketReader_FrameCallback:(id<ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback>)frameCallback {
  ComSquareupOkhttpInternalWsWebSocketReader_initWithBoolean_withOkioBufferedSource_withComSquareupOkhttpInternalWsWebSocketListener_withComSquareupOkhttpInternalWsWebSocketReader_FrameCallback_(self, isClient, source, listener, frameCallback);
  return self;
}

- (void)readMessage {
  ComSquareupOkhttpInternalWsWebSocketReader_readUntilNonControlFrame(self);
  if (closed_) return;
  ComSquareupOkhttpInternalWsWebSocket_PayloadType *type;
  switch (opcode_) {
    case ComSquareupOkhttpInternalWsWsProtocol_OPCODE_TEXT:
    type = JreLoadEnum(ComSquareupOkhttpInternalWsWebSocket_PayloadType, TEXT);
    break;
    case ComSquareupOkhttpInternalWsWsProtocol_OPCODE_BINARY:
    type = JreLoadEnum(ComSquareupOkhttpInternalWsWebSocket_PayloadType, BINARY);
    break;
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unknown opcode: ", JavaLangInteger_toHexStringWithInt_(opcode_)));
  }
  messageClosed_ = false;
  [((id<ComSquareupOkhttpInternalWsWebSocketListener>) nil_chk(listener_)) onMessageWithOkioBufferedSource:OkioOkio_bufferWithOkioSource_(framedMessageSource_) withComSquareupOkhttpInternalWsWebSocket_PayloadType:type];
  if (!messageClosed_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Listener failed to call close on message payload.");
  }
}

- (void)readUntilNonControlFrame {
  ComSquareupOkhttpInternalWsWebSocketReader_readUntilNonControlFrame(self);
}

- (void)readHeader {
  ComSquareupOkhttpInternalWsWebSocketReader_readHeader(self);
}

- (void)readControlFrame {
  ComSquareupOkhttpInternalWsWebSocketReader_readControlFrame(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:withOkioBufferedSource:withComSquareupOkhttpInternalWsWebSocketListener:withComSquareupOkhttpInternalWsWebSocketReader_FrameCallback:", "WebSocketReader", NULL, 0x1, NULL, NULL },
    { "readMessage", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readUntilNonControlFrame", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readHeader", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readControlFrame", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isClient_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "source_", NULL, 0x12, "Lokio.BufferedSource;", NULL, NULL, .constantValue.asLong = 0 },
    { "listener_", NULL, 0x12, "Lcom.squareup.okhttp.internal.ws.WebSocketListener;", NULL, NULL, .constantValue.asLong = 0 },
    { "frameCallback_", NULL, 0x12, "Lcom.squareup.okhttp.internal.ws.WebSocketReader$FrameCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "framedMessageSource_", NULL, 0x12, "Lokio.Source;", NULL, NULL, .constantValue.asLong = 0 },
    { "closed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "messageClosed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "opcode_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "frameLength_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "frameBytesRead_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "isFinalFrame_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isControlFrame_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isMasked_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "maskKey_", NULL, 0x12, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "maskBuffer_", NULL, 0x12, "[B", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.squareup.okhttp.internal.ws.WebSocketReader$FrameCallback;", "Lcom.squareup.okhttp.internal.ws.WebSocketReader$FramedMessageSource;"};
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalWsWebSocketReader = { 2, "WebSocketReader", "com.squareup.okhttp.internal.ws", NULL, 0x11, 5, methods, 15, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_ComSquareupOkhttpInternalWsWebSocketReader;
}

@end

void ComSquareupOkhttpInternalWsWebSocketReader_initWithBoolean_withOkioBufferedSource_withComSquareupOkhttpInternalWsWebSocketListener_withComSquareupOkhttpInternalWsWebSocketReader_FrameCallback_(ComSquareupOkhttpInternalWsWebSocketReader *self, jboolean isClient, id<OkioBufferedSource> source, id<ComSquareupOkhttpInternalWsWebSocketListener> listener, id<ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback> frameCallback) {
  NSObject_init(self);
  self->framedMessageSource_ = new_ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource_initWithComSquareupOkhttpInternalWsWebSocketReader_(self);
  self->maskKey_ = [IOSByteArray newArrayWithLength:4];
  self->maskBuffer_ = [IOSByteArray newArrayWithLength:2048];
  if (source == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"source");
  if (listener == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"listener");
  if (frameCallback == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"frameCallback");
  self->isClient_ = isClient;
  self->source_ = source;
  self->listener_ = listener;
  self->frameCallback_ = frameCallback;
}

ComSquareupOkhttpInternalWsWebSocketReader *new_ComSquareupOkhttpInternalWsWebSocketReader_initWithBoolean_withOkioBufferedSource_withComSquareupOkhttpInternalWsWebSocketListener_withComSquareupOkhttpInternalWsWebSocketReader_FrameCallback_(jboolean isClient, id<OkioBufferedSource> source, id<ComSquareupOkhttpInternalWsWebSocketListener> listener, id<ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback> frameCallback) {
  ComSquareupOkhttpInternalWsWebSocketReader *self = [ComSquareupOkhttpInternalWsWebSocketReader alloc];
  ComSquareupOkhttpInternalWsWebSocketReader_initWithBoolean_withOkioBufferedSource_withComSquareupOkhttpInternalWsWebSocketListener_withComSquareupOkhttpInternalWsWebSocketReader_FrameCallback_(self, isClient, source, listener, frameCallback);
  return self;
}

ComSquareupOkhttpInternalWsWebSocketReader *create_ComSquareupOkhttpInternalWsWebSocketReader_initWithBoolean_withOkioBufferedSource_withComSquareupOkhttpInternalWsWebSocketListener_withComSquareupOkhttpInternalWsWebSocketReader_FrameCallback_(jboolean isClient, id<OkioBufferedSource> source, id<ComSquareupOkhttpInternalWsWebSocketListener> listener, id<ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback> frameCallback) {
  return new_ComSquareupOkhttpInternalWsWebSocketReader_initWithBoolean_withOkioBufferedSource_withComSquareupOkhttpInternalWsWebSocketListener_withComSquareupOkhttpInternalWsWebSocketReader_FrameCallback_(isClient, source, listener, frameCallback);
}

void ComSquareupOkhttpInternalWsWebSocketReader_readUntilNonControlFrame(ComSquareupOkhttpInternalWsWebSocketReader *self) {
  while (!self->closed_) {
    ComSquareupOkhttpInternalWsWebSocketReader_readHeader(self);
    if (!self->isControlFrame_) {
      break;
    }
    ComSquareupOkhttpInternalWsWebSocketReader_readControlFrame(self);
  }
}

void ComSquareupOkhttpInternalWsWebSocketReader_readHeader(ComSquareupOkhttpInternalWsWebSocketReader *self) {
  if (self->closed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"Closed");
  jint b0 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readByte] & (jint) 0xff;
  self->opcode_ = b0 & ComSquareupOkhttpInternalWsWsProtocol_B0_MASK_OPCODE;
  self->isFinalFrame_ = ((b0 & ComSquareupOkhttpInternalWsWsProtocol_B0_FLAG_FIN) != 0);
  self->isControlFrame_ = ((b0 & ComSquareupOkhttpInternalWsWsProtocol_OPCODE_FLAG_CONTROL) != 0);
  if (self->isControlFrame_ && !self->isFinalFrame_) {
    @throw new_JavaNetProtocolException_initWithNSString_(@"Control frames must be final.");
  }
  jboolean reservedFlag1 = (b0 & ComSquareupOkhttpInternalWsWsProtocol_B0_FLAG_RSV1) != 0;
  jboolean reservedFlag2 = (b0 & ComSquareupOkhttpInternalWsWsProtocol_B0_FLAG_RSV2) != 0;
  jboolean reservedFlag3 = (b0 & ComSquareupOkhttpInternalWsWsProtocol_B0_FLAG_RSV3) != 0;
  if (reservedFlag1 || reservedFlag2 || reservedFlag3) {
    @throw new_JavaNetProtocolException_initWithNSString_(@"Reserved flags are unsupported.");
  }
  jint b1 = [self->source_ readByte] & (jint) 0xff;
  self->isMasked_ = ((b1 & ComSquareupOkhttpInternalWsWsProtocol_B1_FLAG_MASK) != 0);
  if (self->isMasked_ == self->isClient_) {
    @throw new_JavaNetProtocolException_initWithNSString_(@"Client-sent frames must be masked. Server sent must not.");
  }
  self->frameLength_ = b1 & ComSquareupOkhttpInternalWsWsProtocol_B1_MASK_LENGTH;
  if (self->frameLength_ == ComSquareupOkhttpInternalWsWsProtocol_PAYLOAD_SHORT) {
    self->frameLength_ = [self->source_ readShort];
  }
  else if (self->frameLength_ == ComSquareupOkhttpInternalWsWsProtocol_PAYLOAD_LONG) {
    self->frameLength_ = [self->source_ readLong];
  }
  self->frameBytesRead_ = 0;
  if (self->isControlFrame_ && self->frameLength_ > ComSquareupOkhttpInternalWsWsProtocol_PAYLOAD_MAX) {
    @throw new_JavaNetProtocolException_initWithNSString_(JreStrcat("$I$", @"Control frame must be less than ", ComSquareupOkhttpInternalWsWsProtocol_PAYLOAD_MAX, @"B."));
  }
  if (self->isMasked_) {
    [self->source_ readFullyWithByteArray:self->maskKey_];
  }
}

void ComSquareupOkhttpInternalWsWebSocketReader_readControlFrame(ComSquareupOkhttpInternalWsWebSocketReader *self) {
  OkioBuffer *buffer = nil;
  if (self->frameBytesRead_ < self->frameLength_) {
    buffer = new_OkioBuffer_init();
    if (self->isClient_) {
      [((id<OkioBufferedSource>) nil_chk(self->source_)) readFullyWithOkioBuffer:buffer withLong:self->frameLength_];
    }
    else {
      while (self->frameBytesRead_ < self->frameLength_) {
        jint toRead = (jint) JavaLangMath_minWithLong_withLong_(self->frameLength_ - self->frameBytesRead_, ((IOSByteArray *) nil_chk(self->maskBuffer_))->size_);
        jint read = [((id<OkioBufferedSource>) nil_chk(self->source_)) readWithByteArray:self->maskBuffer_ withInt:0 withInt:toRead];
        if (read == -1) @throw new_JavaIoEOFException_init();
        ComSquareupOkhttpInternalWsWsProtocol_toggleMaskWithByteArray_withLong_withByteArray_withLong_(self->maskBuffer_, read, self->maskKey_, self->frameBytesRead_);
        (void) [buffer writeWithByteArray:self->maskBuffer_ withInt:0 withInt:read];
        self->frameBytesRead_ += read;
      }
    }
  }
  {
    jint code;
    NSString *reason;
    switch (self->opcode_) {
      case ComSquareupOkhttpInternalWsWsProtocol_OPCODE_CONTROL_PING:
      [((id<ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback>) nil_chk(self->frameCallback_)) onPingWithOkioBuffer:buffer];
      break;
      case ComSquareupOkhttpInternalWsWsProtocol_OPCODE_CONTROL_PONG:
      break;
      case ComSquareupOkhttpInternalWsWsProtocol_OPCODE_CONTROL_CLOSE:
      [((id<ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback>) nil_chk(self->frameCallback_)) onCloseWithOkioBuffer:buffer != nil ? [buffer clone] : nil];
      self->closed_ = true;
      code = 0;
      reason = @"";
      if (buffer != nil) {
        code = [buffer readShort];
        reason = [buffer readUtf8];
      }
      [((id<ComSquareupOkhttpInternalWsWebSocketListener>) nil_chk(self->listener_)) onCloseWithInt:code withNSString:reason];
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unknown control opcode: ", JavaLangInteger_toHexStringWithInt_(self->opcode_)));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalWsWebSocketReader)

@implementation ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onPingWithOkioBuffer:", "onPing", "V", 0x401, NULL, NULL },
    { "onCloseWithOkioBuffer:", "onClose", "V", 0x401, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback = { 2, "FrameCallback", "com.squareup.okhttp.internal.ws", "WebSocketReader", 0x609, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalWsWebSocketReader_FrameCallback)

@implementation ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (this$0_->closed_) @throw new_JavaIoIOException_initWithNSString_(@"Closed");
  if (this$0_->messageClosed_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"Closed");
  if (this$0_->frameBytesRead_ == this$0_->frameLength_) {
    if (this$0_->isFinalFrame_) return -1;
    ComSquareupOkhttpInternalWsWebSocketReader_readUntilNonControlFrame(this$0_);
    if (this$0_->opcode_ != ComSquareupOkhttpInternalWsWsProtocol_OPCODE_CONTINUATION) {
      @throw new_JavaNetProtocolException_initWithNSString_(JreStrcat("$$", @"Expected continuation opcode. Got: ", JavaLangInteger_toHexStringWithInt_(this$0_->opcode_)));
    }
  }
  jlong toRead = JavaLangMath_minWithLong_withLong_(byteCount, this$0_->frameLength_ - this$0_->frameBytesRead_);
  jlong read;
  if (this$0_->isMasked_) {
    toRead = JavaLangMath_minWithLong_withLong_(toRead, ((IOSByteArray *) nil_chk(this$0_->maskBuffer_))->size_);
    read = [((id<OkioBufferedSource>) nil_chk(this$0_->source_)) readWithByteArray:this$0_->maskBuffer_ withInt:0 withInt:(jint) toRead];
    if (read == -1) @throw new_JavaIoEOFException_init();
    ComSquareupOkhttpInternalWsWsProtocol_toggleMaskWithByteArray_withLong_withByteArray_withLong_(this$0_->maskBuffer_, read, this$0_->maskKey_, this$0_->frameBytesRead_);
    (void) [((OkioBuffer *) nil_chk(sink)) writeWithByteArray:this$0_->maskBuffer_ withInt:0 withInt:(jint) read];
  }
  else {
    read = [((id<OkioBufferedSource>) nil_chk(this$0_->source_)) readWithOkioBuffer:sink withLong:toRead];
    if (read == -1) @throw new_JavaIoEOFException_init();
  }
  this$0_->frameBytesRead_ += read;
  return read;
}

- (OkioTimeout *)timeout {
  return [((id<OkioBufferedSource>) nil_chk(this$0_->source_)) timeout];
}

- (void)close {
  if (this$0_->messageClosed_) return;
  this$0_->messageClosed_ = true;
  if (this$0_->closed_) return;
  [((id<OkioBufferedSource>) nil_chk(this$0_->source_)) skipWithLong:this$0_->frameLength_ - this$0_->frameBytesRead_];
  while (!this$0_->isFinalFrame_) {
    ComSquareupOkhttpInternalWsWebSocketReader_readUntilNonControlFrame(this$0_);
    [this$0_->source_ skipWithLong:this$0_->frameLength_];
  }
}

- (instancetype)initWithComSquareupOkhttpInternalWsWebSocketReader:(ComSquareupOkhttpInternalWsWebSocketReader *)outer$ {
  ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource_initWithComSquareupOkhttpInternalWsWebSocketReader_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readWithOkioBuffer:withLong:", "read", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "timeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "initWithComSquareupOkhttpInternalWsWebSocketReader:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.squareup.okhttp.internal.ws.WebSocketReader;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource = { 2, "FramedMessageSource", "com.squareup.okhttp.internal.ws", "WebSocketReader", 0x12, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource;
}

@end

void ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource_initWithComSquareupOkhttpInternalWsWebSocketReader_(ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource *self, ComSquareupOkhttpInternalWsWebSocketReader *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource *new_ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource_initWithComSquareupOkhttpInternalWsWebSocketReader_(ComSquareupOkhttpInternalWsWebSocketReader *outer$) {
  ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource *self = [ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource alloc];
  ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource_initWithComSquareupOkhttpInternalWsWebSocketReader_(self, outer$);
  return self;
}

ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource *create_ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource_initWithComSquareupOkhttpInternalWsWebSocketReader_(ComSquareupOkhttpInternalWsWebSocketReader *outer$) {
  return new_ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource_initWithComSquareupOkhttpInternalWsWebSocketReader_(outer$);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalWsWebSocketReader_FramedMessageSource)
