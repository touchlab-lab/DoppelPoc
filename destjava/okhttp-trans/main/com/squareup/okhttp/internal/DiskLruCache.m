//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/internal/DiskLruCache.h"
#include "com/squareup/okhttp/internal/Platform.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "java/io/EOFException.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/ForwardingSink.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@class ComSquareupOkhttpInternalDiskLruCache_Entry;

@interface ComSquareupOkhttpInternalDiskLruCache () {
 @public
  JavaIoFile *directory_;
  JavaIoFile *journalFile_;
  JavaIoFile *journalFileTmp_;
  JavaIoFile *journalFileBackup_;
  jint appVersion_;
  jlong maxSize_;
  jint valueCount_;
  jlong size_;
  id<OkioBufferedSink> journalWriter_;
  JavaUtilLinkedHashMap *lruEntries_;
  jint redundantOpCount_;
  jlong nextSequenceNumber_;
  id<JavaUtilConcurrentExecutor> executor_;
  id<JavaLangRunnable> cleanupRunnable_;
}

- (void)readJournal;

- (void)readJournalLineWithNSString:(NSString *)line;

- (void)processJournal;

- (void)rebuildJournal;

+ (void)deleteIfExistsWithJavaIoFile:(JavaIoFile *)file;

+ (void)renameToWithJavaIoFile:(JavaIoFile *)from
                withJavaIoFile:(JavaIoFile *)to
                   withBoolean:(jboolean)deleteDestination;

- (ComSquareupOkhttpInternalDiskLruCache_Editor *)editWithNSString:(NSString *)key
                                                          withLong:(jlong)expectedSequenceNumber;

- (void)completeEditWithComSquareupOkhttpInternalDiskLruCache_Editor:(ComSquareupOkhttpInternalDiskLruCache_Editor *)editor
                                                         withBoolean:(jboolean)success;

- (jboolean)journalRebuildRequired;

- (jboolean)removeEntryWithComSquareupOkhttpInternalDiskLruCache_Entry:(ComSquareupOkhttpInternalDiskLruCache_Entry *)entry_;

- (void)checkNotClosed;

- (void)trimToSize;

- (void)validateKeyWithNSString:(NSString *)key;

+ (NSString *)sourceToStringWithOkioSource:(id<OkioSource>)inArg;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache, directory_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache, journalFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache, journalFileTmp_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache, journalFileBackup_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache, journalWriter_, id<OkioBufferedSink>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache, lruEntries_, JavaUtilLinkedHashMap *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache, executor_, id<JavaUtilConcurrentExecutor>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache, cleanupRunnable_, id<JavaLangRunnable>)

inline NSString *ComSquareupOkhttpInternalDiskLruCache_get_CLEAN();
static NSString *ComSquareupOkhttpInternalDiskLruCache_CLEAN = @"CLEAN";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalDiskLruCache, CLEAN, NSString *)

inline NSString *ComSquareupOkhttpInternalDiskLruCache_get_DIRTY();
static NSString *ComSquareupOkhttpInternalDiskLruCache_DIRTY = @"DIRTY";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalDiskLruCache, DIRTY, NSString *)

inline NSString *ComSquareupOkhttpInternalDiskLruCache_get_REMOVE();
static NSString *ComSquareupOkhttpInternalDiskLruCache_REMOVE = @"REMOVE";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalDiskLruCache, REMOVE, NSString *)

inline NSString *ComSquareupOkhttpInternalDiskLruCache_get_READ();
static NSString *ComSquareupOkhttpInternalDiskLruCache_READ = @"READ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalDiskLruCache, READ, NSString *)

inline id<OkioSink> ComSquareupOkhttpInternalDiskLruCache_get_NULL_SINK();
static id<OkioSink> ComSquareupOkhttpInternalDiskLruCache_NULL_SINK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalDiskLruCache, NULL_SINK, id<OkioSink>)

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_readJournal(ComSquareupOkhttpInternalDiskLruCache *self);

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_readJournalLineWithNSString_(ComSquareupOkhttpInternalDiskLruCache *self, NSString *line);

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_processJournal(ComSquareupOkhttpInternalDiskLruCache *self);

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_rebuildJournal(ComSquareupOkhttpInternalDiskLruCache *self);

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_deleteIfExistsWithJavaIoFile_(JavaIoFile *file);

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_renameToWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *from, JavaIoFile *to, jboolean deleteDestination);

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_Editor *ComSquareupOkhttpInternalDiskLruCache_editWithNSString_withLong_(ComSquareupOkhttpInternalDiskLruCache *self, NSString *key, jlong expectedSequenceNumber);

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_completeEditWithComSquareupOkhttpInternalDiskLruCache_Editor_withBoolean_(ComSquareupOkhttpInternalDiskLruCache *self, ComSquareupOkhttpInternalDiskLruCache_Editor *editor, jboolean success);

__attribute__((unused)) static jboolean ComSquareupOkhttpInternalDiskLruCache_journalRebuildRequired(ComSquareupOkhttpInternalDiskLruCache *self);

__attribute__((unused)) static jboolean ComSquareupOkhttpInternalDiskLruCache_removeEntryWithComSquareupOkhttpInternalDiskLruCache_Entry_(ComSquareupOkhttpInternalDiskLruCache *self, ComSquareupOkhttpInternalDiskLruCache_Entry *entry_);

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_checkNotClosed(ComSquareupOkhttpInternalDiskLruCache *self);

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_trimToSize(ComSquareupOkhttpInternalDiskLruCache *self);

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_validateKeyWithNSString_(ComSquareupOkhttpInternalDiskLruCache *self, NSString *key);

__attribute__((unused)) static NSString *ComSquareupOkhttpInternalDiskLruCache_sourceToStringWithOkioSource_(id<OkioSource> inArg);

@interface ComSquareupOkhttpInternalDiskLruCache_Snapshot () {
 @public
  ComSquareupOkhttpInternalDiskLruCache *this$0_;
  NSString *key_;
  jlong sequenceNumber_;
  IOSObjectArray *sources_;
  IOSLongArray *lengths_;
}

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache:(ComSquareupOkhttpInternalDiskLruCache *)outer$
                                                 withNSString:(NSString *)key
                                                     withLong:(jlong)sequenceNumber
                                          withOkioSourceArray:(IOSObjectArray *)sources
                                                withLongArray:(IOSLongArray *)lengths;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Snapshot, this$0_, ComSquareupOkhttpInternalDiskLruCache *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Snapshot, key_, NSString *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Snapshot, sources_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Snapshot, lengths_, IOSLongArray *)

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_Snapshot_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(ComSquareupOkhttpInternalDiskLruCache_Snapshot *self, ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths);

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_Snapshot *new_ComSquareupOkhttpInternalDiskLruCache_Snapshot_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_Snapshot *create_ComSquareupOkhttpInternalDiskLruCache_Snapshot_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths);

@interface ComSquareupOkhttpInternalDiskLruCache_Editor () {
 @public
  ComSquareupOkhttpInternalDiskLruCache *this$0_;
  ComSquareupOkhttpInternalDiskLruCache_Entry *entry__;
  IOSBooleanArray *written_;
  jboolean hasErrors_;
  jboolean committed_;
}

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache:(ComSquareupOkhttpInternalDiskLruCache *)outer$
              withComSquareupOkhttpInternalDiskLruCache_Entry:(ComSquareupOkhttpInternalDiskLruCache_Entry *)entry_;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Editor, this$0_, ComSquareupOkhttpInternalDiskLruCache *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Editor, entry__, ComSquareupOkhttpInternalDiskLruCache_Entry *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Editor, written_, IOSBooleanArray *)

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_Editor_initWithComSquareupOkhttpInternalDiskLruCache_withComSquareupOkhttpInternalDiskLruCache_Entry_(ComSquareupOkhttpInternalDiskLruCache_Editor *self, ComSquareupOkhttpInternalDiskLruCache *outer$, ComSquareupOkhttpInternalDiskLruCache_Entry *entry_);

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_Editor *new_ComSquareupOkhttpInternalDiskLruCache_Editor_initWithComSquareupOkhttpInternalDiskLruCache_withComSquareupOkhttpInternalDiskLruCache_Entry_(ComSquareupOkhttpInternalDiskLruCache *outer$, ComSquareupOkhttpInternalDiskLruCache_Entry *entry_) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_Editor *create_ComSquareupOkhttpInternalDiskLruCache_Editor_initWithComSquareupOkhttpInternalDiskLruCache_withComSquareupOkhttpInternalDiskLruCache_Entry_(ComSquareupOkhttpInternalDiskLruCache *outer$, ComSquareupOkhttpInternalDiskLruCache_Entry *entry_);

@interface ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink : OkioForwardingSink {
 @public
  ComSquareupOkhttpInternalDiskLruCache_Editor *this$0_;
}

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache_Editor:(ComSquareupOkhttpInternalDiskLruCache_Editor *)outer$
                                                        withOkioSink:(id<OkioSink>)delegate;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (void)flush;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink, this$0_, ComSquareupOkhttpInternalDiskLruCache_Editor *)

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink_initWithComSquareupOkhttpInternalDiskLruCache_Editor_withOkioSink_(ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink *self, ComSquareupOkhttpInternalDiskLruCache_Editor *outer$, id<OkioSink> delegate);

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink *new_ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink_initWithComSquareupOkhttpInternalDiskLruCache_Editor_withOkioSink_(ComSquareupOkhttpInternalDiskLruCache_Editor *outer$, id<OkioSink> delegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink *create_ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink_initWithComSquareupOkhttpInternalDiskLruCache_Editor_withOkioSink_(ComSquareupOkhttpInternalDiskLruCache_Editor *outer$, id<OkioSink> delegate);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink)

@interface ComSquareupOkhttpInternalDiskLruCache_Entry : NSObject {
 @public
  ComSquareupOkhttpInternalDiskLruCache *this$0_;
  NSString *key_;
  IOSLongArray *lengths_;
  IOSObjectArray *cleanFiles_;
  IOSObjectArray *dirtyFiles_;
  jboolean readable_;
  ComSquareupOkhttpInternalDiskLruCache_Editor *currentEditor_;
  jlong sequenceNumber_;
}

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache:(ComSquareupOkhttpInternalDiskLruCache *)outer$
                                                 withNSString:(NSString *)key;

- (void)setLengthsWithNSStringArray:(IOSObjectArray *)strings;

- (void)writeLengthsWithOkioBufferedSink:(id<OkioBufferedSink>)writer;

- (JavaIoIOException *)invalidLengthsWithNSStringArray:(IOSObjectArray *)strings;

- (ComSquareupOkhttpInternalDiskLruCache_Snapshot *)snapshot;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalDiskLruCache_Entry)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Entry, this$0_, ComSquareupOkhttpInternalDiskLruCache *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Entry, key_, NSString *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Entry, lengths_, IOSLongArray *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Entry, cleanFiles_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Entry, dirtyFiles_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_Entry, currentEditor_, ComSquareupOkhttpInternalDiskLruCache_Editor *)

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_Entry_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_(ComSquareupOkhttpInternalDiskLruCache_Entry *self, ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key);

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_Entry *new_ComSquareupOkhttpInternalDiskLruCache_Entry_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_(ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_Entry *create_ComSquareupOkhttpInternalDiskLruCache_Entry_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_(ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key);

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_Entry_setLengthsWithNSStringArray_(ComSquareupOkhttpInternalDiskLruCache_Entry *self, IOSObjectArray *strings);

__attribute__((unused)) static JavaIoIOException *ComSquareupOkhttpInternalDiskLruCache_Entry_invalidLengthsWithNSStringArray_(ComSquareupOkhttpInternalDiskLruCache_Entry *self, IOSObjectArray *strings);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalDiskLruCache_Entry)

@interface ComSquareupOkhttpInternalDiskLruCache_$1 : NSObject < JavaLangRunnable > {
 @public
  ComSquareupOkhttpInternalDiskLruCache *this$0_;
}

- (void)run;

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache:(ComSquareupOkhttpInternalDiskLruCache *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalDiskLruCache_$1)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_$1, this$0_, ComSquareupOkhttpInternalDiskLruCache *)

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_$1_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache_$1 *self, ComSquareupOkhttpInternalDiskLruCache *outer$);

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_$1 *new_ComSquareupOkhttpInternalDiskLruCache_$1_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_$1 *create_ComSquareupOkhttpInternalDiskLruCache_$1_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalDiskLruCache_$1)

@interface ComSquareupOkhttpInternalDiskLruCache_$3 : NSObject < JavaUtilIterator > {
 @public
  ComSquareupOkhttpInternalDiskLruCache *this$0_;
  id<JavaUtilIterator> delegate_;
  ComSquareupOkhttpInternalDiskLruCache_Snapshot *nextSnapshot_;
  ComSquareupOkhttpInternalDiskLruCache_Snapshot *removeSnapshot_;
}

- (jboolean)hasNext;

- (ComSquareupOkhttpInternalDiskLruCache_Snapshot *)next;

- (void)remove;

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache:(ComSquareupOkhttpInternalDiskLruCache *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalDiskLruCache_$3)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_$3, this$0_, ComSquareupOkhttpInternalDiskLruCache *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_$3, delegate_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_$3, nextSnapshot_, ComSquareupOkhttpInternalDiskLruCache_Snapshot *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalDiskLruCache_$3, removeSnapshot_, ComSquareupOkhttpInternalDiskLruCache_Snapshot *)

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_$3_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache_$3 *self, ComSquareupOkhttpInternalDiskLruCache *outer$);

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_$3 *new_ComSquareupOkhttpInternalDiskLruCache_$3_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_$3 *create_ComSquareupOkhttpInternalDiskLruCache_$3_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalDiskLruCache_$3)

@interface ComSquareupOkhttpInternalDiskLruCache_$2 : NSObject < OkioSink >

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (void)flush;

- (OkioTimeout *)timeout;

- (void)close;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalDiskLruCache_$2)

__attribute__((unused)) static void ComSquareupOkhttpInternalDiskLruCache_$2_init(ComSquareupOkhttpInternalDiskLruCache_$2 *self);

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_$2 *new_ComSquareupOkhttpInternalDiskLruCache_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalDiskLruCache_$2 *create_ComSquareupOkhttpInternalDiskLruCache_$2_init();

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalDiskLruCache_$2)

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpInternalDiskLruCache)

NSString *ComSquareupOkhttpInternalDiskLruCache_JOURNAL_FILE = @"journal";
NSString *ComSquareupOkhttpInternalDiskLruCache_JOURNAL_FILE_TEMP = @"journal.tmp";
NSString *ComSquareupOkhttpInternalDiskLruCache_JOURNAL_FILE_BACKUP = @"journal.bkp";
NSString *ComSquareupOkhttpInternalDiskLruCache_MAGIC = @"libcore.io.DiskLruCache";
NSString *ComSquareupOkhttpInternalDiskLruCache_VERSION_1 = @"1";
JavaUtilRegexPattern *ComSquareupOkhttpInternalDiskLruCache_LEGAL_KEY_PATTERN;

@implementation ComSquareupOkhttpInternalDiskLruCache

- (instancetype)initWithJavaIoFile:(JavaIoFile *)directory
                           withInt:(jint)appVersion
                           withInt:(jint)valueCount
                          withLong:(jlong)maxSize
    withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  ComSquareupOkhttpInternalDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(self, directory, appVersion, valueCount, maxSize, executor);
  return self;
}

- (void)initialize__ {
  if ([((JavaIoFile *) nil_chk(journalFileBackup_)) exists]) {
    if ([((JavaIoFile *) nil_chk(journalFile_)) exists]) {
      [journalFileBackup_ delete__];
    }
    else {
      ComSquareupOkhttpInternalDiskLruCache_renameToWithJavaIoFile_withJavaIoFile_withBoolean_(journalFileBackup_, journalFile_, false);
    }
  }
  if ([((JavaIoFile *) nil_chk(journalFile_)) exists]) {
    @try {
      ComSquareupOkhttpInternalDiskLruCache_readJournal(self);
      ComSquareupOkhttpInternalDiskLruCache_processJournal(self);
      return;
    }
    @catch (JavaIoIOException *journalIsCorrupt) {
      [((ComSquareupOkhttpInternalPlatform *) nil_chk(ComSquareupOkhttpInternalPlatform_get())) logWWithNSString:JreStrcat("$@$$$", @"DiskLruCache ", directory_, @" is corrupt: ", [((JavaIoIOException *) nil_chk(journalIsCorrupt)) getMessage], @", removing")];
      [self delete__];
    }
  }
  [((JavaIoFile *) nil_chk(directory_)) mkdirs];
  ComSquareupOkhttpInternalDiskLruCache_rebuildJournal(self);
}

+ (ComSquareupOkhttpInternalDiskLruCache *)openWithJavaIoFile:(JavaIoFile *)directory
                                                      withInt:(jint)appVersion
                                                      withInt:(jint)valueCount
                                                     withLong:(jlong)maxSize {
  return ComSquareupOkhttpInternalDiskLruCache_openWithJavaIoFile_withInt_withInt_withLong_(directory, appVersion, valueCount, maxSize);
}

- (void)readJournal {
  ComSquareupOkhttpInternalDiskLruCache_readJournal(self);
}

- (void)readJournalLineWithNSString:(NSString *)line {
  ComSquareupOkhttpInternalDiskLruCache_readJournalLineWithNSString_(self, line);
}

- (void)processJournal {
  ComSquareupOkhttpInternalDiskLruCache_processJournal(self);
}

- (void)rebuildJournal {
  ComSquareupOkhttpInternalDiskLruCache_rebuildJournal(self);
}

+ (void)deleteIfExistsWithJavaIoFile:(JavaIoFile *)file {
  ComSquareupOkhttpInternalDiskLruCache_deleteIfExistsWithJavaIoFile_(file);
}

+ (void)renameToWithJavaIoFile:(JavaIoFile *)from
                withJavaIoFile:(JavaIoFile *)to
                   withBoolean:(jboolean)deleteDestination {
  ComSquareupOkhttpInternalDiskLruCache_renameToWithJavaIoFile_withJavaIoFile_withBoolean_(from, to, deleteDestination);
}

- (ComSquareupOkhttpInternalDiskLruCache_Snapshot *)getWithNSString:(NSString *)key {
  @synchronized(self) {
    ComSquareupOkhttpInternalDiskLruCache_checkNotClosed(self);
    ComSquareupOkhttpInternalDiskLruCache_validateKeyWithNSString_(self, key);
    ComSquareupOkhttpInternalDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) getWithId:key];
    if (entry_ == nil || !entry_->readable_) return nil;
    ComSquareupOkhttpInternalDiskLruCache_Snapshot *snapshot = [((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry_)) snapshot];
    if (snapshot == nil) return nil;
    redundantOpCount_++;
    (void) [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(journalWriter_)) writeUtf8WithNSString:ComSquareupOkhttpInternalDiskLruCache_READ])) writeByteWithInt:' '])) writeUtf8WithNSString:key])) writeByteWithInt:0x000a];
    if (ComSquareupOkhttpInternalDiskLruCache_journalRebuildRequired(self)) {
      [((id<JavaUtilConcurrentExecutor>) nil_chk(executor_)) executeWithJavaLangRunnable:cleanupRunnable_];
    }
    return snapshot;
  }
}

- (ComSquareupOkhttpInternalDiskLruCache_Editor *)editWithNSString:(NSString *)key {
  return ComSquareupOkhttpInternalDiskLruCache_editWithNSString_withLong_(self, key, ComSquareupOkhttpInternalDiskLruCache_ANY_SEQUENCE_NUMBER);
}

- (ComSquareupOkhttpInternalDiskLruCache_Editor *)editWithNSString:(NSString *)key
                                                          withLong:(jlong)expectedSequenceNumber {
  return ComSquareupOkhttpInternalDiskLruCache_editWithNSString_withLong_(self, key, expectedSequenceNumber);
}

- (JavaIoFile *)getDirectory {
  return directory_;
}

- (jlong)getMaxSize {
  @synchronized(self) {
    return maxSize_;
  }
}

- (void)setMaxSizeWithLong:(jlong)maxSize {
  @synchronized(self) {
    self->maxSize_ = maxSize;
    [((id<JavaUtilConcurrentExecutor>) nil_chk(executor_)) executeWithJavaLangRunnable:cleanupRunnable_];
  }
}

- (jlong)size {
  @synchronized(self) {
    return size_;
  }
}

- (void)completeEditWithComSquareupOkhttpInternalDiskLruCache_Editor:(ComSquareupOkhttpInternalDiskLruCache_Editor *)editor
                                                         withBoolean:(jboolean)success {
  ComSquareupOkhttpInternalDiskLruCache_completeEditWithComSquareupOkhttpInternalDiskLruCache_Editor_withBoolean_(self, editor, success);
}

- (jboolean)journalRebuildRequired {
  return ComSquareupOkhttpInternalDiskLruCache_journalRebuildRequired(self);
}

- (jboolean)removeWithNSString:(NSString *)key {
  @synchronized(self) {
    ComSquareupOkhttpInternalDiskLruCache_checkNotClosed(self);
    ComSquareupOkhttpInternalDiskLruCache_validateKeyWithNSString_(self, key);
    ComSquareupOkhttpInternalDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) getWithId:key];
    if (entry_ == nil) return false;
    return ComSquareupOkhttpInternalDiskLruCache_removeEntryWithComSquareupOkhttpInternalDiskLruCache_Entry_(self, entry_);
  }
}

- (jboolean)removeEntryWithComSquareupOkhttpInternalDiskLruCache_Entry:(ComSquareupOkhttpInternalDiskLruCache_Entry *)entry_ {
  return ComSquareupOkhttpInternalDiskLruCache_removeEntryWithComSquareupOkhttpInternalDiskLruCache_Entry_(self, entry_);
}

- (jboolean)isClosed {
  return journalWriter_ == nil;
}

- (void)checkNotClosed {
  ComSquareupOkhttpInternalDiskLruCache_checkNotClosed(self);
}

- (void)flush {
  @synchronized(self) {
    ComSquareupOkhttpInternalDiskLruCache_checkNotClosed(self);
    ComSquareupOkhttpInternalDiskLruCache_trimToSize(self);
    [((id<OkioBufferedSink>) nil_chk(journalWriter_)) flush];
  }
}

- (void)close {
  @synchronized(self) {
    if (journalWriter_ == nil) {
      return;
    }
    {
      IOSObjectArray *a__ = [((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) values])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[lruEntries_ size] type:ComSquareupOkhttpInternalDiskLruCache_Entry_class_()]];
      ComSquareupOkhttpInternalDiskLruCache_Entry * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      ComSquareupOkhttpInternalDiskLruCache_Entry * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComSquareupOkhttpInternalDiskLruCache_Entry *entry_ = *b__++;
        if (((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != nil) {
          [entry_->currentEditor_ abort];
        }
      }
    }
    ComSquareupOkhttpInternalDiskLruCache_trimToSize(self);
    [((id<OkioBufferedSink>) nil_chk(journalWriter_)) close];
    journalWriter_ = nil;
  }
}

- (void)trimToSize {
  ComSquareupOkhttpInternalDiskLruCache_trimToSize(self);
}

- (void)delete__ {
  [self close];
  ComSquareupOkhttpInternalUtil_deleteContentsWithJavaIoFile_(directory_);
}

- (void)evictAll {
  @synchronized(self) {
    {
      IOSObjectArray *a__ = [((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) values])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[lruEntries_ size] type:ComSquareupOkhttpInternalDiskLruCache_Entry_class_()]];
      ComSquareupOkhttpInternalDiskLruCache_Entry * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      ComSquareupOkhttpInternalDiskLruCache_Entry * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComSquareupOkhttpInternalDiskLruCache_Entry *entry_ = *b__++;
        ComSquareupOkhttpInternalDiskLruCache_removeEntryWithComSquareupOkhttpInternalDiskLruCache_Entry_(self, entry_);
      }
    }
  }
}

- (void)validateKeyWithNSString:(NSString *)key {
  ComSquareupOkhttpInternalDiskLruCache_validateKeyWithNSString_(self, key);
}

+ (NSString *)sourceToStringWithOkioSource:(id<OkioSource>)inArg {
  return ComSquareupOkhttpInternalDiskLruCache_sourceToStringWithOkioSource_(inArg);
}

- (id<JavaUtilIterator>)snapshots {
  @synchronized(self) {
    return new_ComSquareupOkhttpInternalDiskLruCache_$3_initWithComSquareupOkhttpInternalDiskLruCache_(self);
  }
}

+ (void)initialize {
  if (self == [ComSquareupOkhttpInternalDiskLruCache class]) {
    ComSquareupOkhttpInternalDiskLruCache_LEGAL_KEY_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"[a-z0-9_-]{1,120}");
    ComSquareupOkhttpInternalDiskLruCache_NULL_SINK = new_ComSquareupOkhttpInternalDiskLruCache_$2_init();
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpInternalDiskLruCache)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoFile:withInt:withInt:withLong:withJavaUtilConcurrentExecutor:", "DiskLruCache", NULL, 0x0, NULL, NULL },
    { "initialize__", "initialize", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "openWithJavaIoFile:withInt:withInt:withLong:", "open", "Lcom.squareup.okhttp.internal.DiskLruCache;", 0x9, "Ljava.io.IOException;", NULL },
    { "readJournal", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readJournalLineWithNSString:", "readJournalLine", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "processJournal", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "rebuildJournal", NULL, "V", 0x22, "Ljava.io.IOException;", NULL },
    { "deleteIfExistsWithJavaIoFile:", "deleteIfExists", "V", 0xa, "Ljava.io.IOException;", NULL },
    { "renameToWithJavaIoFile:withJavaIoFile:withBoolean:", "renameTo", "V", 0xa, "Ljava.io.IOException;", NULL },
    { "getWithNSString:", "get", "Lcom.squareup.okhttp.internal.DiskLruCache$Snapshot;", 0x21, "Ljava.io.IOException;", NULL },
    { "editWithNSString:", "edit", "Lcom.squareup.okhttp.internal.DiskLruCache$Editor;", 0x1, "Ljava.io.IOException;", NULL },
    { "editWithNSString:withLong:", "edit", "Lcom.squareup.okhttp.internal.DiskLruCache$Editor;", 0x22, "Ljava.io.IOException;", NULL },
    { "getDirectory", NULL, "Ljava.io.File;", 0x1, NULL, NULL },
    { "getMaxSize", NULL, "J", 0x21, NULL, NULL },
    { "setMaxSizeWithLong:", "setMaxSize", "V", 0x21, NULL, NULL },
    { "size", NULL, "J", 0x21, NULL, NULL },
    { "completeEditWithComSquareupOkhttpInternalDiskLruCache_Editor:withBoolean:", "completeEdit", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "journalRebuildRequired", NULL, "Z", 0x2, NULL, NULL },
    { "removeWithNSString:", "remove", "Z", 0x21, "Ljava.io.IOException;", NULL },
    { "removeEntryWithComSquareupOkhttpInternalDiskLruCache_Entry:", "removeEntry", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "isClosed", NULL, "Z", 0x1, NULL, NULL },
    { "checkNotClosed", NULL, "V", 0x2, NULL, NULL },
    { "flush", NULL, "V", 0x21, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x21, "Ljava.io.IOException;", NULL },
    { "trimToSize", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "delete__", "delete", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "evictAll", NULL, "V", 0x21, "Ljava.io.IOException;", NULL },
    { "validateKeyWithNSString:", "validateKey", "V", 0x2, NULL, NULL },
    { "sourceToStringWithOkioSource:", "sourceToString", "Ljava.lang.String;", 0xa, "Ljava.io.IOException;", NULL },
    { "snapshots", NULL, "Ljava.util.Iterator;", 0x21, NULL, "()Ljava/util/Iterator<Lcom/squareup/okhttp/internal/DiskLruCache$Snapshot;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "JOURNAL_FILE", "JOURNAL_FILE", 0x18, "Ljava.lang.String;", &ComSquareupOkhttpInternalDiskLruCache_JOURNAL_FILE, NULL, .constantValue.asLong = 0 },
    { "JOURNAL_FILE_TEMP", "JOURNAL_FILE_TEMP", 0x18, "Ljava.lang.String;", &ComSquareupOkhttpInternalDiskLruCache_JOURNAL_FILE_TEMP, NULL, .constantValue.asLong = 0 },
    { "JOURNAL_FILE_BACKUP", "JOURNAL_FILE_BACKUP", 0x18, "Ljava.lang.String;", &ComSquareupOkhttpInternalDiskLruCache_JOURNAL_FILE_BACKUP, NULL, .constantValue.asLong = 0 },
    { "MAGIC", "MAGIC", 0x18, "Ljava.lang.String;", &ComSquareupOkhttpInternalDiskLruCache_MAGIC, NULL, .constantValue.asLong = 0 },
    { "VERSION_1", "VERSION_1", 0x18, "Ljava.lang.String;", &ComSquareupOkhttpInternalDiskLruCache_VERSION_1, NULL, .constantValue.asLong = 0 },
    { "ANY_SEQUENCE_NUMBER", "ANY_SEQUENCE_NUMBER", 0x18, "J", NULL, NULL, .constantValue.asLong = ComSquareupOkhttpInternalDiskLruCache_ANY_SEQUENCE_NUMBER },
    { "LEGAL_KEY_PATTERN", "LEGAL_KEY_PATTERN", 0x18, "Ljava.util.regex.Pattern;", &ComSquareupOkhttpInternalDiskLruCache_LEGAL_KEY_PATTERN, NULL, .constantValue.asLong = 0 },
    { "CLEAN", "CLEAN", 0x1a, "Ljava.lang.String;", &ComSquareupOkhttpInternalDiskLruCache_CLEAN, NULL, .constantValue.asLong = 0 },
    { "DIRTY", "DIRTY", 0x1a, "Ljava.lang.String;", &ComSquareupOkhttpInternalDiskLruCache_DIRTY, NULL, .constantValue.asLong = 0 },
    { "REMOVE", "REMOVE", 0x1a, "Ljava.lang.String;", &ComSquareupOkhttpInternalDiskLruCache_REMOVE, NULL, .constantValue.asLong = 0 },
    { "READ", "READ", 0x1a, "Ljava.lang.String;", &ComSquareupOkhttpInternalDiskLruCache_READ, NULL, .constantValue.asLong = 0 },
    { "directory_", NULL, 0x12, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "journalFile_", NULL, 0x12, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "journalFileTmp_", NULL, 0x12, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "journalFileBackup_", NULL, 0x12, "Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "appVersion_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxSize_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "valueCount_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "size_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "journalWriter_", NULL, 0x2, "Lokio.BufferedSink;", NULL, NULL, .constantValue.asLong = 0 },
    { "lruEntries_", NULL, 0x12, "Ljava.util.LinkedHashMap;", NULL, "Ljava/util/LinkedHashMap<Ljava/lang/String;Lcom/squareup/okhttp/internal/DiskLruCache$Entry;>;", .constantValue.asLong = 0 },
    { "redundantOpCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nextSequenceNumber_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "executor_", NULL, 0x12, "Ljava.util.concurrent.Executor;", NULL, NULL, .constantValue.asLong = 0 },
    { "cleanupRunnable_", NULL, 0x12, "Ljava.lang.Runnable;", NULL, NULL, .constantValue.asLong = 0 },
    { "NULL_SINK", "NULL_SINK", 0x1a, "Lokio.Sink;", &ComSquareupOkhttpInternalDiskLruCache_NULL_SINK, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.squareup.okhttp.internal.DiskLruCache$Snapshot;", "Lcom.squareup.okhttp.internal.DiskLruCache$Editor;", "Lcom.squareup.okhttp.internal.DiskLruCache$Entry;"};
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalDiskLruCache = { 2, "DiskLruCache", "com.squareup.okhttp.internal", NULL, 0x11, 30, methods, 26, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_ComSquareupOkhttpInternalDiskLruCache;
}

@end

void ComSquareupOkhttpInternalDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(ComSquareupOkhttpInternalDiskLruCache *self, JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize, id<JavaUtilConcurrentExecutor> executor) {
  NSObject_init(self);
  self->size_ = 0;
  self->lruEntries_ = new_JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(0, 0.75f, true);
  self->nextSequenceNumber_ = 0;
  self->cleanupRunnable_ = new_ComSquareupOkhttpInternalDiskLruCache_$1_initWithComSquareupOkhttpInternalDiskLruCache_(self);
  self->directory_ = directory;
  self->appVersion_ = appVersion;
  self->journalFile_ = new_JavaIoFile_initWithJavaIoFile_withNSString_(directory, ComSquareupOkhttpInternalDiskLruCache_JOURNAL_FILE);
  self->journalFileTmp_ = new_JavaIoFile_initWithJavaIoFile_withNSString_(directory, ComSquareupOkhttpInternalDiskLruCache_JOURNAL_FILE_TEMP);
  self->journalFileBackup_ = new_JavaIoFile_initWithJavaIoFile_withNSString_(directory, ComSquareupOkhttpInternalDiskLruCache_JOURNAL_FILE_BACKUP);
  self->valueCount_ = valueCount;
  self->maxSize_ = maxSize;
  self->executor_ = executor;
}

ComSquareupOkhttpInternalDiskLruCache *new_ComSquareupOkhttpInternalDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize, id<JavaUtilConcurrentExecutor> executor) {
  ComSquareupOkhttpInternalDiskLruCache *self = [ComSquareupOkhttpInternalDiskLruCache alloc];
  ComSquareupOkhttpInternalDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(self, directory, appVersion, valueCount, maxSize, executor);
  return self;
}

ComSquareupOkhttpInternalDiskLruCache *create_ComSquareupOkhttpInternalDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize, id<JavaUtilConcurrentExecutor> executor) {
  return new_ComSquareupOkhttpInternalDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(directory, appVersion, valueCount, maxSize, executor);
}

ComSquareupOkhttpInternalDiskLruCache *ComSquareupOkhttpInternalDiskLruCache_openWithJavaIoFile_withInt_withInt_withLong_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize) {
  ComSquareupOkhttpInternalDiskLruCache_initialize();
  if (maxSize <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"maxSize <= 0");
  }
  if (valueCount <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"valueCount <= 0");
  }
  id<JavaUtilConcurrentExecutor> executor = new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(0, 1, 60LL, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), new_JavaUtilConcurrentLinkedBlockingQueue_init(), ComSquareupOkhttpInternalUtil_threadFactoryWithNSString_withBoolean_(@"OkHttp DiskLruCache", true));
  ComSquareupOkhttpInternalDiskLruCache *cache = new_ComSquareupOkhttpInternalDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_withJavaUtilConcurrentExecutor_(directory, appVersion, valueCount, maxSize, executor);
  [cache initialize__];
  return cache;
}

void ComSquareupOkhttpInternalDiskLruCache_readJournal(ComSquareupOkhttpInternalDiskLruCache *self) {
  id<OkioBufferedSource> source = OkioOkio_bufferWithOkioSource_(OkioOkio_sourceWithJavaIoFile_(self->journalFile_));
  @try {
    NSString *magic = [((id<OkioBufferedSource>) nil_chk(source)) readUtf8LineStrict];
    NSString *version_ = [source readUtf8LineStrict];
    NSString *appVersionString = [source readUtf8LineStrict];
    NSString *valueCountString = [source readUtf8LineStrict];
    NSString *blank = [source readUtf8LineStrict];
    if (![((NSString *) nil_chk(ComSquareupOkhttpInternalDiskLruCache_MAGIC)) isEqual:magic] || ![((NSString *) nil_chk(ComSquareupOkhttpInternalDiskLruCache_VERSION_1)) isEqual:version_] || ![((NSString *) nil_chk(JavaLangInteger_toStringWithInt_(self->appVersion_))) isEqual:appVersionString] || ![((NSString *) nil_chk(JavaLangInteger_toStringWithInt_(self->valueCount_))) isEqual:valueCountString] || ![@"" isEqual:blank]) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$$$$$$$C", @"unexpected journal header: [", magic, @", ", version_, @", ", valueCountString, @", ", blank, ']'));
    }
    jint lineCount = 0;
    while (true) {
      @try {
        ComSquareupOkhttpInternalDiskLruCache_readJournalLineWithNSString_(self, [source readUtf8LineStrict]);
        lineCount++;
      }
      @catch (JavaIoEOFException *endOfJournal) {
        break;
      }
    }
    self->redundantOpCount_ = lineCount - [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) size];
    if (![source exhausted]) {
      ComSquareupOkhttpInternalDiskLruCache_rebuildJournal(self);
    }
    else {
      self->journalWriter_ = OkioOkio_bufferWithOkioSink_(OkioOkio_appendingSinkWithJavaIoFile_(self->journalFile_));
    }
  }
  @finally {
    ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaIoCloseable_(source);
  }
}

void ComSquareupOkhttpInternalDiskLruCache_readJournalLineWithNSString_(ComSquareupOkhttpInternalDiskLruCache *self, NSString *line) {
  jint firstSpace = [((NSString *) nil_chk(line)) indexOf:' '];
  if (firstSpace == -1) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", line));
  }
  jint keyBegin = firstSpace + 1;
  jint secondSpace = [line indexOf:' ' fromIndex:keyBegin];
  NSString *key;
  if (secondSpace == -1) {
    key = [line substring:keyBegin];
    if (firstSpace == ((jint) [((NSString *) nil_chk(ComSquareupOkhttpInternalDiskLruCache_REMOVE)) length]) && [line hasPrefix:ComSquareupOkhttpInternalDiskLruCache_REMOVE]) {
      (void) [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) removeWithId:key];
      return;
    }
  }
  else {
    key = [line substring:keyBegin endIndex:secondSpace];
  }
  ComSquareupOkhttpInternalDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) getWithId:key];
  if (entry_ == nil) {
    entry_ = new_ComSquareupOkhttpInternalDiskLruCache_Entry_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_(self, key);
    (void) [self->lruEntries_ putWithId:key withId:entry_];
  }
  if (secondSpace != -1 && firstSpace == ((jint) [((NSString *) nil_chk(ComSquareupOkhttpInternalDiskLruCache_CLEAN)) length]) && [line hasPrefix:ComSquareupOkhttpInternalDiskLruCache_CLEAN]) {
    IOSObjectArray *parts = [((NSString *) nil_chk([line substring:secondSpace + 1])) split:@" "];
    ((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry_))->readable_ = true;
    entry_->currentEditor_ = nil;
    ComSquareupOkhttpInternalDiskLruCache_Entry_setLengthsWithNSStringArray_(entry_, parts);
  }
  else if (secondSpace == -1 && firstSpace == ((jint) [((NSString *) nil_chk(ComSquareupOkhttpInternalDiskLruCache_DIRTY)) length]) && [line hasPrefix:ComSquareupOkhttpInternalDiskLruCache_DIRTY]) {
    ((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ = new_ComSquareupOkhttpInternalDiskLruCache_Editor_initWithComSquareupOkhttpInternalDiskLruCache_withComSquareupOkhttpInternalDiskLruCache_Entry_(self, entry_);
  }
  else if (secondSpace == -1 && firstSpace == ((jint) [((NSString *) nil_chk(ComSquareupOkhttpInternalDiskLruCache_READ)) length]) && [line hasPrefix:ComSquareupOkhttpInternalDiskLruCache_READ]) {
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", line));
  }
}

void ComSquareupOkhttpInternalDiskLruCache_processJournal(ComSquareupOkhttpInternalDiskLruCache *self) {
  ComSquareupOkhttpInternalDiskLruCache_deleteIfExistsWithJavaIoFile_(self->journalFileTmp_);
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComSquareupOkhttpInternalDiskLruCache_Entry *entry_ = [i next];
    if (((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ == nil) {
      for (jint t = 0; t < self->valueCount_; t++) {
        self->size_ += IOSLongArray_Get(nil_chk(entry_->lengths_), t);
      }
    }
    else {
      entry_->currentEditor_ = nil;
      for (jint t = 0; t < self->valueCount_; t++) {
        ComSquareupOkhttpInternalDiskLruCache_deleteIfExistsWithJavaIoFile_(IOSObjectArray_Get(nil_chk(entry_->cleanFiles_), t));
        ComSquareupOkhttpInternalDiskLruCache_deleteIfExistsWithJavaIoFile_(IOSObjectArray_Get(nil_chk(entry_->dirtyFiles_), t));
      }
      [i remove];
    }
  }
}

void ComSquareupOkhttpInternalDiskLruCache_rebuildJournal(ComSquareupOkhttpInternalDiskLruCache *self) {
  @synchronized(self) {
    if (self->journalWriter_ != nil) {
      [self->journalWriter_ close];
    }
    id<OkioBufferedSink> writer = OkioOkio_bufferWithOkioSink_(OkioOkio_sinkWithJavaIoFile_(self->journalFileTmp_));
    @try {
      (void) [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(writer)) writeUtf8WithNSString:ComSquareupOkhttpInternalDiskLruCache_MAGIC])) writeByteWithInt:0x000a];
      (void) [((id<OkioBufferedSink>) nil_chk([writer writeUtf8WithNSString:ComSquareupOkhttpInternalDiskLruCache_VERSION_1])) writeByteWithInt:0x000a];
      (void) [((id<OkioBufferedSink>) nil_chk([writer writeUtf8WithNSString:JavaLangInteger_toStringWithInt_(self->appVersion_)])) writeByteWithInt:0x000a];
      (void) [((id<OkioBufferedSink>) nil_chk([writer writeUtf8WithNSString:JavaLangInteger_toStringWithInt_(self->valueCount_)])) writeByteWithInt:0x000a];
      (void) [writer writeByteWithInt:0x000a];
      for (ComSquareupOkhttpInternalDiskLruCache_Entry * __strong entry_ in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) values])) {
        if (((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != nil) {
          (void) [((id<OkioBufferedSink>) nil_chk([writer writeUtf8WithNSString:ComSquareupOkhttpInternalDiskLruCache_DIRTY])) writeByteWithInt:' '];
          (void) [writer writeUtf8WithNSString:entry_->key_];
          (void) [writer writeByteWithInt:0x000a];
        }
        else {
          (void) [((id<OkioBufferedSink>) nil_chk([writer writeUtf8WithNSString:ComSquareupOkhttpInternalDiskLruCache_CLEAN])) writeByteWithInt:' '];
          (void) [writer writeUtf8WithNSString:entry_->key_];
          [entry_ writeLengthsWithOkioBufferedSink:writer];
          (void) [writer writeByteWithInt:0x000a];
        }
      }
    }
    @finally {
      [((id<OkioBufferedSink>) nil_chk(writer)) close];
    }
    if ([((JavaIoFile *) nil_chk(self->journalFile_)) exists]) {
      ComSquareupOkhttpInternalDiskLruCache_renameToWithJavaIoFile_withJavaIoFile_withBoolean_(self->journalFile_, self->journalFileBackup_, true);
    }
    ComSquareupOkhttpInternalDiskLruCache_renameToWithJavaIoFile_withJavaIoFile_withBoolean_(self->journalFileTmp_, self->journalFile_, false);
    [((JavaIoFile *) nil_chk(self->journalFileBackup_)) delete__];
    self->journalWriter_ = OkioOkio_bufferWithOkioSink_(OkioOkio_appendingSinkWithJavaIoFile_(self->journalFile_));
  }
}

void ComSquareupOkhttpInternalDiskLruCache_deleteIfExistsWithJavaIoFile_(JavaIoFile *file) {
  ComSquareupOkhttpInternalDiskLruCache_initialize();
  if (![((JavaIoFile *) nil_chk(file)) delete__] && [file exists]) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"failed to delete ", file));
  }
}

void ComSquareupOkhttpInternalDiskLruCache_renameToWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *from, JavaIoFile *to, jboolean deleteDestination) {
  ComSquareupOkhttpInternalDiskLruCache_initialize();
  if (deleteDestination) {
    ComSquareupOkhttpInternalDiskLruCache_deleteIfExistsWithJavaIoFile_(to);
  }
  if (![((JavaIoFile *) nil_chk(from)) renameToWithJavaIoFile:to]) {
    @throw new_JavaIoIOException_init();
  }
}

ComSquareupOkhttpInternalDiskLruCache_Editor *ComSquareupOkhttpInternalDiskLruCache_editWithNSString_withLong_(ComSquareupOkhttpInternalDiskLruCache *self, NSString *key, jlong expectedSequenceNumber) {
  @synchronized(self) {
    ComSquareupOkhttpInternalDiskLruCache_checkNotClosed(self);
    ComSquareupOkhttpInternalDiskLruCache_validateKeyWithNSString_(self, key);
    ComSquareupOkhttpInternalDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) getWithId:key];
    if (expectedSequenceNumber != ComSquareupOkhttpInternalDiskLruCache_ANY_SEQUENCE_NUMBER && (entry_ == nil || entry_->sequenceNumber_ != expectedSequenceNumber)) {
      return nil;
    }
    if (entry_ == nil) {
      entry_ = new_ComSquareupOkhttpInternalDiskLruCache_Entry_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_(self, key);
      (void) [self->lruEntries_ putWithId:key withId:entry_];
    }
    else if (entry_->currentEditor_ != nil) {
      return nil;
    }
    ComSquareupOkhttpInternalDiskLruCache_Editor *editor = new_ComSquareupOkhttpInternalDiskLruCache_Editor_initWithComSquareupOkhttpInternalDiskLruCache_withComSquareupOkhttpInternalDiskLruCache_Entry_(self, entry_);
    ((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ = editor;
    (void) [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeUtf8WithNSString:ComSquareupOkhttpInternalDiskLruCache_DIRTY])) writeByteWithInt:' '])) writeUtf8WithNSString:key])) writeByteWithInt:0x000a];
    [self->journalWriter_ flush];
    return editor;
  }
}

void ComSquareupOkhttpInternalDiskLruCache_completeEditWithComSquareupOkhttpInternalDiskLruCache_Editor_withBoolean_(ComSquareupOkhttpInternalDiskLruCache *self, ComSquareupOkhttpInternalDiskLruCache_Editor *editor, jboolean success) {
  @synchronized(self) {
    ComSquareupOkhttpInternalDiskLruCache_Entry *entry_ = ((ComSquareupOkhttpInternalDiskLruCache_Editor *) nil_chk(editor))->entry__;
    if (((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != editor) {
      @throw new_JavaLangIllegalStateException_init();
    }
    if (success && !entry_->readable_) {
      for (jint i = 0; i < self->valueCount_; i++) {
        if (!IOSBooleanArray_Get(nil_chk(editor->written_), i)) {
          [editor abort];
          @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Newly created entry didn't create value for index ", i));
        }
        if (![((JavaIoFile *) nil_chk(IOSObjectArray_Get(nil_chk(entry_->dirtyFiles_), i))) exists]) {
          [editor abort];
          return;
        }
      }
    }
    for (jint i = 0; i < self->valueCount_; i++) {
      JavaIoFile *dirty = IOSObjectArray_Get(nil_chk(entry_->dirtyFiles_), i);
      if (success) {
        if ([((JavaIoFile *) nil_chk(dirty)) exists]) {
          JavaIoFile *clean = IOSObjectArray_Get(nil_chk(entry_->cleanFiles_), i);
          [dirty renameToWithJavaIoFile:clean];
          jlong oldLength = IOSLongArray_Get(nil_chk(entry_->lengths_), i);
          jlong newLength = [((JavaIoFile *) nil_chk(clean)) length];
          *IOSLongArray_GetRef(entry_->lengths_, i) = newLength;
          self->size_ = self->size_ - oldLength + newLength;
        }
      }
      else {
        ComSquareupOkhttpInternalDiskLruCache_deleteIfExistsWithJavaIoFile_(dirty);
      }
    }
    self->redundantOpCount_++;
    entry_->currentEditor_ = nil;
    if (entry_->readable_ | success) {
      entry_->readable_ = true;
      (void) [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeUtf8WithNSString:ComSquareupOkhttpInternalDiskLruCache_CLEAN])) writeByteWithInt:' '];
      (void) [self->journalWriter_ writeUtf8WithNSString:entry_->key_];
      [entry_ writeLengthsWithOkioBufferedSink:self->journalWriter_];
      (void) [self->journalWriter_ writeByteWithInt:0x000a];
      if (success) {
        entry_->sequenceNumber_ = self->nextSequenceNumber_++;
      }
    }
    else {
      (void) [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) removeWithId:entry_->key_];
      (void) [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeUtf8WithNSString:ComSquareupOkhttpInternalDiskLruCache_REMOVE])) writeByteWithInt:' '];
      (void) [self->journalWriter_ writeUtf8WithNSString:entry_->key_];
      (void) [self->journalWriter_ writeByteWithInt:0x000a];
    }
    [((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) flush];
    if (self->size_ > self->maxSize_ || ComSquareupOkhttpInternalDiskLruCache_journalRebuildRequired(self)) {
      [((id<JavaUtilConcurrentExecutor>) nil_chk(self->executor_)) executeWithJavaLangRunnable:self->cleanupRunnable_];
    }
  }
}

jboolean ComSquareupOkhttpInternalDiskLruCache_journalRebuildRequired(ComSquareupOkhttpInternalDiskLruCache *self) {
  jint redundantOpCompactThreshold = 2000;
  return self->redundantOpCount_ >= redundantOpCompactThreshold && self->redundantOpCount_ >= [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) size];
}

jboolean ComSquareupOkhttpInternalDiskLruCache_removeEntryWithComSquareupOkhttpInternalDiskLruCache_Entry_(ComSquareupOkhttpInternalDiskLruCache *self, ComSquareupOkhttpInternalDiskLruCache_Entry *entry_) {
  if (((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != nil) {
    entry_->currentEditor_->hasErrors_ = true;
  }
  for (jint i = 0; i < self->valueCount_; i++) {
    JavaIoFile *file = IOSObjectArray_Get(nil_chk(entry_->cleanFiles_), i);
    ComSquareupOkhttpInternalDiskLruCache_deleteIfExistsWithJavaIoFile_(file);
    self->size_ -= IOSLongArray_Get(nil_chk(entry_->lengths_), i);
    *IOSLongArray_GetRef(entry_->lengths_, i) = 0;
  }
  self->redundantOpCount_++;
  (void) [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(self->journalWriter_)) writeUtf8WithNSString:ComSquareupOkhttpInternalDiskLruCache_REMOVE])) writeByteWithInt:' '])) writeUtf8WithNSString:entry_->key_])) writeByteWithInt:0x000a];
  (void) [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) removeWithId:entry_->key_];
  if (ComSquareupOkhttpInternalDiskLruCache_journalRebuildRequired(self)) {
    [((id<JavaUtilConcurrentExecutor>) nil_chk(self->executor_)) executeWithJavaLangRunnable:self->cleanupRunnable_];
  }
  return true;
}

void ComSquareupOkhttpInternalDiskLruCache_checkNotClosed(ComSquareupOkhttpInternalDiskLruCache *self) {
  if (self->journalWriter_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cache is closed");
  }
}

void ComSquareupOkhttpInternalDiskLruCache_trimToSize(ComSquareupOkhttpInternalDiskLruCache *self) {
  while (self->size_ > self->maxSize_) {
    ComSquareupOkhttpInternalDiskLruCache_Entry *toEvict = [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) values])) iterator])) next];
    ComSquareupOkhttpInternalDiskLruCache_removeEntryWithComSquareupOkhttpInternalDiskLruCache_Entry_(self, toEvict);
  }
}

void ComSquareupOkhttpInternalDiskLruCache_validateKeyWithNSString_(ComSquareupOkhttpInternalDiskLruCache *self, NSString *key) {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(ComSquareupOkhttpInternalDiskLruCache_LEGAL_KEY_PATTERN)) matcherWithJavaLangCharSequence:key];
  if (![((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"keys must match regex [a-z0-9_-]{1,120}: \"", key, '"'));
  }
}

NSString *ComSquareupOkhttpInternalDiskLruCache_sourceToStringWithOkioSource_(id<OkioSource> inArg) {
  ComSquareupOkhttpInternalDiskLruCache_initialize();
  @try {
    return [((id<OkioBufferedSource>) nil_chk(OkioOkio_bufferWithOkioSource_(inArg))) readUtf8];
  }
  @finally {
    ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaIoCloseable_(inArg);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalDiskLruCache)

@implementation ComSquareupOkhttpInternalDiskLruCache_Snapshot

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache:(ComSquareupOkhttpInternalDiskLruCache *)outer$
                                                 withNSString:(NSString *)key
                                                     withLong:(jlong)sequenceNumber
                                          withOkioSourceArray:(IOSObjectArray *)sources
                                                withLongArray:(IOSLongArray *)lengths {
  ComSquareupOkhttpInternalDiskLruCache_Snapshot_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(self, outer$, key, sequenceNumber, sources, lengths);
  return self;
}

- (NSString *)key {
  return key_;
}

- (ComSquareupOkhttpInternalDiskLruCache_Editor *)edit {
  return ComSquareupOkhttpInternalDiskLruCache_editWithNSString_withLong_(this$0_, key_, sequenceNumber_);
}

- (id<OkioSource>)getSourceWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(sources_), index);
}

- (NSString *)getStringWithInt:(jint)index {
  return ComSquareupOkhttpInternalDiskLruCache_sourceToStringWithOkioSource_([self getSourceWithInt:index]);
}

- (jlong)getLengthWithInt:(jint)index {
  return IOSLongArray_Get(nil_chk(lengths_), index);
}

- (void)close {
  {
    IOSObjectArray *a__ = sources_;
    id<OkioSource> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<OkioSource> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<OkioSource> in = *b__++;
      ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaIoCloseable_(in);
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpInternalDiskLruCache:withNSString:withLong:withOkioSourceArray:withLongArray:", "Snapshot", NULL, 0x2, NULL, NULL },
    { "key", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "edit", NULL, "Lcom.squareup.okhttp.internal.DiskLruCache$Editor;", 0x1, "Ljava.io.IOException;", NULL },
    { "getSourceWithInt:", "getSource", "Lokio.Source;", 0x1, NULL, NULL },
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "getLengthWithInt:", "getLength", "J", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.squareup.okhttp.internal.DiskLruCache;", NULL, NULL, .constantValue.asLong = 0 },
    { "key_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "sequenceNumber_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sources_", NULL, 0x12, "[Lokio.Source;", NULL, NULL, .constantValue.asLong = 0 },
    { "lengths_", NULL, 0x12, "[J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalDiskLruCache_Snapshot = { 2, "Snapshot", "com.squareup.okhttp.internal", "DiskLruCache", 0x11, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalDiskLruCache_Snapshot;
}

@end

void ComSquareupOkhttpInternalDiskLruCache_Snapshot_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(ComSquareupOkhttpInternalDiskLruCache_Snapshot *self, ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->key_ = key;
  self->sequenceNumber_ = sequenceNumber;
  self->sources_ = sources;
  self->lengths_ = lengths;
}

ComSquareupOkhttpInternalDiskLruCache_Snapshot *new_ComSquareupOkhttpInternalDiskLruCache_Snapshot_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths) {
  ComSquareupOkhttpInternalDiskLruCache_Snapshot *self = [ComSquareupOkhttpInternalDiskLruCache_Snapshot alloc];
  ComSquareupOkhttpInternalDiskLruCache_Snapshot_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(self, outer$, key, sequenceNumber, sources, lengths);
  return self;
}

ComSquareupOkhttpInternalDiskLruCache_Snapshot *create_ComSquareupOkhttpInternalDiskLruCache_Snapshot_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *sources, IOSLongArray *lengths) {
  return new_ComSquareupOkhttpInternalDiskLruCache_Snapshot_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(outer$, key, sequenceNumber, sources, lengths);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalDiskLruCache_Snapshot)

@implementation ComSquareupOkhttpInternalDiskLruCache_Editor

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache:(ComSquareupOkhttpInternalDiskLruCache *)outer$
              withComSquareupOkhttpInternalDiskLruCache_Entry:(ComSquareupOkhttpInternalDiskLruCache_Entry *)entry_ {
  ComSquareupOkhttpInternalDiskLruCache_Editor_initWithComSquareupOkhttpInternalDiskLruCache_withComSquareupOkhttpInternalDiskLruCache_Entry_(self, outer$, entry_);
  return self;
}

- (id<OkioSource>)newSourceWithInt:(jint)index {
  @synchronized(this$0_) {
    if (((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry__))->currentEditor_ != self) {
      @throw new_JavaLangIllegalStateException_init();
    }
    if (!entry__->readable_) {
      return nil;
    }
    @try {
      return OkioOkio_sourceWithJavaIoFile_(IOSObjectArray_Get(nil_chk(entry__->cleanFiles_), index));
    }
    @catch (JavaIoFileNotFoundException *e) {
      return nil;
    }
  }
}

- (NSString *)getStringWithInt:(jint)index {
  id<OkioSource> source = [self newSourceWithInt:index];
  return source != nil ? ComSquareupOkhttpInternalDiskLruCache_sourceToStringWithOkioSource_(source) : nil;
}

- (id<OkioSink>)newSinkWithInt:(jint)index {
  @synchronized(this$0_) {
    if (((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry__))->currentEditor_ != self) {
      @throw new_JavaLangIllegalStateException_init();
    }
    if (!entry__->readable_) {
      *IOSBooleanArray_GetRef(nil_chk(written_), index) = true;
    }
    JavaIoFile *dirtyFile = IOSObjectArray_Get(nil_chk(entry__->dirtyFiles_), index);
    id<OkioSink> sink;
    @try {
      sink = OkioOkio_sinkWithJavaIoFile_(dirtyFile);
    }
    @catch (JavaIoFileNotFoundException *e) {
      [((JavaIoFile *) nil_chk(this$0_->directory_)) mkdirs];
      @try {
        sink = OkioOkio_sinkWithJavaIoFile_(dirtyFile);
      }
      @catch (JavaIoFileNotFoundException *e2) {
        return JreLoadStatic(ComSquareupOkhttpInternalDiskLruCache, NULL_SINK);
      }
    }
    return new_ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink_initWithComSquareupOkhttpInternalDiskLruCache_Editor_withOkioSink_(self, sink);
  }
}

- (void)setWithInt:(jint)index
      withNSString:(NSString *)value {
  id<OkioBufferedSink> writer = OkioOkio_bufferWithOkioSink_([self newSinkWithInt:index]);
  (void) [((id<OkioBufferedSink>) nil_chk(writer)) writeUtf8WithNSString:value];
  [writer close];
}

- (void)commit {
  @synchronized(this$0_) {
    if (hasErrors_) {
      ComSquareupOkhttpInternalDiskLruCache_completeEditWithComSquareupOkhttpInternalDiskLruCache_Editor_withBoolean_(this$0_, self, false);
      ComSquareupOkhttpInternalDiskLruCache_removeEntryWithComSquareupOkhttpInternalDiskLruCache_Entry_(this$0_, entry__);
    }
    else {
      ComSquareupOkhttpInternalDiskLruCache_completeEditWithComSquareupOkhttpInternalDiskLruCache_Editor_withBoolean_(this$0_, self, true);
    }
    committed_ = true;
  }
}

- (void)abort {
  @synchronized(this$0_) {
    ComSquareupOkhttpInternalDiskLruCache_completeEditWithComSquareupOkhttpInternalDiskLruCache_Editor_withBoolean_(this$0_, self, false);
  }
}

- (void)abortUnlessCommitted {
  @synchronized(this$0_) {
    if (!committed_) {
      @try {
        ComSquareupOkhttpInternalDiskLruCache_completeEditWithComSquareupOkhttpInternalDiskLruCache_Editor_withBoolean_(this$0_, self, false);
      }
      @catch (JavaIoIOException *ignored) {
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpInternalDiskLruCache:withComSquareupOkhttpInternalDiskLruCache_Entry:", "Editor", NULL, 0x2, NULL, NULL },
    { "newSourceWithInt:", "newSource", "Lokio.Source;", 0x1, "Ljava.io.IOException;", NULL },
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "newSinkWithInt:", "newSink", "Lokio.Sink;", 0x1, "Ljava.io.IOException;", NULL },
    { "setWithInt:withNSString:", "set", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "commit", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "abort", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "abortUnlessCommitted", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.squareup.okhttp.internal.DiskLruCache;", NULL, NULL, .constantValue.asLong = 0 },
    { "entry__", "entry", 0x12, "Lcom.squareup.okhttp.internal.DiskLruCache$Entry;", NULL, NULL, .constantValue.asLong = 0 },
    { "written_", NULL, 0x12, "[Z", NULL, NULL, .constantValue.asLong = 0 },
    { "hasErrors_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "committed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.squareup.okhttp.internal.DiskLruCache$Editor$FaultHidingSink;"};
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalDiskLruCache_Editor = { 2, "Editor", "com.squareup.okhttp.internal", "DiskLruCache", 0x11, 8, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComSquareupOkhttpInternalDiskLruCache_Editor;
}

@end

void ComSquareupOkhttpInternalDiskLruCache_Editor_initWithComSquareupOkhttpInternalDiskLruCache_withComSquareupOkhttpInternalDiskLruCache_Entry_(ComSquareupOkhttpInternalDiskLruCache_Editor *self, ComSquareupOkhttpInternalDiskLruCache *outer$, ComSquareupOkhttpInternalDiskLruCache_Entry *entry_) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->entry__ = entry_;
  self->written_ = (((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry_))->readable_) ? nil : [IOSBooleanArray newArrayWithLength:outer$->valueCount_];
}

ComSquareupOkhttpInternalDiskLruCache_Editor *new_ComSquareupOkhttpInternalDiskLruCache_Editor_initWithComSquareupOkhttpInternalDiskLruCache_withComSquareupOkhttpInternalDiskLruCache_Entry_(ComSquareupOkhttpInternalDiskLruCache *outer$, ComSquareupOkhttpInternalDiskLruCache_Entry *entry_) {
  ComSquareupOkhttpInternalDiskLruCache_Editor *self = [ComSquareupOkhttpInternalDiskLruCache_Editor alloc];
  ComSquareupOkhttpInternalDiskLruCache_Editor_initWithComSquareupOkhttpInternalDiskLruCache_withComSquareupOkhttpInternalDiskLruCache_Entry_(self, outer$, entry_);
  return self;
}

ComSquareupOkhttpInternalDiskLruCache_Editor *create_ComSquareupOkhttpInternalDiskLruCache_Editor_initWithComSquareupOkhttpInternalDiskLruCache_withComSquareupOkhttpInternalDiskLruCache_Entry_(ComSquareupOkhttpInternalDiskLruCache *outer$, ComSquareupOkhttpInternalDiskLruCache_Entry *entry_) {
  return new_ComSquareupOkhttpInternalDiskLruCache_Editor_initWithComSquareupOkhttpInternalDiskLruCache_withComSquareupOkhttpInternalDiskLruCache_Entry_(outer$, entry_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalDiskLruCache_Editor)

@implementation ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache_Editor:(ComSquareupOkhttpInternalDiskLruCache_Editor *)outer$
                                                        withOkioSink:(id<OkioSink>)delegate {
  ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink_initWithComSquareupOkhttpInternalDiskLruCache_Editor_withOkioSink_(self, outer$, delegate);
  return self;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  @try {
    [super writeWithOkioBuffer:source withLong:byteCount];
  }
  @catch (JavaIoIOException *e) {
    @synchronized(this$0_->this$0_) {
      this$0_->hasErrors_ = true;
    }
  }
}

- (void)flush {
  @try {
    [super flush];
  }
  @catch (JavaIoIOException *e) {
    @synchronized(this$0_->this$0_) {
      this$0_->hasErrors_ = true;
    }
  }
}

- (void)close {
  @try {
    [super close];
  }
  @catch (JavaIoIOException *e) {
    @synchronized(this$0_->this$0_) {
      this$0_->hasErrors_ = true;
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpInternalDiskLruCache_Editor:withOkioSink:", "FaultHidingSink", NULL, 0x1, NULL, NULL },
    { "writeWithOkioBuffer:withLong:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.squareup.okhttp.internal.DiskLruCache$Editor;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink = { 2, "FaultHidingSink", "com.squareup.okhttp.internal", "DiskLruCache$Editor", 0x2, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink;
}

@end

void ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink_initWithComSquareupOkhttpInternalDiskLruCache_Editor_withOkioSink_(ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink *self, ComSquareupOkhttpInternalDiskLruCache_Editor *outer$, id<OkioSink> delegate) {
  self->this$0_ = outer$;
  OkioForwardingSink_initWithOkioSink_(self, delegate);
}

ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink *new_ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink_initWithComSquareupOkhttpInternalDiskLruCache_Editor_withOkioSink_(ComSquareupOkhttpInternalDiskLruCache_Editor *outer$, id<OkioSink> delegate) {
  ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink *self = [ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink alloc];
  ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink_initWithComSquareupOkhttpInternalDiskLruCache_Editor_withOkioSink_(self, outer$, delegate);
  return self;
}

ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink *create_ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink_initWithComSquareupOkhttpInternalDiskLruCache_Editor_withOkioSink_(ComSquareupOkhttpInternalDiskLruCache_Editor *outer$, id<OkioSink> delegate) {
  return new_ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink_initWithComSquareupOkhttpInternalDiskLruCache_Editor_withOkioSink_(outer$, delegate);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalDiskLruCache_Editor_FaultHidingSink)

@implementation ComSquareupOkhttpInternalDiskLruCache_Entry

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache:(ComSquareupOkhttpInternalDiskLruCache *)outer$
                                                 withNSString:(NSString *)key {
  ComSquareupOkhttpInternalDiskLruCache_Entry_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_(self, outer$, key);
  return self;
}

- (void)setLengthsWithNSStringArray:(IOSObjectArray *)strings {
  ComSquareupOkhttpInternalDiskLruCache_Entry_setLengthsWithNSStringArray_(self, strings);
}

- (void)writeLengthsWithOkioBufferedSink:(id<OkioBufferedSink>)writer {
  {
    IOSLongArray *a__ = lengths_;
    jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong length = *b__++;
      (void) [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(writer)) writeByteWithInt:' '])) writeUtf8WithNSString:JavaLangLong_toStringWithLong_(length)];
    }
  }
}

- (JavaIoIOException *)invalidLengthsWithNSStringArray:(IOSObjectArray *)strings {
  return ComSquareupOkhttpInternalDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings);
}

- (ComSquareupOkhttpInternalDiskLruCache_Snapshot *)snapshot {
  if (!JavaLangThread_holdsLockWithId_(this$0_)) @throw new_JavaLangAssertionError_init();
  IOSObjectArray *sources = [IOSObjectArray newArrayWithLength:this$0_->valueCount_ type:OkioSource_class_()];
  @try {
    for (jint i = 0; i < this$0_->valueCount_; i++) {
      (void) IOSObjectArray_Set(sources, i, OkioOkio_sourceWithJavaIoFile_(IOSObjectArray_Get(nil_chk(cleanFiles_), i)));
    }
    return new_ComSquareupOkhttpInternalDiskLruCache_Snapshot_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_withLong_withOkioSourceArray_withLongArray_(this$0_, key_, sequenceNumber_, sources, lengths_);
  }
  @catch (JavaIoFileNotFoundException *e) {
    for (jint i = 0; i < this$0_->valueCount_; i++) {
      if (IOSObjectArray_Get(sources, i) != nil) {
        ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaIoCloseable_(IOSObjectArray_Get(sources, i));
      }
      else {
        break;
      }
    }
    return nil;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpInternalDiskLruCache:withNSString:", "Entry", NULL, 0x2, NULL, NULL },
    { "setLengthsWithNSStringArray:", "setLengths", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeLengthsWithOkioBufferedSink:", "writeLengths", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "invalidLengthsWithNSStringArray:", "invalidLengths", "Ljava.io.IOException;", 0x2, "Ljava.io.IOException;", NULL },
    { "snapshot", NULL, "Lcom.squareup.okhttp.internal.DiskLruCache$Snapshot;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.squareup.okhttp.internal.DiskLruCache;", NULL, NULL, .constantValue.asLong = 0 },
    { "key_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "lengths_", NULL, 0x12, "[J", NULL, NULL, .constantValue.asLong = 0 },
    { "cleanFiles_", NULL, 0x12, "[Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "dirtyFiles_", NULL, 0x12, "[Ljava.io.File;", NULL, NULL, .constantValue.asLong = 0 },
    { "readable_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "currentEditor_", NULL, 0x2, "Lcom.squareup.okhttp.internal.DiskLruCache$Editor;", NULL, NULL, .constantValue.asLong = 0 },
    { "sequenceNumber_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalDiskLruCache_Entry = { 2, "Entry", "com.squareup.okhttp.internal", "DiskLruCache", 0x12, 5, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalDiskLruCache_Entry;
}

@end

void ComSquareupOkhttpInternalDiskLruCache_Entry_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_(ComSquareupOkhttpInternalDiskLruCache_Entry *self, ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->key_ = key;
  self->lengths_ = [IOSLongArray newArrayWithLength:outer$->valueCount_];
  self->cleanFiles_ = [IOSObjectArray newArrayWithLength:outer$->valueCount_ type:JavaIoFile_class_()];
  self->dirtyFiles_ = [IOSObjectArray newArrayWithLength:outer$->valueCount_ type:JavaIoFile_class_()];
  JavaLangStringBuilder *fileBuilder = [new_JavaLangStringBuilder_initWithNSString_(key) appendWithChar:'.'];
  jint truncateTo = [((JavaLangStringBuilder *) nil_chk(fileBuilder)) length];
  for (jint i = 0; i < outer$->valueCount_; i++) {
    (void) [fileBuilder appendWithInt:i];
    (void) IOSObjectArray_Set(self->cleanFiles_, i, new_JavaIoFile_initWithJavaIoFile_withNSString_(outer$->directory_, [fileBuilder description]));
    (void) [fileBuilder appendWithNSString:@".tmp"];
    (void) IOSObjectArray_Set(self->dirtyFiles_, i, new_JavaIoFile_initWithJavaIoFile_withNSString_(outer$->directory_, [fileBuilder description]));
    [fileBuilder setLengthWithInt:truncateTo];
  }
}

ComSquareupOkhttpInternalDiskLruCache_Entry *new_ComSquareupOkhttpInternalDiskLruCache_Entry_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_(ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key) {
  ComSquareupOkhttpInternalDiskLruCache_Entry *self = [ComSquareupOkhttpInternalDiskLruCache_Entry alloc];
  ComSquareupOkhttpInternalDiskLruCache_Entry_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_(self, outer$, key);
  return self;
}

ComSquareupOkhttpInternalDiskLruCache_Entry *create_ComSquareupOkhttpInternalDiskLruCache_Entry_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_(ComSquareupOkhttpInternalDiskLruCache *outer$, NSString *key) {
  return new_ComSquareupOkhttpInternalDiskLruCache_Entry_initWithComSquareupOkhttpInternalDiskLruCache_withNSString_(outer$, key);
}

void ComSquareupOkhttpInternalDiskLruCache_Entry_setLengthsWithNSStringArray_(ComSquareupOkhttpInternalDiskLruCache_Entry *self, IOSObjectArray *strings) {
  if (((IOSObjectArray *) nil_chk(strings))->size_ != self->this$0_->valueCount_) {
    @throw ComSquareupOkhttpInternalDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings);
  }
  @try {
    for (jint i = 0; i < strings->size_; i++) {
      *IOSLongArray_GetRef(nil_chk(self->lengths_), i) = JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(strings, i));
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw ComSquareupOkhttpInternalDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings);
  }
}

JavaIoIOException *ComSquareupOkhttpInternalDiskLruCache_Entry_invalidLengthsWithNSStringArray_(ComSquareupOkhttpInternalDiskLruCache_Entry *self, IOSObjectArray *strings) {
  @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", JavaUtilArrays_toStringWithNSObjectArray_(strings)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalDiskLruCache_Entry)

@implementation ComSquareupOkhttpInternalDiskLruCache_$1

- (void)run {
  @synchronized(this$0_) {
    if (this$0_->journalWriter_ == nil) {
      return;
    }
    @try {
      ComSquareupOkhttpInternalDiskLruCache_trimToSize(this$0_);
      if (ComSquareupOkhttpInternalDiskLruCache_journalRebuildRequired(this$0_)) {
        ComSquareupOkhttpInternalDiskLruCache_rebuildJournal(this$0_);
        this$0_->redundantOpCount_ = 0;
      }
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangRuntimeException_initWithNSException_(e);
    }
  }
}

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache:(ComSquareupOkhttpInternalDiskLruCache *)outer$ {
  ComSquareupOkhttpInternalDiskLruCache_$1_initWithComSquareupOkhttpInternalDiskLruCache_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithComSquareupOkhttpInternalDiskLruCache:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.squareup.okhttp.internal.DiskLruCache;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalDiskLruCache_$1 = { 2, "", "com.squareup.okhttp.internal", "DiskLruCache", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalDiskLruCache_$1;
}

@end

void ComSquareupOkhttpInternalDiskLruCache_$1_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache_$1 *self, ComSquareupOkhttpInternalDiskLruCache *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComSquareupOkhttpInternalDiskLruCache_$1 *new_ComSquareupOkhttpInternalDiskLruCache_$1_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache *outer$) {
  ComSquareupOkhttpInternalDiskLruCache_$1 *self = [ComSquareupOkhttpInternalDiskLruCache_$1 alloc];
  ComSquareupOkhttpInternalDiskLruCache_$1_initWithComSquareupOkhttpInternalDiskLruCache_(self, outer$);
  return self;
}

ComSquareupOkhttpInternalDiskLruCache_$1 *create_ComSquareupOkhttpInternalDiskLruCache_$1_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache *outer$) {
  return new_ComSquareupOkhttpInternalDiskLruCache_$1_initWithComSquareupOkhttpInternalDiskLruCache_(outer$);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalDiskLruCache_$1)

@implementation ComSquareupOkhttpInternalDiskLruCache_$3

- (jboolean)hasNext {
  if (nextSnapshot_ != nil) return true;
  @synchronized(this$0_) {
    if ([this$0_ isClosed]) return false;
    while ([((id<JavaUtilIterator>) nil_chk(delegate_)) hasNext]) {
      ComSquareupOkhttpInternalDiskLruCache_Entry *entry_ = [delegate_ next];
      ComSquareupOkhttpInternalDiskLruCache_Snapshot *snapshot = [((ComSquareupOkhttpInternalDiskLruCache_Entry *) nil_chk(entry_)) snapshot];
      if (snapshot == nil) continue;
      nextSnapshot_ = snapshot;
      return true;
    }
  }
  return false;
}

- (ComSquareupOkhttpInternalDiskLruCache_Snapshot *)next {
  if (![self hasNext]) @throw new_JavaUtilNoSuchElementException_init();
  removeSnapshot_ = nextSnapshot_;
  nextSnapshot_ = nil;
  return removeSnapshot_;
}

- (void)remove {
  if (removeSnapshot_ == nil) @throw new_JavaLangIllegalStateException_initWithNSString_(@"remove() before next()");
  @try {
    [this$0_ removeWithNSString:((ComSquareupOkhttpInternalDiskLruCache_Snapshot *) nil_chk(removeSnapshot_))->key_];
  }
  @catch (JavaIoIOException *ignored) {
  }
  @finally {
    removeSnapshot_ = nil;
  }
}

- (instancetype)initWithComSquareupOkhttpInternalDiskLruCache:(ComSquareupOkhttpInternalDiskLruCache *)outer$ {
  ComSquareupOkhttpInternalDiskLruCache_$3_initWithComSquareupOkhttpInternalDiskLruCache_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lcom.squareup.okhttp.internal.DiskLruCache$Snapshot;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "initWithComSquareupOkhttpInternalDiskLruCache:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.squareup.okhttp.internal.DiskLruCache;", NULL, NULL, .constantValue.asLong = 0 },
    { "delegate_", NULL, 0x10, "Ljava.util.Iterator;", NULL, "Ljava/util/Iterator<Lcom/squareup/okhttp/internal/DiskLruCache$Entry;>;", .constantValue.asLong = 0 },
    { "nextSnapshot_", NULL, 0x0, "Lcom.squareup.okhttp.internal.DiskLruCache$Snapshot;", NULL, NULL, .constantValue.asLong = 0 },
    { "removeSnapshot_", NULL, 0x0, "Lcom.squareup.okhttp.internal.DiskLruCache$Snapshot;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ComSquareupOkhttpInternalDiskLruCache", "snapshots" };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalDiskLruCache_$3 = { 2, "", "com.squareup.okhttp.internal", "DiskLruCache", 0x8008, 4, methods, 4, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Iterator<Lcom/squareup/okhttp/internal/DiskLruCache$Snapshot;>;" };
  return &_ComSquareupOkhttpInternalDiskLruCache_$3;
}

@end

void ComSquareupOkhttpInternalDiskLruCache_$3_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache_$3 *self, ComSquareupOkhttpInternalDiskLruCache *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->delegate_ = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(outer$->lruEntries_)) values]) iterator];
}

ComSquareupOkhttpInternalDiskLruCache_$3 *new_ComSquareupOkhttpInternalDiskLruCache_$3_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache *outer$) {
  ComSquareupOkhttpInternalDiskLruCache_$3 *self = [ComSquareupOkhttpInternalDiskLruCache_$3 alloc];
  ComSquareupOkhttpInternalDiskLruCache_$3_initWithComSquareupOkhttpInternalDiskLruCache_(self, outer$);
  return self;
}

ComSquareupOkhttpInternalDiskLruCache_$3 *create_ComSquareupOkhttpInternalDiskLruCache_$3_initWithComSquareupOkhttpInternalDiskLruCache_(ComSquareupOkhttpInternalDiskLruCache *outer$) {
  return new_ComSquareupOkhttpInternalDiskLruCache_$3_initWithComSquareupOkhttpInternalDiskLruCache_(outer$);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalDiskLruCache_$3)

@implementation ComSquareupOkhttpInternalDiskLruCache_$2

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
}

- (void)flush {
}

- (OkioTimeout *)timeout {
  return JreLoadStatic(OkioTimeout, NONE);
}

- (void)close {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpInternalDiskLruCache_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeWithOkioBuffer:withLong:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "timeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalDiskLruCache_$2 = { 2, "", "com.squareup.okhttp.internal", "DiskLruCache", 0x8008, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalDiskLruCache_$2;
}

@end

void ComSquareupOkhttpInternalDiskLruCache_$2_init(ComSquareupOkhttpInternalDiskLruCache_$2 *self) {
  NSObject_init(self);
}

ComSquareupOkhttpInternalDiskLruCache_$2 *new_ComSquareupOkhttpInternalDiskLruCache_$2_init() {
  ComSquareupOkhttpInternalDiskLruCache_$2 *self = [ComSquareupOkhttpInternalDiskLruCache_$2 alloc];
  ComSquareupOkhttpInternalDiskLruCache_$2_init(self);
  return self;
}

ComSquareupOkhttpInternalDiskLruCache_$2 *create_ComSquareupOkhttpInternalDiskLruCache_$2_init() {
  return new_ComSquareupOkhttpInternalDiskLruCache_$2_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalDiskLruCache_$2)
