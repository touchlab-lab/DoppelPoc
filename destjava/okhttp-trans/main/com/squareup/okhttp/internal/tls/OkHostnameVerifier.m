//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/internal/tls/DistinguishedNameParser.h"
#include "com/squareup/okhttp/internal/tls/OkHostnameVerifier.h"
#include "java/lang/Integer.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "javax/net/ssl/SSLException.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/security/auth/x500/X500Principal.h"

@interface ComSquareupOkhttpInternalTlsOkHostnameVerifier ()

- (instancetype)init;

- (jboolean)verifyIpAddressWithNSString:(NSString *)ipAddress
    withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate;

- (jboolean)verifyHostNameWithNSString:(NSString *)hostName
   withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate;

+ (id<JavaUtilList>)getSubjectAltNamesWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate
                                                                  withInt:(jint)type;

- (jboolean)verifyHostNameWithNSString:(NSString *)hostName
                          withNSString:(NSString *)pattern;

@end

inline JavaUtilRegexPattern *ComSquareupOkhttpInternalTlsOkHostnameVerifier_get_VERIFY_AS_IP_ADDRESS();
static JavaUtilRegexPattern *ComSquareupOkhttpInternalTlsOkHostnameVerifier_VERIFY_AS_IP_ADDRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalTlsOkHostnameVerifier, VERIFY_AS_IP_ADDRESS, JavaUtilRegexPattern *)

inline jint ComSquareupOkhttpInternalTlsOkHostnameVerifier_get_ALT_DNS_NAME();
#define ComSquareupOkhttpInternalTlsOkHostnameVerifier_ALT_DNS_NAME 2
J2OBJC_STATIC_FIELD_CONSTANT(ComSquareupOkhttpInternalTlsOkHostnameVerifier, ALT_DNS_NAME, jint)

inline jint ComSquareupOkhttpInternalTlsOkHostnameVerifier_get_ALT_IPA_NAME();
#define ComSquareupOkhttpInternalTlsOkHostnameVerifier_ALT_IPA_NAME 7
J2OBJC_STATIC_FIELD_CONSTANT(ComSquareupOkhttpInternalTlsOkHostnameVerifier, ALT_IPA_NAME, jint)

__attribute__((unused)) static void ComSquareupOkhttpInternalTlsOkHostnameVerifier_init(ComSquareupOkhttpInternalTlsOkHostnameVerifier *self);

__attribute__((unused)) static ComSquareupOkhttpInternalTlsOkHostnameVerifier *new_ComSquareupOkhttpInternalTlsOkHostnameVerifier_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalTlsOkHostnameVerifier *create_ComSquareupOkhttpInternalTlsOkHostnameVerifier_init();

__attribute__((unused)) static jboolean ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyIpAddressWithNSString_withJavaSecurityCertX509Certificate_(ComSquareupOkhttpInternalTlsOkHostnameVerifier *self, NSString *ipAddress, JavaSecurityCertX509Certificate *certificate);

__attribute__((unused)) static jboolean ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyHostNameWithNSString_withJavaSecurityCertX509Certificate_(ComSquareupOkhttpInternalTlsOkHostnameVerifier *self, NSString *hostName, JavaSecurityCertX509Certificate *certificate);

__attribute__((unused)) static id<JavaUtilList> ComSquareupOkhttpInternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(JavaSecurityCertX509Certificate *certificate, jint type);

__attribute__((unused)) static jboolean ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyHostNameWithNSString_withNSString_(ComSquareupOkhttpInternalTlsOkHostnameVerifier *self, NSString *hostName, NSString *pattern);

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpInternalTlsOkHostnameVerifier)

ComSquareupOkhttpInternalTlsOkHostnameVerifier *ComSquareupOkhttpInternalTlsOkHostnameVerifier_INSTANCE;

@implementation ComSquareupOkhttpInternalTlsOkHostnameVerifier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpInternalTlsOkHostnameVerifier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)verifyWithNSString:(NSString *)host
     withJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)session {
  @try {
    IOSObjectArray *certificates = [((id<JavaxNetSslSSLSession>) nil_chk(session)) getPeerCertificates];
    return [self verifyWithNSString:host withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(nil_chk(certificates), 0), [JavaSecurityCertX509Certificate class])];
  }
  @catch (JavaxNetSslSSLException *e) {
    return false;
  }
}

- (jboolean)verifyWithNSString:(NSString *)host
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  return ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyAsIpAddressWithNSString_(host) ? ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyIpAddressWithNSString_withJavaSecurityCertX509Certificate_(self, host, certificate) : ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyHostNameWithNSString_withJavaSecurityCertX509Certificate_(self, host, certificate);
}

+ (jboolean)verifyAsIpAddressWithNSString:(NSString *)host {
  return ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyAsIpAddressWithNSString_(host);
}

- (jboolean)verifyIpAddressWithNSString:(NSString *)ipAddress
    withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  return ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyIpAddressWithNSString_withJavaSecurityCertX509Certificate_(self, ipAddress, certificate);
}

- (jboolean)verifyHostNameWithNSString:(NSString *)hostName
   withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  return ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyHostNameWithNSString_withJavaSecurityCertX509Certificate_(self, hostName, certificate);
}

+ (id<JavaUtilList>)allSubjectAltNamesWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  return ComSquareupOkhttpInternalTlsOkHostnameVerifier_allSubjectAltNamesWithJavaSecurityCertX509Certificate_(certificate);
}

+ (id<JavaUtilList>)getSubjectAltNamesWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate
                                                                  withInt:(jint)type {
  return ComSquareupOkhttpInternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(certificate, type);
}

- (jboolean)verifyHostNameWithNSString:(NSString *)hostName
                          withNSString:(NSString *)pattern {
  return ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyHostNameWithNSString_withNSString_(self, hostName, pattern);
}

+ (void)initialize {
  if (self == [ComSquareupOkhttpInternalTlsOkHostnameVerifier class]) {
    ComSquareupOkhttpInternalTlsOkHostnameVerifier_INSTANCE = new_ComSquareupOkhttpInternalTlsOkHostnameVerifier_init();
    ComSquareupOkhttpInternalTlsOkHostnameVerifier_VERIFY_AS_IP_ADDRESS = JavaUtilRegexPattern_compileWithNSString_(@"([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)");
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpInternalTlsOkHostnameVerifier)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "OkHostnameVerifier", NULL, 0x2, NULL, NULL },
    { "verifyWithNSString:withJavaxNetSslSSLSession:", "verify", "Z", 0x1, NULL, NULL },
    { "verifyWithNSString:withJavaSecurityCertX509Certificate:", "verify", "Z", 0x1, NULL, NULL },
    { "verifyAsIpAddressWithNSString:", "verifyAsIpAddress", "Z", 0x8, NULL, NULL },
    { "verifyIpAddressWithNSString:withJavaSecurityCertX509Certificate:", "verifyIpAddress", "Z", 0x2, NULL, NULL },
    { "verifyHostNameWithNSString:withJavaSecurityCertX509Certificate:", "verifyHostName", "Z", 0x2, NULL, NULL },
    { "allSubjectAltNamesWithJavaSecurityCertX509Certificate:", "allSubjectAltNames", "Ljava.util.List;", 0x9, NULL, "(Ljava/security/cert/X509Certificate;)Ljava/util/List<Ljava/lang/String;>;" },
    { "getSubjectAltNamesWithJavaSecurityCertX509Certificate:withInt:", "getSubjectAltNames", "Ljava.util.List;", 0xa, NULL, "(Ljava/security/cert/X509Certificate;I)Ljava/util/List<Ljava/lang/String;>;" },
    { "verifyHostNameWithNSString:withNSString:", "verifyHostName", "Z", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x19, "Lcom.squareup.okhttp.internal.tls.OkHostnameVerifier;", &ComSquareupOkhttpInternalTlsOkHostnameVerifier_INSTANCE, NULL, .constantValue.asLong = 0 },
    { "VERIFY_AS_IP_ADDRESS", "VERIFY_AS_IP_ADDRESS", 0x1a, "Ljava.util.regex.Pattern;", &ComSquareupOkhttpInternalTlsOkHostnameVerifier_VERIFY_AS_IP_ADDRESS, NULL, .constantValue.asLong = 0 },
    { "ALT_DNS_NAME", "ALT_DNS_NAME", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalTlsOkHostnameVerifier_ALT_DNS_NAME },
    { "ALT_IPA_NAME", "ALT_IPA_NAME", 0x1a, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalTlsOkHostnameVerifier_ALT_IPA_NAME },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalTlsOkHostnameVerifier = { 2, "OkHostnameVerifier", "com.squareup.okhttp.internal.tls", NULL, 0x11, 9, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalTlsOkHostnameVerifier;
}

@end

void ComSquareupOkhttpInternalTlsOkHostnameVerifier_init(ComSquareupOkhttpInternalTlsOkHostnameVerifier *self) {
  NSObject_init(self);
}

ComSquareupOkhttpInternalTlsOkHostnameVerifier *new_ComSquareupOkhttpInternalTlsOkHostnameVerifier_init() {
  ComSquareupOkhttpInternalTlsOkHostnameVerifier *self = [ComSquareupOkhttpInternalTlsOkHostnameVerifier alloc];
  ComSquareupOkhttpInternalTlsOkHostnameVerifier_init(self);
  return self;
}

ComSquareupOkhttpInternalTlsOkHostnameVerifier *create_ComSquareupOkhttpInternalTlsOkHostnameVerifier_init() {
  return new_ComSquareupOkhttpInternalTlsOkHostnameVerifier_init();
}

jboolean ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyAsIpAddressWithNSString_(NSString *host) {
  ComSquareupOkhttpInternalTlsOkHostnameVerifier_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComSquareupOkhttpInternalTlsOkHostnameVerifier_VERIFY_AS_IP_ADDRESS)) matcherWithJavaLangCharSequence:host])) matches];
}

jboolean ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyIpAddressWithNSString_withJavaSecurityCertX509Certificate_(ComSquareupOkhttpInternalTlsOkHostnameVerifier *self, NSString *ipAddress, JavaSecurityCertX509Certificate *certificate) {
  id<JavaUtilList> altNames = ComSquareupOkhttpInternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(certificate, ComSquareupOkhttpInternalTlsOkHostnameVerifier_ALT_IPA_NAME);
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(altNames)) size]; i < size; i++) {
    if ([((NSString *) nil_chk(ipAddress)) equalsIgnoreCase:[altNames getWithInt:i]]) {
      return true;
    }
  }
  return false;
}

jboolean ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyHostNameWithNSString_withJavaSecurityCertX509Certificate_(ComSquareupOkhttpInternalTlsOkHostnameVerifier *self, NSString *hostName, JavaSecurityCertX509Certificate *certificate) {
  hostName = [((NSString *) nil_chk(hostName)) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  jboolean hasDns = false;
  id<JavaUtilList> altNames = ComSquareupOkhttpInternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(certificate, ComSquareupOkhttpInternalTlsOkHostnameVerifier_ALT_DNS_NAME);
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(altNames)) size]; i < size; i++) {
    hasDns = true;
    if (ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyHostNameWithNSString_withNSString_(self, hostName, [altNames getWithInt:i])) {
      return true;
    }
  }
  if (!hasDns) {
    JavaxSecurityAuthX500X500Principal *principal = [((JavaSecurityCertX509Certificate *) nil_chk(certificate)) getSubjectX500Principal];
    NSString *cn = [new_ComSquareupOkhttpInternalTlsDistinguishedNameParser_initWithJavaxSecurityAuthX500X500Principal_(principal) findMostSpecificWithNSString:@"cn"];
    if (cn != nil) {
      return ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyHostNameWithNSString_withNSString_(self, hostName, cn);
    }
  }
  return false;
}

id<JavaUtilList> ComSquareupOkhttpInternalTlsOkHostnameVerifier_allSubjectAltNamesWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *certificate) {
  ComSquareupOkhttpInternalTlsOkHostnameVerifier_initialize();
  id<JavaUtilList> altIpaNames = ComSquareupOkhttpInternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(certificate, ComSquareupOkhttpInternalTlsOkHostnameVerifier_ALT_IPA_NAME);
  id<JavaUtilList> altDnsNames = ComSquareupOkhttpInternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(certificate, ComSquareupOkhttpInternalTlsOkHostnameVerifier_ALT_DNS_NAME);
  id<JavaUtilList> result = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(altIpaNames)) size] + [((id<JavaUtilList>) nil_chk(altDnsNames)) size]);
  [result addAllWithJavaUtilCollection:altIpaNames];
  [result addAllWithJavaUtilCollection:altDnsNames];
  return result;
}

id<JavaUtilList> ComSquareupOkhttpInternalTlsOkHostnameVerifier_getSubjectAltNamesWithJavaSecurityCertX509Certificate_withInt_(JavaSecurityCertX509Certificate *certificate, jint type) {
  ComSquareupOkhttpInternalTlsOkHostnameVerifier_initialize();
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  @try {
    id<JavaUtilCollection> subjectAltNames = [((JavaSecurityCertX509Certificate *) nil_chk(certificate)) getSubjectAlternativeNames];
    if (subjectAltNames == nil) {
      return JavaUtilCollections_emptyList();
    }
    for (id __strong subjectAltName in nil_chk(subjectAltNames)) {
      id<JavaUtilList> entry_ = (id<JavaUtilList>) cast_check(subjectAltName, JavaUtilList_class_());
      if (entry_ == nil || [entry_ size] < 2) {
        continue;
      }
      JavaLangInteger *altNameType = (JavaLangInteger *) cast_chk([((id<JavaUtilList>) nil_chk(entry_)) getWithInt:0], [JavaLangInteger class]);
      if (altNameType == nil) {
        continue;
      }
      if ([((JavaLangInteger *) nil_chk(altNameType)) intValue] == type) {
        NSString *altName = (NSString *) cast_chk([entry_ getWithInt:1], [NSString class]);
        if (altName != nil) {
          [result addWithId:altName];
        }
      }
    }
    return result;
  }
  @catch (JavaSecurityCertCertificateParsingException *e) {
    return JavaUtilCollections_emptyList();
  }
}

jboolean ComSquareupOkhttpInternalTlsOkHostnameVerifier_verifyHostNameWithNSString_withNSString_(ComSquareupOkhttpInternalTlsOkHostnameVerifier *self, NSString *hostName, NSString *pattern) {
  if ((hostName == nil) || (((jint) [hostName length]) == 0) || ([hostName hasPrefix:@"."]) || ([hostName hasSuffix:@".."])) {
    return false;
  }
  if ((pattern == nil) || (((jint) [pattern length]) == 0) || ([pattern hasPrefix:@"."]) || ([pattern hasSuffix:@".."])) {
    return false;
  }
  if (![((NSString *) nil_chk(hostName)) hasSuffix:@"."]) {
    (void) JreStrAppendStrong(&hostName, "C", '.');
  }
  if (![((NSString *) nil_chk(pattern)) hasSuffix:@"."]) {
    (void) JreStrAppendStrong(&pattern, "C", '.');
  }
  pattern = [pattern lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  if (![((NSString *) nil_chk(pattern)) contains:@"*"]) {
    return [hostName isEqual:pattern];
  }
  if ((![pattern hasPrefix:@"*."]) || ([pattern indexOf:'*' fromIndex:1] != -1)) {
    return false;
  }
  if (((jint) [hostName length]) < ((jint) [pattern length])) {
    return false;
  }
  if ([@"*." isEqual:pattern]) {
    return false;
  }
  NSString *suffix = [pattern substring:1];
  if (![hostName hasSuffix:suffix]) {
    return false;
  }
  jint suffixStartIndexInHostName = ((jint) [hostName length]) - ((jint) [((NSString *) nil_chk(suffix)) length]);
  if ((suffixStartIndexInHostName > 0) && ([hostName lastIndexOf:'.' fromIndex:suffixStartIndexInHostName - 1] != -1)) {
    return false;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalTlsOkHostnameVerifier)
