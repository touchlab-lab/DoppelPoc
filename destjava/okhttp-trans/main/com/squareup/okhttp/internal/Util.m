//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "java/io/Closeable.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InterruptedIOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/net/URI.h"
#include "java/net/URL.h"
#include "java/nio/charset/Charset.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okio/Buffer.h"
#include "okio/ByteString.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface ComSquareupOkhttpInternalUtil ()

- (instancetype)init;

+ (jint)getEffectivePortWithNSString:(NSString *)scheme
                             withInt:(jint)specifiedPort;

@end

__attribute__((unused)) static void ComSquareupOkhttpInternalUtil_init(ComSquareupOkhttpInternalUtil *self);

__attribute__((unused)) static ComSquareupOkhttpInternalUtil *new_ComSquareupOkhttpInternalUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalUtil *create_ComSquareupOkhttpInternalUtil_init();

__attribute__((unused)) static jint ComSquareupOkhttpInternalUtil_getEffectivePortWithNSString_withInt_(NSString *scheme, jint specifiedPort);

@interface ComSquareupOkhttpInternalUtil_$1 : NSObject < JavaUtilConcurrentThreadFactory > {
 @public
  NSString *val$name_;
  jboolean val$daemon_;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithNSString:(NSString *)capture$0
                     withBoolean:(jboolean)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalUtil_$1)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalUtil_$1, val$name_, NSString *)

__attribute__((unused)) static void ComSquareupOkhttpInternalUtil_$1_initWithNSString_withBoolean_(ComSquareupOkhttpInternalUtil_$1 *self, NSString *capture$0, jboolean capture$1);

__attribute__((unused)) static ComSquareupOkhttpInternalUtil_$1 *new_ComSquareupOkhttpInternalUtil_$1_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalUtil_$1 *create_ComSquareupOkhttpInternalUtil_$1_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalUtil_$1)

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpInternalUtil)

IOSByteArray *ComSquareupOkhttpInternalUtil_EMPTY_BYTE_ARRAY;
IOSObjectArray *ComSquareupOkhttpInternalUtil_EMPTY_STRING_ARRAY;
JavaNioCharsetCharset *ComSquareupOkhttpInternalUtil_US_ASCII;
JavaNioCharsetCharset *ComSquareupOkhttpInternalUtil_UTF_8;

@implementation ComSquareupOkhttpInternalUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpInternalUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)getEffectivePortWithJavaNetURI:(JavaNetURI *)uri {
  return ComSquareupOkhttpInternalUtil_getEffectivePortWithJavaNetURI_(uri);
}

+ (jint)getEffectivePortWithJavaNetURL:(JavaNetURL *)url {
  return ComSquareupOkhttpInternalUtil_getEffectivePortWithJavaNetURL_(url);
}

+ (jint)getEffectivePortWithNSString:(NSString *)scheme
                             withInt:(jint)specifiedPort {
  return ComSquareupOkhttpInternalUtil_getEffectivePortWithNSString_withInt_(scheme, specifiedPort);
}

+ (jint)getDefaultPortWithNSString:(NSString *)protocol {
  return ComSquareupOkhttpInternalUtil_getDefaultPortWithNSString_(protocol);
}

+ (void)checkOffsetAndCountWithLong:(jlong)arrayLength
                           withLong:(jlong)offset
                           withLong:(jlong)count {
  ComSquareupOkhttpInternalUtil_checkOffsetAndCountWithLong_withLong_withLong_(arrayLength, offset, count);
}

+ (jboolean)equalWithId:(id)a
                 withId:(id)b {
  return ComSquareupOkhttpInternalUtil_equalWithId_withId_(a, b);
}

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)closeable {
  ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaIoCloseable_(closeable);
}

+ (void)closeQuietlyWithJavaNetSocket:(JavaNetSocket *)socket {
  ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaNetSocket_(socket);
}

+ (void)closeQuietlyWithJavaNetServerSocket:(JavaNetServerSocket *)serverSocket {
  ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaNetServerSocket_(serverSocket);
}

+ (void)closeAllWithJavaIoCloseable:(id<JavaIoCloseable>)a
                withJavaIoCloseable:(id<JavaIoCloseable>)b {
  ComSquareupOkhttpInternalUtil_closeAllWithJavaIoCloseable_withJavaIoCloseable_(a, b);
}

+ (void)deleteContentsWithJavaIoFile:(JavaIoFile *)dir {
  ComSquareupOkhttpInternalUtil_deleteContentsWithJavaIoFile_(dir);
}

+ (jboolean)discardWithOkioSource:(id<OkioSource>)source
                          withInt:(jint)timeout
   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  return ComSquareupOkhttpInternalUtil_discardWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(source, timeout, timeUnit);
}

+ (jboolean)skipAllWithOkioSource:(id<OkioSource>)source
                          withInt:(jint)duration
   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  return ComSquareupOkhttpInternalUtil_skipAllWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(source, duration, timeUnit);
}

+ (NSString *)md5HexWithNSString:(NSString *)s {
  return ComSquareupOkhttpInternalUtil_md5HexWithNSString_(s);
}

+ (NSString *)shaBase64WithNSString:(NSString *)s {
  return ComSquareupOkhttpInternalUtil_shaBase64WithNSString_(s);
}

+ (OkioByteString *)sha1WithOkioByteString:(OkioByteString *)s {
  return ComSquareupOkhttpInternalUtil_sha1WithOkioByteString_(s);
}

+ (id<JavaUtilList>)immutableListWithJavaUtilList:(id<JavaUtilList>)list {
  return ComSquareupOkhttpInternalUtil_immutableListWithJavaUtilList_(list);
}

+ (id<JavaUtilList>)immutableListWithNSObjectArray:(IOSObjectArray *)elements {
  return ComSquareupOkhttpInternalUtil_immutableListWithNSObjectArray_(elements);
}

+ (id<JavaUtilMap>)immutableMapWithJavaUtilMap:(id<JavaUtilMap>)map {
  return ComSquareupOkhttpInternalUtil_immutableMapWithJavaUtilMap_(map);
}

+ (id<JavaUtilConcurrentThreadFactory>)threadFactoryWithNSString:(NSString *)name
                                                     withBoolean:(jboolean)daemon {
  return ComSquareupOkhttpInternalUtil_threadFactoryWithNSString_withBoolean_(name, daemon);
}

+ (id<JavaUtilList>)intersectWithNSObjectArray:(IOSObjectArray *)first
                             withNSObjectArray:(IOSObjectArray *)second {
  return ComSquareupOkhttpInternalUtil_intersectWithNSObjectArray_withNSObjectArray_(first, second);
}

+ (void)initialize {
  if (self == [ComSquareupOkhttpInternalUtil class]) {
    ComSquareupOkhttpInternalUtil_EMPTY_BYTE_ARRAY = [IOSByteArray newArrayWithLength:0];
    ComSquareupOkhttpInternalUtil_EMPTY_STRING_ARRAY = [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
    ComSquareupOkhttpInternalUtil_US_ASCII = JavaNioCharsetCharset_forNameWithNSString_(@"US-ASCII");
    ComSquareupOkhttpInternalUtil_UTF_8 = JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8");
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpInternalUtil)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Util", NULL, 0x2, NULL, NULL },
    { "getEffectivePortWithJavaNetURI:", "getEffectivePort", "I", 0x9, NULL, NULL },
    { "getEffectivePortWithJavaNetURL:", "getEffectivePort", "I", 0x9, NULL, NULL },
    { "getEffectivePortWithNSString:withInt:", "getEffectivePort", "I", 0xa, NULL, NULL },
    { "getDefaultPortWithNSString:", "getDefaultPort", "I", 0x9, NULL, NULL },
    { "checkOffsetAndCountWithLong:withLong:withLong:", "checkOffsetAndCount", "V", 0x9, NULL, NULL },
    { "equalWithId:withId:", "equal", "Z", 0x9, NULL, NULL },
    { "closeQuietlyWithJavaIoCloseable:", "closeQuietly", "V", 0x9, NULL, NULL },
    { "closeQuietlyWithJavaNetSocket:", "closeQuietly", "V", 0x9, NULL, NULL },
    { "closeQuietlyWithJavaNetServerSocket:", "closeQuietly", "V", 0x9, NULL, NULL },
    { "closeAllWithJavaIoCloseable:withJavaIoCloseable:", "closeAll", "V", 0x9, "Ljava.io.IOException;", NULL },
    { "deleteContentsWithJavaIoFile:", "deleteContents", "V", 0x9, "Ljava.io.IOException;", NULL },
    { "discardWithOkioSource:withInt:withJavaUtilConcurrentTimeUnit:", "discard", "Z", 0x9, NULL, NULL },
    { "skipAllWithOkioSource:withInt:withJavaUtilConcurrentTimeUnit:", "skipAll", "Z", 0x9, "Ljava.io.IOException;", NULL },
    { "md5HexWithNSString:", "md5Hex", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "shaBase64WithNSString:", "shaBase64", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "sha1WithOkioByteString:", "sha1", "Lokio.ByteString;", 0x9, NULL, NULL },
    { "immutableListWithJavaUtilList:", "immutableList", "Ljava.util.List;", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;)Ljava/util/List<TT;>;" },
    { "immutableListWithNSObjectArray:", "immutableList", "Ljava.util.List;", 0x89, NULL, "<T:Ljava/lang/Object;>([TT;)Ljava/util/List<TT;>;" },
    { "immutableMapWithJavaUtilMap:", "immutableMap", "Ljava.util.Map;", 0x9, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;)Ljava/util/Map<TK;TV;>;" },
    { "threadFactoryWithNSString:withBoolean:", "threadFactory", "Ljava.util.concurrent.ThreadFactory;", 0x9, NULL, NULL },
    { "intersectWithNSObjectArray:withNSObjectArray:", "intersect", "Ljava.util.List;", 0x9, NULL, "<T:Ljava/lang/Object;>([TT;[TT;)Ljava/util/List<TT;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_BYTE_ARRAY", "EMPTY_BYTE_ARRAY", 0x19, "[B", &ComSquareupOkhttpInternalUtil_EMPTY_BYTE_ARRAY, NULL, .constantValue.asLong = 0 },
    { "EMPTY_STRING_ARRAY", "EMPTY_STRING_ARRAY", 0x19, "[Ljava.lang.String;", &ComSquareupOkhttpInternalUtil_EMPTY_STRING_ARRAY, NULL, .constantValue.asLong = 0 },
    { "US_ASCII", "US_ASCII", 0x19, "Ljava.nio.charset.Charset;", &ComSquareupOkhttpInternalUtil_US_ASCII, NULL, .constantValue.asLong = 0 },
    { "UTF_8", "UTF_8", 0x19, "Ljava.nio.charset.Charset;", &ComSquareupOkhttpInternalUtil_UTF_8, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalUtil = { 2, "Util", "com.squareup.okhttp.internal", NULL, 0x11, 22, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalUtil;
}

@end

void ComSquareupOkhttpInternalUtil_init(ComSquareupOkhttpInternalUtil *self) {
  NSObject_init(self);
}

ComSquareupOkhttpInternalUtil *new_ComSquareupOkhttpInternalUtil_init() {
  ComSquareupOkhttpInternalUtil *self = [ComSquareupOkhttpInternalUtil alloc];
  ComSquareupOkhttpInternalUtil_init(self);
  return self;
}

ComSquareupOkhttpInternalUtil *create_ComSquareupOkhttpInternalUtil_init() {
  return new_ComSquareupOkhttpInternalUtil_init();
}

jint ComSquareupOkhttpInternalUtil_getEffectivePortWithJavaNetURI_(JavaNetURI *uri) {
  ComSquareupOkhttpInternalUtil_initialize();
  return ComSquareupOkhttpInternalUtil_getEffectivePortWithNSString_withInt_([((JavaNetURI *) nil_chk(uri)) getScheme], [uri getPort]);
}

jint ComSquareupOkhttpInternalUtil_getEffectivePortWithJavaNetURL_(JavaNetURL *url) {
  ComSquareupOkhttpInternalUtil_initialize();
  return ComSquareupOkhttpInternalUtil_getEffectivePortWithNSString_withInt_([((JavaNetURL *) nil_chk(url)) getProtocol], [url getPort]);
}

jint ComSquareupOkhttpInternalUtil_getEffectivePortWithNSString_withInt_(NSString *scheme, jint specifiedPort) {
  ComSquareupOkhttpInternalUtil_initialize();
  return specifiedPort != -1 ? specifiedPort : ComSquareupOkhttpInternalUtil_getDefaultPortWithNSString_(scheme);
}

jint ComSquareupOkhttpInternalUtil_getDefaultPortWithNSString_(NSString *protocol) {
  ComSquareupOkhttpInternalUtil_initialize();
  if ([@"http" isEqual:protocol]) return 80;
  if ([@"https" isEqual:protocol]) return 443;
  return -1;
}

void ComSquareupOkhttpInternalUtil_checkOffsetAndCountWithLong_withLong_withLong_(jlong arrayLength, jlong offset, jlong count) {
  ComSquareupOkhttpInternalUtil_initialize();
  if ((offset | count) < 0 || offset > arrayLength || arrayLength - offset < count) {
    @throw new_JavaLangArrayIndexOutOfBoundsException_init();
  }
}

jboolean ComSquareupOkhttpInternalUtil_equalWithId_withId_(id a, id b) {
  ComSquareupOkhttpInternalUtil_initialize();
  return a == b || (a != nil && [a isEqual:b]);
}

void ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> closeable) {
  ComSquareupOkhttpInternalUtil_initialize();
  if (closeable != nil) {
    @try {
      [closeable close];
    }
    @catch (JavaLangRuntimeException *rethrown) {
      @throw rethrown;
    }
    @catch (JavaLangException *ignored) {
    }
  }
}

void ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaNetSocket_(JavaNetSocket *socket) {
  ComSquareupOkhttpInternalUtil_initialize();
  if (socket != nil) {
    @try {
      [socket close];
    }
    @catch (JavaLangRuntimeException *rethrown) {
      @throw rethrown;
    }
    @catch (JavaLangException *ignored) {
    }
  }
}

void ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaNetServerSocket_(JavaNetServerSocket *serverSocket) {
  ComSquareupOkhttpInternalUtil_initialize();
  if (serverSocket != nil) {
    @try {
      [serverSocket close];
    }
    @catch (JavaLangRuntimeException *rethrown) {
      @throw rethrown;
    }
    @catch (JavaLangException *ignored) {
    }
  }
}

void ComSquareupOkhttpInternalUtil_closeAllWithJavaIoCloseable_withJavaIoCloseable_(id<JavaIoCloseable> a, id<JavaIoCloseable> b) {
  ComSquareupOkhttpInternalUtil_initialize();
  NSException *thrown = nil;
  @try {
    [((id<JavaIoCloseable>) nil_chk(a)) close];
  }
  @catch (NSException *e) {
    thrown = e;
  }
  @try {
    [((id<JavaIoCloseable>) nil_chk(b)) close];
  }
  @catch (NSException *e) {
    if (thrown == nil) thrown = e;
  }
  if (thrown == nil) return;
  if ([thrown isKindOfClass:[JavaIoIOException class]]) @throw (JavaIoIOException *) cast_chk(thrown, [JavaIoIOException class]);
  if ([thrown isKindOfClass:[JavaLangRuntimeException class]]) @throw (JavaLangRuntimeException *) cast_chk(thrown, [JavaLangRuntimeException class]);
  if ([thrown isKindOfClass:[JavaLangError class]]) @throw (JavaLangError *) cast_chk(thrown, [JavaLangError class]);
  @throw new_JavaLangAssertionError_initWithId_(thrown);
}

void ComSquareupOkhttpInternalUtil_deleteContentsWithJavaIoFile_(JavaIoFile *dir) {
  ComSquareupOkhttpInternalUtil_initialize();
  IOSObjectArray *files = [((JavaIoFile *) nil_chk(dir)) listFiles];
  if (files == nil) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"not a readable directory: ", dir));
  }
  {
    IOSObjectArray *a__ = files;
    JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *file = *b__++;
      if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
        ComSquareupOkhttpInternalUtil_deleteContentsWithJavaIoFile_(file);
      }
      if (![file delete__]) {
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"failed to delete file: ", file));
      }
    }
  }
}

jboolean ComSquareupOkhttpInternalUtil_discardWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(id<OkioSource> source, jint timeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  ComSquareupOkhttpInternalUtil_initialize();
  @try {
    return ComSquareupOkhttpInternalUtil_skipAllWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(source, timeout, timeUnit);
  }
  @catch (JavaIoIOException *e) {
    return false;
  }
}

jboolean ComSquareupOkhttpInternalUtil_skipAllWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(id<OkioSource> source, jint duration, JavaUtilConcurrentTimeUnit *timeUnit) {
  ComSquareupOkhttpInternalUtil_initialize();
  jlong now = JavaLangSystem_nanoTime();
  jlong originalDuration = [((OkioTimeout *) nil_chk([((id<OkioSource>) nil_chk(source)) timeout])) hasDeadline] ? [((OkioTimeout *) nil_chk([source timeout])) deadlineNanoTime] - now : JavaLangLong_MAX_VALUE;
  (void) [((OkioTimeout *) nil_chk([source timeout])) deadlineNanoTimeWithLong:now + JavaLangMath_minWithLong_withLong_(originalDuration, [((JavaUtilConcurrentTimeUnit *) nil_chk(timeUnit)) toNanosWithLong:duration])];
  @try {
    OkioBuffer *skipBuffer = new_OkioBuffer_init();
    while ([source readWithOkioBuffer:skipBuffer withLong:2048] != -1) {
      [skipBuffer clear];
    }
    return true;
  }
  @catch (JavaIoInterruptedIOException *e) {
    return false;
  }
  @finally {
    if (originalDuration == JavaLangLong_MAX_VALUE) {
      (void) [((OkioTimeout *) nil_chk([source timeout])) clearDeadline];
    }
    else {
      (void) [((OkioTimeout *) nil_chk([source timeout])) deadlineNanoTimeWithLong:now + originalDuration];
    }
  }
}

NSString *ComSquareupOkhttpInternalUtil_md5HexWithNSString_(NSString *s) {
  ComSquareupOkhttpInternalUtil_initialize();
  @try {
    JavaSecurityMessageDigest *messageDigest = JavaSecurityMessageDigest_getInstanceWithNSString_(@"MD5");
    IOSByteArray *md5bytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest)) digestWithByteArray:[((NSString *) nil_chk(s)) getBytesWithCharsetName:@"UTF-8"]];
    return [((OkioByteString *) nil_chk(OkioByteString_ofWithByteArray_(md5bytes))) hex];
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
}

NSString *ComSquareupOkhttpInternalUtil_shaBase64WithNSString_(NSString *s) {
  ComSquareupOkhttpInternalUtil_initialize();
  @try {
    JavaSecurityMessageDigest *messageDigest = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-1");
    IOSByteArray *sha1Bytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest)) digestWithByteArray:[((NSString *) nil_chk(s)) getBytesWithCharsetName:@"UTF-8"]];
    return [((OkioByteString *) nil_chk(OkioByteString_ofWithByteArray_(sha1Bytes))) base64];
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
}

OkioByteString *ComSquareupOkhttpInternalUtil_sha1WithOkioByteString_(OkioByteString *s) {
  ComSquareupOkhttpInternalUtil_initialize();
  @try {
    JavaSecurityMessageDigest *messageDigest = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-1");
    IOSByteArray *sha1Bytes = [((JavaSecurityMessageDigest *) nil_chk(messageDigest)) digestWithByteArray:[((OkioByteString *) nil_chk(s)) toByteArray]];
    return OkioByteString_ofWithByteArray_(sha1Bytes);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
}

id<JavaUtilList> ComSquareupOkhttpInternalUtil_immutableListWithJavaUtilList_(id<JavaUtilList> list) {
  ComSquareupOkhttpInternalUtil_initialize();
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(new_JavaUtilArrayList_initWithJavaUtilCollection_(list));
}

id<JavaUtilList> ComSquareupOkhttpInternalUtil_immutableListWithNSObjectArray_(IOSObjectArray *elements) {
  ComSquareupOkhttpInternalUtil_initialize();
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_([((IOSObjectArray *) nil_chk(elements)) clone]));
}

id<JavaUtilMap> ComSquareupOkhttpInternalUtil_immutableMapWithJavaUtilMap_(id<JavaUtilMap> map) {
  ComSquareupOkhttpInternalUtil_initialize();
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(new_JavaUtilLinkedHashMap_initWithJavaUtilMap_(map));
}

id<JavaUtilConcurrentThreadFactory> ComSquareupOkhttpInternalUtil_threadFactoryWithNSString_withBoolean_(NSString *name, jboolean daemon) {
  ComSquareupOkhttpInternalUtil_initialize();
  return new_ComSquareupOkhttpInternalUtil_$1_initWithNSString_withBoolean_(name, daemon);
}

id<JavaUtilList> ComSquareupOkhttpInternalUtil_intersectWithNSObjectArray_withNSObjectArray_(IOSObjectArray *first, IOSObjectArray *second) {
  ComSquareupOkhttpInternalUtil_initialize();
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = first;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id a = *b__++;
      {
        IOSObjectArray *a__ = second;
        id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id b = *b__++;
          if ([((id) nil_chk(a)) isEqual:b]) {
            [result addWithId:b];
            break;
          }
        }
      }
    }
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalUtil)

@implementation ComSquareupOkhttpInternalUtil_$1

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  JavaLangThread *result = new_JavaLangThread_initWithJavaLangRunnable_withNSString_(runnable, val$name_);
  [result setDaemonWithBoolean:val$daemon_];
  return result;
}

- (instancetype)initWithNSString:(NSString *)capture$0
                     withBoolean:(jboolean)capture$1 {
  ComSquareupOkhttpInternalUtil_$1_initWithNSString_withBoolean_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newThreadWithJavaLangRunnable:", "newThread", "Ljava.lang.Thread;", 0x1, NULL, NULL },
    { "initWithNSString:withBoolean:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$name_", NULL, 0x1012, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$daemon_", NULL, 0x1012, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ComSquareupOkhttpInternalUtil", "threadFactoryWithNSString:withBoolean:" };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalUtil_$1 = { 2, "", "com.squareup.okhttp.internal", "Util", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ComSquareupOkhttpInternalUtil_$1;
}

@end

void ComSquareupOkhttpInternalUtil_$1_initWithNSString_withBoolean_(ComSquareupOkhttpInternalUtil_$1 *self, NSString *capture$0, jboolean capture$1) {
  self->val$name_ = capture$0;
  self->val$daemon_ = capture$1;
  NSObject_init(self);
}

ComSquareupOkhttpInternalUtil_$1 *new_ComSquareupOkhttpInternalUtil_$1_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) {
  ComSquareupOkhttpInternalUtil_$1 *self = [ComSquareupOkhttpInternalUtil_$1 alloc];
  ComSquareupOkhttpInternalUtil_$1_initWithNSString_withBoolean_(self, capture$0, capture$1);
  return self;
}

ComSquareupOkhttpInternalUtil_$1 *create_ComSquareupOkhttpInternalUtil_$1_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) {
  return new_ComSquareupOkhttpInternalUtil_$1_initWithNSString_withBoolean_(capture$0, capture$1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalUtil_$1)
