//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Address.h"
#include "com/squareup/okhttp/Authenticator.h"
#include "com/squareup/okhttp/Connection.h"
#include "com/squareup/okhttp/ConnectionPool.h"
#include "com/squareup/okhttp/Handshake.h"
#include "com/squareup/okhttp/Headers.h"
#include "com/squareup/okhttp/Interceptor.h"
#include "com/squareup/okhttp/MediaType.h"
#include "com/squareup/okhttp/OkHttpClient.h"
#include "com/squareup/okhttp/Protocol.h"
#include "com/squareup/okhttp/Request.h"
#include "com/squareup/okhttp/RequestBody.h"
#include "com/squareup/okhttp/Response.h"
#include "com/squareup/okhttp/ResponseBody.h"
#include "com/squareup/okhttp/Route.h"
#include "com/squareup/okhttp/internal/Internal.h"
#include "com/squareup/okhttp/internal/InternalCache.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "com/squareup/okhttp/internal/Version.h"
#include "com/squareup/okhttp/internal/http/CacheRequest.h"
#include "com/squareup/okhttp/internal/http/CacheStrategy.h"
#include "com/squareup/okhttp/internal/http/HttpEngine.h"
#include "com/squareup/okhttp/internal/http/HttpMethod.h"
#include "com/squareup/okhttp/internal/http/OkHeaders.h"
#include "com/squareup/okhttp/internal/http/RealResponseBody.h"
#include "com/squareup/okhttp/internal/http/RetryableSink.h"
#include "com/squareup/okhttp/internal/http/RouteSelector.h"
#include "com/squareup/okhttp/internal/http/StatusLine.h"
#include "com/squareup/okhttp/internal/http/Transport.h"
#include "java/io/IOException.h"
#include "java/io/InterruptedIOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/net/CookieHandler.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/ProtocolException.h"
#include "java/net/Proxy.h"
#include "java/net/Socket.h"
#include "java/net/URI.h"
#include "java/net/URL.h"
#include "java/security/cert/CertificateException.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/TimeUnit.h"
#include "javax/net/ssl/SSLHandshakeException.h"
#include "javax/net/ssl/SSLPeerUnverifiedException.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/GzipSource.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface ComSquareupOkhttpInternalHttpHttpEngine () {
 @public
  ComSquareupOkhttpConnection *connection_;
  ComSquareupOkhttpInternalHttpRouteSelector *routeSelector_;
  ComSquareupOkhttpRoute *route_;
  ComSquareupOkhttpResponse *priorResponse_;
  id<ComSquareupOkhttpInternalHttpTransport> transport_;
  jboolean transparentGzip_;
  ComSquareupOkhttpRequest *userRequest_;
  ComSquareupOkhttpRequest *networkRequest_;
  ComSquareupOkhttpResponse *cacheResponse_;
  ComSquareupOkhttpResponse *userResponse_;
  id<OkioSink> requestBodyOut_;
  id<OkioBufferedSink> bufferedRequestBody_;
  jboolean callerWritesRequestBody_;
  jboolean forWebSocket_;
  id<ComSquareupOkhttpInternalHttpCacheRequest> storeRequest_;
  ComSquareupOkhttpInternalHttpCacheStrategy *cacheStrategy_;
}

+ (ComSquareupOkhttpResponse *)stripBodyWithComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response;

- (void)connectWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request;

- (jboolean)isRecoverableWithJavaIoIOException:(JavaIoIOException *)e;

- (void)maybeCache;

- (ComSquareupOkhttpResponse *)unzipWithComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response;

- (ComSquareupOkhttpRequest *)networkRequestWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request;

- (ComSquareupOkhttpResponse *)readNetworkResponse;

- (ComSquareupOkhttpResponse *)cacheWritingResponseWithComSquareupOkhttpInternalHttpCacheRequest:(id<ComSquareupOkhttpInternalHttpCacheRequest>)cacheRequest
                                                                   withComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response;

+ (jboolean)validateWithComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)cached
                    withComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)network;

+ (ComSquareupOkhttpHeaders *)combineWithComSquareupOkhttpHeaders:(ComSquareupOkhttpHeaders *)cachedHeaders
                                     withComSquareupOkhttpHeaders:(ComSquareupOkhttpHeaders *)networkHeaders;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, connection_, ComSquareupOkhttpConnection *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, routeSelector_, ComSquareupOkhttpInternalHttpRouteSelector *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, route_, ComSquareupOkhttpRoute *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, priorResponse_, ComSquareupOkhttpResponse *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, transport_, id<ComSquareupOkhttpInternalHttpTransport>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, userRequest_, ComSquareupOkhttpRequest *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, networkRequest_, ComSquareupOkhttpRequest *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, cacheResponse_, ComSquareupOkhttpResponse *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, userResponse_, ComSquareupOkhttpResponse *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, requestBodyOut_, id<OkioSink>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, bufferedRequestBody_, id<OkioBufferedSink>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, storeRequest_, id<ComSquareupOkhttpInternalHttpCacheRequest>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine, cacheStrategy_, ComSquareupOkhttpInternalHttpCacheStrategy *)

inline ComSquareupOkhttpResponseBody *ComSquareupOkhttpInternalHttpHttpEngine_get_EMPTY_BODY();
static ComSquareupOkhttpResponseBody *ComSquareupOkhttpInternalHttpHttpEngine_EMPTY_BODY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpInternalHttpHttpEngine, EMPTY_BODY, ComSquareupOkhttpResponseBody *)

__attribute__((unused)) static ComSquareupOkhttpResponse *ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(ComSquareupOkhttpResponse *response);

__attribute__((unused)) static void ComSquareupOkhttpInternalHttpHttpEngine_connectWithComSquareupOkhttpRequest_(ComSquareupOkhttpInternalHttpHttpEngine *self, ComSquareupOkhttpRequest *request);

__attribute__((unused)) static jboolean ComSquareupOkhttpInternalHttpHttpEngine_isRecoverableWithJavaIoIOException_(ComSquareupOkhttpInternalHttpHttpEngine *self, JavaIoIOException *e);

__attribute__((unused)) static void ComSquareupOkhttpInternalHttpHttpEngine_maybeCache(ComSquareupOkhttpInternalHttpHttpEngine *self);

__attribute__((unused)) static ComSquareupOkhttpResponse *ComSquareupOkhttpInternalHttpHttpEngine_unzipWithComSquareupOkhttpResponse_(ComSquareupOkhttpInternalHttpHttpEngine *self, ComSquareupOkhttpResponse *response);

__attribute__((unused)) static ComSquareupOkhttpRequest *ComSquareupOkhttpInternalHttpHttpEngine_networkRequestWithComSquareupOkhttpRequest_(ComSquareupOkhttpInternalHttpHttpEngine *self, ComSquareupOkhttpRequest *request);

__attribute__((unused)) static ComSquareupOkhttpResponse *ComSquareupOkhttpInternalHttpHttpEngine_readNetworkResponse(ComSquareupOkhttpInternalHttpHttpEngine *self);

__attribute__((unused)) static ComSquareupOkhttpResponse *ComSquareupOkhttpInternalHttpHttpEngine_cacheWritingResponseWithComSquareupOkhttpInternalHttpCacheRequest_withComSquareupOkhttpResponse_(ComSquareupOkhttpInternalHttpHttpEngine *self, id<ComSquareupOkhttpInternalHttpCacheRequest> cacheRequest, ComSquareupOkhttpResponse *response);

__attribute__((unused)) static jboolean ComSquareupOkhttpInternalHttpHttpEngine_validateWithComSquareupOkhttpResponse_withComSquareupOkhttpResponse_(ComSquareupOkhttpResponse *cached, ComSquareupOkhttpResponse *network);

__attribute__((unused)) static ComSquareupOkhttpHeaders *ComSquareupOkhttpInternalHttpHttpEngine_combineWithComSquareupOkhttpHeaders_withComSquareupOkhttpHeaders_(ComSquareupOkhttpHeaders *cachedHeaders, ComSquareupOkhttpHeaders *networkHeaders);

@interface ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain () {
 @public
  ComSquareupOkhttpInternalHttpHttpEngine *this$0_;
  jint index_;
  ComSquareupOkhttpRequest *request_;
  jint calls_;
}

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain, this$0_, ComSquareupOkhttpInternalHttpHttpEngine *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain, request_, ComSquareupOkhttpRequest *)

@interface ComSquareupOkhttpInternalHttpHttpEngine_$1 : ComSquareupOkhttpResponseBody

- (ComSquareupOkhttpMediaType *)contentType;

- (jlong)contentLength;

- (id<OkioBufferedSource>)source;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalHttpHttpEngine_$1)

__attribute__((unused)) static void ComSquareupOkhttpInternalHttpHttpEngine_$1_init(ComSquareupOkhttpInternalHttpHttpEngine_$1 *self);

__attribute__((unused)) static ComSquareupOkhttpInternalHttpHttpEngine_$1 *new_ComSquareupOkhttpInternalHttpHttpEngine_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalHttpHttpEngine_$1 *create_ComSquareupOkhttpInternalHttpHttpEngine_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalHttpHttpEngine_$1)

@interface ComSquareupOkhttpInternalHttpHttpEngine_$2 : NSObject < OkioSource > {
 @public
  jboolean cacheRequestClosed_;
  id<OkioBufferedSource> val$source_;
  id<ComSquareupOkhttpInternalHttpCacheRequest> val$cacheRequest_;
  id<OkioBufferedSink> val$cacheBody_;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (OkioTimeout *)timeout;

- (void)close;

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)capture$0
withComSquareupOkhttpInternalHttpCacheRequest:(id<ComSquareupOkhttpInternalHttpCacheRequest>)capture$1
                      withOkioBufferedSink:(id<OkioBufferedSink>)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpInternalHttpHttpEngine_$2)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine_$2, val$source_, id<OkioBufferedSource>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine_$2, val$cacheRequest_, id<ComSquareupOkhttpInternalHttpCacheRequest>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalHttpHttpEngine_$2, val$cacheBody_, id<OkioBufferedSink>)

__attribute__((unused)) static void ComSquareupOkhttpInternalHttpHttpEngine_$2_initWithOkioBufferedSource_withComSquareupOkhttpInternalHttpCacheRequest_withOkioBufferedSink_(ComSquareupOkhttpInternalHttpHttpEngine_$2 *self, id<OkioBufferedSource> capture$0, id<ComSquareupOkhttpInternalHttpCacheRequest> capture$1, id<OkioBufferedSink> capture$2);

__attribute__((unused)) static ComSquareupOkhttpInternalHttpHttpEngine_$2 *new_ComSquareupOkhttpInternalHttpHttpEngine_$2_initWithOkioBufferedSource_withComSquareupOkhttpInternalHttpCacheRequest_withOkioBufferedSink_(id<OkioBufferedSource> capture$0, id<ComSquareupOkhttpInternalHttpCacheRequest> capture$1, id<OkioBufferedSink> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpInternalHttpHttpEngine_$2 *create_ComSquareupOkhttpInternalHttpHttpEngine_$2_initWithOkioBufferedSource_withComSquareupOkhttpInternalHttpCacheRequest_withOkioBufferedSink_(id<OkioBufferedSource> capture$0, id<ComSquareupOkhttpInternalHttpCacheRequest> capture$1, id<OkioBufferedSink> capture$2);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpInternalHttpHttpEngine_$2)

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpInternalHttpHttpEngine)

@implementation ComSquareupOkhttpInternalHttpHttpEngine

- (instancetype)initWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client
                         withComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request
                                          withBoolean:(jboolean)bufferRequestBody
                                          withBoolean:(jboolean)callerWritesRequestBody
                                          withBoolean:(jboolean)forWebSocket
                      withComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection
       withComSquareupOkhttpInternalHttpRouteSelector:(ComSquareupOkhttpInternalHttpRouteSelector *)routeSelector
       withComSquareupOkhttpInternalHttpRetryableSink:(ComSquareupOkhttpInternalHttpRetryableSink *)requestBodyOut
                        withComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)priorResponse {
  ComSquareupOkhttpInternalHttpHttpEngine_initWithComSquareupOkhttpOkHttpClient_withComSquareupOkhttpRequest_withBoolean_withBoolean_withBoolean_withComSquareupOkhttpConnection_withComSquareupOkhttpInternalHttpRouteSelector_withComSquareupOkhttpInternalHttpRetryableSink_withComSquareupOkhttpResponse_(self, client, request, bufferRequestBody, callerWritesRequestBody, forWebSocket, connection, routeSelector, requestBodyOut, priorResponse);
  return self;
}

- (void)sendRequest {
  if (cacheStrategy_ != nil) return;
  if (transport_ != nil) @throw new_JavaLangIllegalStateException_init();
  ComSquareupOkhttpRequest *request = ComSquareupOkhttpInternalHttpHttpEngine_networkRequestWithComSquareupOkhttpRequest_(self, userRequest_);
  id<ComSquareupOkhttpInternalInternalCache> responseCache = [((ComSquareupOkhttpInternalInternal *) nil_chk(JreLoadStatic(ComSquareupOkhttpInternalInternal, instance))) internalCacheWithComSquareupOkhttpOkHttpClient:client_];
  ComSquareupOkhttpResponse *cacheCandidate = responseCache != nil ? [responseCache getWithComSquareupOkhttpRequest:request] : nil;
  jlong now = JavaLangSystem_currentTimeMillis();
  cacheStrategy_ = [new_ComSquareupOkhttpInternalHttpCacheStrategy_Factory_initWithLong_withComSquareupOkhttpRequest_withComSquareupOkhttpResponse_(now, request, cacheCandidate) get];
  networkRequest_ = ((ComSquareupOkhttpInternalHttpCacheStrategy *) nil_chk(cacheStrategy_))->networkRequest_;
  cacheResponse_ = cacheStrategy_->cacheResponse_;
  if (responseCache != nil) {
    [responseCache trackResponseWithComSquareupOkhttpInternalHttpCacheStrategy:cacheStrategy_];
  }
  if (cacheCandidate != nil && cacheResponse_ == nil) {
    ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaIoCloseable_([cacheCandidate body]);
  }
  if (networkRequest_ != nil) {
    if (connection_ == nil) {
      ComSquareupOkhttpInternalHttpHttpEngine_connectWithComSquareupOkhttpRequest_(self, networkRequest_);
    }
    transport_ = [JreLoadStatic(ComSquareupOkhttpInternalInternal, instance) newTransportWithComSquareupOkhttpConnection:connection_ withComSquareupOkhttpInternalHttpHttpEngine:self];
    if (callerWritesRequestBody_ && [self permitsRequestBody] && requestBodyOut_ == nil) {
      jlong contentLength = ComSquareupOkhttpInternalHttpOkHeaders_contentLengthWithComSquareupOkhttpRequest_(request);
      if (bufferRequestBody_) {
        if (contentLength > JavaLangInteger_MAX_VALUE) {
          @throw new_JavaLangIllegalStateException_initWithNSString_(@"Use setFixedLengthStreamingMode() or setChunkedStreamingMode() for requests larger than 2 GiB.");
        }
        if (contentLength != -1) {
          [((id<ComSquareupOkhttpInternalHttpTransport>) nil_chk(transport_)) writeRequestHeadersWithComSquareupOkhttpRequest:networkRequest_];
          requestBodyOut_ = new_ComSquareupOkhttpInternalHttpRetryableSink_initWithInt_((jint) contentLength);
        }
        else {
          requestBodyOut_ = new_ComSquareupOkhttpInternalHttpRetryableSink_init();
        }
      }
      else {
        [((id<ComSquareupOkhttpInternalHttpTransport>) nil_chk(transport_)) writeRequestHeadersWithComSquareupOkhttpRequest:networkRequest_];
        requestBodyOut_ = [transport_ createRequestBodyWithComSquareupOkhttpRequest:networkRequest_ withLong:contentLength];
      }
    }
  }
  else {
    if (connection_ != nil) {
      [JreLoadStatic(ComSquareupOkhttpInternalInternal, instance) recycleWithComSquareupOkhttpConnectionPool:[((ComSquareupOkhttpOkHttpClient *) nil_chk(client_)) getConnectionPool] withComSquareupOkhttpConnection:connection_];
      connection_ = nil;
    }
    if (cacheResponse_ != nil) {
      self->userResponse_ = [((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([cacheResponse_ newBuilder])) requestWithComSquareupOkhttpRequest:userRequest_])) priorResponseWithComSquareupOkhttpResponse:ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(priorResponse_)])) cacheResponseWithComSquareupOkhttpResponse:ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(cacheResponse_)])) build];
    }
    else {
      self->userResponse_ = [((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([new_ComSquareupOkhttpResponse_Builder_init() requestWithComSquareupOkhttpRequest:userRequest_])) priorResponseWithComSquareupOkhttpResponse:ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(priorResponse_)])) protocolWithComSquareupOkhttpProtocol:JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_1_1)])) codeWithInt:504])) messageWithNSString:@"Unsatisfiable Request (only-if-cached)"])) bodyWithComSquareupOkhttpResponseBody:ComSquareupOkhttpInternalHttpHttpEngine_EMPTY_BODY])) build];
    }
    userResponse_ = ComSquareupOkhttpInternalHttpHttpEngine_unzipWithComSquareupOkhttpResponse_(self, userResponse_);
  }
}

+ (ComSquareupOkhttpResponse *)stripBodyWithComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response {
  return ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(response);
}

- (void)connectWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request {
  ComSquareupOkhttpInternalHttpHttpEngine_connectWithComSquareupOkhttpRequest_(self, request);
}

- (void)writingRequestHeaders {
  if (sentRequestMillis_ != -1) @throw new_JavaLangIllegalStateException_init();
  sentRequestMillis_ = JavaLangSystem_currentTimeMillis();
}

- (jboolean)permitsRequestBody {
  return ComSquareupOkhttpInternalHttpHttpMethod_permitsRequestBodyWithNSString_([((ComSquareupOkhttpRequest *) nil_chk(userRequest_)) method]);
}

- (id<OkioSink>)getRequestBody {
  if (cacheStrategy_ == nil) @throw new_JavaLangIllegalStateException_init();
  return requestBodyOut_;
}

- (id<OkioBufferedSink>)getBufferedRequestBody {
  id<OkioBufferedSink> result = bufferedRequestBody_;
  if (result != nil) return result;
  id<OkioSink> requestBody = [self getRequestBody];
  return requestBody != nil ? (bufferedRequestBody_ = OkioOkio_bufferWithOkioSink_(requestBody)) : nil;
}

- (jboolean)hasResponse {
  return userResponse_ != nil;
}

- (ComSquareupOkhttpRequest *)getRequest {
  return userRequest_;
}

- (ComSquareupOkhttpResponse *)getResponse {
  if (userResponse_ == nil) @throw new_JavaLangIllegalStateException_init();
  return userResponse_;
}

- (ComSquareupOkhttpConnection *)getConnection {
  return connection_;
}

- (ComSquareupOkhttpInternalHttpHttpEngine *)recoverWithJavaIoIOException:(JavaIoIOException *)e
                                                             withOkioSink:(id<OkioSink>)requestBodyOut {
  if (routeSelector_ != nil && connection_ != nil) {
    [routeSelector_ connectFailedWithComSquareupOkhttpConnection:connection_ withJavaIoIOException:e];
  }
  jboolean canRetryRequestBody = requestBodyOut == nil || [requestBodyOut isKindOfClass:[ComSquareupOkhttpInternalHttpRetryableSink class]];
  if ((routeSelector_ == nil && connection_ == nil) || (routeSelector_ != nil && ![routeSelector_ hasNext]) || !ComSquareupOkhttpInternalHttpHttpEngine_isRecoverableWithJavaIoIOException_(self, e) || !canRetryRequestBody) {
    return nil;
  }
  ComSquareupOkhttpConnection *connection = [self close];
  return new_ComSquareupOkhttpInternalHttpHttpEngine_initWithComSquareupOkhttpOkHttpClient_withComSquareupOkhttpRequest_withBoolean_withBoolean_withBoolean_withComSquareupOkhttpConnection_withComSquareupOkhttpInternalHttpRouteSelector_withComSquareupOkhttpInternalHttpRetryableSink_withComSquareupOkhttpResponse_(client_, userRequest_, bufferRequestBody_, callerWritesRequestBody_, forWebSocket_, connection, routeSelector_, (ComSquareupOkhttpInternalHttpRetryableSink *) cast_chk(requestBodyOut, [ComSquareupOkhttpInternalHttpRetryableSink class]), priorResponse_);
}

- (ComSquareupOkhttpInternalHttpHttpEngine *)recoverWithJavaIoIOException:(JavaIoIOException *)e {
  return [self recoverWithJavaIoIOException:e withOkioSink:requestBodyOut_];
}

- (jboolean)isRecoverableWithJavaIoIOException:(JavaIoIOException *)e {
  return ComSquareupOkhttpInternalHttpHttpEngine_isRecoverableWithJavaIoIOException_(self, e);
}

- (ComSquareupOkhttpRoute *)getRoute {
  return route_;
}

- (void)maybeCache {
  ComSquareupOkhttpInternalHttpHttpEngine_maybeCache(self);
}

- (void)releaseConnection {
  if (transport_ != nil && connection_ != nil) {
    [transport_ releaseConnectionOnIdle];
  }
  connection_ = nil;
}

- (void)disconnect {
  if (transport_ != nil) {
    @try {
      [transport_ disconnectWithComSquareupOkhttpInternalHttpHttpEngine:self];
    }
    @catch (JavaIoIOException *ignored) {
    }
  }
}

- (ComSquareupOkhttpConnection *)close {
  if (bufferedRequestBody_ != nil) {
    ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaIoCloseable_(bufferedRequestBody_);
  }
  else if (requestBodyOut_ != nil) {
    ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaIoCloseable_(requestBodyOut_);
  }
  if (userResponse_ == nil) {
    if (connection_ != nil) ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaNetSocket_([connection_ getSocket]);
    connection_ = nil;
    return nil;
  }
  ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaIoCloseable_([((ComSquareupOkhttpResponse *) nil_chk(userResponse_)) body]);
  if (transport_ != nil && connection_ != nil && ![transport_ canReuseConnection]) {
    ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaNetSocket_([connection_ getSocket]);
    connection_ = nil;
    return nil;
  }
  if (connection_ != nil && ![((ComSquareupOkhttpInternalInternal *) nil_chk(JreLoadStatic(ComSquareupOkhttpInternalInternal, instance))) clearOwnerWithComSquareupOkhttpConnection:connection_]) {
    connection_ = nil;
  }
  ComSquareupOkhttpConnection *result = connection_;
  connection_ = nil;
  return result;
}

- (ComSquareupOkhttpResponse *)unzipWithComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response {
  return ComSquareupOkhttpInternalHttpHttpEngine_unzipWithComSquareupOkhttpResponse_(self, response);
}

+ (jboolean)hasBodyWithComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response {
  return ComSquareupOkhttpInternalHttpHttpEngine_hasBodyWithComSquareupOkhttpResponse_(response);
}

- (ComSquareupOkhttpRequest *)networkRequestWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request {
  return ComSquareupOkhttpInternalHttpHttpEngine_networkRequestWithComSquareupOkhttpRequest_(self, request);
}

+ (NSString *)hostHeaderWithJavaNetURL:(JavaNetURL *)url {
  return ComSquareupOkhttpInternalHttpHttpEngine_hostHeaderWithJavaNetURL_(url);
}

- (void)readResponse {
  if (userResponse_ != nil) {
    return;
  }
  if (networkRequest_ == nil && cacheResponse_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"call sendRequest() first!");
  }
  if (networkRequest_ == nil) {
    return;
  }
  ComSquareupOkhttpResponse *networkResponse;
  if (forWebSocket_) {
    [((id<ComSquareupOkhttpInternalHttpTransport>) nil_chk(transport_)) writeRequestHeadersWithComSquareupOkhttpRequest:networkRequest_];
    networkResponse = ComSquareupOkhttpInternalHttpHttpEngine_readNetworkResponse(self);
  }
  else if (!callerWritesRequestBody_) {
    networkResponse = [new_ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain_initWithComSquareupOkhttpInternalHttpHttpEngine_withInt_withComSquareupOkhttpRequest_(self, 0, networkRequest_) proceedWithComSquareupOkhttpRequest:networkRequest_];
  }
  else {
    if (bufferedRequestBody_ != nil && [((OkioBuffer *) nil_chk([bufferedRequestBody_ buffer])) size] > 0) {
      (void) [bufferedRequestBody_ emit];
    }
    if (sentRequestMillis_ == -1) {
      if (ComSquareupOkhttpInternalHttpOkHeaders_contentLengthWithComSquareupOkhttpRequest_(networkRequest_) == -1 && [requestBodyOut_ isKindOfClass:[ComSquareupOkhttpInternalHttpRetryableSink class]]) {
        jlong contentLength = [((ComSquareupOkhttpInternalHttpRetryableSink *) nil_chk(((ComSquareupOkhttpInternalHttpRetryableSink *) cast_chk(requestBodyOut_, [ComSquareupOkhttpInternalHttpRetryableSink class])))) contentLength];
        networkRequest_ = [((ComSquareupOkhttpRequest_Builder *) nil_chk([((ComSquareupOkhttpRequest_Builder *) nil_chk([((ComSquareupOkhttpRequest *) nil_chk(networkRequest_)) newBuilder])) headerWithNSString:@"Content-Length" withNSString:JavaLangLong_toStringWithLong_(contentLength)])) build];
      }
      [((id<ComSquareupOkhttpInternalHttpTransport>) nil_chk(transport_)) writeRequestHeadersWithComSquareupOkhttpRequest:networkRequest_];
    }
    if (requestBodyOut_ != nil) {
      if (bufferedRequestBody_ != nil) {
        [bufferedRequestBody_ close];
      }
      else {
        [requestBodyOut_ close];
      }
      if ([requestBodyOut_ isKindOfClass:[ComSquareupOkhttpInternalHttpRetryableSink class]]) {
        [((id<ComSquareupOkhttpInternalHttpTransport>) nil_chk(transport_)) writeRequestBodyWithComSquareupOkhttpInternalHttpRetryableSink:(ComSquareupOkhttpInternalHttpRetryableSink *) cast_chk(requestBodyOut_, [ComSquareupOkhttpInternalHttpRetryableSink class])];
      }
    }
    networkResponse = ComSquareupOkhttpInternalHttpHttpEngine_readNetworkResponse(self);
  }
  [self receiveHeadersWithComSquareupOkhttpHeaders:[((ComSquareupOkhttpResponse *) nil_chk(networkResponse)) headers]];
  if (cacheResponse_ != nil) {
    if (ComSquareupOkhttpInternalHttpHttpEngine_validateWithComSquareupOkhttpResponse_withComSquareupOkhttpResponse_(cacheResponse_, networkResponse)) {
      userResponse_ = [((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([cacheResponse_ newBuilder])) requestWithComSquareupOkhttpRequest:userRequest_])) priorResponseWithComSquareupOkhttpResponse:ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(priorResponse_)])) headersWithComSquareupOkhttpHeaders:ComSquareupOkhttpInternalHttpHttpEngine_combineWithComSquareupOkhttpHeaders_withComSquareupOkhttpHeaders_([cacheResponse_ headers], [networkResponse headers])])) cacheResponseWithComSquareupOkhttpResponse:ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(cacheResponse_)])) networkResponseWithComSquareupOkhttpResponse:ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(networkResponse)])) build];
      [((ComSquareupOkhttpResponseBody *) nil_chk([networkResponse body])) close];
      [self releaseConnection];
      id<ComSquareupOkhttpInternalInternalCache> responseCache = [((ComSquareupOkhttpInternalInternal *) nil_chk(JreLoadStatic(ComSquareupOkhttpInternalInternal, instance))) internalCacheWithComSquareupOkhttpOkHttpClient:client_];
      [((id<ComSquareupOkhttpInternalInternalCache>) nil_chk(responseCache)) trackConditionalCacheHit];
      [responseCache updateWithComSquareupOkhttpResponse:cacheResponse_ withComSquareupOkhttpResponse:ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(userResponse_)];
      userResponse_ = ComSquareupOkhttpInternalHttpHttpEngine_unzipWithComSquareupOkhttpResponse_(self, userResponse_);
      return;
    }
    else {
      ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaIoCloseable_([cacheResponse_ body]);
    }
  }
  userResponse_ = [((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([networkResponse newBuilder])) requestWithComSquareupOkhttpRequest:userRequest_])) priorResponseWithComSquareupOkhttpResponse:ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(priorResponse_)])) cacheResponseWithComSquareupOkhttpResponse:ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(cacheResponse_)])) networkResponseWithComSquareupOkhttpResponse:ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(networkResponse)])) build];
  if (ComSquareupOkhttpInternalHttpHttpEngine_hasBodyWithComSquareupOkhttpResponse_(userResponse_)) {
    ComSquareupOkhttpInternalHttpHttpEngine_maybeCache(self);
    userResponse_ = ComSquareupOkhttpInternalHttpHttpEngine_unzipWithComSquareupOkhttpResponse_(self, ComSquareupOkhttpInternalHttpHttpEngine_cacheWritingResponseWithComSquareupOkhttpInternalHttpCacheRequest_withComSquareupOkhttpResponse_(self, storeRequest_, userResponse_));
  }
}

- (ComSquareupOkhttpResponse *)readNetworkResponse {
  return ComSquareupOkhttpInternalHttpHttpEngine_readNetworkResponse(self);
}

- (ComSquareupOkhttpResponse *)cacheWritingResponseWithComSquareupOkhttpInternalHttpCacheRequest:(id<ComSquareupOkhttpInternalHttpCacheRequest>)cacheRequest
                                                                   withComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response {
  return ComSquareupOkhttpInternalHttpHttpEngine_cacheWritingResponseWithComSquareupOkhttpInternalHttpCacheRequest_withComSquareupOkhttpResponse_(self, cacheRequest, response);
}

+ (jboolean)validateWithComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)cached
                    withComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)network {
  return ComSquareupOkhttpInternalHttpHttpEngine_validateWithComSquareupOkhttpResponse_withComSquareupOkhttpResponse_(cached, network);
}

+ (ComSquareupOkhttpHeaders *)combineWithComSquareupOkhttpHeaders:(ComSquareupOkhttpHeaders *)cachedHeaders
                                     withComSquareupOkhttpHeaders:(ComSquareupOkhttpHeaders *)networkHeaders {
  return ComSquareupOkhttpInternalHttpHttpEngine_combineWithComSquareupOkhttpHeaders_withComSquareupOkhttpHeaders_(cachedHeaders, networkHeaders);
}

- (void)receiveHeadersWithComSquareupOkhttpHeaders:(ComSquareupOkhttpHeaders *)headers {
  JavaNetCookieHandler *cookieHandler = [((ComSquareupOkhttpOkHttpClient *) nil_chk(client_)) getCookieHandler];
  if (cookieHandler != nil) {
    [cookieHandler putWithJavaNetURI:[((ComSquareupOkhttpRequest *) nil_chk(userRequest_)) uri] withJavaUtilMap:ComSquareupOkhttpInternalHttpOkHeaders_toMultimapWithComSquareupOkhttpHeaders_withNSString_(headers, nil)];
  }
}

- (ComSquareupOkhttpRequest *)followUpRequest {
  if (userResponse_ == nil) @throw new_JavaLangIllegalStateException_init();
  JavaNetProxy *selectedProxy = [self getRoute] != nil ? [((ComSquareupOkhttpRoute *) nil_chk([self getRoute])) getProxy] : [((ComSquareupOkhttpOkHttpClient *) nil_chk(client_)) getProxy];
  jint responseCode = [((ComSquareupOkhttpResponse *) nil_chk(userResponse_)) code];
  {
    NSString *location;
    JavaNetURL *url;
    jboolean sameProtocol;
    ComSquareupOkhttpRequest_Builder *requestBuilder;
    switch (responseCode) {
      case JavaNetHttpURLConnection_HTTP_PROXY_AUTH:
      if ([selectedProxy type] != JreLoadEnum(JavaNetProxy_Type, HTTP)) {
        @throw new_JavaNetProtocolException_initWithNSString_(@"Received HTTP_PROXY_AUTH (407) code while not using proxy");
      }
      case JavaNetHttpURLConnection_HTTP_UNAUTHORIZED:
      return ComSquareupOkhttpInternalHttpOkHeaders_processAuthHeaderWithComSquareupOkhttpAuthenticator_withComSquareupOkhttpResponse_withJavaNetProxy_([((ComSquareupOkhttpOkHttpClient *) nil_chk(client_)) getAuthenticator], userResponse_, selectedProxy);
      case ComSquareupOkhttpInternalHttpStatusLine_HTTP_PERM_REDIRECT:
      case ComSquareupOkhttpInternalHttpStatusLine_HTTP_TEMP_REDIRECT:
      if (![((NSString *) nil_chk([((ComSquareupOkhttpRequest *) nil_chk(userRequest_)) method])) isEqual:@"GET"] && ![((NSString *) nil_chk([userRequest_ method])) isEqual:@"HEAD"]) {
        return nil;
      }
      case JavaNetHttpURLConnection_HTTP_MULT_CHOICE:
      case JavaNetHttpURLConnection_HTTP_MOVED_PERM:
      case JavaNetHttpURLConnection_HTTP_MOVED_TEMP:
      case JavaNetHttpURLConnection_HTTP_SEE_OTHER:
      if (![((ComSquareupOkhttpOkHttpClient *) nil_chk(client_)) getFollowRedirects]) return nil;
      location = [userResponse_ headerWithNSString:@"Location"];
      if (location == nil) return nil;
      url = new_JavaNetURL_initWithJavaNetURL_withNSString_([((ComSquareupOkhttpRequest *) nil_chk(userRequest_)) url], location);
      if (![((NSString *) nil_chk([url getProtocol])) isEqual:@"https"] && ![((NSString *) nil_chk([url getProtocol])) isEqual:@"http"]) return nil;
      sameProtocol = [((NSString *) nil_chk([url getProtocol])) isEqual:[((JavaNetURL *) nil_chk([userRequest_ url])) getProtocol]];
      if (!sameProtocol && ![client_ getFollowSslRedirects]) return nil;
      requestBuilder = [userRequest_ newBuilder];
      if (ComSquareupOkhttpInternalHttpHttpMethod_permitsRequestBodyWithNSString_([userRequest_ method])) {
        (void) [((ComSquareupOkhttpRequest_Builder *) nil_chk(requestBuilder)) methodWithNSString:@"GET" withComSquareupOkhttpRequestBody:nil];
        (void) [requestBuilder removeHeaderWithNSString:@"Transfer-Encoding"];
        (void) [requestBuilder removeHeaderWithNSString:@"Content-Length"];
        (void) [requestBuilder removeHeaderWithNSString:@"Content-Type"];
      }
      if (![self sameConnectionWithJavaNetURL:url]) {
        (void) [((ComSquareupOkhttpRequest_Builder *) nil_chk(requestBuilder)) removeHeaderWithNSString:@"Authorization"];
      }
      return [((ComSquareupOkhttpRequest_Builder *) nil_chk([((ComSquareupOkhttpRequest_Builder *) nil_chk(requestBuilder)) urlWithJavaNetURL:url])) build];
      default:
      return nil;
    }
  }
}

- (jboolean)sameConnectionWithJavaNetURL:(JavaNetURL *)followUp {
  JavaNetURL *url = [((ComSquareupOkhttpRequest *) nil_chk(userRequest_)) url];
  return [((NSString *) nil_chk([((JavaNetURL *) nil_chk(url)) getHost])) isEqual:[((JavaNetURL *) nil_chk(followUp)) getHost]] && ComSquareupOkhttpInternalUtil_getEffectivePortWithJavaNetURL_(url) == ComSquareupOkhttpInternalUtil_getEffectivePortWithJavaNetURL_(followUp) && [((NSString *) nil_chk([url getProtocol])) isEqual:[followUp getProtocol]];
}

+ (void)initialize {
  if (self == [ComSquareupOkhttpInternalHttpHttpEngine class]) {
    ComSquareupOkhttpInternalHttpHttpEngine_EMPTY_BODY = new_ComSquareupOkhttpInternalHttpHttpEngine_$1_init();
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpInternalHttpHttpEngine)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpOkHttpClient:withComSquareupOkhttpRequest:withBoolean:withBoolean:withBoolean:withComSquareupOkhttpConnection:withComSquareupOkhttpInternalHttpRouteSelector:withComSquareupOkhttpInternalHttpRetryableSink:withComSquareupOkhttpResponse:", "HttpEngine", NULL, 0x1, NULL, NULL },
    { "sendRequest", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "stripBodyWithComSquareupOkhttpResponse:", "stripBody", "Lcom.squareup.okhttp.Response;", 0xa, NULL, NULL },
    { "connectWithComSquareupOkhttpRequest:", "connect", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writingRequestHeaders", NULL, "V", 0x1, NULL, NULL },
    { "permitsRequestBody", NULL, "Z", 0x0, NULL, NULL },
    { "getRequestBody", NULL, "Lokio.Sink;", 0x1, NULL, NULL },
    { "getBufferedRequestBody", NULL, "Lokio.BufferedSink;", 0x1, NULL, NULL },
    { "hasResponse", NULL, "Z", 0x1, NULL, NULL },
    { "getRequest", NULL, "Lcom.squareup.okhttp.Request;", 0x1, NULL, NULL },
    { "getResponse", NULL, "Lcom.squareup.okhttp.Response;", 0x1, NULL, NULL },
    { "getConnection", NULL, "Lcom.squareup.okhttp.Connection;", 0x1, NULL, NULL },
    { "recoverWithJavaIoIOException:withOkioSink:", "recover", "Lcom.squareup.okhttp.internal.http.HttpEngine;", 0x1, NULL, NULL },
    { "recoverWithJavaIoIOException:", "recover", "Lcom.squareup.okhttp.internal.http.HttpEngine;", 0x1, NULL, NULL },
    { "isRecoverableWithJavaIoIOException:", "isRecoverable", "Z", 0x2, NULL, NULL },
    { "getRoute", NULL, "Lcom.squareup.okhttp.Route;", 0x1, NULL, NULL },
    { "maybeCache", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "releaseConnection", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "disconnect", NULL, "V", 0x1, NULL, NULL },
    { "close", NULL, "Lcom.squareup.okhttp.Connection;", 0x1, NULL, NULL },
    { "unzipWithComSquareupOkhttpResponse:", "unzip", "Lcom.squareup.okhttp.Response;", 0x2, "Ljava.io.IOException;", NULL },
    { "hasBodyWithComSquareupOkhttpResponse:", "hasBody", "Z", 0x9, NULL, NULL },
    { "networkRequestWithComSquareupOkhttpRequest:", "networkRequest", "Lcom.squareup.okhttp.Request;", 0x2, "Ljava.io.IOException;", NULL },
    { "hostHeaderWithJavaNetURL:", "hostHeader", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "readResponse", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readNetworkResponse", NULL, "Lcom.squareup.okhttp.Response;", 0x2, "Ljava.io.IOException;", NULL },
    { "cacheWritingResponseWithComSquareupOkhttpInternalHttpCacheRequest:withComSquareupOkhttpResponse:", "cacheWritingResponse", "Lcom.squareup.okhttp.Response;", 0x2, "Ljava.io.IOException;", NULL },
    { "validateWithComSquareupOkhttpResponse:withComSquareupOkhttpResponse:", "validate", "Z", 0xa, NULL, NULL },
    { "combineWithComSquareupOkhttpHeaders:withComSquareupOkhttpHeaders:", "combine", "Lcom.squareup.okhttp.Headers;", 0xa, "Ljava.io.IOException;", NULL },
    { "receiveHeadersWithComSquareupOkhttpHeaders:", "receiveHeaders", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "followUpRequest", NULL, "Lcom.squareup.okhttp.Request;", 0x1, "Ljava.io.IOException;", NULL },
    { "sameConnectionWithJavaNetURL:", "sameConnection", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_FOLLOW_UPS", "MAX_FOLLOW_UPS", 0x19, "I", NULL, NULL, .constantValue.asInt = ComSquareupOkhttpInternalHttpHttpEngine_MAX_FOLLOW_UPS },
    { "EMPTY_BODY", "EMPTY_BODY", 0x1a, "Lcom.squareup.okhttp.ResponseBody;", &ComSquareupOkhttpInternalHttpHttpEngine_EMPTY_BODY, NULL, .constantValue.asLong = 0 },
    { "client_", NULL, 0x10, "Lcom.squareup.okhttp.OkHttpClient;", NULL, NULL, .constantValue.asLong = 0 },
    { "connection_", NULL, 0x2, "Lcom.squareup.okhttp.Connection;", NULL, NULL, .constantValue.asLong = 0 },
    { "routeSelector_", NULL, 0x2, "Lcom.squareup.okhttp.internal.http.RouteSelector;", NULL, NULL, .constantValue.asLong = 0 },
    { "route_", NULL, 0x2, "Lcom.squareup.okhttp.Route;", NULL, NULL, .constantValue.asLong = 0 },
    { "priorResponse_", NULL, 0x12, "Lcom.squareup.okhttp.Response;", NULL, NULL, .constantValue.asLong = 0 },
    { "transport_", NULL, 0x2, "Lcom.squareup.okhttp.internal.http.Transport;", NULL, NULL, .constantValue.asLong = 0 },
    { "sentRequestMillis_", NULL, 0x0, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "transparentGzip_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "bufferRequestBody_", NULL, 0x11, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "userRequest_", NULL, 0x12, "Lcom.squareup.okhttp.Request;", NULL, NULL, .constantValue.asLong = 0 },
    { "networkRequest_", NULL, 0x2, "Lcom.squareup.okhttp.Request;", NULL, NULL, .constantValue.asLong = 0 },
    { "cacheResponse_", NULL, 0x2, "Lcom.squareup.okhttp.Response;", NULL, NULL, .constantValue.asLong = 0 },
    { "userResponse_", NULL, 0x2, "Lcom.squareup.okhttp.Response;", NULL, NULL, .constantValue.asLong = 0 },
    { "requestBodyOut_", NULL, 0x2, "Lokio.Sink;", NULL, NULL, .constantValue.asLong = 0 },
    { "bufferedRequestBody_", NULL, 0x2, "Lokio.BufferedSink;", NULL, NULL, .constantValue.asLong = 0 },
    { "callerWritesRequestBody_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "forWebSocket_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "storeRequest_", NULL, 0x2, "Lcom.squareup.okhttp.internal.http.CacheRequest;", NULL, NULL, .constantValue.asLong = 0 },
    { "cacheStrategy_", NULL, 0x2, "Lcom.squareup.okhttp.internal.http.CacheStrategy;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.squareup.okhttp.internal.http.HttpEngine$NetworkInterceptorChain;"};
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalHttpHttpEngine = { 2, "HttpEngine", "com.squareup.okhttp.internal.http", NULL, 0x11, 32, methods, 21, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComSquareupOkhttpInternalHttpHttpEngine;
}

@end

void ComSquareupOkhttpInternalHttpHttpEngine_initWithComSquareupOkhttpOkHttpClient_withComSquareupOkhttpRequest_withBoolean_withBoolean_withBoolean_withComSquareupOkhttpConnection_withComSquareupOkhttpInternalHttpRouteSelector_withComSquareupOkhttpInternalHttpRetryableSink_withComSquareupOkhttpResponse_(ComSquareupOkhttpInternalHttpHttpEngine *self, ComSquareupOkhttpOkHttpClient *client, ComSquareupOkhttpRequest *request, jboolean bufferRequestBody, jboolean callerWritesRequestBody, jboolean forWebSocket, ComSquareupOkhttpConnection *connection, ComSquareupOkhttpInternalHttpRouteSelector *routeSelector, ComSquareupOkhttpInternalHttpRetryableSink *requestBodyOut, ComSquareupOkhttpResponse *priorResponse) {
  NSObject_init(self);
  self->sentRequestMillis_ = -1;
  self->client_ = client;
  self->userRequest_ = request;
  self->bufferRequestBody_ = bufferRequestBody;
  self->callerWritesRequestBody_ = callerWritesRequestBody;
  self->forWebSocket_ = forWebSocket;
  self->connection_ = connection;
  self->routeSelector_ = routeSelector;
  self->requestBodyOut_ = requestBodyOut;
  self->priorResponse_ = priorResponse;
  if (connection != nil) {
    [((ComSquareupOkhttpInternalInternal *) nil_chk(JreLoadStatic(ComSquareupOkhttpInternalInternal, instance))) setOwnerWithComSquareupOkhttpConnection:connection withComSquareupOkhttpInternalHttpHttpEngine:self];
    self->route_ = [connection getRoute];
  }
  else {
    self->route_ = nil;
  }
}

ComSquareupOkhttpInternalHttpHttpEngine *new_ComSquareupOkhttpInternalHttpHttpEngine_initWithComSquareupOkhttpOkHttpClient_withComSquareupOkhttpRequest_withBoolean_withBoolean_withBoolean_withComSquareupOkhttpConnection_withComSquareupOkhttpInternalHttpRouteSelector_withComSquareupOkhttpInternalHttpRetryableSink_withComSquareupOkhttpResponse_(ComSquareupOkhttpOkHttpClient *client, ComSquareupOkhttpRequest *request, jboolean bufferRequestBody, jboolean callerWritesRequestBody, jboolean forWebSocket, ComSquareupOkhttpConnection *connection, ComSquareupOkhttpInternalHttpRouteSelector *routeSelector, ComSquareupOkhttpInternalHttpRetryableSink *requestBodyOut, ComSquareupOkhttpResponse *priorResponse) {
  ComSquareupOkhttpInternalHttpHttpEngine *self = [ComSquareupOkhttpInternalHttpHttpEngine alloc];
  ComSquareupOkhttpInternalHttpHttpEngine_initWithComSquareupOkhttpOkHttpClient_withComSquareupOkhttpRequest_withBoolean_withBoolean_withBoolean_withComSquareupOkhttpConnection_withComSquareupOkhttpInternalHttpRouteSelector_withComSquareupOkhttpInternalHttpRetryableSink_withComSquareupOkhttpResponse_(self, client, request, bufferRequestBody, callerWritesRequestBody, forWebSocket, connection, routeSelector, requestBodyOut, priorResponse);
  return self;
}

ComSquareupOkhttpInternalHttpHttpEngine *create_ComSquareupOkhttpInternalHttpHttpEngine_initWithComSquareupOkhttpOkHttpClient_withComSquareupOkhttpRequest_withBoolean_withBoolean_withBoolean_withComSquareupOkhttpConnection_withComSquareupOkhttpInternalHttpRouteSelector_withComSquareupOkhttpInternalHttpRetryableSink_withComSquareupOkhttpResponse_(ComSquareupOkhttpOkHttpClient *client, ComSquareupOkhttpRequest *request, jboolean bufferRequestBody, jboolean callerWritesRequestBody, jboolean forWebSocket, ComSquareupOkhttpConnection *connection, ComSquareupOkhttpInternalHttpRouteSelector *routeSelector, ComSquareupOkhttpInternalHttpRetryableSink *requestBodyOut, ComSquareupOkhttpResponse *priorResponse) {
  return new_ComSquareupOkhttpInternalHttpHttpEngine_initWithComSquareupOkhttpOkHttpClient_withComSquareupOkhttpRequest_withBoolean_withBoolean_withBoolean_withComSquareupOkhttpConnection_withComSquareupOkhttpInternalHttpRouteSelector_withComSquareupOkhttpInternalHttpRetryableSink_withComSquareupOkhttpResponse_(client, request, bufferRequestBody, callerWritesRequestBody, forWebSocket, connection, routeSelector, requestBodyOut, priorResponse);
}

ComSquareupOkhttpResponse *ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(ComSquareupOkhttpResponse *response) {
  ComSquareupOkhttpInternalHttpHttpEngine_initialize();
  return response != nil && [response body] != nil ? [((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([response newBuilder])) bodyWithComSquareupOkhttpResponseBody:nil])) build] : response;
}

void ComSquareupOkhttpInternalHttpHttpEngine_connectWithComSquareupOkhttpRequest_(ComSquareupOkhttpInternalHttpHttpEngine *self, ComSquareupOkhttpRequest *request) {
  if (self->connection_ != nil) @throw new_JavaLangIllegalStateException_init();
  if (self->routeSelector_ == nil) {
    self->routeSelector_ = ComSquareupOkhttpInternalHttpRouteSelector_getWithComSquareupOkhttpRequest_withComSquareupOkhttpOkHttpClient_(request, self->client_);
  }
  self->connection_ = [((ComSquareupOkhttpInternalHttpRouteSelector *) nil_chk(self->routeSelector_)) nextWithComSquareupOkhttpInternalHttpHttpEngine:self];
  self->route_ = [((ComSquareupOkhttpConnection *) nil_chk(self->connection_)) getRoute];
}

jboolean ComSquareupOkhttpInternalHttpHttpEngine_isRecoverableWithJavaIoIOException_(ComSquareupOkhttpInternalHttpHttpEngine *self, JavaIoIOException *e) {
  if (![((ComSquareupOkhttpOkHttpClient *) nil_chk(self->client_)) getRetryOnConnectionFailure]) {
    return false;
  }
  if ([e isKindOfClass:[JavaxNetSslSSLPeerUnverifiedException class]] || ([e isKindOfClass:[JavaxNetSslSSLHandshakeException class]] && [[((JavaIoIOException *) nil_chk(e)) getCause] isKindOfClass:[JavaSecurityCertCertificateException class]])) {
    return false;
  }
  if ([e isKindOfClass:[JavaNetProtocolException class]]) {
    return false;
  }
  if ([e isKindOfClass:[JavaIoInterruptedIOException class]]) {
    return false;
  }
  return true;
}

void ComSquareupOkhttpInternalHttpHttpEngine_maybeCache(ComSquareupOkhttpInternalHttpHttpEngine *self) {
  id<ComSquareupOkhttpInternalInternalCache> responseCache = [((ComSquareupOkhttpInternalInternal *) nil_chk(JreLoadStatic(ComSquareupOkhttpInternalInternal, instance))) internalCacheWithComSquareupOkhttpOkHttpClient:self->client_];
  if (responseCache == nil) return;
  if (!ComSquareupOkhttpInternalHttpCacheStrategy_isCacheableWithComSquareupOkhttpResponse_withComSquareupOkhttpRequest_(self->userResponse_, self->networkRequest_)) {
    if (ComSquareupOkhttpInternalHttpHttpMethod_invalidatesCacheWithNSString_([((ComSquareupOkhttpRequest *) nil_chk(self->networkRequest_)) method])) {
      @try {
        [((id<ComSquareupOkhttpInternalInternalCache>) nil_chk(responseCache)) removeWithComSquareupOkhttpRequest:self->networkRequest_];
      }
      @catch (JavaIoIOException *ignored) {
      }
    }
    return;
  }
  self->storeRequest_ = [((id<ComSquareupOkhttpInternalInternalCache>) nil_chk(responseCache)) putWithComSquareupOkhttpResponse:ComSquareupOkhttpInternalHttpHttpEngine_stripBodyWithComSquareupOkhttpResponse_(self->userResponse_)];
}

ComSquareupOkhttpResponse *ComSquareupOkhttpInternalHttpHttpEngine_unzipWithComSquareupOkhttpResponse_(ComSquareupOkhttpInternalHttpHttpEngine *self, ComSquareupOkhttpResponse *response) {
  if (!self->transparentGzip_ || ![@"gzip" equalsIgnoreCase:[((ComSquareupOkhttpResponse *) nil_chk(self->userResponse_)) headerWithNSString:@"Content-Encoding"]]) {
    return response;
  }
  if ([((ComSquareupOkhttpResponse *) nil_chk(response)) body] == nil) {
    return response;
  }
  OkioGzipSource *responseBody = new_OkioGzipSource_initWithOkioSource_([((ComSquareupOkhttpResponseBody *) nil_chk([response body])) source]);
  ComSquareupOkhttpHeaders *strippedHeaders = [((ComSquareupOkhttpHeaders_Builder *) nil_chk([((ComSquareupOkhttpHeaders_Builder *) nil_chk([((ComSquareupOkhttpHeaders_Builder *) nil_chk([((ComSquareupOkhttpHeaders *) nil_chk([response headers])) newBuilder])) removeAllWithNSString:@"Content-Encoding"])) removeAllWithNSString:@"Content-Length"])) build];
  return [((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([response newBuilder])) headersWithComSquareupOkhttpHeaders:strippedHeaders])) bodyWithComSquareupOkhttpResponseBody:new_ComSquareupOkhttpInternalHttpRealResponseBody_initWithComSquareupOkhttpHeaders_withOkioBufferedSource_(strippedHeaders, OkioOkio_bufferWithOkioSource_(responseBody))])) build];
}

jboolean ComSquareupOkhttpInternalHttpHttpEngine_hasBodyWithComSquareupOkhttpResponse_(ComSquareupOkhttpResponse *response) {
  ComSquareupOkhttpInternalHttpHttpEngine_initialize();
  if ([((NSString *) nil_chk([((ComSquareupOkhttpRequest *) nil_chk([((ComSquareupOkhttpResponse *) nil_chk(response)) request])) method])) isEqual:@"HEAD"]) {
    return false;
  }
  jint responseCode = [response code];
  if ((responseCode < ComSquareupOkhttpInternalHttpStatusLine_HTTP_CONTINUE || responseCode >= 200) && responseCode != JavaNetHttpURLConnection_HTTP_NO_CONTENT && responseCode != JavaNetHttpURLConnection_HTTP_NOT_MODIFIED) {
    return true;
  }
  if (ComSquareupOkhttpInternalHttpOkHeaders_contentLengthWithComSquareupOkhttpResponse_(response) != -1 || [@"chunked" equalsIgnoreCase:[response headerWithNSString:@"Transfer-Encoding"]]) {
    return true;
  }
  return false;
}

ComSquareupOkhttpRequest *ComSquareupOkhttpInternalHttpHttpEngine_networkRequestWithComSquareupOkhttpRequest_(ComSquareupOkhttpInternalHttpHttpEngine *self, ComSquareupOkhttpRequest *request) {
  ComSquareupOkhttpRequest_Builder *result = [((ComSquareupOkhttpRequest *) nil_chk(request)) newBuilder];
  if ([request headerWithNSString:@"Host"] == nil) {
    (void) [((ComSquareupOkhttpRequest_Builder *) nil_chk(result)) headerWithNSString:@"Host" withNSString:ComSquareupOkhttpInternalHttpHttpEngine_hostHeaderWithJavaNetURL_([request url])];
  }
  if ((self->connection_ == nil || [self->connection_ getProtocol] != JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_1_0)) && [request headerWithNSString:@"Connection"] == nil) {
    (void) [((ComSquareupOkhttpRequest_Builder *) nil_chk(result)) headerWithNSString:@"Connection" withNSString:@"Keep-Alive"];
  }
  if ([request headerWithNSString:@"Accept-Encoding"] == nil) {
    self->transparentGzip_ = true;
    (void) [((ComSquareupOkhttpRequest_Builder *) nil_chk(result)) headerWithNSString:@"Accept-Encoding" withNSString:@"gzip"];
  }
  JavaNetCookieHandler *cookieHandler = [((ComSquareupOkhttpOkHttpClient *) nil_chk(self->client_)) getCookieHandler];
  if (cookieHandler != nil) {
    id<JavaUtilMap> headers = ComSquareupOkhttpInternalHttpOkHeaders_toMultimapWithComSquareupOkhttpHeaders_withNSString_([((ComSquareupOkhttpRequest *) nil_chk([((ComSquareupOkhttpRequest_Builder *) nil_chk(result)) build])) headers], nil);
    id<JavaUtilMap> cookies = [cookieHandler getWithJavaNetURI:[request uri] withJavaUtilMap:headers];
    ComSquareupOkhttpInternalHttpOkHeaders_addCookiesWithComSquareupOkhttpRequest_Builder_withJavaUtilMap_(result, cookies);
  }
  if ([request headerWithNSString:@"User-Agent"] == nil) {
    (void) [((ComSquareupOkhttpRequest_Builder *) nil_chk(result)) headerWithNSString:@"User-Agent" withNSString:ComSquareupOkhttpInternalVersion_userAgent()];
  }
  return [((ComSquareupOkhttpRequest_Builder *) nil_chk(result)) build];
}

NSString *ComSquareupOkhttpInternalHttpHttpEngine_hostHeaderWithJavaNetURL_(JavaNetURL *url) {
  ComSquareupOkhttpInternalHttpHttpEngine_initialize();
  return ComSquareupOkhttpInternalUtil_getEffectivePortWithJavaNetURL_(url) != ComSquareupOkhttpInternalUtil_getDefaultPortWithNSString_([((JavaNetURL *) nil_chk(url)) getProtocol]) ? JreStrcat("$CI", [url getHost], ':', [url getPort]) : [url getHost];
}

ComSquareupOkhttpResponse *ComSquareupOkhttpInternalHttpHttpEngine_readNetworkResponse(ComSquareupOkhttpInternalHttpHttpEngine *self) {
  [((id<ComSquareupOkhttpInternalHttpTransport>) nil_chk(self->transport_)) finishRequest];
  ComSquareupOkhttpResponse *networkResponse = [((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([self->transport_ readResponseHeaders])) requestWithComSquareupOkhttpRequest:self->networkRequest_])) handshakeWithComSquareupOkhttpHandshake:[((ComSquareupOkhttpConnection *) nil_chk(self->connection_)) getHandshake]])) headerWithNSString:JreLoadStatic(ComSquareupOkhttpInternalHttpOkHeaders, SENT_MILLIS) withNSString:JavaLangLong_toStringWithLong_(self->sentRequestMillis_)])) headerWithNSString:JreLoadStatic(ComSquareupOkhttpInternalHttpOkHeaders, RECEIVED_MILLIS) withNSString:JavaLangLong_toStringWithLong_(JavaLangSystem_currentTimeMillis())])) build];
  if (!self->forWebSocket_) {
    networkResponse = [((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse *) nil_chk(networkResponse)) newBuilder])) bodyWithComSquareupOkhttpResponseBody:[self->transport_ openResponseBodyWithComSquareupOkhttpResponse:networkResponse]])) build];
  }
  [((ComSquareupOkhttpInternalInternal *) nil_chk(JreLoadStatic(ComSquareupOkhttpInternalInternal, instance))) setProtocolWithComSquareupOkhttpConnection:self->connection_ withComSquareupOkhttpProtocol:[((ComSquareupOkhttpResponse *) nil_chk(networkResponse)) protocol]];
  return networkResponse;
}

ComSquareupOkhttpResponse *ComSquareupOkhttpInternalHttpHttpEngine_cacheWritingResponseWithComSquareupOkhttpInternalHttpCacheRequest_withComSquareupOkhttpResponse_(ComSquareupOkhttpInternalHttpHttpEngine *self, id<ComSquareupOkhttpInternalHttpCacheRequest> cacheRequest, ComSquareupOkhttpResponse *response) {
  if (cacheRequest == nil) return response;
  id<OkioSink> cacheBodyUnbuffered = [((id<ComSquareupOkhttpInternalHttpCacheRequest>) nil_chk(cacheRequest)) body];
  if (cacheBodyUnbuffered == nil) return response;
  id<OkioBufferedSource> source = [((ComSquareupOkhttpResponseBody *) nil_chk([((ComSquareupOkhttpResponse *) nil_chk(response)) body])) source];
  id<OkioBufferedSink> cacheBody = OkioOkio_bufferWithOkioSink_(cacheBodyUnbuffered);
  id<OkioSource> cacheWritingSource = new_ComSquareupOkhttpInternalHttpHttpEngine_$2_initWithOkioBufferedSource_withComSquareupOkhttpInternalHttpCacheRequest_withOkioBufferedSink_(source, cacheRequest, cacheBody);
  return [((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([response newBuilder])) bodyWithComSquareupOkhttpResponseBody:new_ComSquareupOkhttpInternalHttpRealResponseBody_initWithComSquareupOkhttpHeaders_withOkioBufferedSource_([response headers], OkioOkio_bufferWithOkioSource_(cacheWritingSource))])) build];
}

jboolean ComSquareupOkhttpInternalHttpHttpEngine_validateWithComSquareupOkhttpResponse_withComSquareupOkhttpResponse_(ComSquareupOkhttpResponse *cached, ComSquareupOkhttpResponse *network) {
  ComSquareupOkhttpInternalHttpHttpEngine_initialize();
  if ([((ComSquareupOkhttpResponse *) nil_chk(network)) code] == JavaNetHttpURLConnection_HTTP_NOT_MODIFIED) {
    return true;
  }
  JavaUtilDate *lastModified = [((ComSquareupOkhttpHeaders *) nil_chk([((ComSquareupOkhttpResponse *) nil_chk(cached)) headers])) getDateWithNSString:@"Last-Modified"];
  if (lastModified != nil) {
    JavaUtilDate *networkLastModified = [((ComSquareupOkhttpHeaders *) nil_chk([network headers])) getDateWithNSString:@"Last-Modified"];
    if (networkLastModified != nil && [networkLastModified getTime] < [lastModified getTime]) {
      return true;
    }
  }
  return false;
}

ComSquareupOkhttpHeaders *ComSquareupOkhttpInternalHttpHttpEngine_combineWithComSquareupOkhttpHeaders_withComSquareupOkhttpHeaders_(ComSquareupOkhttpHeaders *cachedHeaders, ComSquareupOkhttpHeaders *networkHeaders) {
  ComSquareupOkhttpInternalHttpHttpEngine_initialize();
  ComSquareupOkhttpHeaders_Builder *result = new_ComSquareupOkhttpHeaders_Builder_init();
  for (jint i = 0, size = [((ComSquareupOkhttpHeaders *) nil_chk(cachedHeaders)) size]; i < size; i++) {
    NSString *fieldName = [cachedHeaders nameWithInt:i];
    NSString *value = [cachedHeaders valueWithInt:i];
    if ([@"Warning" equalsIgnoreCase:fieldName] && [((NSString *) nil_chk(value)) hasPrefix:@"1"]) {
      continue;
    }
    if (!ComSquareupOkhttpInternalHttpOkHeaders_isEndToEndWithNSString_(fieldName) || [((ComSquareupOkhttpHeaders *) nil_chk(networkHeaders)) getWithNSString:fieldName] == nil) {
      (void) [result addWithNSString:fieldName withNSString:value];
    }
  }
  for (jint i = 0, size = [((ComSquareupOkhttpHeaders *) nil_chk(networkHeaders)) size]; i < size; i++) {
    NSString *fieldName = [networkHeaders nameWithInt:i];
    if ([@"Content-Length" equalsIgnoreCase:fieldName]) {
      continue;
    }
    if (ComSquareupOkhttpInternalHttpOkHeaders_isEndToEndWithNSString_(fieldName)) {
      (void) [result addWithNSString:fieldName withNSString:[networkHeaders valueWithInt:i]];
    }
  }
  return [result build];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalHttpHttpEngine)

@implementation ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain

- (instancetype)initWithComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)outer$
                                                        withInt:(jint)index
                                   withComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request {
  ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain_initWithComSquareupOkhttpInternalHttpHttpEngine_withInt_withComSquareupOkhttpRequest_(self, outer$, index, request);
  return self;
}

- (ComSquareupOkhttpConnection *)connection {
  return this$0_->connection_;
}

- (ComSquareupOkhttpRequest *)request {
  return request_;
}

- (ComSquareupOkhttpResponse *)proceedWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request {
  calls_++;
  if (index_ > 0) {
    id<ComSquareupOkhttpInterceptor> caller = [((id<JavaUtilList>) nil_chk([((ComSquareupOkhttpOkHttpClient *) nil_chk(this$0_->client_)) networkInterceptors])) getWithInt:index_ - 1];
    ComSquareupOkhttpAddress *address = [((ComSquareupOkhttpRoute *) nil_chk([((ComSquareupOkhttpConnection *) nil_chk([self connection])) getRoute])) getAddress];
    if (![((NSString *) nil_chk([((JavaNetURL *) nil_chk([((ComSquareupOkhttpRequest *) nil_chk(request)) url])) getHost])) isEqual:[((ComSquareupOkhttpAddress *) nil_chk(address)) getUriHost]] || ComSquareupOkhttpInternalUtil_getEffectivePortWithJavaNetURL_([request url]) != [address getUriPort]) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$", @"network interceptor ", caller, @" must retain the same host and port"));
    }
    if (calls_ > 1) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$", @"network interceptor ", caller, @" must call proceed() exactly once"));
    }
  }
  if (index_ < [((id<JavaUtilList>) nil_chk([((ComSquareupOkhttpOkHttpClient *) nil_chk(this$0_->client_)) networkInterceptors])) size]) {
    ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain *chain = new_ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain_initWithComSquareupOkhttpInternalHttpHttpEngine_withInt_withComSquareupOkhttpRequest_(this$0_, index_ + 1, request);
    id<ComSquareupOkhttpInterceptor> interceptor = [((id<JavaUtilList>) nil_chk([this$0_->client_ networkInterceptors])) getWithInt:index_];
    ComSquareupOkhttpResponse *interceptedResponse = [((id<ComSquareupOkhttpInterceptor>) nil_chk(interceptor)) interceptWithComSquareupOkhttpInterceptor_Chain:chain];
    if (chain->calls_ != 1) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$", @"network interceptor ", interceptor, @" must call proceed() exactly once"));
    }
    return interceptedResponse;
  }
  [((id<ComSquareupOkhttpInternalHttpTransport>) nil_chk(this$0_->transport_)) writeRequestHeadersWithComSquareupOkhttpRequest:request];
  if ([this$0_ permitsRequestBody] && [((ComSquareupOkhttpRequest *) nil_chk(request)) body] != nil) {
    id<OkioSink> requestBodyOut = [this$0_->transport_ createRequestBodyWithComSquareupOkhttpRequest:request withLong:[((ComSquareupOkhttpRequestBody *) nil_chk([request body])) contentLength]];
    id<OkioBufferedSink> bufferedRequestBody = OkioOkio_bufferWithOkioSink_(requestBodyOut);
    [((ComSquareupOkhttpRequestBody *) nil_chk([request body])) writeToWithOkioBufferedSink:bufferedRequestBody];
    [((id<OkioBufferedSink>) nil_chk(bufferedRequestBody)) close];
  }
  return ComSquareupOkhttpInternalHttpHttpEngine_readNetworkResponse(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpInternalHttpHttpEngine:withInt:withComSquareupOkhttpRequest:", "NetworkInterceptorChain", NULL, 0x0, NULL, NULL },
    { "connection", NULL, "Lcom.squareup.okhttp.Connection;", 0x1, NULL, NULL },
    { "request", NULL, "Lcom.squareup.okhttp.Request;", 0x1, NULL, NULL },
    { "proceedWithComSquareupOkhttpRequest:", "proceed", "Lcom.squareup.okhttp.Response;", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.squareup.okhttp.internal.http.HttpEngine;", NULL, NULL, .constantValue.asLong = 0 },
    { "index_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "request_", NULL, 0x12, "Lcom.squareup.okhttp.Request;", NULL, NULL, .constantValue.asLong = 0 },
    { "calls_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain = { 2, "NetworkInterceptorChain", "com.squareup.okhttp.internal.http", "HttpEngine", 0x0, 4, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain;
}

@end

void ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain_initWithComSquareupOkhttpInternalHttpHttpEngine_withInt_withComSquareupOkhttpRequest_(ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain *self, ComSquareupOkhttpInternalHttpHttpEngine *outer$, jint index, ComSquareupOkhttpRequest *request) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->index_ = index;
  self->request_ = request;
}

ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain *new_ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain_initWithComSquareupOkhttpInternalHttpHttpEngine_withInt_withComSquareupOkhttpRequest_(ComSquareupOkhttpInternalHttpHttpEngine *outer$, jint index, ComSquareupOkhttpRequest *request) {
  ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain *self = [ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain alloc];
  ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain_initWithComSquareupOkhttpInternalHttpHttpEngine_withInt_withComSquareupOkhttpRequest_(self, outer$, index, request);
  return self;
}

ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain *create_ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain_initWithComSquareupOkhttpInternalHttpHttpEngine_withInt_withComSquareupOkhttpRequest_(ComSquareupOkhttpInternalHttpHttpEngine *outer$, jint index, ComSquareupOkhttpRequest *request) {
  return new_ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain_initWithComSquareupOkhttpInternalHttpHttpEngine_withInt_withComSquareupOkhttpRequest_(outer$, index, request);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalHttpHttpEngine_NetworkInterceptorChain)

@implementation ComSquareupOkhttpInternalHttpHttpEngine_$1

- (ComSquareupOkhttpMediaType *)contentType {
  return nil;
}

- (jlong)contentLength {
  return 0;
}

- (id<OkioBufferedSource>)source {
  return new_OkioBuffer_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpInternalHttpHttpEngine_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "contentType", NULL, "Lcom.squareup.okhttp.MediaType;", 0x1, NULL, NULL },
    { "contentLength", NULL, "J", 0x1, NULL, NULL },
    { "source", NULL, "Lokio.BufferedSource;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalHttpHttpEngine_$1 = { 2, "", "com.squareup.okhttp.internal.http", "HttpEngine", 0x8008, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalHttpHttpEngine_$1;
}

@end

void ComSquareupOkhttpInternalHttpHttpEngine_$1_init(ComSquareupOkhttpInternalHttpHttpEngine_$1 *self) {
  ComSquareupOkhttpResponseBody_init(self);
}

ComSquareupOkhttpInternalHttpHttpEngine_$1 *new_ComSquareupOkhttpInternalHttpHttpEngine_$1_init() {
  ComSquareupOkhttpInternalHttpHttpEngine_$1 *self = [ComSquareupOkhttpInternalHttpHttpEngine_$1 alloc];
  ComSquareupOkhttpInternalHttpHttpEngine_$1_init(self);
  return self;
}

ComSquareupOkhttpInternalHttpHttpEngine_$1 *create_ComSquareupOkhttpInternalHttpHttpEngine_$1_init() {
  return new_ComSquareupOkhttpInternalHttpHttpEngine_$1_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalHttpHttpEngine_$1)

@implementation ComSquareupOkhttpInternalHttpHttpEngine_$2

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  jlong bytesRead;
  @try {
    bytesRead = [((id<OkioBufferedSource>) nil_chk(val$source_)) readWithOkioBuffer:sink withLong:byteCount];
  }
  @catch (JavaIoIOException *e) {
    if (!cacheRequestClosed_) {
      cacheRequestClosed_ = true;
      [((id<ComSquareupOkhttpInternalHttpCacheRequest>) nil_chk(val$cacheRequest_)) abort];
    }
    @throw e;
  }
  if (bytesRead == -1) {
    if (!cacheRequestClosed_) {
      cacheRequestClosed_ = true;
      [((id<OkioBufferedSink>) nil_chk(val$cacheBody_)) close];
    }
    return -1;
  }
  (void) [sink copyToWithOkioBuffer:[((id<OkioBufferedSink>) nil_chk(val$cacheBody_)) buffer] withLong:[((OkioBuffer *) nil_chk(sink)) size] - bytesRead withLong:bytesRead];
  (void) [val$cacheBody_ emitCompleteSegments];
  return bytesRead;
}

- (OkioTimeout *)timeout {
  return [((id<OkioBufferedSource>) nil_chk(val$source_)) timeout];
}

- (void)close {
  if (!cacheRequestClosed_ && !ComSquareupOkhttpInternalUtil_discardWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(self, ComSquareupOkhttpInternalHttpTransport_DISCARD_STREAM_TIMEOUT_MILLIS, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS))) {
    cacheRequestClosed_ = true;
    [((id<ComSquareupOkhttpInternalHttpCacheRequest>) nil_chk(val$cacheRequest_)) abort];
  }
  [((id<OkioBufferedSource>) nil_chk(val$source_)) close];
}

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)capture$0
withComSquareupOkhttpInternalHttpCacheRequest:(id<ComSquareupOkhttpInternalHttpCacheRequest>)capture$1
                      withOkioBufferedSink:(id<OkioBufferedSink>)capture$2 {
  ComSquareupOkhttpInternalHttpHttpEngine_$2_initWithOkioBufferedSource_withComSquareupOkhttpInternalHttpCacheRequest_withOkioBufferedSink_(self, capture$0, capture$1, capture$2);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readWithOkioBuffer:withLong:", "read", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "timeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "initWithOkioBufferedSource:withComSquareupOkhttpInternalHttpCacheRequest:withOkioBufferedSink:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cacheRequestClosed_", NULL, 0x0, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "val$source_", NULL, 0x1012, "Lokio.BufferedSource;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$cacheRequest_", NULL, 0x1012, "Lcom.squareup.okhttp.internal.http.CacheRequest;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$cacheBody_", NULL, 0x1012, "Lokio.BufferedSink;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ComSquareupOkhttpInternalHttpHttpEngine", "cacheWritingResponseWithComSquareupOkhttpInternalHttpCacheRequest:withComSquareupOkhttpResponse:" };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalHttpHttpEngine_$2 = { 2, "", "com.squareup.okhttp.internal.http", "HttpEngine", 0x8008, 4, methods, 4, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ComSquareupOkhttpInternalHttpHttpEngine_$2;
}

@end

void ComSquareupOkhttpInternalHttpHttpEngine_$2_initWithOkioBufferedSource_withComSquareupOkhttpInternalHttpCacheRequest_withOkioBufferedSink_(ComSquareupOkhttpInternalHttpHttpEngine_$2 *self, id<OkioBufferedSource> capture$0, id<ComSquareupOkhttpInternalHttpCacheRequest> capture$1, id<OkioBufferedSink> capture$2) {
  self->val$source_ = capture$0;
  self->val$cacheRequest_ = capture$1;
  self->val$cacheBody_ = capture$2;
  NSObject_init(self);
}

ComSquareupOkhttpInternalHttpHttpEngine_$2 *new_ComSquareupOkhttpInternalHttpHttpEngine_$2_initWithOkioBufferedSource_withComSquareupOkhttpInternalHttpCacheRequest_withOkioBufferedSink_(id<OkioBufferedSource> capture$0, id<ComSquareupOkhttpInternalHttpCacheRequest> capture$1, id<OkioBufferedSink> capture$2) {
  ComSquareupOkhttpInternalHttpHttpEngine_$2 *self = [ComSquareupOkhttpInternalHttpHttpEngine_$2 alloc];
  ComSquareupOkhttpInternalHttpHttpEngine_$2_initWithOkioBufferedSource_withComSquareupOkhttpInternalHttpCacheRequest_withOkioBufferedSink_(self, capture$0, capture$1, capture$2);
  return self;
}

ComSquareupOkhttpInternalHttpHttpEngine_$2 *create_ComSquareupOkhttpInternalHttpHttpEngine_$2_initWithOkioBufferedSource_withComSquareupOkhttpInternalHttpCacheRequest_withOkioBufferedSink_(id<OkioBufferedSource> capture$0, id<ComSquareupOkhttpInternalHttpCacheRequest> capture$1, id<OkioBufferedSink> capture$2) {
  return new_ComSquareupOkhttpInternalHttpHttpEngine_$2_initWithOkioBufferedSource_withComSquareupOkhttpInternalHttpCacheRequest_withOkioBufferedSink_(capture$0, capture$1, capture$2);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalHttpHttpEngine_$2)
