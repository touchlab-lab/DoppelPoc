//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/http/AuthenticatorAdapter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Authenticator.h"
#include "com/squareup/okhttp/Challenge.h"
#include "com/squareup/okhttp/Credentials.h"
#include "com/squareup/okhttp/Request.h"
#include "com/squareup/okhttp/Response.h"
#include "com/squareup/okhttp/internal/http/AuthenticatorAdapter.h"
#include "java/io/IOException.h"
#include "java/net/Authenticator.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/PasswordAuthentication.h"
#include "java/net/Proxy.h"
#include "java/net/SocketAddress.h"
#include "java/net/URL.h"
#include "java/util/List.h"

@interface ComSquareupOkhttpInternalHttpAuthenticatorAdapter ()

- (JavaNetInetAddress *)getConnectToInetAddressWithJavaNetProxy:(JavaNetProxy *)proxy
                                                 withJavaNetURL:(JavaNetURL *)url;

@end

__attribute__((unused)) static JavaNetInetAddress *ComSquareupOkhttpInternalHttpAuthenticatorAdapter_getConnectToInetAddressWithJavaNetProxy_withJavaNetURL_(ComSquareupOkhttpInternalHttpAuthenticatorAdapter *self, JavaNetProxy *proxy, JavaNetURL *url);

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpInternalHttpAuthenticatorAdapter)

id<ComSquareupOkhttpAuthenticator> ComSquareupOkhttpInternalHttpAuthenticatorAdapter_INSTANCE;

@implementation ComSquareupOkhttpInternalHttpAuthenticatorAdapter

- (ComSquareupOkhttpRequest *)authenticateWithJavaNetProxy:(JavaNetProxy *)proxy
                             withComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response {
  id<JavaUtilList> challenges = [((ComSquareupOkhttpResponse *) nil_chk(response)) challenges];
  ComSquareupOkhttpRequest *request = [response request];
  JavaNetURL *url = [((ComSquareupOkhttpRequest *) nil_chk(request)) url];
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(challenges)) size]; i < size; i++) {
    ComSquareupOkhttpChallenge *challenge = [challenges getWithInt:i];
    if (![@"Basic" equalsIgnoreCase:[((ComSquareupOkhttpChallenge *) nil_chk(challenge)) getScheme]]) continue;
    JavaNetPasswordAuthentication *auth = JavaNetAuthenticator_requestPasswordAuthenticationWithNSString_withJavaNetInetAddress_withInt_withNSString_withNSString_withNSString_withJavaNetURL_withJavaNetAuthenticator_RequestorType_([((JavaNetURL *) nil_chk(url)) getHost], ComSquareupOkhttpInternalHttpAuthenticatorAdapter_getConnectToInetAddressWithJavaNetProxy_withJavaNetURL_(self, proxy, url), [url getPort], [url getProtocol], [challenge getRealm], [challenge getScheme], url, JreLoadEnum(JavaNetAuthenticator_RequestorType, SERVER));
    if (auth == nil) continue;
    NSString *credential = ComSquareupOkhttpCredentials_basicWithNSString_withNSString_([((JavaNetPasswordAuthentication *) nil_chk(auth)) getUserName], [NSString stringWithCharacters:[auth getPassword]]);
    return [((ComSquareupOkhttpRequest_Builder *) nil_chk([((ComSquareupOkhttpRequest_Builder *) nil_chk([request newBuilder])) headerWithNSString:@"Authorization" withNSString:credential])) build];
  }
  return nil;
}

- (ComSquareupOkhttpRequest *)authenticateProxyWithJavaNetProxy:(JavaNetProxy *)proxy
                                  withComSquareupOkhttpResponse:(ComSquareupOkhttpResponse *)response {
  id<JavaUtilList> challenges = [((ComSquareupOkhttpResponse *) nil_chk(response)) challenges];
  ComSquareupOkhttpRequest *request = [response request];
  JavaNetURL *url = [((ComSquareupOkhttpRequest *) nil_chk(request)) url];
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(challenges)) size]; i < size; i++) {
    ComSquareupOkhttpChallenge *challenge = [challenges getWithInt:i];
    if (![@"Basic" equalsIgnoreCase:[((ComSquareupOkhttpChallenge *) nil_chk(challenge)) getScheme]]) continue;
    JavaNetInetSocketAddress *proxyAddress = (JavaNetInetSocketAddress *) cast_chk([((JavaNetProxy *) nil_chk(proxy)) address], [JavaNetInetSocketAddress class]);
    JavaNetPasswordAuthentication *auth = JavaNetAuthenticator_requestPasswordAuthenticationWithNSString_withJavaNetInetAddress_withInt_withNSString_withNSString_withNSString_withJavaNetURL_withJavaNetAuthenticator_RequestorType_([((JavaNetInetSocketAddress *) nil_chk(proxyAddress)) getHostName], ComSquareupOkhttpInternalHttpAuthenticatorAdapter_getConnectToInetAddressWithJavaNetProxy_withJavaNetURL_(self, proxy, url), [proxyAddress getPort], [((JavaNetURL *) nil_chk(url)) getProtocol], [challenge getRealm], [challenge getScheme], url, JreLoadEnum(JavaNetAuthenticator_RequestorType, PROXY));
    if (auth == nil) continue;
    NSString *credential = ComSquareupOkhttpCredentials_basicWithNSString_withNSString_([((JavaNetPasswordAuthentication *) nil_chk(auth)) getUserName], [NSString stringWithCharacters:[auth getPassword]]);
    return [((ComSquareupOkhttpRequest_Builder *) nil_chk([((ComSquareupOkhttpRequest_Builder *) nil_chk([request newBuilder])) headerWithNSString:@"Proxy-Authorization" withNSString:credential])) build];
  }
  return nil;
}

- (JavaNetInetAddress *)getConnectToInetAddressWithJavaNetProxy:(JavaNetProxy *)proxy
                                                 withJavaNetURL:(JavaNetURL *)url {
  return ComSquareupOkhttpInternalHttpAuthenticatorAdapter_getConnectToInetAddressWithJavaNetProxy_withJavaNetURL_(self, proxy, url);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpInternalHttpAuthenticatorAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [ComSquareupOkhttpInternalHttpAuthenticatorAdapter class]) {
    ComSquareupOkhttpInternalHttpAuthenticatorAdapter_INSTANCE = new_ComSquareupOkhttpInternalHttpAuthenticatorAdapter_init();
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpInternalHttpAuthenticatorAdapter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "authenticateWithJavaNetProxy:withComSquareupOkhttpResponse:", "authenticate", "Lcom.squareup.okhttp.Request;", 0x1, "Ljava.io.IOException;", NULL },
    { "authenticateProxyWithJavaNetProxy:withComSquareupOkhttpResponse:", "authenticateProxy", "Lcom.squareup.okhttp.Request;", 0x1, "Ljava.io.IOException;", NULL },
    { "getConnectToInetAddressWithJavaNetProxy:withJavaNetURL:", "getConnectToInetAddress", "Ljava.net.InetAddress;", 0x2, "Ljava.io.IOException;", NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x19, "Lcom.squareup.okhttp.Authenticator;", &ComSquareupOkhttpInternalHttpAuthenticatorAdapter_INSTANCE, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalHttpAuthenticatorAdapter = { 2, "AuthenticatorAdapter", "com.squareup.okhttp.internal.http", NULL, 0x11, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalHttpAuthenticatorAdapter;
}

@end

JavaNetInetAddress *ComSquareupOkhttpInternalHttpAuthenticatorAdapter_getConnectToInetAddressWithJavaNetProxy_withJavaNetURL_(ComSquareupOkhttpInternalHttpAuthenticatorAdapter *self, JavaNetProxy *proxy, JavaNetURL *url) {
  return (proxy != nil && [proxy type] != JreLoadEnum(JavaNetProxy_Type, DIRECT)) ? [((JavaNetInetSocketAddress *) nil_chk(((JavaNetInetSocketAddress *) cast_chk([proxy address], [JavaNetInetSocketAddress class])))) getAddress] : JavaNetInetAddress_getByNameWithNSString_([((JavaNetURL *) nil_chk(url)) getHost]);
}

void ComSquareupOkhttpInternalHttpAuthenticatorAdapter_init(ComSquareupOkhttpInternalHttpAuthenticatorAdapter *self) {
  NSObject_init(self);
}

ComSquareupOkhttpInternalHttpAuthenticatorAdapter *new_ComSquareupOkhttpInternalHttpAuthenticatorAdapter_init() {
  ComSquareupOkhttpInternalHttpAuthenticatorAdapter *self = [ComSquareupOkhttpInternalHttpAuthenticatorAdapter alloc];
  ComSquareupOkhttpInternalHttpAuthenticatorAdapter_init(self);
  return self;
}

ComSquareupOkhttpInternalHttpAuthenticatorAdapter *create_ComSquareupOkhttpInternalHttpAuthenticatorAdapter_init() {
  return new_ComSquareupOkhttpInternalHttpAuthenticatorAdapter_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalHttpAuthenticatorAdapter)
