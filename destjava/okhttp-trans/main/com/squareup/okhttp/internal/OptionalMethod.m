//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/OptionalMethod.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/internal/OptionalMethod.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"

@interface ComSquareupOkhttpInternalOptionalMethod () {
 @public
  IOSClass *returnType_;
  NSString *methodName_;
  IOSObjectArray *methodParams_;
}

- (JavaLangReflectMethod *)getMethodWithIOSClass:(IOSClass *)clazz;

+ (JavaLangReflectMethod *)getPublicMethodWithIOSClass:(IOSClass *)clazz
                                          withNSString:(NSString *)methodName
                                     withIOSClassArray:(IOSObjectArray *)parameterTypes;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalOptionalMethod, returnType_, IOSClass *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalOptionalMethod, methodName_, NSString *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpInternalOptionalMethod, methodParams_, IOSObjectArray *)

__attribute__((unused)) static JavaLangReflectMethod *ComSquareupOkhttpInternalOptionalMethod_getMethodWithIOSClass_(ComSquareupOkhttpInternalOptionalMethod *self, IOSClass *clazz);

__attribute__((unused)) static JavaLangReflectMethod *ComSquareupOkhttpInternalOptionalMethod_getPublicMethodWithIOSClass_withNSString_withIOSClassArray_(IOSClass *clazz, NSString *methodName, IOSObjectArray *parameterTypes);

@implementation ComSquareupOkhttpInternalOptionalMethod

- (instancetype)initWithIOSClass:(IOSClass *)returnType
                    withNSString:(NSString *)methodName
               withIOSClassArray:(IOSObjectArray *)methodParams {
  ComSquareupOkhttpInternalOptionalMethod_initWithIOSClass_withNSString_withIOSClassArray_(self, returnType, methodName, methodParams);
  return self;
}

- (jboolean)isSupportedWithId:(id)target {
  return ComSquareupOkhttpInternalOptionalMethod_getMethodWithIOSClass_(self, [((id) nil_chk(target)) getClass]) != nil;
}

- (id)invokeOptionalWithId:(id)target
         withNSObjectArray:(IOSObjectArray *)args {
  JavaLangReflectMethod *m = ComSquareupOkhttpInternalOptionalMethod_getMethodWithIOSClass_(self, [((id) nil_chk(target)) getClass]);
  if (m == nil) {
    return nil;
  }
  @try {
    return [((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:target withNSObjectArray:args];
  }
  @catch (JavaLangIllegalAccessException *e) {
    return nil;
  }
}

- (id)invokeOptionalWithoutCheckedExceptionWithId:(id)target
                                withNSObjectArray:(IOSObjectArray *)args {
  @try {
    return [self invokeOptionalWithId:target withNSObjectArray:args];
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    NSException *targetException = [((JavaLangReflectInvocationTargetException *) nil_chk(e)) getTargetException];
    if ([targetException isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(targetException, [JavaLangRuntimeException class]);
    }
    JavaLangAssertionError *error = new_JavaLangAssertionError_initWithId_(@"Unexpected exception");
    (void) [error initCauseWithNSException:targetException];
    @throw error;
  }
}

- (id)invokeWithId:(id)target
 withNSObjectArray:(IOSObjectArray *)args {
  JavaLangReflectMethod *m = ComSquareupOkhttpInternalOptionalMethod_getMethodWithIOSClass_(self, [((id) nil_chk(target)) getClass]);
  if (m == nil) {
    @throw new_JavaLangAssertionError_initWithId_(JreStrcat("$$$@", @"Method ", methodName_, @" not supported for object ", target));
  }
  @try {
    return [((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:target withNSObjectArray:args];
  }
  @catch (JavaLangIllegalAccessException *e) {
    JavaLangAssertionError *error = new_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"Unexpectedly could not call: ", m));
    (void) [error initCauseWithNSException:e];
    @throw error;
  }
}

- (id)invokeWithoutCheckedExceptionWithId:(id)target
                        withNSObjectArray:(IOSObjectArray *)args {
  @try {
    return [self invokeWithId:target withNSObjectArray:args];
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    NSException *targetException = [((JavaLangReflectInvocationTargetException *) nil_chk(e)) getTargetException];
    if ([targetException isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(targetException, [JavaLangRuntimeException class]);
    }
    JavaLangAssertionError *error = new_JavaLangAssertionError_initWithId_(@"Unexpected exception");
    (void) [error initCauseWithNSException:targetException];
    @throw error;
  }
}

- (JavaLangReflectMethod *)getMethodWithIOSClass:(IOSClass *)clazz {
  return ComSquareupOkhttpInternalOptionalMethod_getMethodWithIOSClass_(self, clazz);
}

+ (JavaLangReflectMethod *)getPublicMethodWithIOSClass:(IOSClass *)clazz
                                          withNSString:(NSString *)methodName
                                     withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return ComSquareupOkhttpInternalOptionalMethod_getPublicMethodWithIOSClass_withNSString_withIOSClassArray_(clazz, methodName, parameterTypes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withNSString:withIOSClassArray:", "OptionalMethod", NULL, 0x81, NULL, "(Ljava/lang/Class<*>;Ljava/lang/String;[Ljava/lang/Class;)V" },
    { "isSupportedWithId:", "isSupported", "Z", 0x1, NULL, "(TT;)Z" },
    { "invokeOptionalWithId:withNSObjectArray:", "invokeOptional", "Ljava.lang.Object;", 0x81, "Ljava.lang.reflect.InvocationTargetException;", "(TT;[Ljava/lang/Object;)Ljava/lang/Object;" },
    { "invokeOptionalWithoutCheckedExceptionWithId:withNSObjectArray:", "invokeOptionalWithoutCheckedException", "Ljava.lang.Object;", 0x81, NULL, "(TT;[Ljava/lang/Object;)Ljava/lang/Object;" },
    { "invokeWithId:withNSObjectArray:", "invoke", "Ljava.lang.Object;", 0x81, "Ljava.lang.reflect.InvocationTargetException;", "(TT;[Ljava/lang/Object;)Ljava/lang/Object;" },
    { "invokeWithoutCheckedExceptionWithId:withNSObjectArray:", "invokeWithoutCheckedException", "Ljava.lang.Object;", 0x81, NULL, "(TT;[Ljava/lang/Object;)Ljava/lang/Object;" },
    { "getMethodWithIOSClass:", "getMethod", "Ljava.lang.reflect.Method;", 0x2, NULL, "(Ljava/lang/Class<*>;)Ljava/lang/reflect/Method;" },
    { "getPublicMethodWithIOSClass:withNSString:withIOSClassArray:", "getPublicMethod", "Ljava.lang.reflect.Method;", 0xa, NULL, "(Ljava/lang/Class<*>;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "returnType_", NULL, 0x12, "Ljava.lang.Class;", NULL, "Ljava/lang/Class<*>;", .constantValue.asLong = 0 },
    { "methodName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "methodParams_", NULL, 0x12, "[Ljava.lang.Class;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalOptionalMethod = { 2, "OptionalMethod", "com.squareup.okhttp.internal", NULL, 0x0, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_ComSquareupOkhttpInternalOptionalMethod;
}

@end

void ComSquareupOkhttpInternalOptionalMethod_initWithIOSClass_withNSString_withIOSClassArray_(ComSquareupOkhttpInternalOptionalMethod *self, IOSClass *returnType, NSString *methodName, IOSObjectArray *methodParams) {
  NSObject_init(self);
  self->returnType_ = returnType;
  self->methodName_ = methodName;
  self->methodParams_ = methodParams;
}

ComSquareupOkhttpInternalOptionalMethod *new_ComSquareupOkhttpInternalOptionalMethod_initWithIOSClass_withNSString_withIOSClassArray_(IOSClass *returnType, NSString *methodName, IOSObjectArray *methodParams) {
  ComSquareupOkhttpInternalOptionalMethod *self = [ComSquareupOkhttpInternalOptionalMethod alloc];
  ComSquareupOkhttpInternalOptionalMethod_initWithIOSClass_withNSString_withIOSClassArray_(self, returnType, methodName, methodParams);
  return self;
}

ComSquareupOkhttpInternalOptionalMethod *create_ComSquareupOkhttpInternalOptionalMethod_initWithIOSClass_withNSString_withIOSClassArray_(IOSClass *returnType, NSString *methodName, IOSObjectArray *methodParams) {
  return new_ComSquareupOkhttpInternalOptionalMethod_initWithIOSClass_withNSString_withIOSClassArray_(returnType, methodName, methodParams);
}

JavaLangReflectMethod *ComSquareupOkhttpInternalOptionalMethod_getMethodWithIOSClass_(ComSquareupOkhttpInternalOptionalMethod *self, IOSClass *clazz) {
  JavaLangReflectMethod *method = nil;
  if (self->methodName_ != nil) {
    method = ComSquareupOkhttpInternalOptionalMethod_getPublicMethodWithIOSClass_withNSString_withIOSClassArray_(clazz, self->methodName_, self->methodParams_);
    if (method != nil && self->returnType_ != nil && ![self->returnType_ isAssignableFrom:[method getReturnType]]) {
      method = nil;
    }
  }
  return method;
}

JavaLangReflectMethod *ComSquareupOkhttpInternalOptionalMethod_getPublicMethodWithIOSClass_withNSString_withIOSClassArray_(IOSClass *clazz, NSString *methodName, IOSObjectArray *parameterTypes) {
  ComSquareupOkhttpInternalOptionalMethod_initialize();
  JavaLangReflectMethod *method = nil;
  @try {
    method = [((IOSClass *) nil_chk(clazz)) getMethod:methodName parameterTypes:parameterTypes];
    if (([((JavaLangReflectMethod *) nil_chk(method)) getModifiers] & JavaLangReflectModifier_PUBLIC) == 0) {
      method = nil;
    }
  }
  @catch (JavaLangNoSuchMethodException *e) {
  }
  return method;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalOptionalMethod)
