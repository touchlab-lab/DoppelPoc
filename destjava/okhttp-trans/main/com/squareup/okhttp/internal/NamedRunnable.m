//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/internal/NamedRunnable.h"
#include "java/lang/Thread.h"

@implementation ComSquareupOkhttpInternalNamedRunnable

- (instancetype)initWithNSString:(NSString *)format
               withNSObjectArray:(IOSObjectArray *)args {
  ComSquareupOkhttpInternalNamedRunnable_initWithNSString_withNSObjectArray_(self, format, args);
  return self;
}

- (void)run {
  NSString *oldName = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName];
  [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setNameWithNSString:name_];
  @try {
    [self execute];
  }
  @finally {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setNameWithNSString:oldName];
  }
}

- (void)execute {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSObjectArray:", "NamedRunnable", NULL, 0x81, NULL, NULL },
    { "run", NULL, "V", 0x11, NULL, NULL },
    { "execute", NULL, "V", 0x404, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x14, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpInternalNamedRunnable = { 2, "NamedRunnable", "com.squareup.okhttp.internal", NULL, 0x401, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpInternalNamedRunnable;
}

@end

void ComSquareupOkhttpInternalNamedRunnable_initWithNSString_withNSObjectArray_(ComSquareupOkhttpInternalNamedRunnable *self, NSString *format, IOSObjectArray *args) {
  NSObject_init(self);
  self->name_ = NSString_formatWithNSString_withNSObjectArray_(format, args);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpInternalNamedRunnable)
