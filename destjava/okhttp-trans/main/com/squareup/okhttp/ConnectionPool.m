//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Address.h"
#include "com/squareup/okhttp/Connection.h"
#include "com/squareup/okhttp/ConnectionPool.h"
#include "com/squareup/okhttp/Route.h"
#include "com/squareup/okhttp/internal/Platform.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/net/Socket.h"
#include "java/net/SocketException.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"

@interface ComSquareupOkhttpConnectionPool () {
 @public
  jint maxIdleConnections_;
  jlong keepAliveDurationNs_;
  JavaUtilLinkedList *connections_;
  id<JavaUtilConcurrentExecutor> executor_;
  id<JavaLangRunnable> connectionsCleanupRunnable_;
}

- (void)addConnectionWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection;

- (void)runCleanupUntilPoolIsEmpty;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnectionPool, connections_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnectionPool, executor_, id<JavaUtilConcurrentExecutor>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnectionPool, connectionsCleanupRunnable_, id<JavaLangRunnable>)

inline jlong ComSquareupOkhttpConnectionPool_get_DEFAULT_KEEP_ALIVE_DURATION_MS();
#define ComSquareupOkhttpConnectionPool_DEFAULT_KEEP_ALIVE_DURATION_MS 300000LL
J2OBJC_STATIC_FIELD_CONSTANT(ComSquareupOkhttpConnectionPool, DEFAULT_KEEP_ALIVE_DURATION_MS, jlong)

inline ComSquareupOkhttpConnectionPool *ComSquareupOkhttpConnectionPool_get_systemDefault();
static ComSquareupOkhttpConnectionPool *ComSquareupOkhttpConnectionPool_systemDefault;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSquareupOkhttpConnectionPool, systemDefault, ComSquareupOkhttpConnectionPool *)

__attribute__((unused)) static void ComSquareupOkhttpConnectionPool_addConnectionWithComSquareupOkhttpConnection_(ComSquareupOkhttpConnectionPool *self, ComSquareupOkhttpConnection *connection);

__attribute__((unused)) static void ComSquareupOkhttpConnectionPool_runCleanupUntilPoolIsEmpty(ComSquareupOkhttpConnectionPool *self);

@interface ComSquareupOkhttpConnectionPool_$1 : NSObject < JavaLangRunnable > {
 @public
  ComSquareupOkhttpConnectionPool *this$0_;
}

- (void)run;

- (instancetype)initWithComSquareupOkhttpConnectionPool:(ComSquareupOkhttpConnectionPool *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ComSquareupOkhttpConnectionPool_$1)

J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnectionPool_$1, this$0_, ComSquareupOkhttpConnectionPool *)

__attribute__((unused)) static void ComSquareupOkhttpConnectionPool_$1_initWithComSquareupOkhttpConnectionPool_(ComSquareupOkhttpConnectionPool_$1 *self, ComSquareupOkhttpConnectionPool *outer$);

__attribute__((unused)) static ComSquareupOkhttpConnectionPool_$1 *new_ComSquareupOkhttpConnectionPool_$1_initWithComSquareupOkhttpConnectionPool_(ComSquareupOkhttpConnectionPool *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSquareupOkhttpConnectionPool_$1 *create_ComSquareupOkhttpConnectionPool_$1_initWithComSquareupOkhttpConnectionPool_(ComSquareupOkhttpConnectionPool *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComSquareupOkhttpConnectionPool_$1)

J2OBJC_INITIALIZED_DEFN(ComSquareupOkhttpConnectionPool)

@implementation ComSquareupOkhttpConnectionPool

- (instancetype)initWithInt:(jint)maxIdleConnections
                   withLong:(jlong)keepAliveDurationMs {
  ComSquareupOkhttpConnectionPool_initWithInt_withLong_(self, maxIdleConnections, keepAliveDurationMs);
  return self;
}

+ (ComSquareupOkhttpConnectionPool *)getDefault {
  return ComSquareupOkhttpConnectionPool_getDefault();
}

- (jint)getConnectionCount {
  @synchronized(self) {
    return [((JavaUtilLinkedList *) nil_chk(connections_)) size];
  }
}

- (jint)getSpdyConnectionCount {
  @synchronized(self) {
    return [self getMultiplexedConnectionCount];
  }
}

- (jint)getMultiplexedConnectionCount {
  @synchronized(self) {
    jint total = 0;
    for (ComSquareupOkhttpConnection * __strong connection in nil_chk(connections_)) {
      if ([((ComSquareupOkhttpConnection *) nil_chk(connection)) isSpdy]) total++;
    }
    return total;
  }
}

- (jint)getHttpConnectionCount {
  @synchronized(self) {
    return [((JavaUtilLinkedList *) nil_chk(connections_)) size] - [self getMultiplexedConnectionCount];
  }
}

- (ComSquareupOkhttpConnection *)getWithComSquareupOkhttpAddress:(ComSquareupOkhttpAddress *)address {
  @synchronized(self) {
    ComSquareupOkhttpConnection *foundConnection = nil;
    for (id<JavaUtilListIterator> i = [connections_ listIteratorWithInt:[((JavaUtilLinkedList *) nil_chk(connections_)) size]]; [((id<JavaUtilListIterator>) nil_chk(i)) hasPrevious]; ) {
      ComSquareupOkhttpConnection *connection = [i previous];
      if (![((ComSquareupOkhttpAddress *) nil_chk([((ComSquareupOkhttpRoute *) nil_chk([((ComSquareupOkhttpConnection *) nil_chk(connection)) getRoute])) getAddress])) isEqual:address] || ![connection isAlive] || JavaLangSystem_nanoTime() - [connection getIdleStartTimeNs] >= keepAliveDurationNs_) {
        continue;
      }
      [i remove];
      if (![connection isSpdy]) {
        @try {
          [((ComSquareupOkhttpInternalPlatform *) nil_chk(ComSquareupOkhttpInternalPlatform_get())) tagSocketWithJavaNetSocket:[connection getSocket]];
        }
        @catch (JavaNetSocketException *e) {
          ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaNetSocket_([connection getSocket]);
          [((ComSquareupOkhttpInternalPlatform *) nil_chk(ComSquareupOkhttpInternalPlatform_get())) logWWithNSString:JreStrcat("$@", @"Unable to tagSocket(): ", e)];
          continue;
        }
      }
      foundConnection = connection;
      break;
    }
    if (foundConnection != nil && [foundConnection isSpdy]) {
      [connections_ addFirstWithId:foundConnection];
    }
    return foundConnection;
  }
}

- (void)recycleWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection {
  if ([((ComSquareupOkhttpConnection *) nil_chk(connection)) isSpdy]) {
    return;
  }
  if (![connection clearOwner]) {
    return;
  }
  if (![connection isAlive]) {
    ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaNetSocket_([connection getSocket]);
    return;
  }
  @try {
    [((ComSquareupOkhttpInternalPlatform *) nil_chk(ComSquareupOkhttpInternalPlatform_get())) untagSocketWithJavaNetSocket:[connection getSocket]];
  }
  @catch (JavaNetSocketException *e) {
    [((ComSquareupOkhttpInternalPlatform *) nil_chk(ComSquareupOkhttpInternalPlatform_get())) logWWithNSString:JreStrcat("$@", @"Unable to untagSocket(): ", e)];
    ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaNetSocket_([connection getSocket]);
    return;
  }
  @synchronized(self) {
    ComSquareupOkhttpConnectionPool_addConnectionWithComSquareupOkhttpConnection_(self, connection);
    [connection incrementRecycleCount];
    [connection resetIdleStartTime];
  }
}

- (void)addConnectionWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection {
  ComSquareupOkhttpConnectionPool_addConnectionWithComSquareupOkhttpConnection_(self, connection);
}

- (void)shareWithComSquareupOkhttpConnection:(ComSquareupOkhttpConnection *)connection {
  if (![((ComSquareupOkhttpConnection *) nil_chk(connection)) isSpdy]) @throw new_JavaLangIllegalArgumentException_init();
  if (![connection isAlive]) return;
  @synchronized(self) {
    ComSquareupOkhttpConnectionPool_addConnectionWithComSquareupOkhttpConnection_(self, connection);
  }
}

- (void)evictAll {
  id<JavaUtilList> toEvict;
  @synchronized(self) {
    toEvict = new_JavaUtilArrayList_initWithJavaUtilCollection_(connections_);
    [((JavaUtilLinkedList *) nil_chk(connections_)) clear];
  }
  for (jint i = 0, size = [toEvict size]; i < size; i++) {
    ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaNetSocket_([((ComSquareupOkhttpConnection *) nil_chk([toEvict getWithInt:i])) getSocket]);
  }
}

- (void)runCleanupUntilPoolIsEmpty {
  ComSquareupOkhttpConnectionPool_runCleanupUntilPoolIsEmpty(self);
}

- (jboolean)performCleanup {
  id<JavaUtilList> evictableConnections;
  @synchronized(self) {
    if ([((JavaUtilLinkedList *) nil_chk(connections_)) isEmpty]) return false;
    evictableConnections = new_JavaUtilArrayList_init();
    jint idleConnectionCount = 0;
    jlong now = JavaLangSystem_nanoTime();
    jlong nanosUntilNextEviction = keepAliveDurationNs_;
    for (id<JavaUtilListIterator> i = [connections_ listIteratorWithInt:[connections_ size]]; [((id<JavaUtilListIterator>) nil_chk(i)) hasPrevious]; ) {
      ComSquareupOkhttpConnection *connection = [i previous];
      jlong nanosUntilEviction = [((ComSquareupOkhttpConnection *) nil_chk(connection)) getIdleStartTimeNs] + keepAliveDurationNs_ - now;
      if (nanosUntilEviction <= 0 || ![connection isAlive]) {
        [i remove];
        [evictableConnections addWithId:connection];
      }
      else if ([connection isIdle]) {
        idleConnectionCount++;
        nanosUntilNextEviction = JavaLangMath_minWithLong_withLong_(nanosUntilNextEviction, nanosUntilEviction);
      }
    }
    for (id<JavaUtilListIterator> i = [connections_ listIteratorWithInt:[connections_ size]]; [((id<JavaUtilListIterator>) nil_chk(i)) hasPrevious] && idleConnectionCount > maxIdleConnections_; ) {
      ComSquareupOkhttpConnection *connection = [i previous];
      if ([((ComSquareupOkhttpConnection *) nil_chk(connection)) isIdle]) {
        [evictableConnections addWithId:connection];
        [i remove];
        --idleConnectionCount;
      }
    }
    if ([evictableConnections isEmpty]) {
      @try {
        jlong millisUntilNextEviction = nanosUntilNextEviction / (1000 * 1000);
        jlong remainderNanos = nanosUntilNextEviction - millisUntilNextEviction * (1000 * 1000);
        [self waitWithLong:millisUntilNextEviction withInt:(jint) remainderNanos];
        return true;
      }
      @catch (JavaLangInterruptedException *ignored) {
      }
    }
  }
  for (jint i = 0, size = [evictableConnections size]; i < size; i++) {
    ComSquareupOkhttpConnection *expiredConnection = [evictableConnections getWithInt:i];
    ComSquareupOkhttpInternalUtil_closeQuietlyWithJavaNetSocket_([((ComSquareupOkhttpConnection *) nil_chk(expiredConnection)) getSocket]);
  }
  return true;
}

- (void)replaceCleanupExecutorForTestsWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)cleanupExecutor {
  self->executor_ = cleanupExecutor;
}

- (id<JavaUtilList>)getConnections {
  @synchronized(self) {
    return new_JavaUtilArrayList_initWithJavaUtilCollection_(connections_);
  }
}

+ (void)initialize {
  if (self == [ComSquareupOkhttpConnectionPool class]) {
    {
      NSString *keepAlive = JavaLangSystem_getPropertyWithNSString_(@"http.keepAlive");
      NSString *keepAliveDuration = JavaLangSystem_getPropertyWithNSString_(@"http.keepAliveDuration");
      NSString *maxIdleConnections = JavaLangSystem_getPropertyWithNSString_(@"http.maxConnections");
      jlong keepAliveDurationMs = keepAliveDuration != nil ? JavaLangLong_parseLongWithNSString_(keepAliveDuration) : ComSquareupOkhttpConnectionPool_DEFAULT_KEEP_ALIVE_DURATION_MS;
      if (keepAlive != nil && !JavaLangBoolean_parseBooleanWithNSString_(keepAlive)) {
        ComSquareupOkhttpConnectionPool_systemDefault = new_ComSquareupOkhttpConnectionPool_initWithInt_withLong_(0, keepAliveDurationMs);
      }
      else if (maxIdleConnections != nil) {
        ComSquareupOkhttpConnectionPool_systemDefault = new_ComSquareupOkhttpConnectionPool_initWithInt_withLong_(JavaLangInteger_parseIntWithNSString_(maxIdleConnections), keepAliveDurationMs);
      }
      else {
        ComSquareupOkhttpConnectionPool_systemDefault = new_ComSquareupOkhttpConnectionPool_initWithInt_withLong_(5, keepAliveDurationMs);
      }
    }
    J2OBJC_SET_INITIALIZED(ComSquareupOkhttpConnectionPool)
  }
}

+ (IOSObjectArray *)__annotations_getSpdyConnectionCount {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withLong:", "ConnectionPool", NULL, 0x1, NULL, NULL },
    { "getDefault", NULL, "Lcom.squareup.okhttp.ConnectionPool;", 0x9, NULL, NULL },
    { "getConnectionCount", NULL, "I", 0x21, NULL, NULL },
    { "getSpdyConnectionCount", NULL, "I", 0x21, NULL, NULL },
    { "getMultiplexedConnectionCount", NULL, "I", 0x21, NULL, NULL },
    { "getHttpConnectionCount", NULL, "I", 0x21, NULL, NULL },
    { "getWithComSquareupOkhttpAddress:", "get", "Lcom.squareup.okhttp.Connection;", 0x21, NULL, NULL },
    { "recycleWithComSquareupOkhttpConnection:", "recycle", "V", 0x0, NULL, NULL },
    { "addConnectionWithComSquareupOkhttpConnection:", "addConnection", "V", 0x2, NULL, NULL },
    { "shareWithComSquareupOkhttpConnection:", "share", "V", 0x0, NULL, NULL },
    { "evictAll", NULL, "V", 0x1, NULL, NULL },
    { "runCleanupUntilPoolIsEmpty", NULL, "V", 0x2, NULL, NULL },
    { "performCleanup", NULL, "Z", 0x0, NULL, NULL },
    { "replaceCleanupExecutorForTestsWithJavaUtilConcurrentExecutor:", "replaceCleanupExecutorForTests", "V", 0x0, NULL, NULL },
    { "getConnections", NULL, "Ljava.util.List;", 0x20, NULL, "()Ljava/util/List<Lcom/squareup/okhttp/Connection;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_KEEP_ALIVE_DURATION_MS", "DEFAULT_KEEP_ALIVE_DURATION_MS", 0x1a, "J", NULL, NULL, .constantValue.asLong = ComSquareupOkhttpConnectionPool_DEFAULT_KEEP_ALIVE_DURATION_MS },
    { "systemDefault", "systemDefault", 0x1a, "Lcom.squareup.okhttp.ConnectionPool;", &ComSquareupOkhttpConnectionPool_systemDefault, NULL, .constantValue.asLong = 0 },
    { "maxIdleConnections_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "keepAliveDurationNs_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "connections_", NULL, 0x12, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lcom/squareup/okhttp/Connection;>;", .constantValue.asLong = 0 },
    { "executor_", NULL, 0x2, "Ljava.util.concurrent.Executor;", NULL, NULL, .constantValue.asLong = 0 },
    { "connectionsCleanupRunnable_", NULL, 0x12, "Ljava.lang.Runnable;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpConnectionPool = { 2, "ConnectionPool", "com.squareup.okhttp", NULL, 0x11, 15, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpConnectionPool;
}

@end

void ComSquareupOkhttpConnectionPool_initWithInt_withLong_(ComSquareupOkhttpConnectionPool *self, jint maxIdleConnections, jlong keepAliveDurationMs) {
  NSObject_init(self);
  self->connections_ = new_JavaUtilLinkedList_init();
  self->executor_ = new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(0, 1, 60LL, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), new_JavaUtilConcurrentLinkedBlockingQueue_init(), ComSquareupOkhttpInternalUtil_threadFactoryWithNSString_withBoolean_(@"OkHttp ConnectionPool", true));
  self->connectionsCleanupRunnable_ = new_ComSquareupOkhttpConnectionPool_$1_initWithComSquareupOkhttpConnectionPool_(self);
  self->maxIdleConnections_ = maxIdleConnections;
  self->keepAliveDurationNs_ = keepAliveDurationMs * 1000 * 1000;
}

ComSquareupOkhttpConnectionPool *new_ComSquareupOkhttpConnectionPool_initWithInt_withLong_(jint maxIdleConnections, jlong keepAliveDurationMs) {
  ComSquareupOkhttpConnectionPool *self = [ComSquareupOkhttpConnectionPool alloc];
  ComSquareupOkhttpConnectionPool_initWithInt_withLong_(self, maxIdleConnections, keepAliveDurationMs);
  return self;
}

ComSquareupOkhttpConnectionPool *create_ComSquareupOkhttpConnectionPool_initWithInt_withLong_(jint maxIdleConnections, jlong keepAliveDurationMs) {
  return new_ComSquareupOkhttpConnectionPool_initWithInt_withLong_(maxIdleConnections, keepAliveDurationMs);
}

ComSquareupOkhttpConnectionPool *ComSquareupOkhttpConnectionPool_getDefault() {
  ComSquareupOkhttpConnectionPool_initialize();
  return ComSquareupOkhttpConnectionPool_systemDefault;
}

void ComSquareupOkhttpConnectionPool_addConnectionWithComSquareupOkhttpConnection_(ComSquareupOkhttpConnectionPool *self, ComSquareupOkhttpConnection *connection) {
  jboolean empty = [((JavaUtilLinkedList *) nil_chk(self->connections_)) isEmpty];
  [self->connections_ addFirstWithId:connection];
  if (empty) {
    [((id<JavaUtilConcurrentExecutor>) nil_chk(self->executor_)) executeWithJavaLangRunnable:self->connectionsCleanupRunnable_];
  }
  else {
    [self notifyAll];
  }
}

void ComSquareupOkhttpConnectionPool_runCleanupUntilPoolIsEmpty(ComSquareupOkhttpConnectionPool *self) {
  while (true) {
    if (![self performCleanup]) return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpConnectionPool)

@implementation ComSquareupOkhttpConnectionPool_$1

- (void)run {
  ComSquareupOkhttpConnectionPool_runCleanupUntilPoolIsEmpty(this$0_);
}

- (instancetype)initWithComSquareupOkhttpConnectionPool:(ComSquareupOkhttpConnectionPool *)outer$ {
  ComSquareupOkhttpConnectionPool_$1_initWithComSquareupOkhttpConnectionPool_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithComSquareupOkhttpConnectionPool:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.squareup.okhttp.ConnectionPool;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpConnectionPool_$1 = { 2, "", "com.squareup.okhttp", "ConnectionPool", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpConnectionPool_$1;
}

@end

void ComSquareupOkhttpConnectionPool_$1_initWithComSquareupOkhttpConnectionPool_(ComSquareupOkhttpConnectionPool_$1 *self, ComSquareupOkhttpConnectionPool *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComSquareupOkhttpConnectionPool_$1 *new_ComSquareupOkhttpConnectionPool_$1_initWithComSquareupOkhttpConnectionPool_(ComSquareupOkhttpConnectionPool *outer$) {
  ComSquareupOkhttpConnectionPool_$1 *self = [ComSquareupOkhttpConnectionPool_$1 alloc];
  ComSquareupOkhttpConnectionPool_$1_initWithComSquareupOkhttpConnectionPool_(self, outer$);
  return self;
}

ComSquareupOkhttpConnectionPool_$1 *create_ComSquareupOkhttpConnectionPool_$1_initWithComSquareupOkhttpConnectionPool_(ComSquareupOkhttpConnectionPool *outer$) {
  return new_ComSquareupOkhttpConnectionPool_$1_initWithComSquareupOkhttpConnectionPool_(outer$);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpConnectionPool_$1)
