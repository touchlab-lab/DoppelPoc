//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/Connection.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Address.h"
#include "com/squareup/okhttp/Authenticator.h"
#include "com/squareup/okhttp/CertificatePinner.h"
#include "com/squareup/okhttp/Connection.h"
#include "com/squareup/okhttp/ConnectionPool.h"
#include "com/squareup/okhttp/ConnectionSpec.h"
#include "com/squareup/okhttp/Handshake.h"
#include "com/squareup/okhttp/Headers.h"
#include "com/squareup/okhttp/OkHttpClient.h"
#include "com/squareup/okhttp/Protocol.h"
#include "com/squareup/okhttp/Request.h"
#include "com/squareup/okhttp/Response.h"
#include "com/squareup/okhttp/Route.h"
#include "com/squareup/okhttp/internal/Platform.h"
#include "com/squareup/okhttp/internal/RouteDatabase.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "com/squareup/okhttp/internal/http/HttpConnection.h"
#include "com/squareup/okhttp/internal/http/HttpEngine.h"
#include "com/squareup/okhttp/internal/http/HttpTransport.h"
#include "com/squareup/okhttp/internal/http/OkHeaders.h"
#include "com/squareup/okhttp/internal/http/SpdyTransport.h"
#include "com/squareup/okhttp/internal/http/Transport.h"
#include "com/squareup/okhttp/internal/spdy/SpdyConnection.h"
#include "com/squareup/okhttp/internal/tls/OkHostnameVerifier.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/Proxy.h"
#include "java/net/Socket.h"
#include "java/net/URL.h"
#include "java/security/Principal.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "javax/net/SocketFactory.h"
#include "javax/net/ssl/HostnameVerifier.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "okio/Source.h"

@interface ComSquareupOkhttpConnection () {
 @public
  ComSquareupOkhttpConnectionPool *pool_;
  ComSquareupOkhttpRoute *route_;
  JavaNetSocket *socket_;
  jboolean connected_;
  ComSquareupOkhttpInternalHttpHttpConnection *httpConnection_;
  ComSquareupOkhttpInternalSpdySpdyConnection *spdyConnection_;
  ComSquareupOkhttpProtocol *protocol_;
  jlong idleStartTimeNs_;
  ComSquareupOkhttpHandshake *handshake_;
  jint recycleCount_;
  id owner_;
}

- (ComSquareupOkhttpRequest *)tunnelRequestWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request;

- (void)upgradeToTlsWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)tunnelRequest
                                         withInt:(jint)readTimeout
                                         withInt:(jint)writeTimeout;

- (void)makeTunnelWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request
                                       withInt:(jint)readTimeout
                                       withInt:(jint)writeTimeout;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnection, pool_, ComSquareupOkhttpConnectionPool *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnection, route_, ComSquareupOkhttpRoute *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnection, socket_, JavaNetSocket *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnection, httpConnection_, ComSquareupOkhttpInternalHttpHttpConnection *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnection, spdyConnection_, ComSquareupOkhttpInternalSpdySpdyConnection *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnection, protocol_, ComSquareupOkhttpProtocol *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnection, handshake_, ComSquareupOkhttpHandshake *)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpConnection, owner_, id)

__attribute__((unused)) static ComSquareupOkhttpRequest *ComSquareupOkhttpConnection_tunnelRequestWithComSquareupOkhttpRequest_(ComSquareupOkhttpConnection *self, ComSquareupOkhttpRequest *request);

__attribute__((unused)) static void ComSquareupOkhttpConnection_upgradeToTlsWithComSquareupOkhttpRequest_withInt_withInt_(ComSquareupOkhttpConnection *self, ComSquareupOkhttpRequest *tunnelRequest, jint readTimeout, jint writeTimeout);

__attribute__((unused)) static void ComSquareupOkhttpConnection_makeTunnelWithComSquareupOkhttpRequest_withInt_withInt_(ComSquareupOkhttpConnection *self, ComSquareupOkhttpRequest *request, jint readTimeout, jint writeTimeout);

@implementation ComSquareupOkhttpConnection

- (instancetype)initWithComSquareupOkhttpConnectionPool:(ComSquareupOkhttpConnectionPool *)pool
                             withComSquareupOkhttpRoute:(ComSquareupOkhttpRoute *)route {
  ComSquareupOkhttpConnection_initWithComSquareupOkhttpConnectionPool_withComSquareupOkhttpRoute_(self, pool, route);
  return self;
}

- (id)getOwner {
  @synchronized(pool_) {
    return owner_;
  }
}

- (void)setOwnerWithId:(id)owner {
  if ([self isSpdy]) return;
  @synchronized(pool_) {
    if (self->owner_ != nil) @throw new_JavaLangIllegalStateException_initWithNSString_(@"Connection already has an owner!");
    self->owner_ = owner;
  }
}

- (jboolean)clearOwner {
  @synchronized(pool_) {
    if (owner_ == nil) {
      return false;
    }
    owner_ = nil;
    return true;
  }
}

- (void)closeIfOwnedByWithId:(id)owner {
  if ([self isSpdy]) @throw new_JavaLangIllegalStateException_init();
  @synchronized(pool_) {
    if (self->owner_ != owner) {
      return;
    }
    self->owner_ = nil;
  }
  [((JavaNetSocket *) nil_chk(socket_)) close];
}

- (void)connectWithInt:(jint)connectTimeout
               withInt:(jint)readTimeout
               withInt:(jint)writeTimeout
withComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)tunnelRequest {
  if (connected_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"already connected");
  if ([((JavaNetProxy *) nil_chk(((ComSquareupOkhttpRoute *) nil_chk(route_))->proxy_)) type] == JreLoadEnum(JavaNetProxy_Type, DIRECT) || [route_->proxy_ type] == JreLoadEnum(JavaNetProxy_Type, HTTP)) {
    socket_ = [((JavaxNetSocketFactory *) nil_chk(((ComSquareupOkhttpAddress *) nil_chk(route_->address_))->socketFactory_)) createSocket];
  }
  else {
    socket_ = new_JavaNetSocket_initWithJavaNetProxy_(route_->proxy_);
  }
  [((JavaNetSocket *) nil_chk(socket_)) setSoTimeoutWithInt:readTimeout];
  [((ComSquareupOkhttpInternalPlatform *) nil_chk(ComSquareupOkhttpInternalPlatform_get())) connectSocketWithJavaNetSocket:socket_ withJavaNetInetSocketAddress:route_->inetSocketAddress_ withInt:connectTimeout];
  if (((ComSquareupOkhttpAddress *) nil_chk(route_->address_))->sslSocketFactory_ != nil) {
    ComSquareupOkhttpConnection_upgradeToTlsWithComSquareupOkhttpRequest_withInt_withInt_(self, tunnelRequest, readTimeout, writeTimeout);
  }
  else {
    httpConnection_ = new_ComSquareupOkhttpInternalHttpHttpConnection_initWithComSquareupOkhttpConnectionPool_withComSquareupOkhttpConnection_withJavaNetSocket_(pool_, self, socket_);
  }
  connected_ = true;
}

- (void)connectAndSetOwnerWithComSquareupOkhttpOkHttpClient:(ComSquareupOkhttpOkHttpClient *)client
                                                     withId:(id)owner
                               withComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request {
  [self setOwnerWithId:owner];
  if (![self isConnected]) {
    ComSquareupOkhttpRequest *tunnelRequest = ComSquareupOkhttpConnection_tunnelRequestWithComSquareupOkhttpRequest_(self, request);
    [self connectWithInt:[((ComSquareupOkhttpOkHttpClient *) nil_chk(client)) getConnectTimeout] withInt:[client getReadTimeout] withInt:[client getWriteTimeout] withComSquareupOkhttpRequest:tunnelRequest];
    if ([self isSpdy]) {
      [((ComSquareupOkhttpConnectionPool *) nil_chk([client getConnectionPool])) shareWithComSquareupOkhttpConnection:self];
    }
    [((ComSquareupOkhttpInternalRouteDatabase *) nil_chk([client routeDatabase])) connectedWithComSquareupOkhttpRoute:[self getRoute]];
  }
  [self setTimeoutsWithInt:[((ComSquareupOkhttpOkHttpClient *) nil_chk(client)) getReadTimeout] withInt:[client getWriteTimeout]];
}

- (ComSquareupOkhttpRequest *)tunnelRequestWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request {
  return ComSquareupOkhttpConnection_tunnelRequestWithComSquareupOkhttpRequest_(self, request);
}

- (void)upgradeToTlsWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)tunnelRequest
                                         withInt:(jint)readTimeout
                                         withInt:(jint)writeTimeout {
  ComSquareupOkhttpConnection_upgradeToTlsWithComSquareupOkhttpRequest_withInt_withInt_(self, tunnelRequest, readTimeout, writeTimeout);
}

- (jboolean)isConnected {
  return connected_;
}

- (ComSquareupOkhttpRoute *)getRoute {
  return route_;
}

- (JavaNetSocket *)getSocket {
  return socket_;
}

- (jboolean)isAlive {
  return ![((JavaNetSocket *) nil_chk(socket_)) isClosed] && ![socket_ isInputShutdown] && ![socket_ isOutputShutdown];
}

- (jboolean)isReadable {
  if (httpConnection_ != nil) return [httpConnection_ isReadable];
  return true;
}

- (void)resetIdleStartTime {
  if (spdyConnection_ != nil) @throw new_JavaLangIllegalStateException_initWithNSString_(@"spdyConnection != null");
  self->idleStartTimeNs_ = JavaLangSystem_nanoTime();
}

- (jboolean)isIdle {
  return spdyConnection_ == nil || [spdyConnection_ isIdle];
}

- (jlong)getIdleStartTimeNs {
  return spdyConnection_ == nil ? idleStartTimeNs_ : [spdyConnection_ getIdleStartTimeNs];
}

- (ComSquareupOkhttpHandshake *)getHandshake {
  return handshake_;
}

- (id<ComSquareupOkhttpInternalHttpTransport>)newTransportWithComSquareupOkhttpInternalHttpHttpEngine:(ComSquareupOkhttpInternalHttpHttpEngine *)httpEngine {
  return (spdyConnection_ != nil) ? new_ComSquareupOkhttpInternalHttpSpdyTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalSpdySpdyConnection_(httpEngine, spdyConnection_) : new_ComSquareupOkhttpInternalHttpHttpTransport_initWithComSquareupOkhttpInternalHttpHttpEngine_withComSquareupOkhttpInternalHttpHttpConnection_(httpEngine, httpConnection_);
}

- (jboolean)isSpdy {
  return spdyConnection_ != nil;
}

- (ComSquareupOkhttpProtocol *)getProtocol {
  return protocol_;
}

- (void)setProtocolWithComSquareupOkhttpProtocol:(ComSquareupOkhttpProtocol *)protocol {
  if (protocol == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"protocol == null");
  self->protocol_ = protocol;
}

- (void)setTimeoutsWithInt:(jint)readTimeoutMillis
                   withInt:(jint)writeTimeoutMillis {
  if (!connected_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"setTimeouts - not connected");
  if (httpConnection_ != nil) {
    [((JavaNetSocket *) nil_chk(socket_)) setSoTimeoutWithInt:readTimeoutMillis];
    [httpConnection_ setTimeoutsWithInt:readTimeoutMillis withInt:writeTimeoutMillis];
  }
}

- (void)incrementRecycleCount {
  recycleCount_++;
}

- (jint)recycleCount {
  return recycleCount_;
}

- (void)makeTunnelWithComSquareupOkhttpRequest:(ComSquareupOkhttpRequest *)request
                                       withInt:(jint)readTimeout
                                       withInt:(jint)writeTimeout {
  ComSquareupOkhttpConnection_makeTunnelWithComSquareupOkhttpRequest_withInt_withInt_(self, request, readTimeout, writeTimeout);
}

- (NSString *)description {
  return JreStrcat("$$CI$@$$$$$@C", @"Connection{", ((ComSquareupOkhttpAddress *) nil_chk(((ComSquareupOkhttpRoute *) nil_chk(route_))->address_))->uriHost_, ':', route_->address_->uriPort_, @", proxy=", route_->proxy_, @" hostAddress=", [((JavaNetInetAddress *) nil_chk([((JavaNetInetSocketAddress *) nil_chk(route_->inetSocketAddress_)) getAddress])) getHostAddress], @" cipherSuite=", (handshake_ != nil ? [handshake_ cipherSuite] : @"none"), @" protocol=", protocol_, '}');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComSquareupOkhttpConnectionPool:withComSquareupOkhttpRoute:", "Connection", NULL, 0x1, NULL, NULL },
    { "getOwner", NULL, "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "setOwnerWithId:", "setOwner", "V", 0x0, NULL, NULL },
    { "clearOwner", NULL, "Z", 0x0, NULL, NULL },
    { "closeIfOwnedByWithId:", "closeIfOwnedBy", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "connectWithInt:withInt:withInt:withComSquareupOkhttpRequest:", "connect", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "connectAndSetOwnerWithComSquareupOkhttpOkHttpClient:withId:withComSquareupOkhttpRequest:", "connectAndSetOwner", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "tunnelRequestWithComSquareupOkhttpRequest:", "tunnelRequest", "Lcom.squareup.okhttp.Request;", 0x2, "Ljava.io.IOException;", NULL },
    { "upgradeToTlsWithComSquareupOkhttpRequest:withInt:withInt:", "upgradeToTls", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "isConnected", NULL, "Z", 0x0, NULL, NULL },
    { "getRoute", NULL, "Lcom.squareup.okhttp.Route;", 0x1, NULL, NULL },
    { "getSocket", NULL, "Ljava.net.Socket;", 0x1, NULL, NULL },
    { "isAlive", NULL, "Z", 0x0, NULL, NULL },
    { "isReadable", NULL, "Z", 0x0, NULL, NULL },
    { "resetIdleStartTime", NULL, "V", 0x0, NULL, NULL },
    { "isIdle", NULL, "Z", 0x0, NULL, NULL },
    { "getIdleStartTimeNs", NULL, "J", 0x0, NULL, NULL },
    { "getHandshake", NULL, "Lcom.squareup.okhttp.Handshake;", 0x1, NULL, NULL },
    { "newTransportWithComSquareupOkhttpInternalHttpHttpEngine:", "newTransport", "Lcom.squareup.okhttp.internal.http.Transport;", 0x0, "Ljava.io.IOException;", NULL },
    { "isSpdy", NULL, "Z", 0x0, NULL, NULL },
    { "getProtocol", NULL, "Lcom.squareup.okhttp.Protocol;", 0x1, NULL, NULL },
    { "setProtocolWithComSquareupOkhttpProtocol:", "setProtocol", "V", 0x0, NULL, NULL },
    { "setTimeoutsWithInt:withInt:", "setTimeouts", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "incrementRecycleCount", NULL, "V", 0x0, NULL, NULL },
    { "recycleCount", NULL, "I", 0x0, NULL, NULL },
    { "makeTunnelWithComSquareupOkhttpRequest:withInt:withInt:", "makeTunnel", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pool_", NULL, 0x12, "Lcom.squareup.okhttp.ConnectionPool;", NULL, NULL, .constantValue.asLong = 0 },
    { "route_", NULL, 0x12, "Lcom.squareup.okhttp.Route;", NULL, NULL, .constantValue.asLong = 0 },
    { "socket_", NULL, 0x2, "Ljava.net.Socket;", NULL, NULL, .constantValue.asLong = 0 },
    { "connected_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "httpConnection_", NULL, 0x2, "Lcom.squareup.okhttp.internal.http.HttpConnection;", NULL, NULL, .constantValue.asLong = 0 },
    { "spdyConnection_", NULL, 0x2, "Lcom.squareup.okhttp.internal.spdy.SpdyConnection;", NULL, NULL, .constantValue.asLong = 0 },
    { "protocol_", NULL, 0x2, "Lcom.squareup.okhttp.Protocol;", NULL, NULL, .constantValue.asLong = 0 },
    { "idleStartTimeNs_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "handshake_", NULL, 0x2, "Lcom.squareup.okhttp.Handshake;", NULL, NULL, .constantValue.asLong = 0 },
    { "recycleCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "owner_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpConnection = { 2, "Connection", "com.squareup.okhttp", NULL, 0x11, 27, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpConnection;
}

@end

void ComSquareupOkhttpConnection_initWithComSquareupOkhttpConnectionPool_withComSquareupOkhttpRoute_(ComSquareupOkhttpConnection *self, ComSquareupOkhttpConnectionPool *pool, ComSquareupOkhttpRoute *route) {
  NSObject_init(self);
  self->connected_ = false;
  self->protocol_ = JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_1_1);
  self->pool_ = pool;
  self->route_ = route;
}

ComSquareupOkhttpConnection *new_ComSquareupOkhttpConnection_initWithComSquareupOkhttpConnectionPool_withComSquareupOkhttpRoute_(ComSquareupOkhttpConnectionPool *pool, ComSquareupOkhttpRoute *route) {
  ComSquareupOkhttpConnection *self = [ComSquareupOkhttpConnection alloc];
  ComSquareupOkhttpConnection_initWithComSquareupOkhttpConnectionPool_withComSquareupOkhttpRoute_(self, pool, route);
  return self;
}

ComSquareupOkhttpConnection *create_ComSquareupOkhttpConnection_initWithComSquareupOkhttpConnectionPool_withComSquareupOkhttpRoute_(ComSquareupOkhttpConnectionPool *pool, ComSquareupOkhttpRoute *route) {
  return new_ComSquareupOkhttpConnection_initWithComSquareupOkhttpConnectionPool_withComSquareupOkhttpRoute_(pool, route);
}

ComSquareupOkhttpRequest *ComSquareupOkhttpConnection_tunnelRequestWithComSquareupOkhttpRequest_(ComSquareupOkhttpConnection *self, ComSquareupOkhttpRequest *request) {
  if (![((ComSquareupOkhttpRoute *) nil_chk(self->route_)) requiresTunnel]) return nil;
  NSString *host = [((JavaNetURL *) nil_chk([((ComSquareupOkhttpRequest *) nil_chk(request)) url])) getHost];
  jint port = ComSquareupOkhttpInternalUtil_getEffectivePortWithJavaNetURL_([request url]);
  NSString *authority = (port == ComSquareupOkhttpInternalUtil_getDefaultPortWithNSString_(@"https")) ? host : (JreStrcat("$CI", host, ':', port));
  ComSquareupOkhttpRequest_Builder *result = [((ComSquareupOkhttpRequest_Builder *) nil_chk([((ComSquareupOkhttpRequest_Builder *) nil_chk([new_ComSquareupOkhttpRequest_Builder_init() urlWithJavaNetURL:new_JavaNetURL_initWithNSString_withNSString_withInt_withNSString_(@"https", host, port, @"/")])) headerWithNSString:@"Host" withNSString:authority])) headerWithNSString:@"Proxy-Connection" withNSString:@"Keep-Alive"];
  NSString *userAgent = [request headerWithNSString:@"User-Agent"];
  if (userAgent != nil) {
    (void) [((ComSquareupOkhttpRequest_Builder *) nil_chk(result)) headerWithNSString:@"User-Agent" withNSString:userAgent];
  }
  NSString *proxyAuthorization = [request headerWithNSString:@"Proxy-Authorization"];
  if (proxyAuthorization != nil) {
    (void) [((ComSquareupOkhttpRequest_Builder *) nil_chk(result)) headerWithNSString:@"Proxy-Authorization" withNSString:proxyAuthorization];
  }
  return [((ComSquareupOkhttpRequest_Builder *) nil_chk(result)) build];
}

void ComSquareupOkhttpConnection_upgradeToTlsWithComSquareupOkhttpRequest_withInt_withInt_(ComSquareupOkhttpConnection *self, ComSquareupOkhttpRequest *tunnelRequest, jint readTimeout, jint writeTimeout) {
  ComSquareupOkhttpInternalPlatform *platform = ComSquareupOkhttpInternalPlatform_get();
  if (tunnelRequest != nil) {
    ComSquareupOkhttpConnection_makeTunnelWithComSquareupOkhttpRequest_withInt_withInt_(self, tunnelRequest, readTimeout, writeTimeout);
  }
  self->socket_ = [((JavaxNetSslSSLSocketFactory *) nil_chk(((ComSquareupOkhttpAddress *) nil_chk(((ComSquareupOkhttpRoute *) nil_chk(self->route_))->address_))->sslSocketFactory_)) createSocketWithJavaNetSocket:self->socket_ withNSString:self->route_->address_->uriHost_ withInt:self->route_->address_->uriPort_ withBoolean:true];
  JavaxNetSslSSLSocket *sslSocket = (JavaxNetSslSSLSocket *) cast_chk(self->socket_, [JavaxNetSslSSLSocket class]);
  [((ComSquareupOkhttpConnectionSpec *) nil_chk(self->route_->connectionSpec_)) applyWithJavaxNetSslSSLSocket:sslSocket withComSquareupOkhttpRoute:self->route_];
  @try {
    [((JavaxNetSslSSLSocket *) nil_chk(sslSocket)) startHandshake];
    NSString *maybeProtocol;
    if ([self->route_->connectionSpec_ supportsTlsExtensions] && (maybeProtocol = [((ComSquareupOkhttpInternalPlatform *) nil_chk(platform)) getSelectedProtocolWithJavaxNetSslSSLSocket:sslSocket]) != nil) {
      self->protocol_ = ComSquareupOkhttpProtocol_getWithNSString_(maybeProtocol);
    }
  }
  @finally {
    [((ComSquareupOkhttpInternalPlatform *) nil_chk(platform)) afterHandshakeWithJavaxNetSslSSLSocket:sslSocket];
  }
  self->handshake_ = ComSquareupOkhttpHandshake_getWithJavaxNetSslSSLSession_([((JavaxNetSslSSLSocket *) nil_chk(sslSocket)) getSession]);
  if (![((id<JavaxNetSslHostnameVerifier>) nil_chk(self->route_->address_->hostnameVerifier_)) verifyWithNSString:self->route_->address_->uriHost_ withJavaxNetSslSSLSession:[sslSocket getSession]]) {
    JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(nil_chk([((id<JavaxNetSslSSLSession>) nil_chk([sslSocket getSession])) getPeerCertificates]), 0), [JavaSecurityCertX509Certificate class]);
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$$$$$$@", @"Hostname ", self->route_->address_->uriHost_, @" not verified:\n    certificate: ", ComSquareupOkhttpCertificatePinner_pinWithJavaSecurityCertCertificate_(cert), @"\n    DN: ", [((id<JavaSecurityPrincipal>) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectDN])) getName], @"\n    subjectAltNames: ", ComSquareupOkhttpInternalTlsOkHostnameVerifier_allSubjectAltNamesWithJavaSecurityCertX509Certificate_(cert)));
  }
  [((ComSquareupOkhttpCertificatePinner *) nil_chk(self->route_->address_->certificatePinner_)) checkWithNSString:self->route_->address_->uriHost_ withJavaUtilList:[((ComSquareupOkhttpHandshake *) nil_chk(self->handshake_)) peerCertificates]];
  if (self->protocol_ == JreLoadEnum(ComSquareupOkhttpProtocol, SPDY_3) || self->protocol_ == JreLoadEnum(ComSquareupOkhttpProtocol, HTTP_2)) {
    [sslSocket setSoTimeoutWithInt:0];
    self->spdyConnection_ = [((ComSquareupOkhttpInternalSpdySpdyConnection_Builder *) nil_chk([new_ComSquareupOkhttpInternalSpdySpdyConnection_Builder_initWithNSString_withBoolean_withJavaNetSocket_([self->route_->address_ getUriHost], true, self->socket_) protocolWithComSquareupOkhttpProtocol:self->protocol_])) build];
    [((ComSquareupOkhttpInternalSpdySpdyConnection *) nil_chk(self->spdyConnection_)) sendConnectionPreface];
  }
  else {
    self->httpConnection_ = new_ComSquareupOkhttpInternalHttpHttpConnection_initWithComSquareupOkhttpConnectionPool_withComSquareupOkhttpConnection_withJavaNetSocket_(self->pool_, self, self->socket_);
  }
}

void ComSquareupOkhttpConnection_makeTunnelWithComSquareupOkhttpRequest_withInt_withInt_(ComSquareupOkhttpConnection *self, ComSquareupOkhttpRequest *request, jint readTimeout, jint writeTimeout) {
  ComSquareupOkhttpInternalHttpHttpConnection *tunnelConnection = new_ComSquareupOkhttpInternalHttpHttpConnection_initWithComSquareupOkhttpConnectionPool_withComSquareupOkhttpConnection_withJavaNetSocket_(self->pool_, self, self->socket_);
  [tunnelConnection setTimeoutsWithInt:readTimeout withInt:writeTimeout];
  JavaNetURL *url = [((ComSquareupOkhttpRequest *) nil_chk(request)) url];
  NSString *requestLine = JreStrcat("$$CI$", @"CONNECT ", [((JavaNetURL *) nil_chk(url)) getHost], ':', [url getPort], @" HTTP/1.1");
  while (true) {
    [tunnelConnection writeRequestWithComSquareupOkhttpHeaders:[request headers] withNSString:requestLine];
    [tunnelConnection flush];
    ComSquareupOkhttpResponse *response = [((ComSquareupOkhttpResponse_Builder *) nil_chk([((ComSquareupOkhttpResponse_Builder *) nil_chk([tunnelConnection readResponse])) requestWithComSquareupOkhttpRequest:request])) build];
    jlong contentLength = ComSquareupOkhttpInternalHttpOkHeaders_contentLengthWithComSquareupOkhttpResponse_(response);
    if (contentLength == -1LL) {
      contentLength = 0LL;
    }
    id<OkioSource> body = [tunnelConnection newFixedLengthSourceWithLong:contentLength];
    ComSquareupOkhttpInternalUtil_skipAllWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(body, JavaLangInteger_MAX_VALUE, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
    [((id<OkioSource>) nil_chk(body)) close];
    switch ([((ComSquareupOkhttpResponse *) nil_chk(response)) code]) {
      case JavaNetHttpURLConnection_HTTP_OK:
      if ([tunnelConnection bufferSize] > 0) {
        @throw new_JavaIoIOException_initWithNSString_(@"TLS tunnel buffered too many bytes!");
      }
      return;
      case JavaNetHttpURLConnection_HTTP_PROXY_AUTH:
      request = ComSquareupOkhttpInternalHttpOkHeaders_processAuthHeaderWithComSquareupOkhttpAuthenticator_withComSquareupOkhttpResponse_withJavaNetProxy_(((ComSquareupOkhttpAddress *) nil_chk(((ComSquareupOkhttpRoute *) nil_chk(self->route_))->address_))->authenticator_, response, self->route_->proxy_);
      if (request != nil) continue;
      @throw new_JavaIoIOException_initWithNSString_(@"Failed to authenticate with proxy");
      default:
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Unexpected response code for CONNECT: ", [response code]));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpConnection)
