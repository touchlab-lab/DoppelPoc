//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
//

#include "J2ObjC_source.h"
#include "com/squareup/okhttp/Call.h"
#include "com/squareup/okhttp/Dispatcher.h"
#include "com/squareup/okhttp/internal/Util.h"
#include "com/squareup/okhttp/internal/http/HttpEngine.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayDeque.h"
#include "java/util/Deque.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"

@interface ComSquareupOkhttpDispatcher () {
 @public
  jint maxRequests_;
  jint maxRequestsPerHost_;
  id<JavaUtilConcurrentExecutorService> executorService_;
  id<JavaUtilDeque> readyCalls_;
  id<JavaUtilDeque> runningCalls_;
  id<JavaUtilDeque> executedCalls_;
}

- (void)promoteCalls;

- (jint)runningCallsForHostWithComSquareupOkhttpCall_AsyncCall:(ComSquareupOkhttpCall_AsyncCall *)call;

@end

J2OBJC_FIELD_SETTER(ComSquareupOkhttpDispatcher, executorService_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpDispatcher, readyCalls_, id<JavaUtilDeque>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpDispatcher, runningCalls_, id<JavaUtilDeque>)
J2OBJC_FIELD_SETTER(ComSquareupOkhttpDispatcher, executedCalls_, id<JavaUtilDeque>)

__attribute__((unused)) static void ComSquareupOkhttpDispatcher_promoteCalls(ComSquareupOkhttpDispatcher *self);

__attribute__((unused)) static jint ComSquareupOkhttpDispatcher_runningCallsForHostWithComSquareupOkhttpCall_AsyncCall_(ComSquareupOkhttpDispatcher *self, ComSquareupOkhttpCall_AsyncCall *call);

@implementation ComSquareupOkhttpDispatcher

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executorService {
  ComSquareupOkhttpDispatcher_initWithJavaUtilConcurrentExecutorService_(self, executorService);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSquareupOkhttpDispatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilConcurrentExecutorService>)getExecutorService {
  @synchronized(self) {
    if (executorService_ == nil) {
      executorService_ = new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(0, JavaLangInteger_MAX_VALUE, 60, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), new_JavaUtilConcurrentLinkedBlockingQueue_init(), ComSquareupOkhttpInternalUtil_threadFactoryWithNSString_withBoolean_(@"OkHttp Dispatcher", false));
    }
    return executorService_;
  }
}

- (void)setMaxRequestsWithInt:(jint)maxRequests {
  @synchronized(self) {
    if (maxRequests < 1) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"max < 1: ", maxRequests));
    }
    self->maxRequests_ = maxRequests;
    ComSquareupOkhttpDispatcher_promoteCalls(self);
  }
}

- (jint)getMaxRequests {
  @synchronized(self) {
    return maxRequests_;
  }
}

- (void)setMaxRequestsPerHostWithInt:(jint)maxRequestsPerHost {
  @synchronized(self) {
    if (maxRequestsPerHost < 1) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"max < 1: ", maxRequestsPerHost));
    }
    self->maxRequestsPerHost_ = maxRequestsPerHost;
    ComSquareupOkhttpDispatcher_promoteCalls(self);
  }
}

- (jint)getMaxRequestsPerHost {
  @synchronized(self) {
    return maxRequestsPerHost_;
  }
}

- (void)enqueueWithComSquareupOkhttpCall_AsyncCall:(ComSquareupOkhttpCall_AsyncCall *)call {
  @synchronized(self) {
    if ([((id<JavaUtilDeque>) nil_chk(runningCalls_)) size] < maxRequests_ && ComSquareupOkhttpDispatcher_runningCallsForHostWithComSquareupOkhttpCall_AsyncCall_(self, call) < maxRequestsPerHost_) {
      [runningCalls_ addWithId:call];
      [((id<JavaUtilConcurrentExecutorService>) nil_chk([self getExecutorService])) executeWithJavaLangRunnable:call];
    }
    else {
      [((id<JavaUtilDeque>) nil_chk(readyCalls_)) addWithId:call];
    }
  }
}

- (void)cancelWithId:(id)tag {
  @synchronized(self) {
    for (ComSquareupOkhttpCall_AsyncCall * __strong call in nil_chk(readyCalls_)) {
      if (ComSquareupOkhttpInternalUtil_equalWithId_withId_(tag, [((ComSquareupOkhttpCall_AsyncCall *) nil_chk(call)) tag])) {
        [call cancel];
      }
    }
    for (ComSquareupOkhttpCall_AsyncCall * __strong call in nil_chk(runningCalls_)) {
      if (ComSquareupOkhttpInternalUtil_equalWithId_withId_(tag, [((ComSquareupOkhttpCall_AsyncCall *) nil_chk(call)) tag])) {
        JreAssignVolatileBoolean(&((ComSquareupOkhttpCall *) nil_chk([call get]))->canceled_, true);
        ComSquareupOkhttpInternalHttpHttpEngine *engine = ((ComSquareupOkhttpCall *) nil_chk([call get]))->engine_;
        if (engine != nil) [engine disconnect];
      }
    }
    for (ComSquareupOkhttpCall * __strong call in nil_chk(executedCalls_)) {
      if (ComSquareupOkhttpInternalUtil_equalWithId_withId_(tag, [((ComSquareupOkhttpCall *) nil_chk(call)) tag])) {
        [call cancel];
      }
    }
  }
}

- (void)finishedWithComSquareupOkhttpCall_AsyncCall:(ComSquareupOkhttpCall_AsyncCall *)call {
  @synchronized(self) {
    if (![((id<JavaUtilDeque>) nil_chk(runningCalls_)) removeWithId:call]) @throw new_JavaLangAssertionError_initWithId_(@"AsyncCall wasn't running!");
    ComSquareupOkhttpDispatcher_promoteCalls(self);
  }
}

- (void)promoteCalls {
  ComSquareupOkhttpDispatcher_promoteCalls(self);
}

- (jint)runningCallsForHostWithComSquareupOkhttpCall_AsyncCall:(ComSquareupOkhttpCall_AsyncCall *)call {
  return ComSquareupOkhttpDispatcher_runningCallsForHostWithComSquareupOkhttpCall_AsyncCall_(self, call);
}

- (void)executedWithComSquareupOkhttpCall:(ComSquareupOkhttpCall *)call {
  @synchronized(self) {
    [((id<JavaUtilDeque>) nil_chk(executedCalls_)) addWithId:call];
  }
}

- (void)finishedWithComSquareupOkhttpCall:(ComSquareupOkhttpCall *)call {
  @synchronized(self) {
    if (![((id<JavaUtilDeque>) nil_chk(executedCalls_)) removeWithId:call]) @throw new_JavaLangAssertionError_initWithId_(@"Call wasn't in-flight!");
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilConcurrentExecutorService:", "Dispatcher", NULL, 0x1, NULL, NULL },
    { "init", "Dispatcher", NULL, 0x1, NULL, NULL },
    { "getExecutorService", NULL, "Ljava.util.concurrent.ExecutorService;", 0x21, NULL, NULL },
    { "setMaxRequestsWithInt:", "setMaxRequests", "V", 0x21, NULL, NULL },
    { "getMaxRequests", NULL, "I", 0x21, NULL, NULL },
    { "setMaxRequestsPerHostWithInt:", "setMaxRequestsPerHost", "V", 0x21, NULL, NULL },
    { "getMaxRequestsPerHost", NULL, "I", 0x21, NULL, NULL },
    { "enqueueWithComSquareupOkhttpCall_AsyncCall:", "enqueue", "V", 0x20, NULL, NULL },
    { "cancelWithId:", "cancel", "V", 0x21, NULL, NULL },
    { "finishedWithComSquareupOkhttpCall_AsyncCall:", "finished", "V", 0x20, NULL, NULL },
    { "promoteCalls", NULL, "V", 0x2, NULL, NULL },
    { "runningCallsForHostWithComSquareupOkhttpCall_AsyncCall:", "runningCallsForHost", "I", 0x2, NULL, NULL },
    { "executedWithComSquareupOkhttpCall:", "executed", "V", 0x20, NULL, NULL },
    { "finishedWithComSquareupOkhttpCall:", "finished", "V", 0x20, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "maxRequests_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxRequestsPerHost_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "executorService_", NULL, 0x2, "Ljava.util.concurrent.ExecutorService;", NULL, NULL, .constantValue.asLong = 0 },
    { "readyCalls_", NULL, 0x12, "Ljava.util.Deque;", NULL, "Ljava/util/Deque<Lcom/squareup/okhttp/Call$AsyncCall;>;", .constantValue.asLong = 0 },
    { "runningCalls_", NULL, 0x12, "Ljava.util.Deque;", NULL, "Ljava/util/Deque<Lcom/squareup/okhttp/Call$AsyncCall;>;", .constantValue.asLong = 0 },
    { "executedCalls_", NULL, 0x12, "Ljava.util.Deque;", NULL, "Ljava/util/Deque<Lcom/squareup/okhttp/Call;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ComSquareupOkhttpDispatcher = { 2, "Dispatcher", "com.squareup.okhttp", NULL, 0x11, 14, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSquareupOkhttpDispatcher;
}

@end

void ComSquareupOkhttpDispatcher_initWithJavaUtilConcurrentExecutorService_(ComSquareupOkhttpDispatcher *self, id<JavaUtilConcurrentExecutorService> executorService) {
  NSObject_init(self);
  self->maxRequests_ = 64;
  self->maxRequestsPerHost_ = 5;
  self->readyCalls_ = new_JavaUtilArrayDeque_init();
  self->runningCalls_ = new_JavaUtilArrayDeque_init();
  self->executedCalls_ = new_JavaUtilArrayDeque_init();
  self->executorService_ = executorService;
}

ComSquareupOkhttpDispatcher *new_ComSquareupOkhttpDispatcher_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> executorService) {
  ComSquareupOkhttpDispatcher *self = [ComSquareupOkhttpDispatcher alloc];
  ComSquareupOkhttpDispatcher_initWithJavaUtilConcurrentExecutorService_(self, executorService);
  return self;
}

ComSquareupOkhttpDispatcher *create_ComSquareupOkhttpDispatcher_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> executorService) {
  return new_ComSquareupOkhttpDispatcher_initWithJavaUtilConcurrentExecutorService_(executorService);
}

void ComSquareupOkhttpDispatcher_init(ComSquareupOkhttpDispatcher *self) {
  NSObject_init(self);
  self->maxRequests_ = 64;
  self->maxRequestsPerHost_ = 5;
  self->readyCalls_ = new_JavaUtilArrayDeque_init();
  self->runningCalls_ = new_JavaUtilArrayDeque_init();
  self->executedCalls_ = new_JavaUtilArrayDeque_init();
}

ComSquareupOkhttpDispatcher *new_ComSquareupOkhttpDispatcher_init() {
  ComSquareupOkhttpDispatcher *self = [ComSquareupOkhttpDispatcher alloc];
  ComSquareupOkhttpDispatcher_init(self);
  return self;
}

ComSquareupOkhttpDispatcher *create_ComSquareupOkhttpDispatcher_init() {
  return new_ComSquareupOkhttpDispatcher_init();
}

void ComSquareupOkhttpDispatcher_promoteCalls(ComSquareupOkhttpDispatcher *self) {
  if ([((id<JavaUtilDeque>) nil_chk(self->runningCalls_)) size] >= self->maxRequests_) return;
  if ([((id<JavaUtilDeque>) nil_chk(self->readyCalls_)) isEmpty]) return;
  for (id<JavaUtilIterator> i = [self->readyCalls_ iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComSquareupOkhttpCall_AsyncCall *call = [i next];
    if (ComSquareupOkhttpDispatcher_runningCallsForHostWithComSquareupOkhttpCall_AsyncCall_(self, call) < self->maxRequestsPerHost_) {
      [i remove];
      [self->runningCalls_ addWithId:call];
      [((id<JavaUtilConcurrentExecutorService>) nil_chk([self getExecutorService])) executeWithJavaLangRunnable:call];
    }
    if ([self->runningCalls_ size] >= self->maxRequests_) return;
  }
}

jint ComSquareupOkhttpDispatcher_runningCallsForHostWithComSquareupOkhttpCall_AsyncCall_(ComSquareupOkhttpDispatcher *self, ComSquareupOkhttpCall_AsyncCall *call) {
  jint result = 0;
  for (ComSquareupOkhttpCall_AsyncCall * __strong c in nil_chk(self->runningCalls_)) {
    if ([((NSString *) nil_chk([((ComSquareupOkhttpCall_AsyncCall *) nil_chk(c)) host])) isEqual:[((ComSquareupOkhttpCall_AsyncCall *) nil_chk(call)) host]]) result++;
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSquareupOkhttpDispatcher)
