//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/okio/RealBufferedSource.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OkioRealBufferedSource_INCLUDE_ALL")
#ifdef OkioRealBufferedSource_RESTRICT
#define OkioRealBufferedSource_INCLUDE_ALL 0
#else
#define OkioRealBufferedSource_INCLUDE_ALL 1
#endif
#undef OkioRealBufferedSource_RESTRICT

#if !defined (OkioRealBufferedSource_) && (OkioRealBufferedSource_INCLUDE_ALL || defined(OkioRealBufferedSource_INCLUDE))
#define OkioRealBufferedSource_

#define OkioBufferedSource_RESTRICT 1
#define OkioBufferedSource_INCLUDE 1
#include "okio/BufferedSource.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaNioCharsetCharset;
@class OkioBuffer;
@class OkioByteString;
@class OkioTimeout;
@protocol OkioSink;
@protocol OkioSource;

@interface OkioRealBufferedSource : NSObject < OkioBufferedSource > {
 @public
  OkioBuffer *buffer_;
  id<OkioSource> source_;
}

#pragma mark Public

- (instancetype)initWithOkioSource:(id<OkioSource>)source;

- (instancetype)initWithOkioSource:(id<OkioSource>)source
                    withOkioBuffer:(OkioBuffer *)buffer;

- (OkioBuffer *)buffer;

- (void)close;

- (jboolean)exhausted;

- (jlong)indexOfWithByte:(jbyte)b;

- (jlong)indexOfWithByte:(jbyte)b
                withLong:(jlong)fromIndex;

- (jlong)indexOfElementWithOkioByteString:(OkioByteString *)targetBytes;

- (jlong)indexOfElementWithOkioByteString:(OkioByteString *)targetBytes
                                 withLong:(jlong)fromIndex;

- (JavaIoInputStream *)inputStream;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (jint)readWithByteArray:(IOSByteArray *)sink;

- (jint)readWithByteArray:(IOSByteArray *)sink
                  withInt:(jint)offset
                  withInt:(jint)byteCount;

- (jlong)readAllWithOkioSink:(id<OkioSink>)sink;

- (jbyte)readByte;

- (IOSByteArray *)readByteArray;

- (IOSByteArray *)readByteArrayWithLong:(jlong)byteCount;

- (OkioByteString *)readByteString;

- (OkioByteString *)readByteStringWithLong:(jlong)byteCount;

- (void)readFullyWithOkioBuffer:(OkioBuffer *)sink
                       withLong:(jlong)byteCount;

- (void)readFullyWithByteArray:(IOSByteArray *)sink;

- (jint)readInt;

- (jint)readIntLe;

- (jlong)readLong;

- (jlong)readLongLe;

- (jshort)readShort;

- (jshort)readShortLe;

- (NSString *)readStringWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (NSString *)readStringWithLong:(jlong)byteCount
       withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (NSString *)readUtf8;

- (NSString *)readUtf8WithLong:(jlong)byteCount;

- (NSString *)readUtf8Line;

- (NSString *)readUtf8LineStrict;

- (jboolean)requestWithLong:(jlong)byteCount;

- (void)requireWithLong:(jlong)byteCount;

- (void)skipWithLong:(jlong)byteCount;

- (OkioTimeout *)timeout;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioRealBufferedSource)

J2OBJC_FIELD_SETTER(OkioRealBufferedSource, buffer_, OkioBuffer *)
J2OBJC_FIELD_SETTER(OkioRealBufferedSource, source_, id<OkioSource>)

FOUNDATION_EXPORT void OkioRealBufferedSource_initWithOkioSource_withOkioBuffer_(OkioRealBufferedSource *self, id<OkioSource> source, OkioBuffer *buffer);

FOUNDATION_EXPORT OkioRealBufferedSource *new_OkioRealBufferedSource_initWithOkioSource_withOkioBuffer_(id<OkioSource> source, OkioBuffer *buffer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioRealBufferedSource *create_OkioRealBufferedSource_initWithOkioSource_withOkioBuffer_(id<OkioSource> source, OkioBuffer *buffer);

FOUNDATION_EXPORT void OkioRealBufferedSource_initWithOkioSource_(OkioRealBufferedSource *self, id<OkioSource> source);

FOUNDATION_EXPORT OkioRealBufferedSource *new_OkioRealBufferedSource_initWithOkioSource_(id<OkioSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioRealBufferedSource *create_OkioRealBufferedSource_initWithOkioSource_(id<OkioSource> source);

J2OBJC_TYPE_LITERAL_HEADER(OkioRealBufferedSource)

#endif

#pragma pop_macro("OkioRealBufferedSource_INCLUDE_ALL")
