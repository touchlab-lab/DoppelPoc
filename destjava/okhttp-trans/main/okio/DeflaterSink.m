//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/okhttp/okhttp/src/main/java/okio/DeflaterSink.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/util/zip/Deflater.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/DeflaterSink.h"
#include "okio/Okio.h"
#include "okio/OkioUtil.h"
#include "okio/Segment.h"
#include "okio/SegmentPool.h"
#include "okio/Sink.h"
#include "okio/Timeout.h"

@interface OkioDeflaterSink () {
 @public
  id<OkioBufferedSink> sink_;
  JavaUtilZipDeflater *deflater_;
  jboolean closed_;
}

- (void)deflateWithBoolean:(jboolean)syncFlush;

@end

J2OBJC_FIELD_SETTER(OkioDeflaterSink, sink_, id<OkioBufferedSink>)
J2OBJC_FIELD_SETTER(OkioDeflaterSink, deflater_, JavaUtilZipDeflater *)

__attribute__((unused)) static void OkioDeflaterSink_deflateWithBoolean_(OkioDeflaterSink *self, jboolean syncFlush);

@implementation OkioDeflaterSink

- (instancetype)initWithOkioSink:(id<OkioSink>)sink
         withJavaUtilZipDeflater:(JavaUtilZipDeflater *)deflater {
  OkioDeflaterSink_initWithOkioSink_withJavaUtilZipDeflater_(self, sink, deflater);
  return self;
}

- (instancetype)initWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                 withJavaUtilZipDeflater:(JavaUtilZipDeflater *)deflater {
  OkioDeflaterSink_initWithOkioBufferedSink_withJavaUtilZipDeflater_(self, sink, deflater);
  return self;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  OkioOkioUtil_checkOffsetAndCountWithLong_withLong_withLong_(((OkioBuffer *) nil_chk(source))->size_, 0, byteCount);
  while (byteCount > 0) {
    OkioSegment *head = source->head_;
    jint toDeflate = (jint) JavaLangMath_minWithLong_withLong_(byteCount, ((OkioSegment *) nil_chk(head))->limit_ - head->pos_);
    [((JavaUtilZipDeflater *) nil_chk(deflater_)) setInputWithByteArray:head->data_ withInt:head->pos_ withInt:toDeflate];
    OkioDeflaterSink_deflateWithBoolean_(self, false);
    source->size_ -= toDeflate;
    head->pos_ += toDeflate;
    if (head->pos_ == head->limit_) {
      source->head_ = [head pop];
      [((OkioSegmentPool *) nil_chk(JreLoadStatic(OkioSegmentPool, INSTANCE))) recycleWithOkioSegment:head];
    }
    byteCount -= toDeflate;
  }
}

- (void)deflateWithBoolean:(jboolean)syncFlush {
  OkioDeflaterSink_deflateWithBoolean_(self, syncFlush);
}

- (void)flush {
  OkioDeflaterSink_deflateWithBoolean_(self, true);
  [((id<OkioBufferedSink>) nil_chk(sink_)) flush];
}

- (void)finishDeflate {
  [((JavaUtilZipDeflater *) nil_chk(deflater_)) finish];
  OkioDeflaterSink_deflateWithBoolean_(self, false);
}

- (void)close {
  if (closed_) return;
  NSException *thrown = nil;
  @try {
    [self finishDeflate];
  }
  @catch (NSException *e) {
    thrown = e;
  }
  @try {
    [((JavaUtilZipDeflater *) nil_chk(deflater_)) end];
  }
  @catch (NSException *e) {
    if (thrown == nil) thrown = e;
  }
  @try {
    [((id<OkioBufferedSink>) nil_chk(sink_)) close];
  }
  @catch (NSException *e) {
    if (thrown == nil) thrown = e;
  }
  closed_ = true;
  if (thrown != nil) OkioOkioUtil_sneakyRethrowWithNSException_(thrown);
}

- (OkioTimeout *)timeout {
  return [((id<OkioBufferedSink>) nil_chk(sink_)) timeout];
}

- (NSString *)description {
  return JreStrcat("$@C", @"DeflaterSink(", sink_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOkioSink:withJavaUtilZipDeflater:", "DeflaterSink", NULL, 0x1, NULL, NULL },
    { "initWithOkioBufferedSink:withJavaUtilZipDeflater:", "DeflaterSink", NULL, 0x0, NULL, NULL },
    { "writeWithOkioBuffer:withLong:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "deflateWithBoolean:", "deflate", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "finishDeflate", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "timeout", NULL, "Lokio.Timeout;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sink_", NULL, 0x12, "Lokio.BufferedSink;", NULL, NULL, .constantValue.asLong = 0 },
    { "deflater_", NULL, 0x12, "Ljava.util.zip.Deflater;", NULL, NULL, .constantValue.asLong = 0 },
    { "closed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OkioDeflaterSink = { 2, "DeflaterSink", "okio", NULL, 0x11, 9, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OkioDeflaterSink;
}

@end

void OkioDeflaterSink_initWithOkioSink_withJavaUtilZipDeflater_(OkioDeflaterSink *self, id<OkioSink> sink, JavaUtilZipDeflater *deflater) {
  OkioDeflaterSink_initWithOkioBufferedSink_withJavaUtilZipDeflater_(self, OkioOkio_bufferWithOkioSink_(sink), deflater);
}

OkioDeflaterSink *new_OkioDeflaterSink_initWithOkioSink_withJavaUtilZipDeflater_(id<OkioSink> sink, JavaUtilZipDeflater *deflater) {
  OkioDeflaterSink *self = [OkioDeflaterSink alloc];
  OkioDeflaterSink_initWithOkioSink_withJavaUtilZipDeflater_(self, sink, deflater);
  return self;
}

OkioDeflaterSink *create_OkioDeflaterSink_initWithOkioSink_withJavaUtilZipDeflater_(id<OkioSink> sink, JavaUtilZipDeflater *deflater) {
  return new_OkioDeflaterSink_initWithOkioSink_withJavaUtilZipDeflater_(sink, deflater);
}

void OkioDeflaterSink_initWithOkioBufferedSink_withJavaUtilZipDeflater_(OkioDeflaterSink *self, id<OkioBufferedSink> sink, JavaUtilZipDeflater *deflater) {
  NSObject_init(self);
  if (sink == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"source == null");
  if (deflater == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"inflater == null");
  self->sink_ = sink;
  self->deflater_ = deflater;
}

OkioDeflaterSink *new_OkioDeflaterSink_initWithOkioBufferedSink_withJavaUtilZipDeflater_(id<OkioBufferedSink> sink, JavaUtilZipDeflater *deflater) {
  OkioDeflaterSink *self = [OkioDeflaterSink alloc];
  OkioDeflaterSink_initWithOkioBufferedSink_withJavaUtilZipDeflater_(self, sink, deflater);
  return self;
}

OkioDeflaterSink *create_OkioDeflaterSink_initWithOkioBufferedSink_withJavaUtilZipDeflater_(id<OkioBufferedSink> sink, JavaUtilZipDeflater *deflater) {
  return new_OkioDeflaterSink_initWithOkioBufferedSink_withJavaUtilZipDeflater_(sink, deflater);
}

void OkioDeflaterSink_deflateWithBoolean_(OkioDeflaterSink *self, jboolean syncFlush) {
  OkioBuffer *buffer = [((id<OkioBufferedSink>) nil_chk(self->sink_)) buffer];
  while (true) {
    OkioSegment *s = [((OkioBuffer *) nil_chk(buffer)) writableSegmentWithInt:1];
    jint deflated = syncFlush ? [((JavaUtilZipDeflater *) nil_chk(self->deflater_)) deflateWithByteArray:((OkioSegment *) nil_chk(s))->data_ withInt:s->limit_ withInt:OkioSegment_SIZE - s->limit_ withInt:JavaUtilZipDeflater_SYNC_FLUSH] : [((JavaUtilZipDeflater *) nil_chk(self->deflater_)) deflateWithByteArray:((OkioSegment *) nil_chk(s))->data_ withInt:s->limit_ withInt:OkioSegment_SIZE - s->limit_];
    if (deflated > 0) {
      ((OkioSegment *) nil_chk(s))->limit_ += deflated;
      buffer->size_ += deflated;
      (void) [self->sink_ emitCompleteSegments];
    }
    else if ([((JavaUtilZipDeflater *) nil_chk(self->deflater_)) needsInput]) {
      return;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioDeflaterSink)
