//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/androidbase/AndroidBase/lib/src/main/java/android/database/sqlite/SQLiteQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/database/CursorWindow.h"
#include "android/database/sqlite/SQLiteClosable.h"
#include "android/database/sqlite/SQLiteDatabase.h"
#include "android/database/sqlite/SQLiteDatabaseCorruptException.h"
#include "android/database/sqlite/SQLiteException.h"
#include "android/database/sqlite/SQLiteProgram.h"
#include "android/database/sqlite/SQLiteQuery.h"
#include "android/database/sqlite/SQLiteSession.h"
#include "android/util/Log.h"

inline NSString *AndroidDatabaseSqliteSQLiteQuery_get_TAG();
static NSString *AndroidDatabaseSqliteSQLiteQuery_TAG = @"SQLiteQuery";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteQuery, TAG, NSString *)

@implementation AndroidDatabaseSqliteSQLiteQuery

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)db
                                               withNSString:(NSString *)query {
  AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(self, db, query);
  return self;
}

- (jint)fillWindowWithAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                          withInt:(jint)startPos
                                          withInt:(jint)requiredPos
                                      withBoolean:(jboolean)countAllRows {
  [self acquireReference];
  @try {
    [((AndroidDatabaseCursorWindow *) nil_chk(window)) acquireReference];
    @try {
      jint numRows = [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getSession])) executeForCursorWindowWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withAndroidDatabaseCursorWindow:window withInt:startPos withInt:requiredPos withBoolean:countAllRows withInt:[self getConnectionFlags]];
      return numRows;
    }
    @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
      [self onCorruption];
      @throw ex;
    }
    @catch (AndroidDatabaseSqliteSQLiteException *ex) {
      AndroidUtilLog_eWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteQuery_TAG, JreStrcat("$$$$", @"exception: ", [((AndroidDatabaseSqliteSQLiteException *) nil_chk(ex)) getMessage], @"; query: ", [self getSql]));
      @throw ex;
    }
    @finally {
      [window releaseReference];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteQuery: ", [self getSql]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithAndroidDatabaseSqliteSQLiteDatabase:withNSString:", "SQLiteQuery", NULL, 0x0, NULL, NULL },
    { "fillWindowWithAndroidDatabaseCursorWindow:withInt:withInt:withBoolean:", "fillWindow", "I", 0x0, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "TAG", 0x1a, "Ljava.lang.String;", &AndroidDatabaseSqliteSQLiteQuery_TAG, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteQuery = { 2, "SQLiteQuery", "android.database.sqlite", NULL, 0x11, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteQuery;
}

@end

void AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteQuery *self, AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query) {
  AndroidDatabaseSqliteSQLiteProgram_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, db, query, nil);
}

AndroidDatabaseSqliteSQLiteQuery *new_AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query) {
  AndroidDatabaseSqliteSQLiteQuery *self = [AndroidDatabaseSqliteSQLiteQuery alloc];
  AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(self, db, query);
  return self;
}

AndroidDatabaseSqliteSQLiteQuery *create_AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(AndroidDatabaseSqliteSQLiteDatabase *db, NSString *query) {
  return new_AndroidDatabaseSqliteSQLiteQuery_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_(db, query);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteQuery)
