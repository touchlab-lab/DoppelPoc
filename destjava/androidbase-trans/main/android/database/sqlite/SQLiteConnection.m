//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/androidbase/AndroidBase/lib/src/main/java/android/database/sqlite/SQLiteConnection.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/database/Cursor.h"
#include "android/database/CursorWindow.h"
#include "android/database/DatabaseUtils.h"
#include "android/database/sqlite/SQLiteBindOrColumnIndexOutOfRangeException.h"
#include "android/database/sqlite/SQLiteConnection.h"
#include "android/database/sqlite/SQLiteConnectionPool.h"
#include "android/database/sqlite/SQLiteCustomFunction.h"
#include "android/database/sqlite/SQLiteDatabase.h"
#include "android/database/sqlite/SQLiteDatabaseConfiguration.h"
#include "android/database/sqlite/SQLiteDatabaseLockedException.h"
#include "android/database/sqlite/SQLiteDebug.h"
#include "android/database/sqlite/SQLiteException.h"
#include "android/database/sqlite/SQLiteGlobal.h"
#include "android/database/sqlite/SQLiteStatementInfo.h"
#include "android/os/Trace.h"
#include "android/system/CloseGuard.h"
#include "android/util/Log.h"
#include "android/util/LruCache.h"
#include "android/util/Printer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#import "SQLiteConnectionNative.h"
#import "java/lang/UnsupportedOperationException.h"

@class AndroidDatabaseSqliteSQLiteConnection_Operation;
@class AndroidDatabaseSqliteSQLiteConnection_OperationLog;
@class AndroidDatabaseSqliteSQLiteConnection_PreparedStatement;
@class AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache;

@interface AndroidDatabaseSqliteSQLiteConnection () {
 @public
  AndroidSystemCloseGuard *mCloseGuard_;
  AndroidDatabaseSqliteSQLiteConnectionPool *mPool_;
  AndroidDatabaseSqliteSQLiteDatabaseConfiguration *mConfiguration_;
  jint mConnectionId_;
  jboolean mIsPrimaryConnection_;
  jboolean mIsReadOnlyConnection_;
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *mPreparedStatementCache_;
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *mPreparedStatementPool_;
  AndroidDatabaseSqliteSQLiteConnection_OperationLog *mRecentOperations_;
  id mConnectionPtr_;
  jboolean mOnlyAllowReadOnlyOperations_;
  jint mCancellationSignalAttachCount_;
}

+ (id)nativeOpenWithNSString:(NSString *)path
                     withInt:(jint)openFlags
                withNSString:(NSString *)label
                 withBoolean:(jboolean)enableTrace
                 withBoolean:(jboolean)enableProfile;

+ (void)nativeCloseWithId:(id)connectionPtr;

+ (void)nativeRegisterCustomFunctionWithId:(id)connectionPtr
withAndroidDatabaseSqliteSQLiteCustomFunction:(AndroidDatabaseSqliteSQLiteCustomFunction *)function;

+ (id)nativePrepareStatementWithId:(id)connectionPtr
                      withNSString:(NSString *)sql;

+ (void)nativeFinalizeStatementWithId:(id)connectionPtr
                               withId:(id)statementPtr;

+ (jint)nativeGetParameterCountWithId:(id)connectionPtr
                               withId:(id)statementPtr;

+ (jboolean)nativeIsReadOnlyWithId:(id)connectionPtr
                            withId:(id)statementPtr;

+ (jint)nativeGetColumnCountWithId:(id)connectionPtr
                            withId:(id)statementPtr;

+ (NSString *)nativeGetColumnNameWithId:(id)connectionPtr
                                 withId:(id)statementPtr
                                withInt:(jint)index;

+ (void)nativeBindNullWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index;

+ (void)nativeBindLongWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index
                    withLong:(jlong)value;

+ (void)nativeBindDoubleWithId:(id)connectionPtr
                        withId:(id)statementPtr
                       withInt:(jint)index
                    withDouble:(jdouble)value;

+ (void)nativeBindStringWithId:(id)connectionPtr
                        withId:(id)statementPtr
                       withInt:(jint)index
                  withNSString:(NSString *)value;

+ (void)nativeBindBlobWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index
               withByteArray:(IOSByteArray *)value;

+ (void)nativeResetStatementAndClearBindingsWithId:(id)connectionPtr
                                            withId:(id)statementPtr;

+ (void)nativeExecuteWithId:(id)connectionPtr
                     withId:(id)statementPtr;

+ (jlong)nativeExecuteForLongWithId:(id)connectionPtr
                             withId:(id)statementPtr;

+ (NSString *)nativeExecuteForStringWithId:(id)connectionPtr
                                    withId:(id)statementPtr;

+ (jint)nativeExecuteForChangedRowCountWithId:(id)connectionPtr
                                       withId:(id)statementPtr;

+ (jlong)nativeExecuteForLastInsertedRowIdWithId:(id)connectionPtr
                                          withId:(id)statementPtr;

+ (jlong)nativeExecuteForCursorWindowWithId:(id)connectionPtr
                                     withId:(id)statementPtr
                                     withId:(id)windowPtr
                                    withInt:(jint)startPos
                                    withInt:(jint)requiredPos
                                withBoolean:(jboolean)countAllRows;

+ (jint)nativeGetDbLookasideWithId:(id)connectionPtr;

- (instancetype)initWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)pool
             withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                          withInt:(jint)connectionId
                                                      withBoolean:(jboolean)primaryConnection;

- (void)open;

- (void)disposeWithBoolean:(jboolean)finalized;

- (void)setPageSize;

- (void)setAutoCheckpointInterval;

- (void)setJournalSizeLimit;

- (void)setForeignKeyModeFromConfiguration;

- (void)setWalModeFromConfiguration;

- (void)setSyncModeWithNSString:(NSString *)newValue;

+ (NSString *)canonicalizeSyncModeWithNSString:(NSString *)value;

- (void)setJournalModeWithNSString:(NSString *)newValue;

- (void)setLocaleFromConfiguration;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)acquirePreparedStatementWithNSString:(NSString *)sql;

- (void)releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

- (void)finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

- (void)bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement
                                                               withNSObjectArray:(IOSObjectArray *)bindArgs;

- (void)throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

+ (jboolean)isCacheableWithInt:(jint)statementType;

- (AndroidDatabaseSqliteSQLiteDebug_DbStats *)getMainDbStatsUnsafeWithInt:(jint)lookaside
                                                                 withLong:(jlong)pageCount
                                                                 withLong:(jlong)pageSize;

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)obtainPreparedStatementWithNSString:(NSString *)sql
                                                                                          withId:(id)statementPtr
                                                                                         withInt:(jint)numParameters
                                                                                         withInt:(jint)type
                                                                                     withBoolean:(jboolean)readOnly;

- (void)recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement;

+ (NSString *)trimSqlForDisplayWithNSString:(NSString *)sql;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mCloseGuard_, AndroidSystemCloseGuard *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mPool_, AndroidDatabaseSqliteSQLiteConnectionPool *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mConfiguration_, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mPreparedStatementCache_, AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mPreparedStatementPool_, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mRecentOperations_, AndroidDatabaseSqliteSQLiteConnection_OperationLog *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection, mConnectionPtr_, id)

inline NSString *AndroidDatabaseSqliteSQLiteConnection_get_TAG();
static NSString *AndroidDatabaseSqliteSQLiteConnection_TAG = @"SQLiteConnection";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection, TAG, NSString *)

inline jboolean AndroidDatabaseSqliteSQLiteConnection_get_DEBUG();
#define AndroidDatabaseSqliteSQLiteConnection_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection, DEBUG, jboolean)

inline IOSObjectArray *AndroidDatabaseSqliteSQLiteConnection_get_EMPTY_STRING_ARRAY();
static IOSObjectArray *AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection, EMPTY_STRING_ARRAY, IOSObjectArray *)

inline IOSByteArray *AndroidDatabaseSqliteSQLiteConnection_get_EMPTY_BYTE_ARRAY();
static IOSByteArray *AndroidDatabaseSqliteSQLiteConnection_EMPTY_BYTE_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteConnection, EMPTY_BYTE_ARRAY, IOSByteArray *)

__attribute__((unused)) static id AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(NSString *path, jint openFlags, NSString *label, jboolean enableTrace, jboolean enableProfile);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithId_(id connectionPtr);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithId_withAndroidDatabaseSqliteSQLiteCustomFunction_(id connectionPtr, AndroidDatabaseSqliteSQLiteCustomFunction *function);

__attribute__((unused)) static id AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithId_withNSString_(id connectionPtr, NSString *sql);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jint AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jint AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithId_withId_withInt_(id connectionPtr, id statementPtr, jint index);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithId_withId_withInt_(id connectionPtr, id statementPtr, jint index);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithId_withId_withInt_withLong_(id connectionPtr, id statementPtr, jint index, jlong value);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithId_withId_withInt_withDouble_(id connectionPtr, id statementPtr, jint index, jdouble value);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithId_withId_withInt_withNSString_(id connectionPtr, id statementPtr, jint index, NSString *value);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithId_withId_withInt_withByteArray_(id connectionPtr, id statementPtr, jint index, IOSByteArray *value);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jint AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithId_withId_withId_withInt_withInt_withBoolean_(id connectionPtr, id statementPtr, id windowPtr, jint startPos, jint requiredPos, jboolean countAllRows);

__attribute__((unused)) static jint AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithId_(id connectionPtr);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection *new_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection *create_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_open(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, jboolean finalized);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setPageSize(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(NSString *value);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement, IOSObjectArray *bindArgs);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(jint statementType);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDebug_DbStats *AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(AndroidDatabaseSqliteSQLiteConnection *self, jint lookaside, jlong pageCount, jlong pageSize);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withId_withInt_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql, id statementPtr, jint numParameters, jint type, jboolean readOnly);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(NSString *sql);

@interface AndroidDatabaseSqliteSQLiteConnection_PreparedStatement : NSObject {
 @public
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *mPoolNext_;
  NSString *mSql_;
  id mStatementPtr_;
  jint mNumParameters_;
  jint mType_;
  jboolean mReadOnly_;
  jboolean mInCache_;
  jboolean mInUse_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement, mPoolNext_, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement, mSql_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement, mStatementPtr_, id)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement)

@interface AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache : AndroidUtilLruCache {
 @public
  AndroidDatabaseSqliteSQLiteConnection *this$0_;
}

- (instancetype)initWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)outer$
                                                      withInt:(jint)size;

- (void)entryRemovedWithBoolean:(jboolean)evicted
                         withId:(NSString *)key
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)oldValue
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)newValue;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache, this$0_, AndroidDatabaseSqliteSQLiteConnection *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *self, AndroidDatabaseSqliteSQLiteConnection *outer$, jint size);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache)

@interface AndroidDatabaseSqliteSQLiteConnection_OperationLog : NSObject {
 @public
  IOSObjectArray *mOperations_;
  jint mIndex_;
  jint mGeneration_;
}

- (jint)beginOperationWithNSString:(NSString *)kind
                      withNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs;

- (void)failOperationWithInt:(jint)cookie
       withJavaLangException:(JavaLangException *)ex;

- (void)endOperationWithInt:(jint)cookie;

- (jboolean)endOperationDeferLogWithInt:(jint)cookie;

- (void)logOperationWithInt:(jint)cookie
               withNSString:(NSString *)detail;

- (jboolean)endOperationDeferLogLockedWithInt:(jint)cookie;

- (void)logOperationLockedWithInt:(jint)cookie
                     withNSString:(NSString *)detail;

- (jint)newOperationCookieLockedWithInt:(jint)index OBJC_METHOD_FAMILY_NONE;

- (AndroidDatabaseSqliteSQLiteConnection_Operation *)getOperationLockedWithInt:(jint)cookie;

- (NSString *)describeCurrentOperation;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_OperationLog)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_OperationLog, mOperations_, IOSObjectArray *)

inline jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_get_MAX_RECENT_OPERATIONS();
#define AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS 20
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection_OperationLog, MAX_RECENT_OPERATIONS, jint)

inline jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_get_COOKIE_GENERATION_SHIFT();
#define AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection_OperationLog, COOKIE_GENERATION_SHIFT, jint)

inline jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_get_COOKIE_INDEX_MASK();
#define AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_INDEX_MASK 255
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection_OperationLog, COOKIE_INDEX_MASK, jint)

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie, NSString *detail);

__attribute__((unused)) static jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint index);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_Operation *AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_OperationLog *new_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_OperationLog *create_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_OperationLog)

@interface AndroidDatabaseSqliteSQLiteConnection_Operation : NSObject {
 @public
  jlong mStartTime_;
  jlong mEndTime_;
  NSString *mKind_;
  NSString *mSql_;
  JavaUtilArrayList *mBindArgs_;
  jboolean mFinished_;
  JavaLangException *mException_;
  jint mCookie_;
}

- (void)describeWithJavaLangStringBuilder:(JavaLangStringBuilder *)msg
                              withBoolean:(jboolean)verbose;

- (NSString *)getStatus;

- (NSString *)getTraceMethodName;

- (NSString *)getFormattedStartTime;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteConnection_Operation)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mKind_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mSql_, NSString *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mBindArgs_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteConnection_Operation, mException_, JavaLangException *)

inline jint AndroidDatabaseSqliteSQLiteConnection_Operation_get_MAX_TRACE_METHOD_NAME_LEN();
#define AndroidDatabaseSqliteSQLiteConnection_Operation_MAX_TRACE_METHOD_NAME_LEN 256
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteConnection_Operation, MAX_TRACE_METHOD_NAME_LEN, jint)

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(AndroidDatabaseSqliteSQLiteConnection_Operation *self);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getTraceMethodName(AndroidDatabaseSqliteSQLiteConnection_Operation *self);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(AndroidDatabaseSqliteSQLiteConnection_Operation *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteConnection_Operation_init(AndroidDatabaseSqliteSQLiteConnection_Operation *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_Operation *new_AndroidDatabaseSqliteSQLiteConnection_Operation_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteConnection_Operation *create_AndroidDatabaseSqliteSQLiteConnection_Operation_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteConnection_Operation)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteConnection)

@implementation AndroidDatabaseSqliteSQLiteConnection

+ (id)nativeOpenWithNSString:(NSString *)path
                     withInt:(jint)openFlags
                withNSString:(NSString *)label
                 withBoolean:(jboolean)enableTrace
                 withBoolean:(jboolean)enableProfile {
  return AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(path, openFlags, label, enableTrace, enableProfile);
}

+ (void)nativeCloseWithId:(id)connectionPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithId_(connectionPtr);
}

+ (void)nativeRegisterCustomFunctionWithId:(id)connectionPtr
withAndroidDatabaseSqliteSQLiteCustomFunction:(AndroidDatabaseSqliteSQLiteCustomFunction *)function {
  AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithId_withAndroidDatabaseSqliteSQLiteCustomFunction_(connectionPtr, function);
}

+ (id)nativePrepareStatementWithId:(id)connectionPtr
                      withNSString:(NSString *)sql {
  return AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithId_withNSString_(connectionPtr, sql);
}

+ (void)nativeFinalizeStatementWithId:(id)connectionPtr
                               withId:(id)statementPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithId_withId_(connectionPtr, statementPtr);
}

+ (jint)nativeGetParameterCountWithId:(id)connectionPtr
                               withId:(id)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithId_withId_(connectionPtr, statementPtr);
}

+ (jboolean)nativeIsReadOnlyWithId:(id)connectionPtr
                            withId:(id)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithId_withId_(connectionPtr, statementPtr);
}

+ (jint)nativeGetColumnCountWithId:(id)connectionPtr
                            withId:(id)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithId_withId_(connectionPtr, statementPtr);
}

+ (NSString *)nativeGetColumnNameWithId:(id)connectionPtr
                                 withId:(id)statementPtr
                                withInt:(jint)index {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithId_withId_withInt_(connectionPtr, statementPtr, index);
}

+ (void)nativeBindNullWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithId_withId_withInt_(connectionPtr, statementPtr, index);
}

+ (void)nativeBindLongWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index
                    withLong:(jlong)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithId_withId_withInt_withLong_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindDoubleWithId:(id)connectionPtr
                        withId:(id)statementPtr
                       withInt:(jint)index
                    withDouble:(jdouble)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithId_withId_withInt_withDouble_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindStringWithId:(id)connectionPtr
                        withId:(id)statementPtr
                       withInt:(jint)index
                  withNSString:(NSString *)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithId_withId_withInt_withNSString_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindBlobWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index
               withByteArray:(IOSByteArray *)value {
  AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithId_withId_withInt_withByteArray_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeResetStatementAndClearBindingsWithId:(id)connectionPtr
                                            withId:(id)statementPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithId_withId_(connectionPtr, statementPtr);
}

+ (void)nativeExecuteWithId:(id)connectionPtr
                     withId:(id)statementPtr {
  AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithId_withId_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForLongWithId:(id)connectionPtr
                             withId:(id)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithId_withId_(connectionPtr, statementPtr);
}

+ (NSString *)nativeExecuteForStringWithId:(id)connectionPtr
                                    withId:(id)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithId_withId_(connectionPtr, statementPtr);
}

+ (jint)nativeExecuteForChangedRowCountWithId:(id)connectionPtr
                                       withId:(id)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithId_withId_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForLastInsertedRowIdWithId:(id)connectionPtr
                                          withId:(id)statementPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithId_withId_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForCursorWindowWithId:(id)connectionPtr
                                     withId:(id)statementPtr
                                     withId:(id)windowPtr
                                    withInt:(jint)startPos
                                    withInt:(jint)requiredPos
                                withBoolean:(jboolean)countAllRows {
  return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithId_withId_withId_withInt_withInt_withBoolean_(connectionPtr, statementPtr, windowPtr, startPos, requiredPos, countAllRows);
}

+ (jint)nativeGetDbLookasideWithId:(id)connectionPtr {
  return AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithId_(connectionPtr);
}

- (instancetype)initWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)pool
             withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                          withInt:(jint)connectionId
                                                      withBoolean:(jboolean)primaryConnection {
  AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(self, pool, configuration, connectionId, primaryConnection);
  return self;
}

- (void)javaFinalize {
  @try {
    if (mPool_ != nil && mConnectionPtr_ != nil) {
      [mPool_ onConnectionLeaked];
    }
    AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(self, true);
  }
  @finally {
    [super javaFinalize];
  }
}

+ (AndroidDatabaseSqliteSQLiteConnection *)openWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)pool
                                        withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration
                                                                                     withInt:(jint)connectionId
                                                                                 withBoolean:(jboolean)primaryConnection {
  return AndroidDatabaseSqliteSQLiteConnection_openWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(pool, configuration, connectionId, primaryConnection);
}

- (void)close {
  AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(self, false);
}

- (void)open {
  AndroidDatabaseSqliteSQLiteConnection_open(self);
}

- (void)disposeWithBoolean:(jboolean)finalized {
  AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(self, finalized);
}

- (void)setPageSize {
  AndroidDatabaseSqliteSQLiteConnection_setPageSize(self);
}

- (void)setAutoCheckpointInterval {
  AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(self);
}

- (void)setJournalSizeLimit {
  AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(self);
}

- (void)setForeignKeyModeFromConfiguration {
  AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(self);
}

- (void)setWalModeFromConfiguration {
  AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(self);
}

- (void)setSyncModeWithNSString:(NSString *)newValue {
  AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(self, newValue);
}

+ (NSString *)canonicalizeSyncModeWithNSString:(NSString *)value {
  return AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(value);
}

- (void)setJournalModeWithNSString:(NSString *)newValue {
  AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(self, newValue);
}

- (void)setLocaleFromConfiguration {
  AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(self);
}

- (void)reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:(AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)configuration {
  mOnlyAllowReadOnlyOperations_ = false;
  jint functionCount = [((JavaUtilArrayList *) nil_chk(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(configuration))->customFunctions_)) size];
  for (jint i = 0; i < functionCount; i++) {
    AndroidDatabaseSqliteSQLiteCustomFunction *function = [configuration->customFunctions_ getWithInt:i];
    if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->customFunctions_ containsWithId:function]) {
      AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithId_withAndroidDatabaseSqliteSQLiteCustomFunction_(mConnectionPtr_, function);
    }
  }
  jboolean foreignKeyModeChanged = configuration->foreignKeyConstraintsEnabled_ != ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->foreignKeyConstraintsEnabled_;
  jboolean walModeChanged = ((configuration->openFlags_ ^ mConfiguration_->openFlags_) & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0;
  jboolean localeChanged = ![((JavaUtilLocale *) nil_chk(configuration->locale_)) isEqual:mConfiguration_->locale_];
  [mConfiguration_ updateParametersFromWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:configuration];
  [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) resizeWithInt:configuration->maxSqlCacheSize_];
  if (foreignKeyModeChanged) {
    AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(self);
  }
  if (walModeChanged) {
    AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(self);
  }
  if (localeChanged) {
    AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(self);
  }
}

- (void)setOnlyAllowReadOnlyOperationsWithBoolean:(jboolean)readOnly {
  mOnlyAllowReadOnlyOperations_ = readOnly;
}

- (jboolean)isPreparedStatementInCacheWithNSString:(NSString *)sql {
  return [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) getWithId:sql] != nil;
}

- (jint)getConnectionId {
  return mConnectionId_;
}

- (jboolean)isPrimaryConnection {
  return mIsPrimaryConnection_;
}

- (void)prepareWithNSString:(NSString *)sql
withAndroidDatabaseSqliteSQLiteStatementInfo:(AndroidDatabaseSqliteSQLiteStatementInfo *)outStatementInfo {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"prepare" withNSString:sql withNSObjectArray:nil];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      if (outStatementInfo != nil) {
        outStatementInfo->numParameters_ = ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mNumParameters_;
        outStatementInfo->readOnly_ = statement->mReadOnly_;
        jint columnCount = AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithId_withId_(mConnectionPtr_, statement->mStatementPtr_);
        if (columnCount == 0) {
          outStatementInfo->columnNames_ = AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY;
        }
        else {
          outStatementInfo->columnNames_ = [IOSObjectArray newArrayWithLength:columnCount type:NSString_class_()];
          for (jint i = 0; i < columnCount; i++) {
            (void) IOSObjectArray_Set(outStatementInfo->columnNames_, i, AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithId_withId_withInt_(mConnectionPtr_, statement->mStatementPtr_, i));
          }
        }
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (void)executeWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"execute" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      @try {
        AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithId_withId_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jlong)executeForLongWithNSString:(NSString *)sql
                  withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForLong" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      @try {
        return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithId_withId_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (NSString *)executeForStringWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForString" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      @try {
        return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithId_withId_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jint)executeForChangedRowCountWithNSString:(NSString *)sql
                            withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint changedRows = 0;
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForChangedRowCount" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      @try {
        changedRows = AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithId_withId_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
        return changedRows;
      }
      @finally {
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    if ([mRecentOperations_ endOperationDeferLogWithInt:cookie]) {
      [mRecentOperations_ logOperationWithInt:cookie withNSString:JreStrcat("$I", @"changedRows=", changedRows)];
    }
  }
}

- (jlong)executeForLastInsertedRowIdWithNSString:(NSString *)sql
                               withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForLastInsertedRowId" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      @try {
        return AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithId_withId_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jint)executeForCursorWindowWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
           withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                   withInt:(jint)startPos
                                   withInt:(jint)requiredPos
                               withBoolean:(jboolean)countAllRows {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (window == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"window must not be null.");
  }
  [((AndroidDatabaseCursorWindow *) nil_chk(window)) acquireReference];
  @try {
    jint actualPos = -1;
    jint countedRows = -1;
    jint filledRows = -1;
    jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForCursorWindow" withNSString:sql withNSObjectArray:bindArgs];
    @try {
      AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
      @try {
        AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
        AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
        @try {
          jlong result = AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithId_withId_withId_withInt_withInt_withBoolean_(mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_, window->mWindowPtr_, startPos, requiredPos, countAllRows);
          actualPos = (jint) (JreRShift64(result, 32));
          countedRows = (jint) result;
          filledRows = [window getNumRows];
          [window setStartPositionWithInt:actualPos];
          return countedRows;
        }
        @finally {
        }
      }
      @finally {
        AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
      }
    }
    @catch (JavaLangRuntimeException *ex) {
      [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
      @throw ex;
    }
    @finally {
      if ([mRecentOperations_ endOperationDeferLogWithInt:cookie]) {
        [mRecentOperations_ logOperationWithInt:cookie withNSString:JreStrcat("$@$I$I$I$I", @"window='", window, @"', startPos=", startPos, @", actualPos=", actualPos, @", filledRows=", filledRows, @", countedRows=", countedRows)];
      }
    }
  }
  @finally {
    [window releaseReference];
  }
}

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)acquirePreparedStatementWithNSString:(NSString *)sql {
  return AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
}

- (void)releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

- (void)finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

- (void)bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement
                                                               withNSObjectArray:(IOSObjectArray *)bindArgs {
  AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
}

- (void)throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

+ (jboolean)isCacheableWithInt:(jint)statementType {
  return AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(statementType);
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose {
  [self dumpUnsafeWithAndroidUtilPrinter:printer withBoolean:verbose];
}

- (void)dumpUnsafeWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                             withBoolean:(jboolean)verbose {
  [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:JreStrcat("$IC", @"Connection #", mConnectionId_, ':')];
  [printer printlnWithNSString:JreStrcat("$Z", @"  isPrimaryConnection: ", mIsPrimaryConnection_)];
  [printer printlnWithNSString:JreStrcat("$Z", @"  onlyAllowReadOnlyOperations: ", mOnlyAllowReadOnlyOperations_)];
  [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) dumpWithAndroidUtilPrinter:printer withBoolean:verbose];
  if (verbose) {
    [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) dumpWithAndroidUtilPrinter:printer];
  }
}

- (NSString *)describeCurrentOperationUnsafe {
  return [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) describeCurrentOperation];
}

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  jint lookaside = AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithId_(mConnectionPtr_);
  jlong pageCount = 0;
  jlong pageSize = 0;
  @try {
    pageCount = [self executeForLongWithNSString:@"PRAGMA page_count;" withNSObjectArray:nil];
    pageSize = [self executeForLongWithNSString:@"PRAGMA page_size;" withNSObjectArray:nil];
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
  }
  [((JavaUtilArrayList *) nil_chk(dbStatsList)) addWithId:AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, lookaside, pageCount, pageSize)];
  AndroidDatabaseCursorWindow *window = new_AndroidDatabaseCursorWindow_initWithNSString_(@"collectDbStats");
  @try {
    [self executeForCursorWindowWithNSString:@"PRAGMA database_list;" withNSObjectArray:nil withAndroidDatabaseCursorWindow:window withInt:0 withInt:0 withBoolean:false];
    for (jint i = 1; i < [window getNumRows]; i++) {
      NSString *name = [window getStringWithInt:i withInt:1];
      NSString *path = [window getStringWithInt:i withInt:2];
      pageCount = 0;
      pageSize = 0;
      @try {
        pageCount = [self executeForLongWithNSString:JreStrcat("$$$", @"PRAGMA ", name, @".page_count;") withNSObjectArray:nil];
        pageSize = [self executeForLongWithNSString:JreStrcat("$$$", @"PRAGMA ", name, @".page_size;") withNSObjectArray:nil];
      }
      @catch (AndroidDatabaseSqliteSQLiteException *ex) {
      }
      NSString *label = JreStrcat("$$", @"  (attached) ", name);
      if (![((NSString *) nil_chk(path)) isEmpty]) {
        (void) JreStrAppendStrong(&label, "$$", @": ", path);
      }
      [dbStatsList addWithId:new_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(label, pageCount, pageSize, 0, 0, 0, 0)];
    }
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
  }
  @finally {
    [window close];
  }
}

- (void)collectDbStatsUnsafeWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  [((JavaUtilArrayList *) nil_chk(dbStatsList)) addWithId:AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, 0, 0, 0)];
}

- (AndroidDatabaseSqliteSQLiteDebug_DbStats *)getMainDbStatsUnsafeWithInt:(jint)lookaside
                                                                 withLong:(jlong)pageCount
                                                                 withLong:(jlong)pageSize {
  return AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, lookaside, pageCount, pageSize);
}

- (NSString *)description {
  return JreStrcat("$$$IC", @"SQLiteConnection: ", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->path_, @" (", mConnectionId_, ')');
}

- (AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)obtainPreparedStatementWithNSString:(NSString *)sql
                                                                                          withId:(id)statementPtr
                                                                                         withInt:(jint)numParameters
                                                                                         withInt:(jint)type
                                                                                     withBoolean:(jboolean)readOnly {
  return AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withId_withInt_withInt_withBoolean_(self, sql, statementPtr, numParameters, type, readOnly);
}

- (void)recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)statement {
  AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

+ (NSString *)trimSqlForDisplayWithNSString:(NSString *)sql {
  return AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(sql);
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseSqliteSQLiteConnection class]);
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteConnection class]) {
    AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY = [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
    AndroidDatabaseSqliteSQLiteConnection_EMPTY_BYTE_ARRAY = [IOSByteArray newArrayWithLength:0];
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteConnection)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "nativeOpenWithNSString:withInt:withNSString:withBoolean:withBoolean:", "nativeOpen", "Ljava.lang.Object;", 0x10a, NULL, NULL },
    { "nativeCloseWithId:", "nativeClose", "V", 0x10a, NULL, NULL },
    { "nativeRegisterCustomFunctionWithId:withAndroidDatabaseSqliteSQLiteCustomFunction:", "nativeRegisterCustomFunction", "V", 0x10a, NULL, NULL },
    { "nativePrepareStatementWithId:withNSString:", "nativePrepareStatement", "Ljava.lang.Object;", 0x10a, NULL, NULL },
    { "nativeFinalizeStatementWithId:withId:", "nativeFinalizeStatement", "V", 0x10a, NULL, NULL },
    { "nativeGetParameterCountWithId:withId:", "nativeGetParameterCount", "I", 0x10a, NULL, NULL },
    { "nativeIsReadOnlyWithId:withId:", "nativeIsReadOnly", "Z", 0x10a, NULL, NULL },
    { "nativeGetColumnCountWithId:withId:", "nativeGetColumnCount", "I", 0x10a, NULL, NULL },
    { "nativeGetColumnNameWithId:withId:withInt:", "nativeGetColumnName", "Ljava.lang.String;", 0x10a, NULL, NULL },
    { "nativeBindNullWithId:withId:withInt:", "nativeBindNull", "V", 0x10a, NULL, NULL },
    { "nativeBindLongWithId:withId:withInt:withLong:", "nativeBindLong", "V", 0x10a, NULL, NULL },
    { "nativeBindDoubleWithId:withId:withInt:withDouble:", "nativeBindDouble", "V", 0x10a, NULL, NULL },
    { "nativeBindStringWithId:withId:withInt:withNSString:", "nativeBindString", "V", 0x10a, NULL, NULL },
    { "nativeBindBlobWithId:withId:withInt:withByteArray:", "nativeBindBlob", "V", 0x10a, NULL, NULL },
    { "nativeResetStatementAndClearBindingsWithId:withId:", "nativeResetStatementAndClearBindings", "V", 0x10a, NULL, NULL },
    { "nativeExecuteWithId:withId:", "nativeExecute", "V", 0x10a, NULL, NULL },
    { "nativeExecuteForLongWithId:withId:", "nativeExecuteForLong", "J", 0x10a, NULL, NULL },
    { "nativeExecuteForStringWithId:withId:", "nativeExecuteForString", "Ljava.lang.String;", 0x10a, NULL, NULL },
    { "nativeExecuteForChangedRowCountWithId:withId:", "nativeExecuteForChangedRowCount", "I", 0x10a, NULL, NULL },
    { "nativeExecuteForLastInsertedRowIdWithId:withId:", "nativeExecuteForLastInsertedRowId", "J", 0x10a, NULL, NULL },
    { "nativeExecuteForCursorWindowWithId:withId:withId:withInt:withInt:withBoolean:", "nativeExecuteForCursorWindow", "J", 0x10a, NULL, NULL },
    { "nativeGetDbLookasideWithId:", "nativeGetDbLookaside", "I", 0x10a, NULL, NULL },
    { "initWithAndroidDatabaseSqliteSQLiteConnectionPool:withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:withInt:withBoolean:", "SQLiteConnection", NULL, 0x2, NULL, NULL },
    { "javaFinalize", "finalize", "V", 0x4, "Ljava.lang.Throwable;", NULL },
    { "openWithAndroidDatabaseSqliteSQLiteConnectionPool:withAndroidDatabaseSqliteSQLiteDatabaseConfiguration:withInt:withBoolean:", "open", "Landroid.database.sqlite.SQLiteConnection;", 0x8, NULL, NULL },
    { "close", NULL, "V", 0x0, NULL, NULL },
    { "open", NULL, "V", 0x2, NULL, NULL },
    { "disposeWithBoolean:", "dispose", "V", 0x2, NULL, NULL },
    { "setPageSize", NULL, "V", 0x2, NULL, NULL },
    { "setAutoCheckpointInterval", NULL, "V", 0x2, NULL, NULL },
    { "setJournalSizeLimit", NULL, "V", 0x2, NULL, NULL },
    { "setForeignKeyModeFromConfiguration", NULL, "V", 0x2, NULL, NULL },
    { "setWalModeFromConfiguration", NULL, "V", 0x2, NULL, NULL },
    { "setSyncModeWithNSString:", "setSyncMode", "V", 0x2, NULL, NULL },
    { "canonicalizeSyncModeWithNSString:", "canonicalizeSyncMode", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "setJournalModeWithNSString:", "setJournalMode", "V", 0x2, NULL, NULL },
    { "setLocaleFromConfiguration", NULL, "V", 0x2, NULL, NULL },
    { "reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:", "reconfigure", "V", 0x0, NULL, NULL },
    { "setOnlyAllowReadOnlyOperationsWithBoolean:", "setOnlyAllowReadOnlyOperations", "V", 0x0, NULL, NULL },
    { "isPreparedStatementInCacheWithNSString:", "isPreparedStatementInCache", "Z", 0x0, NULL, NULL },
    { "getConnectionId", NULL, "I", 0x1, NULL, NULL },
    { "isPrimaryConnection", NULL, "Z", 0x1, NULL, NULL },
    { "prepareWithNSString:withAndroidDatabaseSqliteSQLiteStatementInfo:", "prepare", "V", 0x1, NULL, NULL },
    { "executeWithNSString:withNSObjectArray:", "execute", "V", 0x1, NULL, NULL },
    { "executeForLongWithNSString:withNSObjectArray:", "executeForLong", "J", 0x1, NULL, NULL },
    { "executeForStringWithNSString:withNSObjectArray:", "executeForString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "executeForChangedRowCountWithNSString:withNSObjectArray:", "executeForChangedRowCount", "I", 0x1, NULL, NULL },
    { "executeForLastInsertedRowIdWithNSString:withNSObjectArray:", "executeForLastInsertedRowId", "J", 0x1, NULL, NULL },
    { "executeForCursorWindowWithNSString:withNSObjectArray:withAndroidDatabaseCursorWindow:withInt:withInt:withBoolean:", "executeForCursorWindow", "I", 0x1, NULL, NULL },
    { "acquirePreparedStatementWithNSString:", "acquirePreparedStatement", "Landroid.database.sqlite.SQLiteConnection$PreparedStatement;", 0x2, NULL, NULL },
    { "releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:", "releasePreparedStatement", "V", 0x2, NULL, NULL },
    { "finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:", "finalizePreparedStatement", "V", 0x2, NULL, NULL },
    { "bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:withNSObjectArray:", "bindArguments", "V", 0x2, NULL, NULL },
    { "throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:", "throwIfStatementForbidden", "V", 0x2, NULL, NULL },
    { "isCacheableWithInt:", "isCacheable", "Z", 0xa, NULL, NULL },
    { "dumpWithAndroidUtilPrinter:withBoolean:", "dump", "V", 0x1, NULL, NULL },
    { "dumpUnsafeWithAndroidUtilPrinter:withBoolean:", "dumpUnsafe", "V", 0x0, NULL, NULL },
    { "describeCurrentOperationUnsafe", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "collectDbStatsWithJavaUtilArrayList:", "collectDbStats", "V", 0x0, NULL, "(Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDebug$DbStats;>;)V" },
    { "collectDbStatsUnsafeWithJavaUtilArrayList:", "collectDbStatsUnsafe", "V", 0x0, NULL, "(Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDebug$DbStats;>;)V" },
    { "getMainDbStatsUnsafeWithInt:withLong:withLong:", "getMainDbStatsUnsafe", "Landroid.database.sqlite.SQLiteDebug$DbStats;", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "obtainPreparedStatementWithNSString:withId:withInt:withInt:withBoolean:", "obtainPreparedStatement", "Landroid.database.sqlite.SQLiteConnection$PreparedStatement;", 0x2, NULL, NULL },
    { "recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement:", "recyclePreparedStatement", "V", 0x2, NULL, NULL },
    { "trimSqlForDisplayWithNSString:", "trimSqlForDisplay", "Ljava.lang.String;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "TAG", 0x1a, "Ljava.lang.String;", &AndroidDatabaseSqliteSQLiteConnection_TAG, NULL, .constantValue.asLong = 0 },
    { "DEBUG", "DEBUG", 0x1a, "Z", NULL, NULL, .constantValue.asBOOL = AndroidDatabaseSqliteSQLiteConnection_DEBUG },
    { "EMPTY_STRING_ARRAY", "EMPTY_STRING_ARRAY", 0x1a, "[Ljava.lang.String;", &AndroidDatabaseSqliteSQLiteConnection_EMPTY_STRING_ARRAY, NULL, .constantValue.asLong = 0 },
    { "EMPTY_BYTE_ARRAY", "EMPTY_BYTE_ARRAY", 0x1a, "[B", &AndroidDatabaseSqliteSQLiteConnection_EMPTY_BYTE_ARRAY, NULL, .constantValue.asLong = 0 },
    { "mCloseGuard_", NULL, 0x12, "Landroid.system.CloseGuard;", NULL, NULL, .constantValue.asLong = 0 },
    { "mPool_", NULL, 0x12, "Landroid.database.sqlite.SQLiteConnectionPool;", NULL, NULL, .constantValue.asLong = 0 },
    { "mConfiguration_", NULL, 0x12, "Landroid.database.sqlite.SQLiteDatabaseConfiguration;", NULL, NULL, .constantValue.asLong = 0 },
    { "mConnectionId_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mIsPrimaryConnection_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mIsReadOnlyConnection_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mPreparedStatementCache_", NULL, 0x12, "Landroid.database.sqlite.SQLiteConnection$PreparedStatementCache;", NULL, NULL, .constantValue.asLong = 0 },
    { "mPreparedStatementPool_", NULL, 0x2, "Landroid.database.sqlite.SQLiteConnection$PreparedStatement;", NULL, NULL, .constantValue.asLong = 0 },
    { "mRecentOperations_", NULL, 0x12, "Landroid.database.sqlite.SQLiteConnection$OperationLog;", NULL, NULL, .constantValue.asLong = 0 },
    { "mConnectionPtr_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "mOnlyAllowReadOnlyOperations_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mCancellationSignalAttachCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Landroid.database.sqlite.SQLiteConnection$PreparedStatement;", "Landroid.database.sqlite.SQLiteConnection$PreparedStatementCache;", "Landroid.database.sqlite.SQLiteConnection$OperationLog;", "Landroid.database.sqlite.SQLiteConnection$Operation;"};
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection = { 2, "SQLiteConnection", "android.database.sqlite", NULL, 0x11, 65, methods, 16, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteConnection;
}

@end

id AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(NSString *path, jint openFlags, NSString *label, jboolean enableTrace, jboolean enableProfile) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeOpen:path openFlags:openFlags labelStr:label
  enableTrace:enableTrace enableProfile:enableProfile];
}

void AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithId_(id connectionPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeClose:connectionPtr];
}

void AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithId_withAndroidDatabaseSqliteSQLiteCustomFunction_(id connectionPtr, AndroidDatabaseSqliteSQLiteCustomFunction *function) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Registering native custom functions is not yet supported."];
}

id AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithId_withNSString_(id connectionPtr, NSString *sql) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativePrepareStatement:connectionPtr withSql:sql];
}

void AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithId_withId_(id connectionPtr, id statementPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeFinalizeStatement:connectionPtr statement:statementPtr];
}

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithId_withId_(id connectionPtr, id statementPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeGetParameterCount:connectionPtr statement:statementPtr];
}

jboolean AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithId_withId_(id connectionPtr, id statementPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeIsReadOnly:connectionPtr statement:statementPtr];
}

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnCountWithId_withId_(id connectionPtr, id statementPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeGetColumnCount:connectionPtr statement:statementPtr];
}

NSString *AndroidDatabaseSqliteSQLiteConnection_nativeGetColumnNameWithId_withId_withInt_(id connectionPtr, id statementPtr, jint index) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeGetColumnName:connectionPtr statement:statementPtr index:index];
}

void AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithId_withId_withInt_(id connectionPtr, id statementPtr, jint index) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeBindNull:connectionPtr statement:statementPtr index:index];
}

void AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithId_withId_withInt_withLong_(id connectionPtr, id statementPtr, jint index, jlong value) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeBindLong:connectionPtr statement:statementPtr index:index value:value];
}

void AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithId_withId_withInt_withDouble_(id connectionPtr, id statementPtr, jint index, jdouble value) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeBindDouble:connectionPtr statement:statementPtr index:index value:value];
}

void AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithId_withId_withInt_withNSString_(id connectionPtr, id statementPtr, jint index, NSString *value) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeBindString:connectionPtr statement:statementPtr index:index value:value];
}

void AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithId_withId_withInt_withByteArray_(id connectionPtr, id statementPtr, jint index, IOSByteArray *value) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeBindBlob:connectionPtr statement:statementPtr index:index value:value];
}

void AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithId_withId_(id connectionPtr, id statementPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeResetStatementAndClearBindings:connectionPtr statement:statementPtr];
}

void AndroidDatabaseSqliteSQLiteConnection_nativeExecuteWithId_withId_(id connectionPtr, id statementPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeExecute:connectionPtr statement:statementPtr];
}

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLongWithId_withId_(id connectionPtr, id statementPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeExecuteForLong:connectionPtr statement:statementPtr];
}

NSString *AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForStringWithId_withId_(id connectionPtr, id statementPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeExecuteForString:connectionPtr statement:statementPtr];
}

jint AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForChangedRowCountWithId_withId_(id connectionPtr, id statementPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeExecuteForChangedRowCount:connectionPtr statement:statementPtr];
}

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForLastInsertedRowIdWithId_withId_(id connectionPtr, id statementPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeExecuteForLastInsertedRowId:connectionPtr statement:statementPtr];
}

jlong AndroidDatabaseSqliteSQLiteConnection_nativeExecuteForCursorWindowWithId_withId_withId_withInt_withInt_withBoolean_(id connectionPtr, id statementPtr, id windowPtr, jint startPos, jint requiredPos, jboolean countAllRows) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeExecuteForCursorWindow:connectionPtr statement:statementPtr window:windowPtr
  startPos:startPos requiredPos:requiredPos countAllRows:countAllRows];
}

jint AndroidDatabaseSqliteSQLiteConnection_nativeGetDbLookasideWithId_(id connectionPtr) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeGetDbLookaside:connectionPtr];
}

void AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  NSObject_init(self);
  self->mCloseGuard_ = AndroidSystemCloseGuard_get();
  self->mRecentOperations_ = new_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init();
  self->mPool_ = pool;
  self->mConfiguration_ = new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(configuration);
  self->mConnectionId_ = connectionId;
  self->mIsPrimaryConnection_ = primaryConnection;
  self->mIsReadOnlyConnection_ = ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(configuration))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY) != 0);
  self->mPreparedStatementCache_ = new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, self->mConfiguration_->maxSqlCacheSize_);
  [((AndroidSystemCloseGuard *) nil_chk(self->mCloseGuard_)) openWithNSString:@"close"];
}

AndroidDatabaseSqliteSQLiteConnection *new_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  AndroidDatabaseSqliteSQLiteConnection *self = [AndroidDatabaseSqliteSQLiteConnection alloc];
  AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(self, pool, configuration, connectionId, primaryConnection);
  return self;
}

AndroidDatabaseSqliteSQLiteConnection *create_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  return new_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(pool, configuration, connectionId, primaryConnection);
}

AndroidDatabaseSqliteSQLiteConnection *AndroidDatabaseSqliteSQLiteConnection_openWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnectionPool *pool, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  AndroidDatabaseSqliteSQLiteConnection *connection = new_AndroidDatabaseSqliteSQLiteConnection_initWithAndroidDatabaseSqliteSQLiteConnectionPool_withAndroidDatabaseSqliteSQLiteDatabaseConfiguration_withInt_withBoolean_(pool, configuration, connectionId, primaryConnection);
  @try {
    AndroidDatabaseSqliteSQLiteConnection_open(connection);
    return connection;
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
    AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(connection, false);
    @throw ex;
  }
}

void AndroidDatabaseSqliteSQLiteConnection_open(AndroidDatabaseSqliteSQLiteConnection *self) {
  self->mConnectionPtr_ = AndroidDatabaseSqliteSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->path_, self->mConfiguration_->openFlags_, self->mConfiguration_->label_, JreLoadStatic(AndroidDatabaseSqliteSQLiteDebug, DEBUG_SQL_STATEMENTS), JreLoadStatic(AndroidDatabaseSqliteSQLiteDebug, DEBUG_SQL_TIME));
  AndroidDatabaseSqliteSQLiteConnection_setPageSize(self);
  AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(self);
  AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(self);
  AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(self);
  AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(self);
  AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(self);
  jint functionCount = [((JavaUtilArrayList *) nil_chk(self->mConfiguration_->customFunctions_)) size];
  for (jint i = 0; i < functionCount; i++) {
    AndroidDatabaseSqliteSQLiteCustomFunction *function = [self->mConfiguration_->customFunctions_ getWithInt:i];
    AndroidDatabaseSqliteSQLiteConnection_nativeRegisterCustomFunctionWithId_withAndroidDatabaseSqliteSQLiteCustomFunction_(self->mConnectionPtr_, function);
  }
}

void AndroidDatabaseSqliteSQLiteConnection_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, jboolean finalized) {
  if (self->mCloseGuard_ != nil) {
    if (finalized) {
      [self->mCloseGuard_ warnIfOpen];
    }
    [self->mCloseGuard_ close];
  }
  if (self->mConnectionPtr_ != nil) {
    jint cookie = [((AndroidDatabaseSqliteSQLiteConnection_OperationLog *) nil_chk(self->mRecentOperations_)) beginOperationWithNSString:@"close" withNSString:nil withNSObjectArray:nil];
    @try {
      [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) evictAll];
      AndroidDatabaseSqliteSQLiteConnection_nativeCloseWithId_(self->mConnectionPtr_);
      self->mConnectionPtr_ = nil;
    }
    @finally {
      [self->mRecentOperations_ endOperationWithInt:cookie];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setPageSize(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = AndroidDatabaseSqliteSQLiteGlobal_getDefaultPageSize();
    jlong value = [self executeForLongWithNSString:@"PRAGMA page_size" withNSObjectArray:nil];
    if (value != newValue) {
      [self executeWithNSString:JreStrcat("$J", @"PRAGMA page_size=", newValue) withNSObjectArray:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setAutoCheckpointInterval(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = AndroidDatabaseSqliteSQLiteGlobal_getWALAutoCheckpoint();
    jlong value = [self executeForLongWithNSString:@"PRAGMA wal_autocheckpoint" withNSObjectArray:nil];
    if (value != newValue) {
      [self executeForLongWithNSString:JreStrcat("$J", @"PRAGMA wal_autocheckpoint=", newValue) withNSObjectArray:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setJournalSizeLimit(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = AndroidDatabaseSqliteSQLiteGlobal_getJournalSizeLimit();
    jlong value = [self executeForLongWithNSString:@"PRAGMA journal_size_limit" withNSObjectArray:nil];
    if (value != newValue) {
      [self executeForLongWithNSString:JreStrcat("$J", @"PRAGMA journal_size_limit=", newValue) withNSObjectArray:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setForeignKeyModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (!self->mIsReadOnlyConnection_) {
    jlong newValue = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->foreignKeyConstraintsEnabled_ ? 1 : 0;
    jlong value = [self executeForLongWithNSString:@"PRAGMA foreign_keys" withNSObjectArray:nil];
    if (value != newValue) {
      [self executeWithNSString:JreStrcat("$J", @"PRAGMA foreign_keys=", newValue) withNSObjectArray:nil];
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setWalModeFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self) {
  if (![((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    if ((self->mConfiguration_->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0) {
      AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(self, @"WAL");
      AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(self, AndroidDatabaseSqliteSQLiteGlobal_getWALSyncMode());
    }
    else {
      AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(self, AndroidDatabaseSqliteSQLiteGlobal_getDefaultJournalMode());
      AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(self, AndroidDatabaseSqliteSQLiteGlobal_getDefaultSyncMode());
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setSyncModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue) {
  NSString *value = [self executeForStringWithNSString:@"PRAGMA synchronous" withNSObjectArray:nil];
  if (![((NSString *) nil_chk(AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(value))) equalsIgnoreCase:AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(newValue)]) {
    [self executeWithNSString:JreStrcat("$$", @"PRAGMA synchronous=", newValue) withNSObjectArray:nil];
  }
}

NSString *AndroidDatabaseSqliteSQLiteConnection_canonicalizeSyncModeWithNSString_(NSString *value) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  if ([((NSString *) nil_chk(value)) isEqual:@"0"]) {
    return @"OFF";
  }
  else if ([value isEqual:@"1"]) {
    return @"NORMAL";
  }
  else if ([value isEqual:@"2"]) {
    return @"FULL";
  }
  return value;
}

void AndroidDatabaseSqliteSQLiteConnection_setJournalModeWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *newValue) {
  NSString *value = [self executeForStringWithNSString:@"PRAGMA journal_mode" withNSObjectArray:nil];
  if (![((NSString *) nil_chk(value)) equalsIgnoreCase:newValue]) {
    @try {
      NSString *result = [self executeForStringWithNSString:JreStrcat("$$", @"PRAGMA journal_mode=", newValue) withNSObjectArray:nil];
      if ([((NSString *) nil_chk(result)) equalsIgnoreCase:newValue]) {
        return;
      }
    }
    @catch (AndroidDatabaseSqliteSQLiteDatabaseLockedException *ex) {
    }
    AndroidUtilLog_wWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteConnection_TAG, JreStrcat("$$$$$$$", @"Could not change the database journal mode of '", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->label_, @"' from '", value, @"' to '", newValue, @"' because the database is locked.  This usually means that there are other open connections to the database which prevents the database from enabling or disabling write-ahead logging mode.  Proceeding without changing the journal mode."));
  }
}

void AndroidDatabaseSqliteSQLiteConnection_setLocaleFromConfiguration(AndroidDatabaseSqliteSQLiteConnection *self) {
  if ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_NO_LOCALIZED_COLLATORS) != 0) {
    return;
  }
  NSString *newLocale = [((JavaUtilLocale *) nil_chk(self->mConfiguration_->locale_)) description];
  if (self->mIsReadOnlyConnection_) {
    return;
  }
  @try {
    [self executeWithNSString:@"CREATE TABLE IF NOT EXISTS android_metadata (locale TEXT)" withNSObjectArray:nil];
    NSString *oldLocale = [self executeForStringWithNSString:@"SELECT locale FROM android_metadata UNION SELECT NULL ORDER BY locale DESC LIMIT 1" withNSObjectArray:nil];
    if (oldLocale != nil && [oldLocale isEqual:newLocale]) {
      return;
    }
    [self executeWithNSString:@"BEGIN" withNSObjectArray:nil];
    jboolean success = false;
    @try {
      [self executeWithNSString:@"DELETE FROM android_metadata" withNSObjectArray:nil];
      [self executeWithNSString:@"INSERT INTO android_metadata (locale) VALUES(?)" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ newLocale } count:1 type:NSObject_class_()]];
      [self executeWithNSString:@"REINDEX LOCALIZED" withNSObjectArray:nil];
      success = true;
    }
    @finally {
      [self executeWithNSString:success ? @"COMMIT" : @"ROLLBACK" withNSObjectArray:nil];
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    @throw new_AndroidDatabaseSqliteSQLiteException_initWithNSString_withNSException_(JreStrcat("$$$$$", @"Failed to change locale for db '", self->mConfiguration_->label_, @"' to '", newLocale, @"'."), ex);
  }
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_acquirePreparedStatementWithNSString_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql) {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) getWithId:sql];
  jboolean skipCache = false;
  if (statement != nil) {
    if (!statement->mInUse_) {
      return statement;
    }
    skipCache = true;
  }
  id statementPtr = AndroidDatabaseSqliteSQLiteConnection_nativePrepareStatementWithId_withNSString_(self->mConnectionPtr_, sql);
  @try {
    jint numParameters = AndroidDatabaseSqliteSQLiteConnection_nativeGetParameterCountWithId_withId_(self->mConnectionPtr_, statementPtr);
    jint type = AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(sql);
    jboolean readOnly = AndroidDatabaseSqliteSQLiteConnection_nativeIsReadOnlyWithId_withId_(self->mConnectionPtr_, statementPtr);
    statement = AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withId_withInt_withInt_withBoolean_(self, sql, statementPtr, numParameters, type, readOnly);
    if (!skipCache && AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(type)) {
      (void) [self->mPreparedStatementCache_ putWithId:sql withId:statement];
      ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInCache_ = true;
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    if (statement == nil || !statement->mInCache_) {
      AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithId_withId_(self->mConnectionPtr_, statementPtr);
    }
    @throw ex;
  }
  ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInUse_ = true;
  return statement;
}

void AndroidDatabaseSqliteSQLiteConnection_releasePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInUse_ = false;
  if (statement->mInCache_) {
    @try {
      AndroidDatabaseSqliteSQLiteConnection_nativeResetStatementAndClearBindingsWithId_withId_(self->mConnectionPtr_, statement->mStatementPtr_);
    }
    @catch (AndroidDatabaseSqliteSQLiteException *ex) {
      (void) [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) removeWithId:statement->mSql_];
    }
  }
  else {
    AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
  }
}

void AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  AndroidDatabaseSqliteSQLiteConnection_nativeFinalizeStatementWithId_withId_(self->mConnectionPtr_, ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
  AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(self, statement);
}

void AndroidDatabaseSqliteSQLiteConnection_bindArgumentsWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_withNSObjectArray_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement, IOSObjectArray *bindArgs) {
  jint count = bindArgs != nil ? bindArgs->size_ : 0;
  if (count != ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mNumParameters_) {
    @throw new_AndroidDatabaseSqliteSQLiteBindOrColumnIndexOutOfRangeException_initWithNSString_(JreStrcat("$I$I$", @"Expected ", statement->mNumParameters_, @" bind arguments but ", count, @" were provided."));
  }
  if (count == 0) {
    return;
  }
  id statementPtr = statement->mStatementPtr_;
  for (jint i = 0; i < count; i++) {
    id arg = IOSObjectArray_Get(nil_chk(bindArgs), i);
    switch (AndroidDatabaseDatabaseUtils_getTypeOfObjectWithId_(arg)) {
      case AndroidDatabaseCursor_FIELD_TYPE_NULL:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindNullWithId_withId_withInt_(self->mConnectionPtr_, statementPtr, i + 1);
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_INTEGER:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithId_withId_withInt_withLong_(self->mConnectionPtr_, statementPtr, i + 1, [((NSNumber *) nil_chk(((NSNumber *) cast_chk(arg, [NSNumber class])))) longLongValue]);
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_FLOAT:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindDoubleWithId_withId_withInt_withDouble_(self->mConnectionPtr_, statementPtr, i + 1, [((NSNumber *) nil_chk(((NSNumber *) cast_chk(arg, [NSNumber class])))) doubleValue]);
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_BLOB:
      AndroidDatabaseSqliteSQLiteConnection_nativeBindBlobWithId_withId_withInt_withByteArray_(self->mConnectionPtr_, statementPtr, i + 1, (IOSByteArray *) cast_chk(arg, [IOSByteArray class]));
      break;
      case AndroidDatabaseCursor_FIELD_TYPE_STRING:
      default:
      if ([arg isKindOfClass:[JavaLangBoolean class]]) {
        AndroidDatabaseSqliteSQLiteConnection_nativeBindLongWithId_withId_withInt_withLong_(self->mConnectionPtr_, statementPtr, i + 1, [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(arg, [JavaLangBoolean class])))) booleanValue] ? 1 : 0);
      }
      else {
        AndroidDatabaseSqliteSQLiteConnection_nativeBindStringWithId_withId_withInt_withNSString_(self->mConnectionPtr_, statementPtr, i + 1, [nil_chk(arg) description]);
      }
      break;
    }
  }
}

void AndroidDatabaseSqliteSQLiteConnection_throwIfStatementForbiddenWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  if (self->mOnlyAllowReadOnlyOperations_ && !((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mReadOnly_) {
    @throw new_AndroidDatabaseSqliteSQLiteException_initWithNSString_(@"Cannot execute this statement because it might modify the database but the connection is read-only.");
  }
}

jboolean AndroidDatabaseSqliteSQLiteConnection_isCacheableWithInt_(jint statementType) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  if (statementType == AndroidDatabaseDatabaseUtils_STATEMENT_UPDATE || statementType == AndroidDatabaseDatabaseUtils_STATEMENT_SELECT) {
    return true;
  }
  return false;
}

AndroidDatabaseSqliteSQLiteDebug_DbStats *AndroidDatabaseSqliteSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(AndroidDatabaseSqliteSQLiteConnection *self, jint lookaside, jlong pageCount, jlong pageSize) {
  NSString *label = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->path_;
  if (!self->mIsPrimaryConnection_) {
    (void) JreStrAppendStrong(&label, "$IC", @" (", self->mConnectionId_, ')');
  }
  return new_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(label, pageCount, pageSize, lookaside, [((AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) hitCount], [self->mPreparedStatementCache_ missCount], [self->mPreparedStatementCache_ size]);
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *AndroidDatabaseSqliteSQLiteConnection_obtainPreparedStatementWithNSString_withId_withInt_withInt_withBoolean_(AndroidDatabaseSqliteSQLiteConnection *self, NSString *sql, id statementPtr, jint numParameters, jint type, jboolean readOnly) {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = self->mPreparedStatementPool_;
  if (statement != nil) {
    self->mPreparedStatementPool_ = statement->mPoolNext_;
    statement->mPoolNext_ = nil;
    statement->mInCache_ = false;
  }
  else {
    statement = new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init();
  }
  ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mSql_ = sql;
  statement->mStatementPtr_ = statementPtr;
  statement->mNumParameters_ = numParameters;
  statement->mType_ = type;
  statement->mReadOnly_ = readOnly;
  return statement;
}

void AndroidDatabaseSqliteSQLiteConnection_recyclePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(AndroidDatabaseSqliteSQLiteConnection *self, AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement) {
  ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mSql_ = nil;
  statement->mPoolNext_ = self->mPreparedStatementPool_;
  self->mPreparedStatementPool_ = statement;
}

NSString *AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(NSString *sql) {
  AndroidDatabaseSqliteSQLiteConnection_initialize();
  return [((NSString *) nil_chk(sql)) replaceAll:@"[\\s]*\\n+[\\s]*" withReplacement:@" "];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection)

@implementation AndroidDatabaseSqliteSQLiteConnection_PreparedStatement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mPoolNext_", NULL, 0x1, "Landroid.database.sqlite.SQLiteConnection$PreparedStatement;", NULL, NULL, .constantValue.asLong = 0 },
    { "mSql_", NULL, 0x1, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mStatementPtr_", NULL, 0x1, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "mNumParameters_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mType_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mReadOnly_", NULL, 0x1, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mInCache_", NULL, 0x1, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mInUse_", NULL, 0x1, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_PreparedStatement = { 2, "PreparedStatement", "android.database.sqlite", "SQLiteConnection", 0x1a, 1, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement;
}

@end

void AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init() {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *self = [AndroidDatabaseSqliteSQLiteConnection_PreparedStatement alloc];
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init(self);
  return self;
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init() {
  return new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatement_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement)

@implementation AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache

- (instancetype)initWithAndroidDatabaseSqliteSQLiteConnection:(AndroidDatabaseSqliteSQLiteConnection *)outer$
                                                      withInt:(jint)size {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, outer$, size);
  return self;
}

- (void)entryRemovedWithBoolean:(jboolean)evicted
                         withId:(NSString *)key
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)oldValue
                         withId:(AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *)newValue {
  ((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(oldValue))->mInCache_ = false;
  if (!oldValue->mInUse_) {
    AndroidDatabaseSqliteSQLiteConnection_finalizePreparedStatementWithAndroidDatabaseSqliteSQLiteConnection_PreparedStatement_(this$0_, oldValue);
  }
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer {
  [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:@"  Prepared statement cache:"];
  id<JavaUtilMap> cache = [self snapshot];
  if (![((id<JavaUtilMap>) nil_chk(cache)) isEmpty]) {
    jint i = 0;
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([cache entrySet])) {
      AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *statement = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if (((AndroidDatabaseSqliteSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInCache_) {
        NSString *sql = [entry_ getKey];
        [printer printlnWithNSString:JreStrcat("$I$I$I$Z$$C", @"    ", i, @": numParameters=", statement->mNumParameters_, @", type=", statement->mType_, @", readOnly=", statement->mReadOnly_, @", sql=\"", AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(sql), '"')];
      }
      i += 1;
    }
  }
  else {
    [printer printlnWithNSString:@"    <none>"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithAndroidDatabaseSqliteSQLiteConnection:withInt:", "PreparedStatementCache", NULL, 0x1, NULL, NULL },
    { "entryRemovedWithBoolean:withId:withId:withId:", "entryRemoved", "V", 0x4, NULL, "(ZLjava/lang/String;Landroid/database/sqlite/SQLiteConnection$PreparedStatement;Landroid/database/sqlite/SQLiteConnection$PreparedStatement;)V" },
    { "dumpWithAndroidUtilPrinter:", "dump", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Landroid.database.sqlite.SQLiteConnection;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.String;", "Landroid.database.sqlite.SQLiteConnection$PreparedStatement;"};
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache = { 2, "PreparedStatementCache", "android.database.sqlite", "SQLiteConnection", 0x12, 3, methods, 1, fields, 2, superclass_type_args, 0, NULL, NULL, "Landroid/util/LruCache<Ljava/lang/String;Landroid/database/sqlite/SQLiteConnection$PreparedStatement;>;" };
  return &_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache;
}

@end

void AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *self, AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) {
  self->this$0_ = outer$;
  AndroidUtilLruCache_initWithInt_(self, size);
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) {
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *self = [AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache alloc];
  AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(self, outer$, size);
  return self;
}

AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache *create_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(AndroidDatabaseSqliteSQLiteConnection *outer$, jint size) {
  return new_AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache_initWithAndroidDatabaseSqliteSQLiteConnection_withInt_(outer$, size);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_PreparedStatementCache)

@implementation AndroidDatabaseSqliteSQLiteConnection_OperationLog

- (jint)beginOperationWithNSString:(NSString *)kind
                      withNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs {
  @synchronized(mOperations_) {
    jint index = (mIndex_ + 1) % AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS;
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), index);
    if (operation == nil) {
      operation = new_AndroidDatabaseSqliteSQLiteConnection_Operation_init();
      (void) IOSObjectArray_Set(mOperations_, index, operation);
    }
    else {
      operation->mFinished_ = false;
      operation->mException_ = nil;
      if (operation->mBindArgs_ != nil) {
        [operation->mBindArgs_ clear];
      }
    }
    ((AndroidDatabaseSqliteSQLiteConnection_Operation *) nil_chk(operation))->mStartTime_ = JavaLangSystem_currentTimeMillis();
    operation->mKind_ = kind;
    operation->mSql_ = sql;
    if (bindArgs != nil) {
      if (operation->mBindArgs_ == nil) {
        operation->mBindArgs_ = new_JavaUtilArrayList_init();
      }
      else {
        [operation->mBindArgs_ clear];
      }
      for (jint i = 0; i < bindArgs->size_; i++) {
        id arg = IOSObjectArray_Get(bindArgs, i);
        if (arg != nil && [arg isKindOfClass:[IOSByteArray class]]) {
          [((JavaUtilArrayList *) nil_chk(operation->mBindArgs_)) addWithId:JreLoadStatic(AndroidDatabaseSqliteSQLiteConnection, EMPTY_BYTE_ARRAY)];
        }
        else {
          [((JavaUtilArrayList *) nil_chk(operation->mBindArgs_)) addWithId:arg];
        }
      }
    }
    operation->mCookie_ = AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(self, index);
    if (AndroidOsTrace_isTagEnabledWithLong_(AndroidOsTrace_TRACE_TAG_DATABASE)) {
      AndroidOsTrace_asyncTraceBeginWithLong_withNSString_withInt_(AndroidOsTrace_TRACE_TAG_DATABASE, AndroidDatabaseSqliteSQLiteConnection_Operation_getTraceMethodName(operation), operation->mCookie_);
    }
    mIndex_ = index;
    return operation->mCookie_;
  }
}

- (void)failOperationWithInt:(jint)cookie
       withJavaLangException:(JavaLangException *)ex {
  @synchronized(mOperations_) {
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
    if (operation != nil) {
      operation->mException_ = ex;
    }
  }
}

- (void)endOperationWithInt:(jint)cookie {
  @synchronized(mOperations_) {
    if (AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie)) {
      AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, nil);
    }
  }
}

- (jboolean)endOperationDeferLogWithInt:(jint)cookie {
  @synchronized(mOperations_) {
    return AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie);
  }
}

- (void)logOperationWithInt:(jint)cookie
               withNSString:(NSString *)detail {
  @synchronized(mOperations_) {
    AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, detail);
  }
}

- (jboolean)endOperationDeferLogLockedWithInt:(jint)cookie {
  return AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie);
}

- (void)logOperationLockedWithInt:(jint)cookie
                     withNSString:(NSString *)detail {
  AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, detail);
}

- (jint)newOperationCookieLockedWithInt:(jint)index {
  return AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(self, index);
}

- (AndroidDatabaseSqliteSQLiteConnection_Operation *)getOperationLockedWithInt:(jint)cookie {
  return AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
}

- (NSString *)describeCurrentOperation {
  @synchronized(mOperations_) {
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), mIndex_);
    if (operation != nil && !operation->mFinished_) {
      JavaLangStringBuilder *msg = new_JavaLangStringBuilder_init();
      [operation describeWithJavaLangStringBuilder:msg withBoolean:false];
      return [msg description];
    }
    return nil;
  }
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose {
  @synchronized(mOperations_) {
    [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:@"  Most recently executed operations:"];
    jint index = mIndex_;
    AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), index);
    if (operation != nil) {
      jint n = 0;
      do {
        JavaLangStringBuilder *msg = new_JavaLangStringBuilder_init();
        (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"    "])) appendWithInt:n])) appendWithNSString:@": ["];
        (void) [msg appendWithNSString:AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(operation)];
        (void) [msg appendWithNSString:@"] "];
        [operation describeWithJavaLangStringBuilder:msg withBoolean:verbose];
        [printer printlnWithNSString:[msg description]];
        if (index > 0) {
          index -= 1;
        }
        else {
          index = AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS - 1;
        }
        n += 1;
        operation = IOSObjectArray_Get(mOperations_, index);
      }
      while (operation != nil && n < AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS);
    }
    else {
      [printer printlnWithNSString:@"    <none>"];
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "beginOperationWithNSString:withNSString:withNSObjectArray:", "beginOperation", "I", 0x1, NULL, NULL },
    { "failOperationWithInt:withJavaLangException:", "failOperation", "V", 0x1, NULL, NULL },
    { "endOperationWithInt:", "endOperation", "V", 0x1, NULL, NULL },
    { "endOperationDeferLogWithInt:", "endOperationDeferLog", "Z", 0x1, NULL, NULL },
    { "logOperationWithInt:withNSString:", "logOperation", "V", 0x1, NULL, NULL },
    { "endOperationDeferLogLockedWithInt:", "endOperationDeferLogLocked", "Z", 0x2, NULL, NULL },
    { "logOperationLockedWithInt:withNSString:", "logOperationLocked", "V", 0x2, NULL, NULL },
    { "newOperationCookieLockedWithInt:", "newOperationCookieLocked", "I", 0x2, NULL, NULL },
    { "getOperationLockedWithInt:", "getOperationLocked", "Landroid.database.sqlite.SQLiteConnection$Operation;", 0x2, NULL, NULL },
    { "describeCurrentOperation", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "dumpWithAndroidUtilPrinter:withBoolean:", "dump", "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_RECENT_OPERATIONS", "MAX_RECENT_OPERATIONS", 0x1a, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS },
    { "COOKIE_GENERATION_SHIFT", "COOKIE_GENERATION_SHIFT", 0x1a, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT },
    { "COOKIE_INDEX_MASK", "COOKIE_INDEX_MASK", 0x1a, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_INDEX_MASK },
    { "mOperations_", NULL, 0x12, "[Landroid.database.sqlite.SQLiteConnection$Operation;", NULL, NULL, .constantValue.asLong = 0 },
    { "mIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mGeneration_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_OperationLog = { 2, "OperationLog", "android.database.sqlite", "SQLiteConnection", 0x1a, 12, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteConnection_OperationLog;
}

@end

jboolean AndroidDatabaseSqliteSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie) {
  AndroidDatabaseSqliteSQLiteConnection_Operation *operation = AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
  if (operation != nil) {
    if (AndroidOsTrace_isTagEnabledWithLong_(AndroidOsTrace_TRACE_TAG_DATABASE)) {
      AndroidOsTrace_asyncTraceEndWithLong_withNSString_withInt_(AndroidOsTrace_TRACE_TAG_DATABASE, AndroidDatabaseSqliteSQLiteConnection_Operation_getTraceMethodName(operation), operation->mCookie_);
    }
    operation->mEndTime_ = JavaLangSystem_currentTimeMillis();
    operation->mFinished_ = true;
    return false;
  }
  return false;
}

void AndroidDatabaseSqliteSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie, NSString *detail) {
  AndroidDatabaseSqliteSQLiteConnection_Operation *operation = AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
  JavaLangStringBuilder *msg = new_JavaLangStringBuilder_init();
  [((AndroidDatabaseSqliteSQLiteConnection_Operation *) nil_chk(operation)) describeWithJavaLangStringBuilder:msg withBoolean:false];
  if (detail != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", "])) appendWithNSString:detail];
  }
  AndroidUtilLog_dWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteConnection_TAG, [msg description]);
}

jint AndroidDatabaseSqliteSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint index) {
  jint generation = self->mGeneration_++;
  return (JreLShift32(generation, AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT)) | index;
}

AndroidDatabaseSqliteSQLiteConnection_Operation *AndroidDatabaseSqliteSQLiteConnection_OperationLog_getOperationLockedWithInt_(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self, jint cookie) {
  jint index = cookie & AndroidDatabaseSqliteSQLiteConnection_OperationLog_COOKIE_INDEX_MASK;
  AndroidDatabaseSqliteSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(self->mOperations_), index);
  return ((AndroidDatabaseSqliteSQLiteConnection_Operation *) nil_chk(operation))->mCookie_ == cookie ? operation : nil;
}

void AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(AndroidDatabaseSqliteSQLiteConnection_OperationLog *self) {
  NSObject_init(self);
  self->mOperations_ = [IOSObjectArray newArrayWithLength:AndroidDatabaseSqliteSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS type:AndroidDatabaseSqliteSQLiteConnection_Operation_class_()];
}

AndroidDatabaseSqliteSQLiteConnection_OperationLog *new_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init() {
  AndroidDatabaseSqliteSQLiteConnection_OperationLog *self = [AndroidDatabaseSqliteSQLiteConnection_OperationLog alloc];
  AndroidDatabaseSqliteSQLiteConnection_OperationLog_init(self);
  return self;
}

AndroidDatabaseSqliteSQLiteConnection_OperationLog *create_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init() {
  return new_AndroidDatabaseSqliteSQLiteConnection_OperationLog_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_OperationLog)

@implementation AndroidDatabaseSqliteSQLiteConnection_Operation

- (void)describeWithJavaLangStringBuilder:(JavaLangStringBuilder *)msg
                              withBoolean:(jboolean)verbose {
  (void) [((JavaLangStringBuilder *) nil_chk(msg)) appendWithNSString:mKind_];
  if (mFinished_) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" took "])) appendWithLong:mEndTime_ - mStartTime_])) appendWithNSString:@"ms"];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" started "])) appendWithLong:JavaLangSystem_currentTimeMillis() - mStartTime_])) appendWithNSString:@"ms ago"];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" - "])) appendWithNSString:AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(self)];
  if (mSql_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", sql=\""])) appendWithNSString:AndroidDatabaseSqliteSQLiteConnection_trimSqlForDisplayWithNSString_(mSql_)])) appendWithNSString:@"\""];
  }
  if (verbose && mBindArgs_ != nil && [mBindArgs_ size] != 0) {
    (void) [msg appendWithNSString:@", bindArgs=["];
    jint count = [mBindArgs_ size];
    for (jint i = 0; i < count; i++) {
      id arg = [mBindArgs_ getWithInt:i];
      if (i != 0) {
        (void) [msg appendWithNSString:@", "];
      }
      if (arg == nil) {
        (void) [msg appendWithNSString:@"null"];
      }
      else if ([arg isKindOfClass:[IOSByteArray class]]) {
        (void) [msg appendWithNSString:@"<byte[]>"];
      }
      else if ([arg isKindOfClass:[NSString class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"\""])) appendWithNSString:(NSString *) cast_chk(arg, [NSString class])])) appendWithNSString:@"\""];
      }
      else {
        (void) [msg appendWithId:arg];
      }
    }
    (void) [msg appendWithNSString:@"]"];
  }
  if (mException_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", exception=\""])) appendWithNSString:[mException_ getMessage]])) appendWithNSString:@"\""];
  }
}

- (NSString *)getStatus {
  return AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(self);
}

- (NSString *)getTraceMethodName {
  return AndroidDatabaseSqliteSQLiteConnection_Operation_getTraceMethodName(self);
}

- (NSString *)getFormattedStartTime {
  return AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseSqliteSQLiteConnection_Operation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "describeWithJavaLangStringBuilder:withBoolean:", "describe", "V", 0x1, NULL, NULL },
    { "getStatus", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getTraceMethodName", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getFormattedStartTime", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_TRACE_METHOD_NAME_LEN", "MAX_TRACE_METHOD_NAME_LEN", 0x1a, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteConnection_Operation_MAX_TRACE_METHOD_NAME_LEN },
    { "mStartTime_", NULL, 0x1, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "mEndTime_", NULL, 0x1, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "mKind_", NULL, 0x1, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mSql_", NULL, 0x1, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mBindArgs_", NULL, 0x1, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "mFinished_", NULL, 0x1, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mException_", NULL, 0x1, "Ljava.lang.Exception;", NULL, NULL, .constantValue.asLong = 0 },
    { "mCookie_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteConnection_Operation = { 2, "Operation", "android.database.sqlite", "SQLiteConnection", 0x1a, 5, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteConnection_Operation;
}

@end

NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getStatus(AndroidDatabaseSqliteSQLiteConnection_Operation *self) {
  if (!self->mFinished_) {
    return @"running";
  }
  return self->mException_ != nil ? @"failed" : @"succeeded";
}

NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getTraceMethodName(AndroidDatabaseSqliteSQLiteConnection_Operation *self) {
  NSString *methodName = JreStrcat("$C$", self->mKind_, ' ', self->mSql_);
  if (((jint) [methodName length]) > AndroidDatabaseSqliteSQLiteConnection_Operation_MAX_TRACE_METHOD_NAME_LEN) return [methodName substring:0 endIndex:AndroidDatabaseSqliteSQLiteConnection_Operation_MAX_TRACE_METHOD_NAME_LEN];
  return methodName;
}

NSString *AndroidDatabaseSqliteSQLiteConnection_Operation_getFormattedStartTime(AndroidDatabaseSqliteSQLiteConnection_Operation *self) {
  return [new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd HH:mm:ss.SSS") formatWithJavaUtilDate:new_JavaUtilDate_initWithLong_(self->mStartTime_)];
}

void AndroidDatabaseSqliteSQLiteConnection_Operation_init(AndroidDatabaseSqliteSQLiteConnection_Operation *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteConnection_Operation *new_AndroidDatabaseSqliteSQLiteConnection_Operation_init() {
  AndroidDatabaseSqliteSQLiteConnection_Operation *self = [AndroidDatabaseSqliteSQLiteConnection_Operation alloc];
  AndroidDatabaseSqliteSQLiteConnection_Operation_init(self);
  return self;
}

AndroidDatabaseSqliteSQLiteConnection_Operation *create_AndroidDatabaseSqliteSQLiteConnection_Operation_init() {
  return new_AndroidDatabaseSqliteSQLiteConnection_Operation_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteConnection_Operation)
