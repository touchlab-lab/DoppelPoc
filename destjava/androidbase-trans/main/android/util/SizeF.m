//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/androidbase/AndroidBase/lib/src/main/java/android/util/SizeF.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/util/SizeF.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NumberFormatException.h"

@interface AndroidUtilSizeF () {
 @public
  jfloat mWidth_;
  jfloat mHeight_;
}

+ (JavaLangNumberFormatException *)invalidSizeFWithNSString:(NSString *)s;

@end

__attribute__((unused)) static JavaLangNumberFormatException *AndroidUtilSizeF_invalidSizeFWithNSString_(NSString *s);

@implementation AndroidUtilSizeF

- (instancetype)initWithFloat:(jfloat)width
                    withFloat:(jfloat)height {
  AndroidUtilSizeF_initWithFloat_withFloat_(self, width, height);
  return self;
}

+ (jfloat)checkArgumentFiniteWithFloat:(jfloat)value
                          withNSString:(NSString *)valueName {
  return AndroidUtilSizeF_checkArgumentFiniteWithFloat_withNSString_(value, valueName);
}

- (jfloat)getWidth {
  return mWidth_;
}

- (jfloat)getHeight {
  return mHeight_;
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil) {
    return false;
  }
  if (self == obj) {
    return true;
  }
  if ([obj isKindOfClass:[AndroidUtilSizeF class]]) {
    AndroidUtilSizeF *other = (AndroidUtilSizeF *) cast_chk(obj, [AndroidUtilSizeF class]);
    return mWidth_ == ((AndroidUtilSizeF *) nil_chk(other))->mWidth_ && mHeight_ == other->mHeight_;
  }
  return false;
}

- (NSString *)description {
  return JreStrcat("FCF", mWidth_, 'x', mHeight_);
}

+ (JavaLangNumberFormatException *)invalidSizeFWithNSString:(NSString *)s {
  return AndroidUtilSizeF_invalidSizeFWithNSString_(s);
}

+ (AndroidUtilSizeF *)parseSizeFWithNSString:(NSString *)string {
  return AndroidUtilSizeF_parseSizeFWithNSString_(string);
}

- (NSUInteger)hash {
  return JavaLangFloat_floatToIntBitsWithFloat_(mWidth_) ^ JavaLangFloat_floatToIntBitsWithFloat_(mHeight_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFloat:withFloat:", "SizeF", NULL, 0x1, NULL, NULL },
    { "checkArgumentFiniteWithFloat:withNSString:", "checkArgumentFinite", "F", 0x9, NULL, NULL },
    { "getWidth", NULL, "F", 0x1, NULL, NULL },
    { "getHeight", NULL, "F", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "invalidSizeFWithNSString:", "invalidSizeF", "Ljava.lang.NumberFormatException;", 0xa, NULL, NULL },
    { "parseSizeFWithNSString:", "parseSizeF", "Landroid.util.SizeF;", 0x9, "Ljava.lang.NumberFormatException;", NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mWidth_", NULL, 0x12, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "mHeight_", NULL, 0x12, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidUtilSizeF = { 2, "SizeF", "android.util", NULL, 0x11, 9, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidUtilSizeF;
}

@end

void AndroidUtilSizeF_initWithFloat_withFloat_(AndroidUtilSizeF *self, jfloat width, jfloat height) {
  NSObject_init(self);
  self->mWidth_ = AndroidUtilSizeF_checkArgumentFiniteWithFloat_withNSString_(width, @"width");
  self->mHeight_ = AndroidUtilSizeF_checkArgumentFiniteWithFloat_withNSString_(height, @"height");
}

AndroidUtilSizeF *new_AndroidUtilSizeF_initWithFloat_withFloat_(jfloat width, jfloat height) {
  AndroidUtilSizeF *self = [AndroidUtilSizeF alloc];
  AndroidUtilSizeF_initWithFloat_withFloat_(self, width, height);
  return self;
}

AndroidUtilSizeF *create_AndroidUtilSizeF_initWithFloat_withFloat_(jfloat width, jfloat height) {
  return new_AndroidUtilSizeF_initWithFloat_withFloat_(width, height);
}

jfloat AndroidUtilSizeF_checkArgumentFiniteWithFloat_withNSString_(jfloat value, NSString *valueName) {
  AndroidUtilSizeF_initialize();
  if (JavaLangFloat_isNaNWithFloat_(value)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", valueName, @" must not be NaN"));
  }
  else if (JavaLangFloat_isInfiniteWithFloat_(value)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", valueName, @" must not be infinite"));
  }
  return value;
}

JavaLangNumberFormatException *AndroidUtilSizeF_invalidSizeFWithNSString_(NSString *s) {
  AndroidUtilSizeF_initialize();
  @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$C", @"Invalid SizeF: \"", s, '"'));
}

AndroidUtilSizeF *AndroidUtilSizeF_parseSizeFWithNSString_(NSString *string) {
  AndroidUtilSizeF_initialize();
  if (string == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"string must not be null");
  jint sep_ix = [((NSString *) nil_chk(string)) indexOf:'*'];
  if (sep_ix < 0) {
    sep_ix = [string indexOf:'x'];
  }
  if (sep_ix < 0) {
    @throw AndroidUtilSizeF_invalidSizeFWithNSString_(string);
  }
  @try {
    return new_AndroidUtilSizeF_initWithFloat_withFloat_(JavaLangFloat_parseFloatWithNSString_([string substring:0 endIndex:sep_ix]), JavaLangFloat_parseFloatWithNSString_([string substring:sep_ix + 1]));
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw AndroidUtilSizeF_invalidSizeFWithNSString_(string);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw AndroidUtilSizeF_invalidSizeFWithNSString_(string);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilSizeF)
