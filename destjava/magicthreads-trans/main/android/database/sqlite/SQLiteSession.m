//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/androidbase/AndroidBase/lib/src/main/java/android/database/sqlite/SQLiteSession.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/database/CursorWindow.h"
#include "android/database/DatabaseUtils.h"
#include "android/database/sqlite/SQLiteConnection.h"
#include "android/database/sqlite/SQLiteConnectionPool.h"
#include "android/database/sqlite/SQLiteSession.h"
#include "android/database/sqlite/SQLiteStatementInfo.h"
#include "android/database/sqlite/SQLiteTransactionListener.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"

@class AndroidDatabaseSqliteSQLiteSession_Transaction;

@interface AndroidDatabaseSqliteSQLiteSession () {
 @public
  AndroidDatabaseSqliteSQLiteConnectionPool *mConnectionPool_;
  AndroidDatabaseSqliteSQLiteConnection *mConnection_;
  jint mConnectionFlags_;
  jint mConnectionUseCount_;
  AndroidDatabaseSqliteSQLiteSession_Transaction *mTransactionPool_;
  AndroidDatabaseSqliteSQLiteSession_Transaction *mTransactionStack_;
}

- (void)beginTransactionUncheckedWithInt:(jint)transactionMode
withAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                                 withInt:(jint)connectionFlags;

- (void)endTransactionUncheckedWithBoolean:(jboolean)yielding;

- (jboolean)yieldTransactionUncheckedWithLong:(jlong)sleepAfterYieldDelayMillis;

- (jboolean)executeSpecialWithNSString:(NSString *)sql
                     withNSObjectArray:(IOSObjectArray *)bindArgs
                               withInt:(jint)connectionFlags;

- (void)acquireConnectionWithNSString:(NSString *)sql
                              withInt:(jint)connectionFlags;

- (void)releaseConnection;

- (void)throwIfNoTransaction;

- (void)throwIfTransactionMarkedSuccessful;

- (void)throwIfNestedTransaction;

- (AndroidDatabaseSqliteSQLiteSession_Transaction *)obtainTransactionWithInt:(jint)mode
                          withAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)listener;

- (void)recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction:(AndroidDatabaseSqliteSQLiteSession_Transaction *)transaction;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession, mConnectionPool_, AndroidDatabaseSqliteSQLiteConnectionPool *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession, mConnection_, AndroidDatabaseSqliteSQLiteConnection *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession, mTransactionPool_, AndroidDatabaseSqliteSQLiteSession_Transaction *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession, mTransactionStack_, AndroidDatabaseSqliteSQLiteSession_Transaction *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_beginTransactionUncheckedWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_withInt_(AndroidDatabaseSqliteSQLiteSession *self, jint transactionMode, id<AndroidDatabaseSqliteSQLiteTransactionListener> transactionListener, jint connectionFlags);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_endTransactionUncheckedWithBoolean_(AndroidDatabaseSqliteSQLiteSession *self, jboolean yielding);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteSession_yieldTransactionUncheckedWithLong_(AndroidDatabaseSqliteSQLiteSession *self, jlong sleepAfterYieldDelayMillis);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_(AndroidDatabaseSqliteSQLiteSession *self, NSString *sql, IOSObjectArray *bindArgs, jint connectionFlags);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_(AndroidDatabaseSqliteSQLiteSession *self, NSString *sql, jint connectionFlags);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_releaseConnection(AndroidDatabaseSqliteSQLiteSession *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(AndroidDatabaseSqliteSQLiteSession *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(AndroidDatabaseSqliteSQLiteSession *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_throwIfNestedTransaction(AndroidDatabaseSqliteSQLiteSession *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteSession_Transaction *AndroidDatabaseSqliteSQLiteSession_obtainTransactionWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_(AndroidDatabaseSqliteSQLiteSession *self, jint mode, id<AndroidDatabaseSqliteSQLiteTransactionListener> listener);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction_(AndroidDatabaseSqliteSQLiteSession *self, AndroidDatabaseSqliteSQLiteSession_Transaction *transaction);

@interface AndroidDatabaseSqliteSQLiteSession_Transaction : NSObject {
 @public
  AndroidDatabaseSqliteSQLiteSession_Transaction *mParent_;
  jint mMode_;
  id<AndroidDatabaseSqliteSQLiteTransactionListener> mListener_;
  jboolean mMarkedSuccessful_;
  jboolean mChildFailed_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteSession_Transaction)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession_Transaction, mParent_, AndroidDatabaseSqliteSQLiteSession_Transaction *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteSession_Transaction, mListener_, id<AndroidDatabaseSqliteSQLiteTransactionListener>)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteSession_Transaction_init(AndroidDatabaseSqliteSQLiteSession_Transaction *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteSession_Transaction *new_AndroidDatabaseSqliteSQLiteSession_Transaction_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteSession_Transaction *create_AndroidDatabaseSqliteSQLiteSession_Transaction_init();

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteSession_Transaction)

@implementation AndroidDatabaseSqliteSQLiteSession

- (instancetype)initWithAndroidDatabaseSqliteSQLiteConnectionPool:(AndroidDatabaseSqliteSQLiteConnectionPool *)connectionPool {
  AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(self, connectionPool);
  return self;
}

- (jboolean)hasTransaction {
  return mTransactionStack_ != nil;
}

- (jboolean)hasNestedTransaction {
  return mTransactionStack_ != nil && mTransactionStack_->mParent_ != nil;
}

- (jboolean)hasConnection {
  return mConnection_ != nil;
}

- (void)beginTransactionWithInt:(jint)transactionMode
withAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                        withInt:(jint)connectionFlags {
  AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(self);
  AndroidDatabaseSqliteSQLiteSession_beginTransactionUncheckedWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_withInt_(self, transactionMode, transactionListener, connectionFlags);
}

- (void)beginTransactionUncheckedWithInt:(jint)transactionMode
withAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                                 withInt:(jint)connectionFlags {
  AndroidDatabaseSqliteSQLiteSession_beginTransactionUncheckedWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_withInt_(self, transactionMode, transactionListener, connectionFlags);
}

- (void)setTransactionSuccessful {
  AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(self);
  AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(self);
  ((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(mTransactionStack_))->mMarkedSuccessful_ = true;
}

- (void)endTransaction {
  AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(self);
  JreAssert((mConnection_ != nil), (@"android/database/sqlite/SQLiteSession.java:388 condition failed: assert mConnection != null;"));
  AndroidDatabaseSqliteSQLiteSession_endTransactionUncheckedWithBoolean_(self, false);
}

- (void)endTransactionUncheckedWithBoolean:(jboolean)yielding {
  AndroidDatabaseSqliteSQLiteSession_endTransactionUncheckedWithBoolean_(self, yielding);
}

- (jboolean)yieldTransactionWithLong:(jlong)sleepAfterYieldDelayMillis
                         withBoolean:(jboolean)throwIfUnsafe {
  if (throwIfUnsafe) {
    AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(self);
    AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(self);
    AndroidDatabaseSqliteSQLiteSession_throwIfNestedTransaction(self);
  }
  else {
    if (mTransactionStack_ == nil || mTransactionStack_->mMarkedSuccessful_ || mTransactionStack_->mParent_ != nil) {
      return false;
    }
  }
  JreAssert((mConnection_ != nil), (@"android/database/sqlite/SQLiteSession.java:499 condition failed: assert mConnection != null;"));
  if (((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(mTransactionStack_))->mChildFailed_) {
    return false;
  }
  return AndroidDatabaseSqliteSQLiteSession_yieldTransactionUncheckedWithLong_(self, sleepAfterYieldDelayMillis);
}

- (jboolean)yieldTransactionUncheckedWithLong:(jlong)sleepAfterYieldDelayMillis {
  return AndroidDatabaseSqliteSQLiteSession_yieldTransactionUncheckedWithLong_(self, sleepAfterYieldDelayMillis);
}

- (void)prepareWithNSString:(NSString *)sql
                    withInt:(jint)connectionFlags
withAndroidDatabaseSqliteSQLiteStatementInfo:(AndroidDatabaseSqliteSQLiteStatementInfo *)outStatementInfo {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_(self, sql, connectionFlags);
  @try {
    [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) prepareWithNSString:sql withAndroidDatabaseSqliteSQLiteStatementInfo:outStatementInfo];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (void)executeWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs
                    withInt:(jint)connectionFlags {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_(self, sql, bindArgs, connectionFlags)) {
    return;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_(self, sql, connectionFlags);
  @try {
    [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeWithNSString:sql withNSObjectArray:bindArgs];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (jlong)executeForLongWithNSString:(NSString *)sql
                  withNSObjectArray:(IOSObjectArray *)bindArgs
                            withInt:(jint)connectionFlags {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_(self, sql, bindArgs, connectionFlags)) {
    return 0;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_(self, sql, connectionFlags);
  @try {
    return [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeForLongWithNSString:sql withNSObjectArray:bindArgs];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (NSString *)executeForStringWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
                                   withInt:(jint)connectionFlags {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_(self, sql, bindArgs, connectionFlags)) {
    return nil;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_(self, sql, connectionFlags);
  @try {
    return [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeForStringWithNSString:sql withNSObjectArray:bindArgs];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (jint)executeForChangedRowCountWithNSString:(NSString *)sql
                            withNSObjectArray:(IOSObjectArray *)bindArgs
                                      withInt:(jint)connectionFlags {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_(self, sql, bindArgs, connectionFlags)) {
    return 0;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_(self, sql, connectionFlags);
  @try {
    return [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeForChangedRowCountWithNSString:sql withNSObjectArray:bindArgs];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (jlong)executeForLastInsertedRowIdWithNSString:(NSString *)sql
                               withNSObjectArray:(IOSObjectArray *)bindArgs
                                         withInt:(jint)connectionFlags {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_(self, sql, bindArgs, connectionFlags)) {
    return 0;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_(self, sql, connectionFlags);
  @try {
    return [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeForLastInsertedRowIdWithNSString:sql withNSObjectArray:bindArgs];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (jint)executeForCursorWindowWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
           withAndroidDatabaseCursorWindow:(AndroidDatabaseCursorWindow *)window
                                   withInt:(jint)startPos
                                   withInt:(jint)requiredPos
                               withBoolean:(jboolean)countAllRows
                                   withInt:(jint)connectionFlags {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (window == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"window must not be null.");
  }
  if (AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_(self, sql, bindArgs, connectionFlags)) {
    [window clear];
    return 0;
  }
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_(self, sql, connectionFlags);
  @try {
    return [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(mConnection_)) executeForCursorWindowWithNSString:sql withNSObjectArray:bindArgs withAndroidDatabaseCursorWindow:window withInt:startPos withInt:requiredPos withBoolean:countAllRows];
  }
  @finally {
    AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
  }
}

- (jboolean)executeSpecialWithNSString:(NSString *)sql
                     withNSObjectArray:(IOSObjectArray *)bindArgs
                               withInt:(jint)connectionFlags {
  return AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_(self, sql, bindArgs, connectionFlags);
}

- (void)acquireConnectionWithNSString:(NSString *)sql
                              withInt:(jint)connectionFlags {
  AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_(self, sql, connectionFlags);
}

- (void)releaseConnection {
  AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
}

- (void)throwIfNoTransaction {
  AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(self);
}

- (void)throwIfTransactionMarkedSuccessful {
  AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(self);
}

- (void)throwIfNestedTransaction {
  AndroidDatabaseSqliteSQLiteSession_throwIfNestedTransaction(self);
}

- (AndroidDatabaseSqliteSQLiteSession_Transaction *)obtainTransactionWithInt:(jint)mode
                          withAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)listener {
  return AndroidDatabaseSqliteSQLiteSession_obtainTransactionWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_(self, mode, listener);
}

- (void)recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction:(AndroidDatabaseSqliteSQLiteSession_Transaction *)transaction {
  AndroidDatabaseSqliteSQLiteSession_recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction_(self, transaction);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithAndroidDatabaseSqliteSQLiteConnectionPool:", "SQLiteSession", NULL, 0x1, NULL, NULL },
    { "hasTransaction", NULL, "Z", 0x1, NULL, NULL },
    { "hasNestedTransaction", NULL, "Z", 0x1, NULL, NULL },
    { "hasConnection", NULL, "Z", 0x1, NULL, NULL },
    { "beginTransactionWithInt:withAndroidDatabaseSqliteSQLiteTransactionListener:withInt:", "beginTransaction", "V", 0x1, NULL, NULL },
    { "beginTransactionUncheckedWithInt:withAndroidDatabaseSqliteSQLiteTransactionListener:withInt:", "beginTransactionUnchecked", "V", 0x2, NULL, NULL },
    { "setTransactionSuccessful", NULL, "V", 0x1, NULL, NULL },
    { "endTransaction", NULL, "V", 0x1, NULL, NULL },
    { "endTransactionUncheckedWithBoolean:", "endTransactionUnchecked", "V", 0x2, NULL, NULL },
    { "yieldTransactionWithLong:withBoolean:", "yieldTransaction", "Z", 0x1, NULL, NULL },
    { "yieldTransactionUncheckedWithLong:", "yieldTransactionUnchecked", "Z", 0x2, NULL, NULL },
    { "prepareWithNSString:withInt:withAndroidDatabaseSqliteSQLiteStatementInfo:", "prepare", "V", 0x1, NULL, NULL },
    { "executeWithNSString:withNSObjectArray:withInt:", "execute", "V", 0x1, NULL, NULL },
    { "executeForLongWithNSString:withNSObjectArray:withInt:", "executeForLong", "J", 0x1, NULL, NULL },
    { "executeForStringWithNSString:withNSObjectArray:withInt:", "executeForString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "executeForChangedRowCountWithNSString:withNSObjectArray:withInt:", "executeForChangedRowCount", "I", 0x1, NULL, NULL },
    { "executeForLastInsertedRowIdWithNSString:withNSObjectArray:withInt:", "executeForLastInsertedRowId", "J", 0x1, NULL, NULL },
    { "executeForCursorWindowWithNSString:withNSObjectArray:withAndroidDatabaseCursorWindow:withInt:withInt:withBoolean:withInt:", "executeForCursorWindow", "I", 0x1, NULL, NULL },
    { "executeSpecialWithNSString:withNSObjectArray:withInt:", "executeSpecial", "Z", 0x2, NULL, NULL },
    { "acquireConnectionWithNSString:withInt:", "acquireConnection", "V", 0x2, NULL, NULL },
    { "releaseConnection", NULL, "V", 0x2, NULL, NULL },
    { "throwIfNoTransaction", NULL, "V", 0x2, NULL, NULL },
    { "throwIfTransactionMarkedSuccessful", NULL, "V", 0x2, NULL, NULL },
    { "throwIfNestedTransaction", NULL, "V", 0x2, NULL, NULL },
    { "obtainTransactionWithInt:withAndroidDatabaseSqliteSQLiteTransactionListener:", "obtainTransaction", "Landroid.database.sqlite.SQLiteSession$Transaction;", 0x2, NULL, NULL },
    { "recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction:", "recycleTransaction", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mConnectionPool_", NULL, 0x12, "Landroid.database.sqlite.SQLiteConnectionPool;", NULL, NULL, .constantValue.asLong = 0 },
    { "mConnection_", NULL, 0x2, "Landroid.database.sqlite.SQLiteConnection;", NULL, NULL, .constantValue.asLong = 0 },
    { "mConnectionFlags_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mConnectionUseCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mTransactionPool_", NULL, 0x2, "Landroid.database.sqlite.SQLiteSession$Transaction;", NULL, NULL, .constantValue.asLong = 0 },
    { "mTransactionStack_", NULL, 0x2, "Landroid.database.sqlite.SQLiteSession$Transaction;", NULL, NULL, .constantValue.asLong = 0 },
    { "TRANSACTION_MODE_DEFERRED", "TRANSACTION_MODE_DEFERRED", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_DEFERRED },
    { "TRANSACTION_MODE_IMMEDIATE", "TRANSACTION_MODE_IMMEDIATE", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_IMMEDIATE },
    { "TRANSACTION_MODE_EXCLUSIVE", "TRANSACTION_MODE_EXCLUSIVE", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_EXCLUSIVE },
  };
  static const char *inner_classes[] = {"Landroid.database.sqlite.SQLiteSession$Transaction;"};
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteSession = { 2, "SQLiteSession", "android.database.sqlite", NULL, 0x11, 26, methods, 9, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteSession;
}

@end

void AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(AndroidDatabaseSqliteSQLiteSession *self, AndroidDatabaseSqliteSQLiteConnectionPool *connectionPool) {
  NSObject_init(self);
  if (connectionPool == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"connectionPool must not be null");
  }
  self->mConnectionPool_ = connectionPool;
}

AndroidDatabaseSqliteSQLiteSession *new_AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(AndroidDatabaseSqliteSQLiteConnectionPool *connectionPool) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteSession, initWithAndroidDatabaseSqliteSQLiteConnectionPool_, connectionPool)
}

AndroidDatabaseSqliteSQLiteSession *create_AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(AndroidDatabaseSqliteSQLiteConnectionPool *connectionPool) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteSession, initWithAndroidDatabaseSqliteSQLiteConnectionPool_, connectionPool)
}

void AndroidDatabaseSqliteSQLiteSession_beginTransactionUncheckedWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_withInt_(AndroidDatabaseSqliteSQLiteSession *self, jint transactionMode, id<AndroidDatabaseSqliteSQLiteTransactionListener> transactionListener, jint connectionFlags) {
  if (self->mTransactionStack_ == nil) {
    AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_(self, nil, connectionFlags);
  }
  @try {
    if (self->mTransactionStack_ == nil) {
      switch (transactionMode) {
        case AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_IMMEDIATE:
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"BEGIN IMMEDIATE;" withNSObjectArray:nil];
        break;
        case AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_EXCLUSIVE:
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"BEGIN EXCLUSIVE;" withNSObjectArray:nil];
        break;
        default:
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"BEGIN;" withNSObjectArray:nil];
        break;
      }
    }
    if (transactionListener != nil) {
      @try {
        [transactionListener onBegin];
      }
      @catch (JavaLangRuntimeException *ex) {
        if (self->mTransactionStack_ == nil) {
          [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"ROLLBACK;" withNSObjectArray:nil];
        }
        @throw ex;
      }
    }
    AndroidDatabaseSqliteSQLiteSession_Transaction *transaction = AndroidDatabaseSqliteSQLiteSession_obtainTransactionWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_(self, transactionMode, transactionListener);
    ((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(transaction))->mParent_ = self->mTransactionStack_;
    self->mTransactionStack_ = transaction;
  }
  @finally {
    if (self->mTransactionStack_ == nil) {
      AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
    }
  }
}

void AndroidDatabaseSqliteSQLiteSession_endTransactionUncheckedWithBoolean_(AndroidDatabaseSqliteSQLiteSession *self, jboolean yielding) {
  AndroidDatabaseSqliteSQLiteSession_Transaction *top = self->mTransactionStack_;
  jboolean successful = (((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(top))->mMarkedSuccessful_ || yielding) && !top->mChildFailed_;
  JavaLangRuntimeException *listenerException = nil;
  id<AndroidDatabaseSqliteSQLiteTransactionListener> listener = top->mListener_;
  if (listener != nil) {
    @try {
      if (successful) {
        [listener onCommit];
      }
      else {
        [listener onRollback];
      }
    }
    @catch (JavaLangRuntimeException *ex) {
      listenerException = ex;
      successful = false;
    }
  }
  self->mTransactionStack_ = top->mParent_;
  AndroidDatabaseSqliteSQLiteSession_recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction_(self, top);
  if (self->mTransactionStack_ != nil) {
    if (!successful) {
      self->mTransactionStack_->mChildFailed_ = true;
    }
  }
  else {
    @try {
      if (successful) {
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"COMMIT;" withNSObjectArray:nil];
      }
      else {
        [((AndroidDatabaseSqliteSQLiteConnection *) nil_chk(self->mConnection_)) executeWithNSString:@"ROLLBACK;" withNSObjectArray:nil];
      }
    }
    @finally {
      AndroidDatabaseSqliteSQLiteSession_releaseConnection(self);
    }
  }
  if (listenerException != nil) {
    @throw listenerException;
  }
}

jboolean AndroidDatabaseSqliteSQLiteSession_yieldTransactionUncheckedWithLong_(AndroidDatabaseSqliteSQLiteSession *self, jlong sleepAfterYieldDelayMillis) {
  if (![((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(self->mConnectionPool_)) shouldYieldConnectionWithAndroidDatabaseSqliteSQLiteConnection:self->mConnection_ withInt:self->mConnectionFlags_]) {
    return false;
  }
  jint transactionMode = ((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(self->mTransactionStack_))->mMode_;
  id<AndroidDatabaseSqliteSQLiteTransactionListener> listener = self->mTransactionStack_->mListener_;
  jint connectionFlags = self->mConnectionFlags_;
  AndroidDatabaseSqliteSQLiteSession_endTransactionUncheckedWithBoolean_(self, true);
  if (sleepAfterYieldDelayMillis > 0) {
    @try {
      JavaLangThread_sleepWithLong_(sleepAfterYieldDelayMillis);
    }
    @catch (JavaLangInterruptedException *ex) {
    }
  }
  AndroidDatabaseSqliteSQLiteSession_beginTransactionUncheckedWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_withInt_(self, transactionMode, listener, connectionFlags);
  return true;
}

jboolean AndroidDatabaseSqliteSQLiteSession_executeSpecialWithNSString_withNSObjectArray_withInt_(AndroidDatabaseSqliteSQLiteSession *self, NSString *sql, IOSObjectArray *bindArgs, jint connectionFlags) {
  jint type = AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(sql);
  switch (type) {
    case AndroidDatabaseDatabaseUtils_STATEMENT_BEGIN:
    [self beginTransactionWithInt:AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_EXCLUSIVE withAndroidDatabaseSqliteSQLiteTransactionListener:nil withInt:connectionFlags];
    return true;
    case AndroidDatabaseDatabaseUtils_STATEMENT_COMMIT:
    [self setTransactionSuccessful];
    [self endTransaction];
    return true;
    case AndroidDatabaseDatabaseUtils_STATEMENT_ABORT:
    [self endTransaction];
    return true;
  }
  return false;
}

void AndroidDatabaseSqliteSQLiteSession_acquireConnectionWithNSString_withInt_(AndroidDatabaseSqliteSQLiteSession *self, NSString *sql, jint connectionFlags) {
  if (self->mConnection_ == nil) {
    JreAssert((self->mConnectionUseCount_ == 0), (@"android/database/sqlite/SQLiteSession.java:853 condition failed: assert mConnectionUseCount == 0;"));
    self->mConnection_ = [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(self->mConnectionPool_)) acquireConnectionWithNSString:sql withInt:connectionFlags];
    self->mConnectionFlags_ = connectionFlags;
  }
  self->mConnectionUseCount_ += 1;
}

void AndroidDatabaseSqliteSQLiteSession_releaseConnection(AndroidDatabaseSqliteSQLiteSession *self) {
  JreAssert((self->mConnection_ != nil), (@"android/database/sqlite/SQLiteSession.java:861 condition failed: assert mConnection != null;"));
  JreAssert((self->mConnectionUseCount_ > 0), (@"android/database/sqlite/SQLiteSession.java:862 condition failed: assert mConnectionUseCount > 0;"));
  if (--self->mConnectionUseCount_ == 0) {
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(self->mConnectionPool_)) releaseConnectionWithAndroidDatabaseSqliteSQLiteConnection:self->mConnection_];
    }
    @finally {
      self->mConnection_ = nil;
    }
  }
}

void AndroidDatabaseSqliteSQLiteSession_throwIfNoTransaction(AndroidDatabaseSqliteSQLiteSession *self) {
  if (self->mTransactionStack_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because there is no current transaction.");
  }
}

void AndroidDatabaseSqliteSQLiteSession_throwIfTransactionMarkedSuccessful(AndroidDatabaseSqliteSQLiteSession *self) {
  if (self->mTransactionStack_ != nil && self->mTransactionStack_->mMarkedSuccessful_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because the transaction has already been marked successful.  The only thing you can do now is call endTransaction().");
  }
}

void AndroidDatabaseSqliteSQLiteSession_throwIfNestedTransaction(AndroidDatabaseSqliteSQLiteSession *self) {
  if ([self hasNestedTransaction]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot perform this operation because a nested transaction is in progress.");
  }
}

AndroidDatabaseSqliteSQLiteSession_Transaction *AndroidDatabaseSqliteSQLiteSession_obtainTransactionWithInt_withAndroidDatabaseSqliteSQLiteTransactionListener_(AndroidDatabaseSqliteSQLiteSession *self, jint mode, id<AndroidDatabaseSqliteSQLiteTransactionListener> listener) {
  AndroidDatabaseSqliteSQLiteSession_Transaction *transaction = self->mTransactionPool_;
  if (transaction != nil) {
    self->mTransactionPool_ = transaction->mParent_;
    transaction->mParent_ = nil;
    transaction->mMarkedSuccessful_ = false;
    transaction->mChildFailed_ = false;
  }
  else {
    transaction = new_AndroidDatabaseSqliteSQLiteSession_Transaction_init();
  }
  transaction->mMode_ = mode;
  transaction->mListener_ = listener;
  return transaction;
}

void AndroidDatabaseSqliteSQLiteSession_recycleTransactionWithAndroidDatabaseSqliteSQLiteSession_Transaction_(AndroidDatabaseSqliteSQLiteSession *self, AndroidDatabaseSqliteSQLiteSession_Transaction *transaction) {
  ((AndroidDatabaseSqliteSQLiteSession_Transaction *) nil_chk(transaction))->mParent_ = self->mTransactionPool_;
  transaction->mListener_ = nil;
  self->mTransactionPool_ = transaction;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteSession)

@implementation AndroidDatabaseSqliteSQLiteSession_Transaction

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseSqliteSQLiteSession_Transaction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Transaction", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mParent_", NULL, 0x1, "Landroid.database.sqlite.SQLiteSession$Transaction;", NULL, NULL, .constantValue.asLong = 0 },
    { "mMode_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mListener_", NULL, 0x1, "Landroid.database.sqlite.SQLiteTransactionListener;", NULL, NULL, .constantValue.asLong = 0 },
    { "mMarkedSuccessful_", NULL, 0x1, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mChildFailed_", NULL, 0x1, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteSession_Transaction = { 2, "Transaction", "android.database.sqlite", "SQLiteSession", 0x1a, 1, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteSession_Transaction;
}

@end

void AndroidDatabaseSqliteSQLiteSession_Transaction_init(AndroidDatabaseSqliteSQLiteSession_Transaction *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteSession_Transaction *new_AndroidDatabaseSqliteSQLiteSession_Transaction_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteSession_Transaction, init)
}

AndroidDatabaseSqliteSQLiteSession_Transaction *create_AndroidDatabaseSqliteSQLiteSession_Transaction_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteSession_Transaction, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteSession_Transaction)
