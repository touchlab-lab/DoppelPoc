//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/androidbase/AndroidBase/lib/src/main/java/android/database/sqlite/SQLiteDatabase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/content/ContentValues.h"
#include "android/database/Cursor.h"
#include "android/database/DatabaseErrorHandler.h"
#include "android/database/DatabaseUtils.h"
#include "android/database/DefaultDatabaseErrorHandler.h"
#include "android/database/SQLException.h"
#include "android/database/sqlite/SQLiteClosable.h"
#include "android/database/sqlite/SQLiteConnectionPool.h"
#include "android/database/sqlite/SQLiteCursorDriver.h"
#include "android/database/sqlite/SQLiteCustomFunction.h"
#include "android/database/sqlite/SQLiteDatabase.h"
#include "android/database/sqlite/SQLiteDatabaseConfiguration.h"
#include "android/database/sqlite/SQLiteDatabaseCorruptException.h"
#include "android/database/sqlite/SQLiteDirectCursorDriver.h"
#include "android/database/sqlite/SQLiteException.h"
#include "android/database/sqlite/SQLiteGlobal.h"
#include "android/database/sqlite/SQLiteQueryBuilder.h"
#include "android/database/sqlite/SQLiteSession.h"
#include "android/database/sqlite/SQLiteStatement.h"
#include "android/database/sqlite/SQLiteTransactionListener.h"
#include "android/os/Looper.h"
#include "android/system/CloseGuard.h"
#include "android/text/TextUtils.h"
#include "android/util/Log.h"
#include "android/util/Pair.h"
#include "android/util/Printer.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"

@interface AndroidDatabaseSqliteSQLiteDatabase () {
 @public
  JavaLangThreadLocal *mThreadSession_;
  id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> mCursorFactory_;
  id<AndroidDatabaseDatabaseErrorHandler> mErrorHandler_;
  id mLock_;
  AndroidSystemCloseGuard *mCloseGuardLocked_;
  AndroidDatabaseSqliteSQLiteDatabaseConfiguration *mConfigurationLocked_;
  AndroidDatabaseSqliteSQLiteConnectionPool *mConnectionPoolLocked_;
  jboolean mHasAttachedDbsLocked_;
}

- (instancetype)initWithNSString:(NSString *)path
                         withInt:(jint)openFlags
withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler;

- (void)disposeWithBoolean:(jboolean)finalized;

+ (jboolean)isMainThread;

- (void)beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                                                               withBoolean:(jboolean)exclusive;

- (jboolean)yieldIfContendedHelperWithBoolean:(jboolean)throwIfUnsafe
                                     withLong:(jlong)sleepAfterYieldDelay;

- (void)open;

- (void)openInner;

- (jint)executeSqlWithNSString:(NSString *)sql
             withNSObjectArray:(IOSObjectArray *)bindArgs;

- (jboolean)isReadOnlyLocked;

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList;

+ (JavaUtilArrayList *)getActiveDatabases;

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose;

- (void)throwIfNotOpenLocked;

@end

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mThreadSession_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mCursorFactory_, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mErrorHandler_, id<AndroidDatabaseDatabaseErrorHandler>)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mLock_, id)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mCloseGuardLocked_, AndroidSystemCloseGuard *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mConfigurationLocked_, AndroidDatabaseSqliteSQLiteDatabaseConfiguration *)
J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase, mConnectionPoolLocked_, AndroidDatabaseSqliteSQLiteConnectionPool *)

inline NSString *AndroidDatabaseSqliteSQLiteDatabase_get_TAG();
static NSString *AndroidDatabaseSqliteSQLiteDatabase_TAG = @"SQLiteDatabase";
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteDatabase, TAG, NSString *)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_EVENT_DB_CORRUPT();
#define AndroidDatabaseSqliteSQLiteDatabase_EVENT_DB_CORRUPT 75004
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, EVENT_DB_CORRUPT, jint)

inline JavaUtilWeakHashMap *AndroidDatabaseSqliteSQLiteDatabase_get_sActiveDatabases();
inline JavaUtilWeakHashMap *AndroidDatabaseSqliteSQLiteDatabase_set_sActiveDatabases(JavaUtilWeakHashMap *value);
static JavaUtilWeakHashMap *AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases;
J2OBJC_STATIC_FIELD_OBJ(AndroidDatabaseSqliteSQLiteDatabase, sActiveDatabases, JavaUtilWeakHashMap *)

inline IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase_get_CONFLICT_VALUES();
static IOSObjectArray *AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidDatabaseSqliteSQLiteDatabase, CONFLICT_VALUES, IOSObjectArray *)

inline jint AndroidDatabaseSqliteSQLiteDatabase_get_OPEN_READ_MASK();
#define AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidDatabaseSqliteSQLiteDatabase, OPEN_READ_MASK, jint)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase *new_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase *create_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean finalized);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteDatabase_isMainThread();

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidDatabaseSqliteSQLiteTransactionListener> transactionListener, jboolean exclusive);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean throwIfUnsafe, jlong sleepAfterYieldDelay);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_open(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_openInner(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static jint AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *sql, IOSObjectArray *bindArgs);

__attribute__((unused)) static jboolean AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static NSString *AndroidDatabaseSqliteSQLiteDatabase_getPath(AndroidDatabaseSqliteSQLiteDatabase *self);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(AndroidDatabaseSqliteSQLiteDatabase *self, JavaUtilArrayList *dbStatsList);

__attribute__((unused)) static JavaUtilArrayList *AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases();

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidUtilPrinter> printer, jboolean verbose);

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(AndroidDatabaseSqliteSQLiteDatabase *self);

@interface AndroidDatabaseSqliteSQLiteDatabase_CursorFactory : NSObject

@end

@interface AndroidDatabaseSqliteSQLiteDatabase_CustomFunction : NSObject

@end

@interface AndroidDatabaseSqliteSQLiteDatabase_$1 : JavaLangThreadLocal {
 @public
  AndroidDatabaseSqliteSQLiteDatabase *this$0_;
}

- (AndroidDatabaseSqliteSQLiteSession *)initialValue OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabase_$1)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase_$1, this$0_, AndroidDatabaseSqliteSQLiteDatabase *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_$1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase_$1 *self, AndroidDatabaseSqliteSQLiteDatabase *outer$);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_$1 *new_AndroidDatabaseSqliteSQLiteDatabase_$1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_$1 *create_AndroidDatabaseSqliteSQLiteDatabase_$1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDatabase_$1)

@interface AndroidDatabaseSqliteSQLiteDatabase_$2 : NSObject < JavaIoFileFilter > {
 @public
  NSString *val$prefix_;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)candidate;

- (instancetype)initWithNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidDatabaseSqliteSQLiteDatabase_$2)

J2OBJC_FIELD_SETTER(AndroidDatabaseSqliteSQLiteDatabase_$2, val$prefix_, NSString *)

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDatabase_$2_initWithNSString_(AndroidDatabaseSqliteSQLiteDatabase_$2 *self, NSString *capture$0);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_$2 *new_AndroidDatabaseSqliteSQLiteDatabase_$2_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDatabase_$2 *create_AndroidDatabaseSqliteSQLiteDatabase_$2_initWithNSString_(NSString *capture$0);

J2OBJC_TYPE_LITERAL_HEADER(AndroidDatabaseSqliteSQLiteDatabase_$2)

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteDatabase)

@implementation AndroidDatabaseSqliteSQLiteDatabase

- (instancetype)initWithNSString:(NSString *)path
                         withInt:(jint)openFlags
withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(self, path, openFlags, cursorFactory, errorHandler);
  return self;
}

- (void)javaFinalize {
  @try {
    AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(self, true);
  }
  @finally {
    [super javaFinalize];
  }
}

- (void)onAllReferencesReleased {
  AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(self, false);
}

- (void)disposeWithBoolean:(jboolean)finalized {
  AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(self, finalized);
}

+ (jint)releaseMemory {
  return AndroidDatabaseSqliteSQLiteDatabase_releaseMemory();
}

- (void)setLockingEnabledWithBoolean:(jboolean)lockingEnabled {
}

- (NSString *)getLabel {
  @synchronized(mLock_) {
    return ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->label_;
  }
}

- (void)onCorruption {
  [((id<AndroidDatabaseDatabaseErrorHandler>) nil_chk(mErrorHandler_)) onCorruptionWithAndroidDatabaseSqliteSQLiteDatabase:self];
}

- (AndroidDatabaseSqliteSQLiteSession *)getThreadSession {
  return [((JavaLangThreadLocal *) nil_chk(mThreadSession_)) get];
}

- (AndroidDatabaseSqliteSQLiteSession *)createSession {
  AndroidDatabaseSqliteSQLiteConnectionPool *pool;
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    pool = mConnectionPoolLocked_;
  }
  return new_AndroidDatabaseSqliteSQLiteSession_initWithAndroidDatabaseSqliteSQLiteConnectionPool_(pool);
}

- (jint)getThreadDefaultConnectionFlagsWithBoolean:(jboolean)readOnly {
  jint flags = readOnly ? AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_READ_ONLY : AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY;
  if (AndroidDatabaseSqliteSQLiteDatabase_isMainThread()) {
    flags |= AndroidDatabaseSqliteSQLiteConnectionPool_CONNECTION_FLAG_INTERACTIVE;
  }
  return flags;
}

+ (jboolean)isMainThread {
  return AndroidDatabaseSqliteSQLiteDatabase_isMainThread();
}

- (void)beginTransaction {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, nil, true);
}

- (void)beginTransactionNonExclusive {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, nil, false);
}

- (void)beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, transactionListener, true);
}

- (void)beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, transactionListener, false);
}

- (void)beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener:(id<AndroidDatabaseSqliteSQLiteTransactionListener>)transactionListener
                                                               withBoolean:(jboolean)exclusive {
  AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(self, transactionListener, exclusive);
}

- (void)endTransaction {
  [self acquireReference];
  @try {
    [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) endTransaction];
  }
  @finally {
    [self releaseReference];
  }
}

- (void)setTransactionSuccessful {
  [self acquireReference];
  @try {
    [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) setTransactionSuccessful];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)inTransaction {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) hasTransaction];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDbLockedByCurrentThread {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) hasConnection];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDbLockedByOtherThreads {
  return false;
}

- (jboolean)yieldIfContended {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, false, -1);
}

- (jboolean)yieldIfContendedSafely {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, true, -1);
}

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, true, sleepAfterYieldDelay);
}

- (jboolean)yieldIfContendedHelperWithBoolean:(jboolean)throwIfUnsafe
                                     withLong:(jlong)sleepAfterYieldDelay {
  return AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, throwIfUnsafe, sleepAfterYieldDelay);
}

- (id<JavaUtilMap>)getSyncedTables {
  return new_JavaUtilHashMap_initWithInt_(0);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
            withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                          withInt:(jint)flags {
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(path, factory, flags);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
            withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                                          withInt:(jint)flags
                          withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, flags, errorHandler);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithJavaIoFile:(JavaIoFile *)file
                      withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(file, factory);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(path, factory);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                    withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory
                                  withAndroidDatabaseDatabaseErrorHandler:(id<AndroidDatabaseDatabaseErrorHandler>)errorHandler {
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(path, factory, errorHandler);
}

+ (jboolean)deleteDatabaseWithJavaIoFile:(JavaIoFile *)file {
  return AndroidDatabaseSqliteSQLiteDatabase_deleteDatabaseWithJavaIoFile_(file);
}

- (void)reopenReadWrite {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if (!AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self)) {
      return;
    }
    jint oldOpenFlags = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_;
    mConfigurationLocked_->openFlags_ = (mConfigurationLocked_->openFlags_ & ~AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK) | AndroidDatabaseSqliteSQLiteDatabase_OPEN_READWRITE;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ = oldOpenFlags;
      @throw ex;
    }
  }
}

- (void)open {
  AndroidDatabaseSqliteSQLiteDatabase_open(self);
}

- (void)openInner {
  AndroidDatabaseSqliteSQLiteDatabase_openInner(self);
}

+ (AndroidDatabaseSqliteSQLiteDatabase *)createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)factory {
  return AndroidDatabaseSqliteSQLiteDatabase_createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(factory);
}

- (void)addCustomFunctionWithNSString:(NSString *)name
                              withInt:(jint)numArgs
withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction:(id<AndroidDatabaseSqliteSQLiteDatabase_CustomFunction>)function {
  AndroidDatabaseSqliteSQLiteCustomFunction *wrapper = new_AndroidDatabaseSqliteSQLiteCustomFunction_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction_(name, numArgs, function);
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    [((JavaUtilArrayList *) nil_chk(((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->customFunctions_)) addWithId:wrapper];
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      [mConfigurationLocked_->customFunctions_ removeWithId:wrapper];
      @throw ex;
    }
  }
}

- (jint)getVersion {
  return [JavaLangLong_valueOfWithLong_(AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA user_version;", nil)) intValue];
}

- (void)setVersionWithInt:(jint)version_ {
  [self execSQLWithNSString:JreStrcat("$I", @"PRAGMA user_version = ", version_)];
}

- (jlong)getMaximumSize {
  jlong pageCount = AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA max_page_count;", nil);
  return pageCount * [self getPageSize];
}

- (jlong)setMaximumSizeWithLong:(jlong)numBytes {
  jlong pageSize = [self getPageSize];
  jlong numPages = numBytes / pageSize;
  if ((numBytes % pageSize) != 0) {
    numPages++;
  }
  jlong newPageCount = AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, JreStrcat("$J", @"PRAGMA max_page_count = ", numPages), nil);
  return newPageCount * pageSize;
}

- (jlong)getPageSize {
  return AndroidDatabaseDatabaseUtils_longForQueryWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA page_size;", nil);
}

- (void)setPageSizeWithLong:(jlong)numBytes {
  [self execSQLWithNSString:JreStrcat("$J", @"PRAGMA page_size = ", numBytes)];
}

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)deletedTable {
}

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)foreignKey
                         withNSString:(NSString *)updateTable {
}

+ (NSString *)findEditTableWithNSString:(NSString *)tables {
  return AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(tables);
}

- (AndroidDatabaseSqliteSQLiteStatement *)compileStatementWithNSString:(NSString *)sql {
  [self acquireReference];
  @try {
    return new_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, sql, nil);
  }
  @finally {
    [self releaseReference];
  }
}

- (id<AndroidDatabaseCursor>)queryWithBoolean:(jboolean)distinct
                                 withNSString:(NSString *)table
                            withNSStringArray:(IOSObjectArray *)columns
                                 withNSString:(NSString *)selection
                            withNSStringArray:(IOSObjectArray *)selectionArgs
                                 withNSString:(NSString *)groupBy
                                 withNSString:(NSString *)having
                                 withNSString:(NSString *)orderBy
                                 withNSString:(NSString *)limit {
  return [self queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil withBoolean:distinct withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit];
}

- (id<AndroidDatabaseCursor>)queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                       withBoolean:(jboolean)distinct
                                                                                      withNSString:(NSString *)table
                                                                                 withNSStringArray:(IOSObjectArray *)columns
                                                                                      withNSString:(NSString *)selection
                                                                                 withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                      withNSString:(NSString *)groupBy
                                                                                      withNSString:(NSString *)having
                                                                                      withNSString:(NSString *)orderBy
                                                                                      withNSString:(NSString *)limit {
  [self acquireReference];
  @try {
    NSString *sql = AndroidDatabaseSqliteSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(distinct, table, columns, selection, groupBy, having, orderBy, limit);
    return [self rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory withNSString:sql withNSStringArray:selectionArgs withNSString:AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(table)];
  }
  @finally {
    [self releaseReference];
  }
}

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)table
                             withNSStringArray:(IOSObjectArray *)columns
                                  withNSString:(NSString *)selection
                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                  withNSString:(NSString *)groupBy
                                  withNSString:(NSString *)having
                                  withNSString:(NSString *)orderBy {
  return [self queryWithBoolean:false withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:nil];
}

- (id<AndroidDatabaseCursor>)queryWithNSString:(NSString *)table
                             withNSStringArray:(IOSObjectArray *)columns
                                  withNSString:(NSString *)selection
                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                  withNSString:(NSString *)groupBy
                                  withNSString:(NSString *)having
                                  withNSString:(NSString *)orderBy
                                  withNSString:(NSString *)limit {
  return [self queryWithBoolean:false withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit];
}

- (id<AndroidDatabaseCursor>)rawQueryWithNSString:(NSString *)sql
                                withNSStringArray:(IOSObjectArray *)selectionArgs {
  return [self rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:nil withNSString:sql withNSStringArray:selectionArgs withNSString:nil];
}

- (id<AndroidDatabaseCursor>)rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory>)cursorFactory
                                                                                         withNSString:(NSString *)sql
                                                                                    withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                                         withNSString:(NSString *)editTable {
  [self acquireReference];
  @try {
    id<AndroidDatabaseSqliteSQLiteCursorDriver> driver = new_AndroidDatabaseSqliteSQLiteDirectCursorDriver_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSString_(self, sql, editTable);
    return [driver queryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:cursorFactory != nil ? cursorFactory : mCursorFactory_ withNSStringArray:selectionArgs];
  }
  @finally {
    [self releaseReference];
  }
}

- (jlong)insertWithNSString:(NSString *)table
               withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)values {
  @try {
    return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:values withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE];
  }
  @catch (AndroidDatabaseSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$@", @"Error inserting ", values), e);
    return -1;
  }
}

- (jlong)insertOrThrowWithNSString:(NSString *)table
                      withNSString:(NSString *)nullColumnHack
   withAndroidContentContentValues:(AndroidContentContentValues *)values {
  return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:values withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE];
}

- (jlong)replaceWithNSString:(NSString *)table
                withNSString:(NSString *)nullColumnHack
withAndroidContentContentValues:(AndroidContentContentValues *)initialValues {
  @try {
    return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:initialValues withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE];
  }
  @catch (AndroidDatabaseSQLException *e) {
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$@", @"Error inserting ", initialValues), e);
    return -1;
  }
}

- (jlong)replaceOrThrowWithNSString:(NSString *)table
                       withNSString:(NSString *)nullColumnHack
    withAndroidContentContentValues:(AndroidContentContentValues *)initialValues {
  return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withAndroidContentContentValues:initialValues withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE];
}

- (jlong)insertWithOnConflictWithNSString:(NSString *)table
                             withNSString:(NSString *)nullColumnHack
          withAndroidContentContentValues:(AndroidContentContentValues *)initialValues
                                  withInt:(jint)conflictAlgorithm {
  [self acquireReference];
  @try {
    JavaLangStringBuilder *sql = new_JavaLangStringBuilder_init();
    (void) [sql appendWithNSString:@"INSERT"];
    (void) [sql appendWithNSString:IOSObjectArray_Get(nil_chk(AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES), conflictAlgorithm)];
    (void) [sql appendWithNSString:@" INTO "];
    (void) [sql appendWithNSString:table];
    (void) [sql appendWithChar:'('];
    IOSObjectArray *bindArgs = nil;
    jint size = (initialValues != nil && [initialValues size] > 0) ? [((AndroidContentContentValues *) nil_chk(initialValues)) size] : 0;
    if (size > 0) {
      bindArgs = [IOSObjectArray newArrayWithLength:size type:NSObject_class_()];
      jint i = 0;
      for (NSString * __strong colName in nil_chk([((AndroidContentContentValues *) nil_chk(initialValues)) keySet])) {
        (void) [sql appendWithNSString:(i > 0) ? @"," : @""];
        (void) [sql appendWithNSString:colName];
        (void) IOSObjectArray_Set(bindArgs, i++, [initialValues getWithNSString:colName]);
      }
      (void) [sql appendWithChar:')'];
      (void) [sql appendWithNSString:@" VALUES ("];
      for (i = 0; i < size; i++) {
        (void) [sql appendWithNSString:(i > 0) ? @",?" : @"?"];
      }
    }
    else {
      (void) [sql appendWithNSString:JreStrcat("$$", nullColumnHack, @") VALUES (NULL")];
    }
    (void) [sql appendWithChar:')'];
    AndroidDatabaseSqliteSQLiteStatement *statement = new_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, [sql description], bindArgs);
    @try {
      return [statement executeInsert];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)delete__WithNSString:(NSString *)table
                withNSString:(NSString *)whereClause
           withNSStringArray:(IOSObjectArray *)whereArgs {
  [self acquireReference];
  @try {
    AndroidDatabaseSqliteSQLiteStatement *statement = new_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, JreStrcat("$$$", @"DELETE FROM ", table, (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(whereClause) ? JreStrcat("$$", @" WHERE ", whereClause) : @"")), whereArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)updateWithNSString:(NSString *)table
withAndroidContentContentValues:(AndroidContentContentValues *)values
              withNSString:(NSString *)whereClause
         withNSStringArray:(IOSObjectArray *)whereArgs {
  return [self updateWithOnConflictWithNSString:table withAndroidContentContentValues:values withNSString:whereClause withNSStringArray:whereArgs withInt:AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE];
}

- (jint)updateWithOnConflictWithNSString:(NSString *)table
         withAndroidContentContentValues:(AndroidContentContentValues *)values
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs
                                 withInt:(jint)conflictAlgorithm {
  if (values == nil || [values size] == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Empty values");
  }
  [self acquireReference];
  @try {
    JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(120);
    (void) [sql appendWithNSString:@"UPDATE "];
    (void) [sql appendWithNSString:IOSObjectArray_Get(nil_chk(AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES), conflictAlgorithm)];
    (void) [sql appendWithNSString:table];
    (void) [sql appendWithNSString:@" SET "];
    jint setValuesSize = [values size];
    jint bindArgsSize = (whereArgs == nil) ? setValuesSize : (setValuesSize + ((IOSObjectArray *) nil_chk(whereArgs))->size_);
    IOSObjectArray *bindArgs = [IOSObjectArray newArrayWithLength:bindArgsSize type:NSObject_class_()];
    jint i = 0;
    for (NSString * __strong colName in nil_chk([values keySet])) {
      (void) [sql appendWithNSString:(i > 0) ? @"," : @""];
      (void) [sql appendWithNSString:colName];
      (void) IOSObjectArray_Set(bindArgs, i++, [values getWithNSString:colName]);
      (void) [sql appendWithNSString:@"=?"];
    }
    if (whereArgs != nil) {
      for (i = setValuesSize; i < bindArgsSize; i++) {
        (void) IOSObjectArray_Set(bindArgs, i, IOSObjectArray_Get(whereArgs, i - setValuesSize));
      }
    }
    if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(whereClause)) {
      (void) [sql appendWithNSString:@" WHERE "];
      (void) [sql appendWithNSString:whereClause];
    }
    AndroidDatabaseSqliteSQLiteStatement *statement = new_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, [sql description], bindArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (void)execSQLWithNSString:(NSString *)sql {
  AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, nil);
}

- (void)execSQLWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (bindArgs == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Empty bindArgs");
  }
  AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, bindArgs);
}

- (jint)executeSqlWithNSString:(NSString *)sql
             withNSObjectArray:(IOSObjectArray *)bindArgs {
  return AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, bindArgs);
}

- (jboolean)isReadOnly {
  @synchronized(mLock_) {
    return AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self);
  }
}

- (jboolean)isReadOnlyLocked {
  return AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self);
}

- (jboolean)isInMemoryDatabase {
  @synchronized(mLock_) {
    return [((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_)) isInMemoryDb];
  }
}

- (jboolean)isOpen {
  @synchronized(mLock_) {
    return mConnectionPoolLocked_ != nil;
  }
}

- (jboolean)needUpgradeWithInt:(jint)newVersion {
  return newVersion > [self getVersion];
}

- (NSString *)getPath {
  return AndroidDatabaseSqliteSQLiteDatabase_getPath(self);
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"locale must not be null.");
  }
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    JavaUtilLocale *oldLocale = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->locale_;
    mConfigurationLocked_->locale_ = locale;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->locale_ = oldLocale;
      @throw ex;
    }
  }
}

- (void)setMaxSqlCacheSizeWithInt:(jint)cacheSize {
  if (cacheSize > AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE || cacheSize < 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"expected value between 0 and ", AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE));
  }
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    jint oldMaxSqlCacheSize = ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->maxSqlCacheSize_;
    mConfigurationLocked_->maxSqlCacheSize_ = cacheSize;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->maxSqlCacheSize_ = oldMaxSqlCacheSize;
      @throw ex;
    }
  }
}

- (void)setForeignKeyConstraintsEnabledWithBoolean:(jboolean)enable {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if (((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->foreignKeyConstraintsEnabled_ == enable) {
      return;
    }
    mConfigurationLocked_->foreignKeyConstraintsEnabled_ = enable;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->foreignKeyConstraintsEnabled_ = !enable;
      @throw ex;
    }
  }
}

- (jboolean)enableWriteAheadLogging {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0) {
      return true;
    }
    if (AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(self)) {
      return false;
    }
    if ([mConfigurationLocked_ isInMemoryDb]) {
      AndroidUtilLog_iWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase_TAG, @"can't enable WAL for memory databases.");
      return false;
    }
    if (mHasAttachedDbsLocked_) {
      if (AndroidUtilLog_isLoggableWithNSString_withInt_(AndroidDatabaseSqliteSQLiteDatabase_TAG, AndroidUtilLog_DEBUG)) {
        AndroidUtilLog_dWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$$$", @"this database: ", mConfigurationLocked_->label_, @" has attached databases. can't  enable WAL."));
      }
      return false;
    }
    mConfigurationLocked_->openFlags_ |= AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ &= ~AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
      @throw ex;
    }
  }
  return true;
}

- (void)disableWriteAheadLogging {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    if ((((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) == 0) {
      return;
    }
    mConfigurationLocked_->openFlags_ &= ~AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
    @try {
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ |= AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
      @throw ex;
    }
  }
}

- (jboolean)isWriteAheadLoggingEnabled {
  @synchronized(mLock_) {
    AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
    return (((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0;
  }
}

+ (JavaUtilArrayList *)getDbStats {
  return AndroidDatabaseSqliteSQLiteDatabase_getDbStats();
}

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(self, dbStatsList);
}

+ (JavaUtilArrayList *)getActiveDatabases {
  return AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases();
}

+ (void)dumpAllWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                          withBoolean:(jboolean)verbose {
  AndroidDatabaseSqliteSQLiteDatabase_dumpAllWithAndroidUtilPrinter_withBoolean_(printer, verbose);
}

- (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                       withBoolean:(jboolean)verbose {
  AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(self, printer, verbose);
}

- (id<JavaUtilList>)getAttachedDbs {
  JavaUtilArrayList *attachedDbs = new_JavaUtilArrayList_init();
  @synchronized(mLock_) {
    if (mConnectionPoolLocked_ == nil) {
      return nil;
    }
    if (!mHasAttachedDbsLocked_) {
      [attachedDbs addWithId:new_AndroidUtilPair_initWithId_withId_(@"main", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->path_)];
      return attachedDbs;
    }
    [self acquireReference];
  }
  @try {
    id<AndroidDatabaseCursor> c = nil;
    @try {
      c = [self rawQueryWithNSString:@"pragma database_list;" withNSStringArray:nil];
      while ([((id<AndroidDatabaseCursor>) nil_chk(c)) moveToNext]) {
        [attachedDbs addWithId:new_AndroidUtilPair_initWithId_withId_([c getStringWithInt:1], [c getStringWithInt:2])];
      }
    }
    @finally {
      if (c != nil) {
        [c close];
      }
    }
    return attachedDbs;
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDatabaseIntegrityOk {
  [self acquireReference];
  @try {
    id<JavaUtilList> attachedDbs = nil;
    @try {
      attachedDbs = [self getAttachedDbs];
      if (attachedDbs == nil) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"databaselist for: ", AndroidDatabaseSqliteSQLiteDatabase_getPath(self), @" couldn't be retrieved. probably because the database is closed"));
      }
    }
    @catch (AndroidDatabaseSqliteSQLiteException *e) {
      attachedDbs = new_JavaUtilArrayList_init();
      [attachedDbs addWithId:new_AndroidUtilPair_initWithId_withId_(@"main", AndroidDatabaseSqliteSQLiteDatabase_getPath(self))];
    }
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(attachedDbs)) size]; i++) {
      AndroidUtilPair *p = [attachedDbs getWithInt:i];
      AndroidDatabaseSqliteSQLiteStatement *prog = nil;
      @try {
        prog = [self compileStatementWithNSString:JreStrcat("$$$", @"PRAGMA ", ((AndroidUtilPair *) nil_chk(p))->first_, @".integrity_check(1);")];
        NSString *rslt = [((AndroidDatabaseSqliteSQLiteStatement *) nil_chk(prog)) simpleQueryForString];
        if (![((NSString *) nil_chk(rslt)) equalsIgnoreCase:@"ok"]) {
          AndroidUtilLog_eWithNSString_withNSString_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$$$$", @"PRAGMA integrity_check on ", p->second_, @" returned: ", rslt));
          return false;
        }
      }
      @finally {
        if (prog != nil) [prog close];
      }
    }
  }
  @finally {
    [self releaseReference];
  }
  return true;
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteDatabase: ", AndroidDatabaseSqliteSQLiteDatabase_getPath(self));
}

- (void)throwIfNotOpenLocked {
  AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(self);
}

+ (IOSObjectArray *)__annotations_setLockingEnabledWithBoolean_ {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isDbLockedByOtherThreads {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_yieldIfContended {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getSyncedTables {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_markTableSyncableWithNSString_withNSString_ {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_markTableSyncableWithNSString_withNSString_withNSString_ {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

- (void)dealloc {
  JreCheckFinalize(self, [AndroidDatabaseSqliteSQLiteDatabase class]);
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteDatabase class]) {
    AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases = new_JavaUtilWeakHashMap_init();
    AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES = [IOSObjectArray newArrayWithObjects:(id[]){ @"", @" OR ROLLBACK ", @" OR ABORT ", @" OR FAIL ", @" OR IGNORE ", @" OR REPLACE " } count:6 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteDatabase)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withAndroidDatabaseDatabaseErrorHandler:", "SQLiteDatabase", NULL, 0x2, NULL, NULL },
    { "javaFinalize", "finalize", "V", 0x4, "Ljava.lang.Throwable;", NULL },
    { "onAllReferencesReleased", NULL, "V", 0x4, NULL, NULL },
    { "disposeWithBoolean:", "dispose", "V", 0x2, NULL, NULL },
    { "releaseMemory", NULL, "I", 0x9, NULL, NULL },
    { "setLockingEnabledWithBoolean:", "setLockingEnabled", "V", 0x1, NULL, NULL },
    { "getLabel", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "onCorruption", NULL, "V", 0x0, NULL, NULL },
    { "getThreadSession", NULL, "Landroid.database.sqlite.SQLiteSession;", 0x0, NULL, NULL },
    { "createSession", NULL, "Landroid.database.sqlite.SQLiteSession;", 0x0, NULL, NULL },
    { "getThreadDefaultConnectionFlagsWithBoolean:", "getThreadDefaultConnectionFlags", "I", 0x0, NULL, NULL },
    { "isMainThread", NULL, "Z", 0xa, NULL, NULL },
    { "beginTransaction", NULL, "V", 0x1, NULL, NULL },
    { "beginTransactionNonExclusive", NULL, "V", 0x1, NULL, NULL },
    { "beginTransactionWithListenerWithAndroidDatabaseSqliteSQLiteTransactionListener:", "beginTransactionWithListener", "V", 0x1, NULL, NULL },
    { "beginTransactionWithListenerNonExclusiveWithAndroidDatabaseSqliteSQLiteTransactionListener:", "beginTransactionWithListenerNonExclusive", "V", 0x1, NULL, NULL },
    { "beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener:withBoolean:", "beginTransaction", "V", 0x2, NULL, NULL },
    { "endTransaction", NULL, "V", 0x1, NULL, NULL },
    { "setTransactionSuccessful", NULL, "V", 0x1, NULL, NULL },
    { "inTransaction", NULL, "Z", 0x1, NULL, NULL },
    { "isDbLockedByCurrentThread", NULL, "Z", 0x1, NULL, NULL },
    { "isDbLockedByOtherThreads", NULL, "Z", 0x1, NULL, NULL },
    { "yieldIfContended", NULL, "Z", 0x1, NULL, NULL },
    { "yieldIfContendedSafely", NULL, "Z", 0x1, NULL, NULL },
    { "yieldIfContendedSafelyWithLong:", "yieldIfContendedSafely", "Z", 0x1, NULL, NULL },
    { "yieldIfContendedHelperWithBoolean:withLong:", "yieldIfContendedHelper", "Z", 0x2, NULL, NULL },
    { "getSyncedTables", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" },
    { "openDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:", "openDatabase", "Landroid.database.sqlite.SQLiteDatabase;", 0x9, NULL, NULL },
    { "openDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withInt:withAndroidDatabaseDatabaseErrorHandler:", "openDatabase", "Landroid.database.sqlite.SQLiteDatabase;", 0x9, NULL, NULL },
    { "openOrCreateDatabaseWithJavaIoFile:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:", "openOrCreateDatabase", "Landroid.database.sqlite.SQLiteDatabase;", 0x9, NULL, NULL },
    { "openOrCreateDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:", "openOrCreateDatabase", "Landroid.database.sqlite.SQLiteDatabase;", 0x9, NULL, NULL },
    { "openOrCreateDatabaseWithNSString:withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withAndroidDatabaseDatabaseErrorHandler:", "openOrCreateDatabase", "Landroid.database.sqlite.SQLiteDatabase;", 0x9, NULL, NULL },
    { "deleteDatabaseWithJavaIoFile:", "deleteDatabase", "Z", 0x9, NULL, NULL },
    { "reopenReadWrite", NULL, "V", 0x1, NULL, NULL },
    { "open", NULL, "V", 0x2, NULL, NULL },
    { "openInner", NULL, "V", 0x2, NULL, NULL },
    { "createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:", "create", "Landroid.database.sqlite.SQLiteDatabase;", 0x9, NULL, NULL },
    { "addCustomFunctionWithNSString:withInt:withAndroidDatabaseSqliteSQLiteDatabase_CustomFunction:", "addCustomFunction", "V", 0x1, NULL, NULL },
    { "getVersion", NULL, "I", 0x1, NULL, NULL },
    { "setVersionWithInt:", "setVersion", "V", 0x1, NULL, NULL },
    { "getMaximumSize", NULL, "J", 0x1, NULL, NULL },
    { "setMaximumSizeWithLong:", "setMaximumSize", "J", 0x1, NULL, NULL },
    { "getPageSize", NULL, "J", 0x1, NULL, NULL },
    { "setPageSizeWithLong:", "setPageSize", "V", 0x1, NULL, NULL },
    { "markTableSyncableWithNSString:withNSString:", "markTableSyncable", "V", 0x1, NULL, NULL },
    { "markTableSyncableWithNSString:withNSString:withNSString:", "markTableSyncable", "V", 0x1, NULL, NULL },
    { "findEditTableWithNSString:", "findEditTable", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "compileStatementWithNSString:", "compileStatement", "Landroid.database.sqlite.SQLiteStatement;", 0x1, "Landroid.database.SQLException;", NULL },
    { "queryWithBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:", "query", "Landroid.database.Cursor;", 0x1, NULL, NULL },
    { "queryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:", "queryWithFactory", "Landroid.database.Cursor;", 0x1, NULL, NULL },
    { "queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:", "query", "Landroid.database.Cursor;", 0x1, NULL, NULL },
    { "queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:", "query", "Landroid.database.Cursor;", 0x1, NULL, NULL },
    { "rawQueryWithNSString:withNSStringArray:", "rawQuery", "Landroid.database.Cursor;", 0x1, NULL, NULL },
    { "rawQueryWithFactoryWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory:withNSString:withNSStringArray:withNSString:", "rawQueryWithFactory", "Landroid.database.Cursor;", 0x1, NULL, NULL },
    { "insertWithNSString:withNSString:withAndroidContentContentValues:", "insert", "J", 0x1, NULL, NULL },
    { "insertOrThrowWithNSString:withNSString:withAndroidContentContentValues:", "insertOrThrow", "J", 0x1, "Landroid.database.SQLException;", NULL },
    { "replaceWithNSString:withNSString:withAndroidContentContentValues:", "replace", "J", 0x1, NULL, NULL },
    { "replaceOrThrowWithNSString:withNSString:withAndroidContentContentValues:", "replaceOrThrow", "J", 0x1, "Landroid.database.SQLException;", NULL },
    { "insertWithOnConflictWithNSString:withNSString:withAndroidContentContentValues:withInt:", "insertWithOnConflict", "J", 0x1, NULL, NULL },
    { "delete__WithNSString:withNSString:withNSStringArray:", "delete", "I", 0x1, NULL, NULL },
    { "updateWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:", "update", "I", 0x1, NULL, NULL },
    { "updateWithOnConflictWithNSString:withAndroidContentContentValues:withNSString:withNSStringArray:withInt:", "updateWithOnConflict", "I", 0x1, NULL, NULL },
    { "execSQLWithNSString:", "execSQL", "V", 0x1, "Landroid.database.SQLException;", NULL },
    { "execSQLWithNSString:withNSObjectArray:", "execSQL", "V", 0x1, "Landroid.database.SQLException;", NULL },
    { "executeSqlWithNSString:withNSObjectArray:", "executeSql", "I", 0x2, "Landroid.database.SQLException;", NULL },
    { "isReadOnly", NULL, "Z", 0x1, NULL, NULL },
    { "isReadOnlyLocked", NULL, "Z", 0x2, NULL, NULL },
    { "isInMemoryDatabase", NULL, "Z", 0x1, NULL, NULL },
    { "isOpen", NULL, "Z", 0x1, NULL, NULL },
    { "needUpgradeWithInt:", "needUpgrade", "Z", 0x1, NULL, NULL },
    { "getPath", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setLocaleWithJavaUtilLocale:", "setLocale", "V", 0x1, NULL, NULL },
    { "setMaxSqlCacheSizeWithInt:", "setMaxSqlCacheSize", "V", 0x1, NULL, NULL },
    { "setForeignKeyConstraintsEnabledWithBoolean:", "setForeignKeyConstraintsEnabled", "V", 0x1, NULL, NULL },
    { "enableWriteAheadLogging", NULL, "Z", 0x1, NULL, NULL },
    { "disableWriteAheadLogging", NULL, "V", 0x1, NULL, NULL },
    { "isWriteAheadLoggingEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "getDbStats", NULL, "Ljava.util.ArrayList;", 0x8, NULL, "()Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDebug$DbStats;>;" },
    { "collectDbStatsWithJavaUtilArrayList:", "collectDbStats", "V", 0x2, NULL, "(Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDebug$DbStats;>;)V" },
    { "getActiveDatabases", NULL, "Ljava.util.ArrayList;", 0xa, NULL, "()Ljava/util/ArrayList<Landroid/database/sqlite/SQLiteDatabase;>;" },
    { "dumpAllWithAndroidUtilPrinter:withBoolean:", "dumpAll", "V", 0x8, NULL, NULL },
    { "dumpWithAndroidUtilPrinter:withBoolean:", "dump", "V", 0x2, NULL, NULL },
    { "getAttachedDbs", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Landroid/util/Pair<Ljava/lang/String;Ljava/lang/String;>;>;" },
    { "isDatabaseIntegrityOk", NULL, "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "throwIfNotOpenLocked", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "TAG", 0x1a, "Ljava.lang.String;", &AndroidDatabaseSqliteSQLiteDatabase_TAG, NULL, .constantValue.asLong = 0 },
    { "EVENT_DB_CORRUPT", "EVENT_DB_CORRUPT", 0x1a, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_EVENT_DB_CORRUPT },
    { "sActiveDatabases", "sActiveDatabases", 0xa, "Ljava.util.WeakHashMap;", &AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases, "Ljava/util/WeakHashMap<Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "mThreadSession_", NULL, 0x12, "Ljava.lang.ThreadLocal;", NULL, "Ljava/lang/ThreadLocal<Landroid/database/sqlite/SQLiteSession;>;", .constantValue.asLong = 0 },
    { "mCursorFactory_", NULL, 0x12, "Landroid.database.sqlite.SQLiteDatabase$CursorFactory;", NULL, NULL, .constantValue.asLong = 0 },
    { "mErrorHandler_", NULL, 0x12, "Landroid.database.DatabaseErrorHandler;", NULL, NULL, .constantValue.asLong = 0 },
    { "mLock_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "mCloseGuardLocked_", NULL, 0x12, "Landroid.system.CloseGuard;", NULL, NULL, .constantValue.asLong = 0 },
    { "mConfigurationLocked_", NULL, 0x12, "Landroid.database.sqlite.SQLiteDatabaseConfiguration;", NULL, NULL, .constantValue.asLong = 0 },
    { "mConnectionPoolLocked_", NULL, 0x2, "Landroid.database.sqlite.SQLiteConnectionPool;", NULL, NULL, .constantValue.asLong = 0 },
    { "mHasAttachedDbsLocked_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "CONFLICT_ROLLBACK", "CONFLICT_ROLLBACK", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ROLLBACK },
    { "CONFLICT_ABORT", "CONFLICT_ABORT", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_ABORT },
    { "CONFLICT_FAIL", "CONFLICT_FAIL", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_FAIL },
    { "CONFLICT_IGNORE", "CONFLICT_IGNORE", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_IGNORE },
    { "CONFLICT_REPLACE", "CONFLICT_REPLACE", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_REPLACE },
    { "CONFLICT_NONE", "CONFLICT_NONE", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_NONE },
    { "CONFLICT_VALUES", "CONFLICT_VALUES", 0x1a, "[Ljava.lang.String;", &AndroidDatabaseSqliteSQLiteDatabase_CONFLICT_VALUES, NULL, .constantValue.asLong = 0 },
    { "SQLITE_MAX_LIKE_PATTERN_LENGTH", "SQLITE_MAX_LIKE_PATTERN_LENGTH", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_SQLITE_MAX_LIKE_PATTERN_LENGTH },
    { "OPEN_READWRITE", "OPEN_READWRITE", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_OPEN_READWRITE },
    { "OPEN_READONLY", "OPEN_READONLY", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY },
    { "OPEN_READ_MASK", "OPEN_READ_MASK", 0x1a, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK },
    { "NO_LOCALIZED_COLLATORS", "NO_LOCALIZED_COLLATORS", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_NO_LOCALIZED_COLLATORS },
    { "CREATE_IF_NECESSARY", "CREATE_IF_NECESSARY", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY },
    { "ENABLE_WRITE_AHEAD_LOGGING", "ENABLE_WRITE_AHEAD_LOGGING", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING },
    { "MAX_SQL_CACHE_SIZE", "MAX_SQL_CACHE_SIZE", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidDatabaseSqliteSQLiteDatabase_MAX_SQL_CACHE_SIZE },
  };
  static const char *inner_classes[] = {"Landroid.database.sqlite.SQLiteDatabase$CursorFactory;", "Landroid.database.sqlite.SQLiteDatabase$CustomFunction;"};
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase = { 2, "SQLiteDatabase", "android.database.sqlite", NULL, 0x11, 86, methods, 26, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteDatabase;
}

@end

void AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  AndroidDatabaseSqliteSQLiteClosable_init(self);
  self->mThreadSession_ = new_AndroidDatabaseSqliteSQLiteDatabase_$1_initWithAndroidDatabaseSqliteSQLiteDatabase_(self);
  self->mLock_ = new_NSObject_init();
  self->mCloseGuardLocked_ = AndroidSystemCloseGuard_get();
  self->mCursorFactory_ = cursorFactory;
  self->mErrorHandler_ = errorHandler != nil ? ((id) errorHandler) : new_AndroidDatabaseDefaultDatabaseErrorHandler_init();
  self->mConfigurationLocked_ = new_AndroidDatabaseSqliteSQLiteDatabaseConfiguration_initWithNSString_withInt_(path, openFlags);
}

AndroidDatabaseSqliteSQLiteDatabase *new_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabase, initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_, path, openFlags, cursorFactory, errorHandler)
}

AndroidDatabaseSqliteSQLiteDatabase *create_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, jint openFlags, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> cursorFactory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabase, initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_, path, openFlags, cursorFactory, errorHandler)
}

void AndroidDatabaseSqliteSQLiteDatabase_disposeWithBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean finalized) {
  AndroidDatabaseSqliteSQLiteConnectionPool *pool;
  @synchronized(self->mLock_) {
    if (self->mCloseGuardLocked_ != nil) {
      if (finalized) {
        [self->mCloseGuardLocked_ warnIfOpen];
      }
      [self->mCloseGuardLocked_ close];
    }
    pool = self->mConnectionPoolLocked_;
    self->mConnectionPoolLocked_ = nil;
  }
  if (!finalized) {
    @synchronized(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases) {
      (void) [((JavaUtilWeakHashMap *) nil_chk(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases)) removeWithId:self];
    }
    if (pool != nil) {
      [pool close];
    }
  }
}

jint AndroidDatabaseSqliteSQLiteDatabase_releaseMemory() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteGlobal_releaseMemory();
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_isMainThread() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  AndroidOsLooper *looper = AndroidOsLooper_myLooper();
  return looper != nil && looper == AndroidOsLooper_getMainLooper();
}

void AndroidDatabaseSqliteSQLiteDatabase_beginTransactionWithAndroidDatabaseSqliteSQLiteTransactionListener_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidDatabaseSqliteSQLiteTransactionListener> transactionListener, jboolean exclusive) {
  [self acquireReference];
  @try {
    [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) beginTransactionWithInt:exclusive ? AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_EXCLUSIVE : AndroidDatabaseSqliteSQLiteSession_TRANSACTION_MODE_IMMEDIATE withAndroidDatabaseSqliteSQLiteTransactionListener:transactionListener withInt:[self getThreadDefaultConnectionFlagsWithBoolean:false]];
  }
  @finally {
    [self releaseReference];
  }
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(AndroidDatabaseSqliteSQLiteDatabase *self, jboolean throwIfUnsafe, jlong sleepAfterYieldDelay) {
  [self acquireReference];
  @try {
    return [((AndroidDatabaseSqliteSQLiteSession *) nil_chk([self getThreadSession])) yieldTransactionWithLong:sleepAfterYieldDelay withBoolean:throwIfUnsafe];
  }
  @finally {
    [self releaseReference];
  }
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint flags) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, flags, nil);
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, jint flags, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  AndroidDatabaseSqliteSQLiteDatabase *db = new_AndroidDatabaseSqliteSQLiteDatabase_initWithNSString_withInt_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(path, flags, factory, errorHandler);
  AndroidDatabaseSqliteSQLiteDatabase_open(db);
  return db;
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(JavaIoFile *file, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_([((JavaIoFile *) nil_chk(file)) getPath], factory);
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY, nil);
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_openOrCreateDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withAndroidDatabaseDatabaseErrorHandler_(NSString *path, id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory, id<AndroidDatabaseDatabaseErrorHandler> errorHandler) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_withAndroidDatabaseDatabaseErrorHandler_(path, factory, AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY, errorHandler);
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_deleteDatabaseWithJavaIoFile_(JavaIoFile *file) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  if (file == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"file must not be null");
  }
  jboolean deleted = false;
  deleted |= [file delete__];
  deleted |= [new_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-journal")) delete__];
  deleted |= [new_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-shm")) delete__];
  deleted |= [new_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-wal")) delete__];
  JavaIoFile *dir = [file getParentFile];
  if (dir != nil) {
    NSString *prefix = JreStrcat("$$", [file getName], @"-mj");
    IOSObjectArray *files = [dir listFilesWithJavaIoFileFilter:new_AndroidDatabaseSqliteSQLiteDatabase_$2_initWithNSString_(prefix)];
    if (files != nil) {
      {
        IOSObjectArray *a__ = files;
        JavaIoFile * const *b__ = a__->buffer_;
        JavaIoFile * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaIoFile *masterJournal = *b__++;
          deleted |= [((JavaIoFile *) nil_chk(masterJournal)) delete__];
        }
      }
    }
  }
  return deleted;
}

void AndroidDatabaseSqliteSQLiteDatabase_open(AndroidDatabaseSqliteSQLiteDatabase *self) {
  @try {
    @try {
      AndroidDatabaseSqliteSQLiteDatabase_openInner(self);
    }
    @catch (AndroidDatabaseSqliteSQLiteDatabaseCorruptException *ex) {
      [self onCorruption];
      AndroidDatabaseSqliteSQLiteDatabase_openInner(self);
    }
  }
  @catch (AndroidDatabaseSqliteSQLiteException *ex) {
    AndroidUtilLog_eWithNSString_withNSString_withNSException_(AndroidDatabaseSqliteSQLiteDatabase_TAG, JreStrcat("$$$", @"Failed to open database '", [self getLabel], @"'."), ex);
    [self close];
    @throw ex;
  }
}

void AndroidDatabaseSqliteSQLiteDatabase_openInner(AndroidDatabaseSqliteSQLiteDatabase *self) {
  @synchronized(self->mLock_) {
    JreAssert((self->mConnectionPoolLocked_ == nil), (@"android/database/sqlite/SQLiteDatabase.java:817 condition failed: assert mConnectionPoolLocked == null;"));
    self->mConnectionPoolLocked_ = AndroidDatabaseSqliteSQLiteConnectionPool_openWithAndroidDatabaseSqliteSQLiteDatabaseConfiguration_(self->mConfigurationLocked_);
    [((AndroidSystemCloseGuard *) nil_chk(self->mCloseGuardLocked_)) openWithNSString:@"close"];
  }
  @synchronized(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases) {
    (void) [((JavaUtilWeakHashMap *) nil_chk(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases)) putWithId:self withId:nil];
  }
}

AndroidDatabaseSqliteSQLiteDatabase *AndroidDatabaseSqliteSQLiteDatabase_createWithAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_(id<AndroidDatabaseSqliteSQLiteDatabase_CursorFactory> factory) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  return AndroidDatabaseSqliteSQLiteDatabase_openDatabaseWithNSString_withAndroidDatabaseSqliteSQLiteDatabase_CursorFactory_withInt_(AndroidDatabaseSqliteSQLiteDatabaseConfiguration_MEMORY_DB_PATH, factory, AndroidDatabaseSqliteSQLiteDatabase_CREATE_IF_NECESSARY);
}

NSString *AndroidDatabaseSqliteSQLiteDatabase_findEditTableWithNSString_(NSString *tables) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  if (!AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(tables)) {
    jint spacepos = [((NSString *) nil_chk(tables)) indexOf:' '];
    jint commapos = [tables indexOf:','];
    if (spacepos > 0 && (spacepos < commapos || commapos < 0)) {
      return [tables substring:0 endIndex:spacepos];
    }
    else if (commapos > 0 && (commapos < spacepos || spacepos < 0)) {
      return [tables substring:0 endIndex:commapos];
    }
    return tables;
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Invalid tables");
  }
}

jint AndroidDatabaseSqliteSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(AndroidDatabaseSqliteSQLiteDatabase *self, NSString *sql, IOSObjectArray *bindArgs) {
  [self acquireReference];
  @try {
    if (AndroidDatabaseDatabaseUtils_getSqlStatementTypeWithNSString_(sql) == AndroidDatabaseDatabaseUtils_STATEMENT_ATTACH) {
      jboolean disableWal = false;
      @synchronized(self->mLock_) {
        if (!self->mHasAttachedDbsLocked_) {
          self->mHasAttachedDbsLocked_ = true;
          disableWal = true;
        }
      }
      if (disableWal) {
        [self disableWriteAheadLogging];
      }
    }
    AndroidDatabaseSqliteSQLiteStatement *statement = new_AndroidDatabaseSqliteSQLiteStatement_initWithAndroidDatabaseSqliteSQLiteDatabase_withNSString_withNSObjectArray_(self, sql, bindArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

jboolean AndroidDatabaseSqliteSQLiteDatabase_isReadOnlyLocked(AndroidDatabaseSqliteSQLiteDatabase *self) {
  return (((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->openFlags_ & AndroidDatabaseSqliteSQLiteDatabase_OPEN_READ_MASK) == AndroidDatabaseSqliteSQLiteDatabase_OPEN_READONLY;
}

NSString *AndroidDatabaseSqliteSQLiteDatabase_getPath(AndroidDatabaseSqliteSQLiteDatabase *self) {
  @synchronized(self->mLock_) {
    return ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->path_;
  }
}

JavaUtilArrayList *AndroidDatabaseSqliteSQLiteDatabase_getDbStats() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  JavaUtilArrayList *dbStatsList = new_JavaUtilArrayList_init();
  for (AndroidDatabaseSqliteSQLiteDatabase * __strong db in nil_chk(AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases())) {
    AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(nil_chk(db), dbStatsList);
  }
  return dbStatsList;
}

void AndroidDatabaseSqliteSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(AndroidDatabaseSqliteSQLiteDatabase *self, JavaUtilArrayList *dbStatsList) {
  @synchronized(self->mLock_) {
    if (self->mConnectionPoolLocked_ != nil) {
      [self->mConnectionPoolLocked_ collectDbStatsWithJavaUtilArrayList:dbStatsList];
    }
  }
}

JavaUtilArrayList *AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases() {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  JavaUtilArrayList *databases = new_JavaUtilArrayList_init();
  @synchronized(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases) {
    [databases addAllWithJavaUtilCollection:[((JavaUtilWeakHashMap *) nil_chk(AndroidDatabaseSqliteSQLiteDatabase_sActiveDatabases)) keySet]];
  }
  return databases;
}

void AndroidDatabaseSqliteSQLiteDatabase_dumpAllWithAndroidUtilPrinter_withBoolean_(id<AndroidUtilPrinter> printer, jboolean verbose) {
  AndroidDatabaseSqliteSQLiteDatabase_initialize();
  for (AndroidDatabaseSqliteSQLiteDatabase * __strong db in nil_chk(AndroidDatabaseSqliteSQLiteDatabase_getActiveDatabases())) {
    AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(nil_chk(db), printer, verbose);
  }
}

void AndroidDatabaseSqliteSQLiteDatabase_dumpWithAndroidUtilPrinter_withBoolean_(AndroidDatabaseSqliteSQLiteDatabase *self, id<AndroidUtilPrinter> printer, jboolean verbose) {
  @synchronized(self->mLock_) {
    if (self->mConnectionPoolLocked_ != nil) {
      [((id<AndroidUtilPrinter>) nil_chk(printer)) printlnWithNSString:@""];
      [((AndroidDatabaseSqliteSQLiteConnectionPool *) nil_chk(self->mConnectionPoolLocked_)) dumpWithAndroidUtilPrinter:printer withBoolean:verbose];
    }
  }
}

void AndroidDatabaseSqliteSQLiteDatabase_throwIfNotOpenLocked(AndroidDatabaseSqliteSQLiteDatabase *self) {
  if (self->mConnectionPoolLocked_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"The database '", ((AndroidDatabaseSqliteSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->label_, @"' is not open."));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabase)

@implementation AndroidDatabaseSqliteSQLiteDatabase_CursorFactory

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newCursorWithAndroidDatabaseSqliteSQLiteDatabase:withAndroidDatabaseSqliteSQLiteCursorDriver:withNSString:withAndroidDatabaseSqliteSQLiteQuery:", "newCursor", "Landroid.database.Cursor;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_CursorFactory = { 2, "CursorFactory", "android.database.sqlite", "SQLiteDatabase", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteDatabase_CursorFactory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabase_CursorFactory)

@implementation AndroidDatabaseSqliteSQLiteDatabase_CustomFunction

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithNSStringArray:", "callback", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_CustomFunction = { 2, "CustomFunction", "android.database.sqlite", "SQLiteDatabase", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteDatabase_CustomFunction;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabase_CustomFunction)

@implementation AndroidDatabaseSqliteSQLiteDatabase_$1

- (AndroidDatabaseSqliteSQLiteSession *)initialValue {
  return [this$0_ createSession];
}

- (instancetype)initWithAndroidDatabaseSqliteSQLiteDatabase:(AndroidDatabaseSqliteSQLiteDatabase *)outer$ {
  AndroidDatabaseSqliteSQLiteDatabase_$1_initWithAndroidDatabaseSqliteSQLiteDatabase_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "Landroid.database.sqlite.SQLiteSession;", 0x4, NULL, "()Landroid/database/sqlite/SQLiteSession;" },
    { "initWithAndroidDatabaseSqliteSQLiteDatabase:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Landroid.database.sqlite.SQLiteDatabase;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Landroid.database.sqlite.SQLiteSession;"};
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_$1 = { 2, "", "android.database.sqlite", "SQLiteDatabase", 0x8008, 2, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/ThreadLocal<Landroid/database/sqlite/SQLiteSession;>;" };
  return &_AndroidDatabaseSqliteSQLiteDatabase_$1;
}

@end

void AndroidDatabaseSqliteSQLiteDatabase_$1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase_$1 *self, AndroidDatabaseSqliteSQLiteDatabase *outer$) {
  self->this$0_ = outer$;
  JavaLangThreadLocal_init(self);
}

AndroidDatabaseSqliteSQLiteDatabase_$1 *new_AndroidDatabaseSqliteSQLiteDatabase_$1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabase_$1, initWithAndroidDatabaseSqliteSQLiteDatabase_, outer$)
}

AndroidDatabaseSqliteSQLiteDatabase_$1 *create_AndroidDatabaseSqliteSQLiteDatabase_$1_initWithAndroidDatabaseSqliteSQLiteDatabase_(AndroidDatabaseSqliteSQLiteDatabase *outer$) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabase_$1, initWithAndroidDatabaseSqliteSQLiteDatabase_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabase_$1)

@implementation AndroidDatabaseSqliteSQLiteDatabase_$2

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)candidate {
  return [((NSString *) nil_chk([((JavaIoFile *) nil_chk(candidate)) getName])) hasPrefix:val$prefix_];
}

- (instancetype)initWithNSString:(NSString *)capture$0 {
  AndroidDatabaseSqliteSQLiteDatabase_$2_initWithNSString_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "acceptWithJavaIoFile:", "accept", "Z", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$prefix_", NULL, 0x1012, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "AndroidDatabaseSqliteSQLiteDatabase", "deleteDatabaseWithJavaIoFile:" };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDatabase_$2 = { 2, "", "android.database.sqlite", "SQLiteDatabase", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_AndroidDatabaseSqliteSQLiteDatabase_$2;
}

@end

void AndroidDatabaseSqliteSQLiteDatabase_$2_initWithNSString_(AndroidDatabaseSqliteSQLiteDatabase_$2 *self, NSString *capture$0) {
  self->val$prefix_ = capture$0;
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteDatabase_$2 *new_AndroidDatabaseSqliteSQLiteDatabase_$2_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDatabase_$2, initWithNSString_, capture$0)
}

AndroidDatabaseSqliteSQLiteDatabase_$2 *create_AndroidDatabaseSqliteSQLiteDatabase_$2_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDatabase_$2, initWithNSString_, capture$0)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDatabase_$2)
