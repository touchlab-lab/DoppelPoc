//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/androidbase/AndroidBase/lib/src/main/java/android/database/sqlite/SQLiteDebug.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/database/sqlite/SQLiteDatabase.h"
#include "android/database/sqlite/SQLiteDebug.h"
#include "android/util/Log.h"
#include "android/util/Printer.h"

@interface AndroidDatabaseSqliteSQLiteDebug ()

- (instancetype)init;

@end

__attribute__((unused)) static void AndroidDatabaseSqliteSQLiteDebug_init(AndroidDatabaseSqliteSQLiteDebug *self);

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDebug *new_AndroidDatabaseSqliteSQLiteDebug_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static AndroidDatabaseSqliteSQLiteDebug *create_AndroidDatabaseSqliteSQLiteDebug_init();

J2OBJC_INITIALIZED_DEFN(AndroidDatabaseSqliteSQLiteDebug)

jboolean AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_LOG;
jboolean AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_STATEMENTS;
jboolean AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_TIME;

@implementation AndroidDatabaseSqliteSQLiteDebug

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidDatabaseSqliteSQLiteDebug_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)shouldLogSlowQueryWithLong:(jlong)elapsedTimeMillis {
  return AndroidDatabaseSqliteSQLiteDebug_shouldLogSlowQueryWithLong_(elapsedTimeMillis);
}

+ (void)dumpWithAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                 withNSStringArray:(IOSObjectArray *)args {
  AndroidDatabaseSqliteSQLiteDebug_dumpWithAndroidUtilPrinter_withNSStringArray_(printer, args);
}

+ (void)initialize {
  if (self == [AndroidDatabaseSqliteSQLiteDebug class]) {
    AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_LOG = AndroidUtilLog_isLoggableWithNSString_withInt_(@"SQLiteLog", AndroidUtilLog_VERBOSE);
    AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_STATEMENTS = AndroidUtilLog_isLoggableWithNSString_withInt_(@"SQLiteStatements", AndroidUtilLog_VERBOSE);
    AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_TIME = AndroidUtilLog_isLoggableWithNSString_withInt_(@"SQLiteTime", AndroidUtilLog_VERBOSE);
    J2OBJC_SET_INITIALIZED(AndroidDatabaseSqliteSQLiteDebug)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SQLiteDebug", NULL, 0x2, NULL, NULL },
    { "shouldLogSlowQueryWithLong:", "shouldLogSlowQuery", "Z", 0x19, NULL, NULL },
    { "dumpWithAndroidUtilPrinter:withNSStringArray:", "dump", "V", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG_SQL_LOG", "DEBUG_SQL_LOG", 0x19, "Z", &AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_LOG, NULL, .constantValue.asLong = 0 },
    { "DEBUG_SQL_STATEMENTS", "DEBUG_SQL_STATEMENTS", 0x19, "Z", &AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_STATEMENTS, NULL, .constantValue.asLong = 0 },
    { "DEBUG_SQL_TIME", "DEBUG_SQL_TIME", 0x19, "Z", &AndroidDatabaseSqliteSQLiteDebug_DEBUG_SQL_TIME, NULL, .constantValue.asLong = 0 },
    { "DEBUG_LOG_SLOW_QUERIES", "DEBUG_LOG_SLOW_QUERIES", 0x19, "Z", NULL, NULL, .constantValue.asBOOL = AndroidDatabaseSqliteSQLiteDebug_DEBUG_LOG_SLOW_QUERIES },
  };
  static const char *inner_classes[] = {"Landroid.database.sqlite.SQLiteDebug$DbStats;"};
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDebug = { 2, "SQLiteDebug", "android.database.sqlite", NULL, 0x11, 3, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteDebug;
}

@end

void AndroidDatabaseSqliteSQLiteDebug_init(AndroidDatabaseSqliteSQLiteDebug *self) {
  NSObject_init(self);
}

AndroidDatabaseSqliteSQLiteDebug *new_AndroidDatabaseSqliteSQLiteDebug_init() {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDebug, init)
}

AndroidDatabaseSqliteSQLiteDebug *create_AndroidDatabaseSqliteSQLiteDebug_init() {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDebug, init)
}

jboolean AndroidDatabaseSqliteSQLiteDebug_shouldLogSlowQueryWithLong_(jlong elapsedTimeMillis) {
  AndroidDatabaseSqliteSQLiteDebug_initialize();
  jint slowQueryMillis = 10000;
  return slowQueryMillis >= 0 && elapsedTimeMillis >= slowQueryMillis;
}

void AndroidDatabaseSqliteSQLiteDebug_dumpWithAndroidUtilPrinter_withNSStringArray_(id<AndroidUtilPrinter> printer, IOSObjectArray *args) {
  AndroidDatabaseSqliteSQLiteDebug_initialize();
  jboolean verbose = false;
  {
    IOSObjectArray *a__ = args;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *arg = *b__++;
      if ([((NSString *) nil_chk(arg)) isEqual:@"-v"]) {
        verbose = true;
      }
    }
  }
  AndroidDatabaseSqliteSQLiteDatabase_dumpAllWithAndroidUtilPrinter_withBoolean_(printer, verbose);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDebug)

@implementation AndroidDatabaseSqliteSQLiteDebug_DbStats

- (instancetype)initWithNSString:(NSString *)dbName
                        withLong:(jlong)pageCount
                        withLong:(jlong)pageSize
                         withInt:(jint)lookaside
                         withInt:(jint)hits
                         withInt:(jint)misses
                         withInt:(jint)cachesize {
  AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(self, dbName, pageCount, pageSize, lookaside, hits, misses, cachesize);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withLong:withLong:withInt:withInt:withInt:withInt:", "DbStats", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dbName_", NULL, 0x1, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "pageSize_", NULL, 0x1, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "dbSize_", NULL, 0x1, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "lookaside_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "cache_", NULL, 0x1, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidDatabaseSqliteSQLiteDebug_DbStats = { 2, "DbStats", "android.database.sqlite", "SQLiteDebug", 0x9, 1, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidDatabaseSqliteSQLiteDebug_DbStats;
}

@end

void AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(AndroidDatabaseSqliteSQLiteDebug_DbStats *self, NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside, jint hits, jint misses, jint cachesize) {
  NSObject_init(self);
  self->dbName_ = dbName;
  self->pageSize_ = pageSize / 1024;
  self->dbSize_ = (pageCount * pageSize) / 1024;
  self->lookaside_ = lookaside;
  self->cache_ = JreStrcat("ICICI", hits, '/', misses, '/', cachesize);
}

AndroidDatabaseSqliteSQLiteDebug_DbStats *new_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside, jint hits, jint misses, jint cachesize) {
  J2OBJC_NEW_IMPL(AndroidDatabaseSqliteSQLiteDebug_DbStats, initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_, dbName, pageCount, pageSize, lookaside, hits, misses, cachesize)
}

AndroidDatabaseSqliteSQLiteDebug_DbStats *create_AndroidDatabaseSqliteSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(NSString *dbName, jlong pageCount, jlong pageSize, jint lookaside, jint hits, jint misses, jint cachesize) {
  J2OBJC_CREATE_IMPL(AndroidDatabaseSqliteSQLiteDebug_DbStats, initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_, dbName, pageCount, pageSize, lookaside, hits, misses, cachesize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidDatabaseSqliteSQLiteDebug_DbStats)
