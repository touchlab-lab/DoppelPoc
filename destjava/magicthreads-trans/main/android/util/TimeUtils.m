//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/androidbase/AndroidBase/lib/src/main/java/android/util/TimeUtils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "android/util/TimeUtils.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

@interface AndroidUtilTimeUtils ()

+ (jint)accumFieldWithInt:(jint)amt
                  withInt:(jint)suffix
              withBoolean:(jboolean)always
                  withInt:(jint)zeropad;

+ (jint)printFieldLockedWithCharArray:(IOSCharArray *)formatStr
                              withInt:(jint)amt
                             withChar:(jchar)suffix
                              withInt:(jint)pos
                          withBoolean:(jboolean)always
                              withInt:(jint)zeropad;

+ (jint)formatDurationLockedWithLong:(jlong)duration
                             withInt:(jint)fieldLen;

@end

inline jint AndroidUtilTimeUtils_get_SECONDS_PER_MINUTE();
#define AndroidUtilTimeUtils_SECONDS_PER_MINUTE 60
J2OBJC_STATIC_FIELD_CONSTANT(AndroidUtilTimeUtils, SECONDS_PER_MINUTE, jint)

inline jint AndroidUtilTimeUtils_get_SECONDS_PER_HOUR();
#define AndroidUtilTimeUtils_SECONDS_PER_HOUR 3600
J2OBJC_STATIC_FIELD_CONSTANT(AndroidUtilTimeUtils, SECONDS_PER_HOUR, jint)

inline jint AndroidUtilTimeUtils_get_SECONDS_PER_DAY();
#define AndroidUtilTimeUtils_SECONDS_PER_DAY 86400
J2OBJC_STATIC_FIELD_CONSTANT(AndroidUtilTimeUtils, SECONDS_PER_DAY, jint)

inline id AndroidUtilTimeUtils_get_sFormatSync();
static id AndroidUtilTimeUtils_sFormatSync;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidUtilTimeUtils, sFormatSync, id)

inline IOSCharArray *AndroidUtilTimeUtils_get_sFormatStr();
inline IOSCharArray *AndroidUtilTimeUtils_set_sFormatStr(IOSCharArray *value);
static IOSCharArray *AndroidUtilTimeUtils_sFormatStr;
J2OBJC_STATIC_FIELD_OBJ(AndroidUtilTimeUtils, sFormatStr, IOSCharArray *)

inline IOSCharArray *AndroidUtilTimeUtils_get_sTmpFormatStr();
inline IOSCharArray *AndroidUtilTimeUtils_set_sTmpFormatStr(IOSCharArray *value);
static IOSCharArray *AndroidUtilTimeUtils_sTmpFormatStr;
J2OBJC_STATIC_FIELD_OBJ(AndroidUtilTimeUtils, sTmpFormatStr, IOSCharArray *)

__attribute__((unused)) static jint AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(jint amt, jint suffix, jboolean always, jint zeropad);

__attribute__((unused)) static jint AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(IOSCharArray *formatStr, jint amt, jchar suffix, jint pos, jboolean always, jint zeropad);

__attribute__((unused)) static jint AndroidUtilTimeUtils_formatDurationLockedWithLong_withInt_(jlong duration, jint fieldLen);

J2OBJC_INITIALIZED_DEFN(AndroidUtilTimeUtils)

@implementation AndroidUtilTimeUtils

+ (jint)accumFieldWithInt:(jint)amt
                  withInt:(jint)suffix
              withBoolean:(jboolean)always
                  withInt:(jint)zeropad {
  return AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(amt, suffix, always, zeropad);
}

+ (jint)printFieldLockedWithCharArray:(IOSCharArray *)formatStr
                              withInt:(jint)amt
                             withChar:(jchar)suffix
                              withInt:(jint)pos
                          withBoolean:(jboolean)always
                              withInt:(jint)zeropad {
  return AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, amt, suffix, pos, always, zeropad);
}

+ (jint)formatDurationLockedWithLong:(jlong)duration
                             withInt:(jint)fieldLen {
  return AndroidUtilTimeUtils_formatDurationLockedWithLong_withInt_(duration, fieldLen);
}

+ (void)formatDurationWithLong:(jlong)duration
     withJavaLangStringBuilder:(JavaLangStringBuilder *)builder {
  AndroidUtilTimeUtils_formatDurationWithLong_withJavaLangStringBuilder_(duration, builder);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  AndroidUtilTimeUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [AndroidUtilTimeUtils class]) {
    AndroidUtilTimeUtils_sFormatSync = new_NSObject_init();
    AndroidUtilTimeUtils_sFormatStr = [IOSCharArray newArrayWithLength:AndroidUtilTimeUtils_HUNDRED_DAY_FIELD_LEN + 10];
    AndroidUtilTimeUtils_sTmpFormatStr = [IOSCharArray newArrayWithLength:AndroidUtilTimeUtils_HUNDRED_DAY_FIELD_LEN + 10];
    J2OBJC_SET_INITIALIZED(AndroidUtilTimeUtils)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "accumFieldWithInt:withInt:withBoolean:withInt:", "accumField", "I", 0xa, NULL, NULL },
    { "printFieldLockedWithCharArray:withInt:withChar:withInt:withBoolean:withInt:", "printFieldLocked", "I", 0xa, NULL, NULL },
    { "formatDurationLockedWithLong:withInt:", "formatDurationLocked", "I", 0xa, NULL, NULL },
    { "formatDurationWithLong:withJavaLangStringBuilder:", "formatDuration", "V", 0x9, NULL, NULL },
    { "init", "TimeUtils", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HUNDRED_DAY_FIELD_LEN", "HUNDRED_DAY_FIELD_LEN", 0x19, "I", NULL, NULL, .constantValue.asInt = AndroidUtilTimeUtils_HUNDRED_DAY_FIELD_LEN },
    { "SECONDS_PER_MINUTE", "SECONDS_PER_MINUTE", 0x1a, "I", NULL, NULL, .constantValue.asInt = AndroidUtilTimeUtils_SECONDS_PER_MINUTE },
    { "SECONDS_PER_HOUR", "SECONDS_PER_HOUR", 0x1a, "I", NULL, NULL, .constantValue.asInt = AndroidUtilTimeUtils_SECONDS_PER_HOUR },
    { "SECONDS_PER_DAY", "SECONDS_PER_DAY", 0x1a, "I", NULL, NULL, .constantValue.asInt = AndroidUtilTimeUtils_SECONDS_PER_DAY },
    { "NANOS_PER_MS", "NANOS_PER_MS", 0x19, "J", NULL, NULL, .constantValue.asLong = AndroidUtilTimeUtils_NANOS_PER_MS },
    { "sFormatSync", "sFormatSync", 0x1a, "Ljava.lang.Object;", &AndroidUtilTimeUtils_sFormatSync, NULL, .constantValue.asLong = 0 },
    { "sFormatStr", "sFormatStr", 0xa, "[C", &AndroidUtilTimeUtils_sFormatStr, NULL, .constantValue.asLong = 0 },
    { "sTmpFormatStr", "sTmpFormatStr", 0xa, "[C", &AndroidUtilTimeUtils_sTmpFormatStr, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AndroidUtilTimeUtils = { 2, "TimeUtils", "android.util", NULL, 0x1, 5, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AndroidUtilTimeUtils;
}

@end

jint AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(jint amt, jint suffix, jboolean always, jint zeropad) {
  AndroidUtilTimeUtils_initialize();
  if (amt > 999) {
    jint num = 0;
    while (amt != 0) {
      num++;
      amt /= 10;
    }
    return num + suffix;
  }
  else {
    if (amt > 99 || (always && zeropad >= 3)) {
      return 3 + suffix;
    }
    if (amt > 9 || (always && zeropad >= 2)) {
      return 2 + suffix;
    }
    if (always || amt > 0) {
      return 1 + suffix;
    }
  }
  return 0;
}

jint AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(IOSCharArray *formatStr, jint amt, jchar suffix, jint pos, jboolean always, jint zeropad) {
  AndroidUtilTimeUtils_initialize();
  if (always || amt > 0) {
    jint startPos = pos;
    if (amt > 999) {
      jint tmp = 0;
      while (amt != 0 && tmp < ((IOSCharArray *) nil_chk(AndroidUtilTimeUtils_sTmpFormatStr))->size_) {
        jint dig = amt % 10;
        *IOSCharArray_GetRef(nil_chk(AndroidUtilTimeUtils_sTmpFormatStr), tmp) = (jchar) (dig + '0');
        tmp++;
        amt /= 10;
      }
      tmp--;
      while (tmp >= 0) {
        *IOSCharArray_GetRef(nil_chk(formatStr), pos) = IOSCharArray_Get(nil_chk(AndroidUtilTimeUtils_sTmpFormatStr), tmp);
        pos++;
        tmp--;
      }
    }
    else {
      if ((always && zeropad >= 3) || amt > 99) {
        jint dig = amt / 100;
        *IOSCharArray_GetRef(nil_chk(formatStr), pos) = (jchar) (dig + '0');
        pos++;
        amt -= (dig * 100);
      }
      if ((always && zeropad >= 2) || amt > 9 || startPos != pos) {
        jint dig = amt / 10;
        *IOSCharArray_GetRef(nil_chk(formatStr), pos) = (jchar) (dig + '0');
        pos++;
        amt -= (dig * 10);
      }
      *IOSCharArray_GetRef(nil_chk(formatStr), pos) = (jchar) (amt + '0');
      pos++;
    }
    *IOSCharArray_GetRef(nil_chk(formatStr), pos) = suffix;
    pos++;
  }
  return pos;
}

jint AndroidUtilTimeUtils_formatDurationLockedWithLong_withInt_(jlong duration, jint fieldLen) {
  AndroidUtilTimeUtils_initialize();
  if (((IOSCharArray *) nil_chk(AndroidUtilTimeUtils_sFormatStr))->size_ < fieldLen) {
    AndroidUtilTimeUtils_sFormatStr = [IOSCharArray newArrayWithLength:fieldLen];
  }
  IOSCharArray *formatStr = AndroidUtilTimeUtils_sFormatStr;
  if (duration == 0) {
    jint pos = 0;
    fieldLen -= 1;
    while (pos < fieldLen) {
      *IOSCharArray_GetRef(formatStr, pos++) = ' ';
    }
    *IOSCharArray_GetRef(formatStr, pos) = '0';
    return pos + 1;
  }
  jchar prefix;
  if (duration > 0) {
    prefix = '+';
  }
  else {
    prefix = '-';
    duration = -duration;
  }
  jint millis = (jint) (duration % 1000);
  jint seconds = JreFpToInt(JavaLangMath_floorWithDouble_(duration / 1000));
  jint days = 0, hours = 0, minutes = 0;
  if (seconds > AndroidUtilTimeUtils_SECONDS_PER_DAY) {
    days = seconds / AndroidUtilTimeUtils_SECONDS_PER_DAY;
    seconds -= days * AndroidUtilTimeUtils_SECONDS_PER_DAY;
  }
  if (seconds > AndroidUtilTimeUtils_SECONDS_PER_HOUR) {
    hours = seconds / AndroidUtilTimeUtils_SECONDS_PER_HOUR;
    seconds -= hours * AndroidUtilTimeUtils_SECONDS_PER_HOUR;
  }
  if (seconds > AndroidUtilTimeUtils_SECONDS_PER_MINUTE) {
    minutes = seconds / AndroidUtilTimeUtils_SECONDS_PER_MINUTE;
    seconds -= minutes * AndroidUtilTimeUtils_SECONDS_PER_MINUTE;
  }
  jint pos = 0;
  if (fieldLen != 0) {
    jint myLen = AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(days, 1, false, 0);
    myLen += AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(hours, 1, myLen > 0, 2);
    myLen += AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(minutes, 1, myLen > 0, 2);
    myLen += AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(seconds, 1, myLen > 0, 2);
    myLen += AndroidUtilTimeUtils_accumFieldWithInt_withInt_withBoolean_withInt_(millis, 2, true, myLen > 0 ? 3 : 0) + 1;
    while (myLen < fieldLen) {
      *IOSCharArray_GetRef(formatStr, pos) = ' ';
      pos++;
      myLen++;
    }
  }
  *IOSCharArray_GetRef(formatStr, pos) = prefix;
  pos++;
  jint start = pos;
  jboolean zeropad = fieldLen != 0;
  pos = AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, days, 'd', pos, false, 0);
  pos = AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, hours, 'h', pos, pos != start, zeropad ? 2 : 0);
  pos = AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, minutes, 'm', pos, pos != start, zeropad ? 2 : 0);
  pos = AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, seconds, 's', pos, pos != start, zeropad ? 2 : 0);
  pos = AndroidUtilTimeUtils_printFieldLockedWithCharArray_withInt_withChar_withInt_withBoolean_withInt_(formatStr, millis, 'm', pos, true, (zeropad && pos != start) ? 3 : 0);
  *IOSCharArray_GetRef(formatStr, pos) = 's';
  return pos + 1;
}

void AndroidUtilTimeUtils_formatDurationWithLong_withJavaLangStringBuilder_(jlong duration, JavaLangStringBuilder *builder) {
  AndroidUtilTimeUtils_initialize();
  @synchronized(AndroidUtilTimeUtils_sFormatSync) {
    jint len = AndroidUtilTimeUtils_formatDurationLockedWithLong_withInt_(duration, 0);
    (void) [((JavaLangStringBuilder *) nil_chk(builder)) appendWithCharArray:AndroidUtilTimeUtils_sFormatStr withInt:0 withInt:len];
  }
}

void AndroidUtilTimeUtils_init(AndroidUtilTimeUtils *self) {
  NSObject_init(self);
}

AndroidUtilTimeUtils *new_AndroidUtilTimeUtils_init() {
  J2OBJC_NEW_IMPL(AndroidUtilTimeUtils, init)
}

AndroidUtilTimeUtils *create_AndroidUtilTimeUtils_init() {
  J2OBJC_CREATE_IMPL(AndroidUtilTimeUtils, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AndroidUtilTimeUtils)
