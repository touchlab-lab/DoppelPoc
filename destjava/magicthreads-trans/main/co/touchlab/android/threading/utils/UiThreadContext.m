//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/magicthreads/library/src/main/java/co/touchlab/android/threading/utils/UiThreadContext.java
//

#include "J2ObjC_source.h"
#include "co/touchlab/android/threading/utils/UiThreadContext.h"

@interface CoTouchlabAndroidThreadingUtilsUiThreadContext ()

+ (void)nativeThrowWithNSString:(NSString *)message;

@end

__attribute__((unused)) static void CoTouchlabAndroidThreadingUtilsUiThreadContext_nativeThrowWithNSString_(NSString *message);

@implementation CoTouchlabAndroidThreadingUtilsUiThreadContext

+ (void)assertUiThread {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_assertUiThread();
}

+ (jboolean)isInUiThread {
  return CoTouchlabAndroidThreadingUtilsUiThreadContext_isInUiThread();
}

+ (void)nativeThrowWithNSString:(NSString *)message {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_nativeThrowWithNSString_(message);
}

+ (void)assertBackgroundThread {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_assertBackgroundThread();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "assertUiThread", NULL, "V", 0x9, NULL, NULL },
    { "isInUiThread", NULL, "Z", 0x109, NULL, NULL },
    { "nativeThrowWithNSString:", "nativeThrow", "V", 0x10a, NULL, NULL },
    { "assertBackgroundThread", NULL, "V", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _CoTouchlabAndroidThreadingUtilsUiThreadContext = { 2, "UiThreadContext", "co.touchlab.android.threading.utils", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_CoTouchlabAndroidThreadingUtilsUiThreadContext;
}

@end

void CoTouchlabAndroidThreadingUtilsUiThreadContext_assertUiThread() {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_initialize();
  if (!CoTouchlabAndroidThreadingUtilsUiThreadContext_isInUiThread()) {
    CoTouchlabAndroidThreadingUtilsUiThreadContext_nativeThrowWithNSString_(@"This call must be in UI thread");
  }
}

jboolean CoTouchlabAndroidThreadingUtilsUiThreadContext_isInUiThread() {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_initialize();
  return [NSThread isMainThread];
}

void CoTouchlabAndroidThreadingUtilsUiThreadContext_nativeThrowWithNSString_(NSString *message) {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_initialize();
  NSException* myException = [NSException
  exceptionWithName:@"AssertException"
  reason:message
  userInfo:nil];
  @throw myException;
}

void CoTouchlabAndroidThreadingUtilsUiThreadContext_assertBackgroundThread() {
  CoTouchlabAndroidThreadingUtilsUiThreadContext_initialize();
  if (CoTouchlabAndroidThreadingUtilsUiThreadContext_isInUiThread()) {
    CoTouchlabAndroidThreadingUtilsUiThreadContext_nativeThrowWithNSString_(@"This call must be in background thread");
  }
}

void CoTouchlabAndroidThreadingUtilsUiThreadContext_init(CoTouchlabAndroidThreadingUtilsUiThreadContext *self) {
  NSObject_init(self);
}

CoTouchlabAndroidThreadingUtilsUiThreadContext *new_CoTouchlabAndroidThreadingUtilsUiThreadContext_init() {
  CoTouchlabAndroidThreadingUtilsUiThreadContext *self = [CoTouchlabAndroidThreadingUtilsUiThreadContext alloc];
  CoTouchlabAndroidThreadingUtilsUiThreadContext_init(self);
  return self;
}

CoTouchlabAndroidThreadingUtilsUiThreadContext *create_CoTouchlabAndroidThreadingUtilsUiThreadContext_init() {
  return new_CoTouchlabAndroidThreadingUtilsUiThreadContext_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabAndroidThreadingUtilsUiThreadContext)
