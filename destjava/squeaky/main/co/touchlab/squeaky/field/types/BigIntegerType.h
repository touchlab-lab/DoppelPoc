//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/squeaky/core/src/main/java/co/touchlab/squeaky/field/types/BigIntegerType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("CoTouchlabSqueakyFieldTypesBigIntegerType_INCLUDE_ALL")
#ifdef CoTouchlabSqueakyFieldTypesBigIntegerType_RESTRICT
#define CoTouchlabSqueakyFieldTypesBigIntegerType_INCLUDE_ALL 0
#else
#define CoTouchlabSqueakyFieldTypesBigIntegerType_INCLUDE_ALL 1
#endif
#undef CoTouchlabSqueakyFieldTypesBigIntegerType_RESTRICT

#if !defined (CoTouchlabSqueakyFieldTypesBigIntegerType_) && (CoTouchlabSqueakyFieldTypesBigIntegerType_INCLUDE_ALL || defined(CoTouchlabSqueakyFieldTypesBigIntegerType_INCLUDE))
#define CoTouchlabSqueakyFieldTypesBigIntegerType_

#define CoTouchlabSqueakyFieldTypesBaseDataType_RESTRICT 1
#define CoTouchlabSqueakyFieldTypesBaseDataType_INCLUDE 1
#include "co/touchlab/squeaky/field/types/BaseDataType.h"

@class CoTouchlabSqueakyFieldFieldType;
@class CoTouchlabSqueakyFieldSqlType;
@class IOSObjectArray;
@protocol AndroidDatabaseCursor;

@interface CoTouchlabSqueakyFieldTypesBigIntegerType : CoTouchlabSqueakyFieldTypesBaseDataType

#pragma mark Public

+ (CoTouchlabSqueakyFieldTypesBigIntegerType *)getSingleton;

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)obj;

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr;

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos;

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos;

#pragma mark Protected

- (instancetype)init;

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes;

@end

J2OBJC_STATIC_INIT(CoTouchlabSqueakyFieldTypesBigIntegerType)

inline jint CoTouchlabSqueakyFieldTypesBigIntegerType_get_DEFAULT_WIDTH();
inline jint CoTouchlabSqueakyFieldTypesBigIntegerType_set_DEFAULT_WIDTH(jint value);
inline jint *CoTouchlabSqueakyFieldTypesBigIntegerType_getRef_DEFAULT_WIDTH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint CoTouchlabSqueakyFieldTypesBigIntegerType_DEFAULT_WIDTH;
J2OBJC_STATIC_FIELD_PRIMITIVE(CoTouchlabSqueakyFieldTypesBigIntegerType, DEFAULT_WIDTH, jint)

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesBigIntegerType *CoTouchlabSqueakyFieldTypesBigIntegerType_getSingleton();

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldTypesBigIntegerType_init(CoTouchlabSqueakyFieldTypesBigIntegerType *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesBigIntegerType *new_CoTouchlabSqueakyFieldTypesBigIntegerType_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesBigIntegerType *create_CoTouchlabSqueakyFieldTypesBigIntegerType_init();

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldTypesBigIntegerType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesBigIntegerType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesBigIntegerType *new_CoTouchlabSqueakyFieldTypesBigIntegerType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesBigIntegerType *create_CoTouchlabSqueakyFieldTypesBigIntegerType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes);

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldTypesBigIntegerType)

#endif

#pragma pop_macro("CoTouchlabSqueakyFieldTypesBigIntegerType_INCLUDE_ALL")
