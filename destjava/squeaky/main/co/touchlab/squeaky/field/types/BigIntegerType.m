//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/squeaky/core/src/main/java/co/touchlab/squeaky/field/types/BigIntegerType.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "android/database/Cursor.h"
#include "co/touchlab/squeaky/field/FieldType.h"
#include "co/touchlab/squeaky/field/SqlType.h"
#include "co/touchlab/squeaky/field/types/BaseDataType.h"
#include "co/touchlab/squeaky/field/types/BigIntegerType.h"
#include "co/touchlab/squeaky/misc/SqlExceptionUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/sql/SQLException.h"

inline CoTouchlabSqueakyFieldTypesBigIntegerType *CoTouchlabSqueakyFieldTypesBigIntegerType_get_singleTon();
static CoTouchlabSqueakyFieldTypesBigIntegerType *CoTouchlabSqueakyFieldTypesBigIntegerType_singleTon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBigIntegerType, singleTon, CoTouchlabSqueakyFieldTypesBigIntegerType *)

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesBigIntegerType)

jint CoTouchlabSqueakyFieldTypesBigIntegerType_DEFAULT_WIDTH = 255;

@implementation CoTouchlabSqueakyFieldTypesBigIntegerType

+ (CoTouchlabSqueakyFieldTypesBigIntegerType *)getSingleton {
  return CoTouchlabSqueakyFieldTypesBigIntegerType_getSingleton();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesBigIntegerType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithCoTouchlabSqueakyFieldSqlType:(CoTouchlabSqueakyFieldSqlType *)sqlType
                                    withIOSClassArray:(IOSObjectArray *)classes {
  CoTouchlabSqueakyFieldTypesBigIntegerType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  @try {
    return [new_JavaMathBigInteger_initWithNSString_(defaultStr) description];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(JreStrcat("$@$$C", @"Problems with field ", fieldType, @" parsing default BigInteger string '", defaultStr, '\''), e);
  }
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  return [((id<AndroidDatabaseCursor>) nil_chk(results)) getStringWithInt:columnPos];
}

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos {
  @try {
    return new_JavaMathBigInteger_initWithNSString_((NSString *) cast_chk(sqlArg, [NSString class]));
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw CoTouchlabSqueakyMiscSqlExceptionUtil_createWithNSString_withNSException_(JreStrcat("$I$@C", @"Problems with column ", columnPos, @" parsing BigInteger string '", sqlArg, '\''), e);
  }
}

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)obj {
  JavaMathBigInteger *bigInteger = (JavaMathBigInteger *) cast_chk(obj, [JavaMathBigInteger class]);
  return [((JavaMathBigInteger *) nil_chk(bigInteger)) description];
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesBigIntegerType class]) {
    CoTouchlabSqueakyFieldTypesBigIntegerType_singleTon = new_CoTouchlabSqueakyFieldTypesBigIntegerType_init();
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesBigIntegerType)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getSingleton", NULL, "Lco.touchlab.squeaky.field.types.BigIntegerType;", 0x9, NULL, NULL },
    { "init", "BigIntegerType", NULL, 0x4, NULL, NULL },
    { "initWithCoTouchlabSqueakyFieldSqlType:withIOSClassArray:", "BigIntegerType", NULL, 0x4, NULL, NULL },
    { "parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:", "parseDefaultString", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:", "resultToSqlArg", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:withId:withInt:", "sqlArgToJava", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:withId:", "javaToSqlArg", "Ljava.lang.Object;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_WIDTH", "DEFAULT_WIDTH", 0x9, "I", &CoTouchlabSqueakyFieldTypesBigIntegerType_DEFAULT_WIDTH, NULL, .constantValue.asLong = 0 },
    { "singleTon", "singleTon", 0x1a, "Lco.touchlab.squeaky.field.types.BigIntegerType;", &CoTouchlabSqueakyFieldTypesBigIntegerType_singleTon, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesBigIntegerType = { 2, "BigIntegerType", "co.touchlab.squeaky.field.types", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_CoTouchlabSqueakyFieldTypesBigIntegerType;
}

@end

CoTouchlabSqueakyFieldTypesBigIntegerType *CoTouchlabSqueakyFieldTypesBigIntegerType_getSingleton() {
  CoTouchlabSqueakyFieldTypesBigIntegerType_initialize();
  return CoTouchlabSqueakyFieldTypesBigIntegerType_singleTon;
}

void CoTouchlabSqueakyFieldTypesBigIntegerType_init(CoTouchlabSqueakyFieldTypesBigIntegerType *self) {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, JreLoadEnum(CoTouchlabSqueakyFieldSqlType, STRING), [IOSObjectArray newArrayWithObjects:(id[]){ JavaMathBigInteger_class_() } count:1 type:IOSClass_class_()]);
}

CoTouchlabSqueakyFieldTypesBigIntegerType *new_CoTouchlabSqueakyFieldTypesBigIntegerType_init() {
  CoTouchlabSqueakyFieldTypesBigIntegerType *self = [CoTouchlabSqueakyFieldTypesBigIntegerType alloc];
  CoTouchlabSqueakyFieldTypesBigIntegerType_init(self);
  return self;
}

CoTouchlabSqueakyFieldTypesBigIntegerType *create_CoTouchlabSqueakyFieldTypesBigIntegerType_init() {
  return new_CoTouchlabSqueakyFieldTypesBigIntegerType_init();
}

void CoTouchlabSqueakyFieldTypesBigIntegerType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldTypesBigIntegerType *self, CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldTypesBaseDataType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
}

CoTouchlabSqueakyFieldTypesBigIntegerType *new_CoTouchlabSqueakyFieldTypesBigIntegerType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  CoTouchlabSqueakyFieldTypesBigIntegerType *self = [CoTouchlabSqueakyFieldTypesBigIntegerType alloc];
  CoTouchlabSqueakyFieldTypesBigIntegerType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(self, sqlType, classes);
  return self;
}

CoTouchlabSqueakyFieldTypesBigIntegerType *create_CoTouchlabSqueakyFieldTypesBigIntegerType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(CoTouchlabSqueakyFieldSqlType *sqlType, IOSObjectArray *classes) {
  return new_CoTouchlabSqueakyFieldTypesBigIntegerType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(sqlType, classes);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesBigIntegerType)
