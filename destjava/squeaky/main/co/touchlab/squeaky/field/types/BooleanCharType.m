//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/squeaky/core/src/main/java/co/touchlab/squeaky/field/types/BooleanCharType.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "android/database/Cursor.h"
#include "co/touchlab/squeaky/field/FieldType.h"
#include "co/touchlab/squeaky/field/SqlType.h"
#include "co/touchlab/squeaky/field/types/BooleanCharType.h"
#include "co/touchlab/squeaky/field/types/BooleanType.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/sql/SQLException.h"

inline NSString *CoTouchlabSqueakyFieldTypesBooleanCharType_get_DEFAULT_TRUE_FALSE_FORMAT();
static NSString *CoTouchlabSqueakyFieldTypesBooleanCharType_DEFAULT_TRUE_FALSE_FORMAT = @"10";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBooleanCharType, DEFAULT_TRUE_FALSE_FORMAT, NSString *)

inline CoTouchlabSqueakyFieldTypesBooleanCharType *CoTouchlabSqueakyFieldTypesBooleanCharType_get_singleTon();
static CoTouchlabSqueakyFieldTypesBooleanCharType *CoTouchlabSqueakyFieldTypesBooleanCharType_singleTon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBooleanCharType, singleTon, CoTouchlabSqueakyFieldTypesBooleanCharType *)

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesBooleanCharType)

@implementation CoTouchlabSqueakyFieldTypesBooleanCharType

+ (CoTouchlabSqueakyFieldTypesBooleanCharType *)getSingleton {
  return CoTouchlabSqueakyFieldTypesBooleanCharType_getSingleton();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesBooleanCharType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withNSString:(NSString *)defaultStr {
  return [self javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:fieldType withId:JavaLangBoolean_valueOfWithBoolean_(JavaLangBoolean_parseBooleanWithNSString_(defaultStr))];
}

- (id)javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)obj {
  NSString *format = (NSString *) cast_chk([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getDataTypeConfigObj], [NSString class]);
  return JavaLangCharacter_valueOfWithChar_(([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(obj, [JavaLangBoolean class]))) booleanValue] ? [((NSString *) nil_chk(format)) charAtWithInt:0] : [((NSString *) nil_chk(format)) charAtWithInt:1]));
}

- (id)resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                              withAndroidDatabaseCursor:(id<AndroidDatabaseCursor>)results
                                                withInt:(jint)columnPos {
  NSString *string = [((id<AndroidDatabaseCursor>) nil_chk(results)) getStringWithInt:columnPos];
  if (string == nil || ((jint) [string length]) == 0) {
    return JavaLangInteger_valueOfWithInt_(0);
  }
  else if (((jint) [string length]) == 1) {
    return JavaLangCharacter_valueOfWithChar_([string charAtWithInt:0]);
  }
  else {
    @throw new_JavaSqlSQLException_initWithNSString_(JreStrcat("$I", @"More than 1 character stored in database column: ", columnPos));
  }
}

- (id)sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType
                                               withId:(id)sqlArg
                                              withInt:(jint)columnPos {
  NSString *format = (NSString *) cast_chk([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getDataTypeConfigObj], [NSString class]);
  return ([((JavaLangCharacter *) nil_chk((JavaLangCharacter *) cast_chk(sqlArg, [JavaLangCharacter class]))) charValue] == [((NSString *) nil_chk(format)) charAtWithInt:0] ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE));
}

- (id)makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:(CoTouchlabSqueakyFieldFieldType *)fieldType {
  NSString *format = [((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) getFormat];
  if (format == nil) {
    return CoTouchlabSqueakyFieldTypesBooleanCharType_DEFAULT_TRUE_FALSE_FORMAT;
  }
  else if (((jint) [format length]) == 2 && [format charAtWithInt:0] != [format charAtWithInt:1]) {
    return format;
  }
  else {
    @throw new_JavaSqlSQLException_initWithNSString_(JreStrcat("$$", @"Invalid boolean format must have 2 different characters that represent true/false like \"10\" or \"tf\": ", format));
  }
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesBooleanCharType class]) {
    CoTouchlabSqueakyFieldTypesBooleanCharType_singleTon = new_CoTouchlabSqueakyFieldTypesBooleanCharType_init();
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesBooleanCharType)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getSingleton", NULL, "Lco.touchlab.squeaky.field.types.BooleanCharType;", 0x9, NULL, NULL },
    { "init", "BooleanCharType", NULL, 0x1, NULL, NULL },
    { "parseDefaultStringWithCoTouchlabSqueakyFieldFieldType:withNSString:", "parseDefaultString", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "javaToSqlArgWithCoTouchlabSqueakyFieldFieldType:withId:", "javaToSqlArg", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "resultToSqlArgWithCoTouchlabSqueakyFieldFieldType:withAndroidDatabaseCursor:withInt:", "resultToSqlArg", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
    { "sqlArgToJavaWithCoTouchlabSqueakyFieldFieldType:withId:withInt:", "sqlArgToJava", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "makeConfigObjectWithCoTouchlabSqueakyFieldFieldType:", "makeConfigObject", "Ljava.lang.Object;", 0x1, "Ljava.sql.SQLException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_TRUE_FALSE_FORMAT", "DEFAULT_TRUE_FALSE_FORMAT", 0x1a, "Ljava.lang.String;", &CoTouchlabSqueakyFieldTypesBooleanCharType_DEFAULT_TRUE_FALSE_FORMAT, NULL, .constantValue.asLong = 0 },
    { "singleTon", "singleTon", 0x1a, "Lco.touchlab.squeaky.field.types.BooleanCharType;", &CoTouchlabSqueakyFieldTypesBooleanCharType_singleTon, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesBooleanCharType = { 2, "BooleanCharType", "co.touchlab.squeaky.field.types", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_CoTouchlabSqueakyFieldTypesBooleanCharType;
}

@end

CoTouchlabSqueakyFieldTypesBooleanCharType *CoTouchlabSqueakyFieldTypesBooleanCharType_getSingleton() {
  CoTouchlabSqueakyFieldTypesBooleanCharType_initialize();
  return CoTouchlabSqueakyFieldTypesBooleanCharType_singleTon;
}

void CoTouchlabSqueakyFieldTypesBooleanCharType_init(CoTouchlabSqueakyFieldTypesBooleanCharType *self) {
  CoTouchlabSqueakyFieldTypesBooleanType_initWithCoTouchlabSqueakyFieldSqlType_(self, JreLoadEnum(CoTouchlabSqueakyFieldSqlType, STRING));
}

CoTouchlabSqueakyFieldTypesBooleanCharType *new_CoTouchlabSqueakyFieldTypesBooleanCharType_init() {
  CoTouchlabSqueakyFieldTypesBooleanCharType *self = [CoTouchlabSqueakyFieldTypesBooleanCharType alloc];
  CoTouchlabSqueakyFieldTypesBooleanCharType_init(self);
  return self;
}

CoTouchlabSqueakyFieldTypesBooleanCharType *create_CoTouchlabSqueakyFieldTypesBooleanCharType_init() {
  return new_CoTouchlabSqueakyFieldTypesBooleanCharType_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesBooleanCharType)
