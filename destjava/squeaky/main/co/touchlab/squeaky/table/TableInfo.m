//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel/xp/sourcejava/squeaky/core/src/main/java/co/touchlab/squeaky/table/TableInfo.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "co/touchlab/squeaky/field/FieldType.h"
#include "co/touchlab/squeaky/field/FieldsEnum.h"
#include "co/touchlab/squeaky/table/TableInfo.h"
#include "java/sql/SQLException.h"

@interface CoTouchlabSqueakyTableTableInfo () {
 @public
  NSString *tableName_;
  IOSObjectArray *fieldTypes_;
  IOSObjectArray *foreignCollections_;
}

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyTableTableInfo, tableName_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyTableTableInfo, fieldTypes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyTableTableInfo, foreignCollections_, IOSObjectArray *)

@implementation CoTouchlabSqueakyTableTableInfo

- (instancetype)initWithIOSClass:(IOSClass *)clazz
                    withNSString:(NSString *)name
withCoTouchlabSqueakyFieldFieldsEnumArray:(IOSObjectArray *)fields
withCoTouchlabSqueakyFieldForeignCollectionInfoArray:(IOSObjectArray *)foreignCollections {
  CoTouchlabSqueakyTableTableInfo_initWithIOSClass_withNSString_withCoTouchlabSqueakyFieldFieldsEnumArray_withCoTouchlabSqueakyFieldForeignCollectionInfoArray_(self, clazz, name, fields, foreignCollections);
  return self;
}

- (NSString *)getTableName {
  return tableName_;
}

- (IOSObjectArray *)getFieldTypes {
  return fieldTypes_;
}

- (IOSObjectArray *)getForeignCollections {
  return foreignCollections_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withNSString:withCoTouchlabSqueakyFieldFieldsEnumArray:withCoTouchlabSqueakyFieldForeignCollectionInfoArray:", "TableInfo", NULL, 0x1, "Ljava.sql.SQLException;", NULL },
    { "getTableName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFieldTypes", NULL, "[Lco.touchlab.squeaky.field.FieldType;", 0x1, NULL, NULL },
    { "getForeignCollections", NULL, "[Lco.touchlab.squeaky.field.ForeignCollectionInfo;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dataClass_", NULL, 0x11, "Ljava.lang.Class;", NULL, "Ljava/lang/Class<TT;>;", .constantValue.asLong = 0 },
    { "tableName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "fieldTypes_", NULL, 0x12, "[Lco.touchlab.squeaky.field.FieldType;", NULL, NULL, .constantValue.asLong = 0 },
    { "foreignCollections_", NULL, 0x12, "[Lco.touchlab.squeaky.field.ForeignCollectionInfo;", NULL, NULL, .constantValue.asLong = 0 },
    { "idField_", NULL, 0x11, "Lco.touchlab.squeaky.field.FieldType;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _CoTouchlabSqueakyTableTableInfo = { 2, "TableInfo", "co.touchlab.squeaky.table", NULL, 0x1, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_CoTouchlabSqueakyTableTableInfo;
}

@end

void CoTouchlabSqueakyTableTableInfo_initWithIOSClass_withNSString_withCoTouchlabSqueakyFieldFieldsEnumArray_withCoTouchlabSqueakyFieldForeignCollectionInfoArray_(CoTouchlabSqueakyTableTableInfo *self, IOSClass *clazz, NSString *name, IOSObjectArray *fields, IOSObjectArray *foreignCollections) {
  NSObject_init(self);
  self->dataClass_ = clazz;
  self->tableName_ = name;
  self->fieldTypes_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(fields))->size_ type:CoTouchlabSqueakyFieldFieldType_class_()];
  jint i = 0;
  {
    IOSObjectArray *a__ = fields;
    id<CoTouchlabSqueakyFieldFieldsEnum> const *b__ = a__->buffer_;
    id<CoTouchlabSqueakyFieldFieldsEnum> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<CoTouchlabSqueakyFieldFieldsEnum> field = *b__++;
      (void) IOSObjectArray_Set(self->fieldTypes_, i++, [((id<CoTouchlabSqueakyFieldFieldsEnum>) nil_chk(field)) getFieldType]);
    }
  }
  self->foreignCollections_ = foreignCollections;
  CoTouchlabSqueakyFieldFieldType *findIdFieldType = nil;
  {
    IOSObjectArray *a__ = self->fieldTypes_;
    CoTouchlabSqueakyFieldFieldType * const *b__ = a__->buffer_;
    CoTouchlabSqueakyFieldFieldType * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      CoTouchlabSqueakyFieldFieldType *fieldType = *b__++;
      if ([((CoTouchlabSqueakyFieldFieldType *) nil_chk(fieldType)) isId] || [fieldType isGeneratedId]) {
        if (findIdFieldType != nil) {
          @throw new_JavaSqlSQLException_initWithNSString_(JreStrcat("$@$@C@C", @"More than 1 idField configured for class ", self->dataClass_, @" (", findIdFieldType, ',', fieldType, ')'));
        }
        findIdFieldType = fieldType;
      }
    }
  }
  self->idField_ = findIdFieldType;
}

CoTouchlabSqueakyTableTableInfo *new_CoTouchlabSqueakyTableTableInfo_initWithIOSClass_withNSString_withCoTouchlabSqueakyFieldFieldsEnumArray_withCoTouchlabSqueakyFieldForeignCollectionInfoArray_(IOSClass *clazz, NSString *name, IOSObjectArray *fields, IOSObjectArray *foreignCollections) {
  CoTouchlabSqueakyTableTableInfo *self = [CoTouchlabSqueakyTableTableInfo alloc];
  CoTouchlabSqueakyTableTableInfo_initWithIOSClass_withNSString_withCoTouchlabSqueakyFieldFieldsEnumArray_withCoTouchlabSqueakyFieldForeignCollectionInfoArray_(self, clazz, name, fields, foreignCollections);
  return self;
}

CoTouchlabSqueakyTableTableInfo *create_CoTouchlabSqueakyTableTableInfo_initWithIOSClass_withNSString_withCoTouchlabSqueakyFieldFieldsEnumArray_withCoTouchlabSqueakyFieldForeignCollectionInfoArray_(IOSClass *clazz, NSString *name, IOSObjectArray *fields, IOSObjectArray *foreignCollections) {
  return new_CoTouchlabSqueakyTableTableInfo_initWithIOSClass_withNSString_withCoTouchlabSqueakyFieldFieldsEnumArray_withCoTouchlabSqueakyFieldForeignCollectionInfoArray_(clazz, name, fields, foreignCollections);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyTableTableInfo)
